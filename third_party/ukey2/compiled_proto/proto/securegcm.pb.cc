// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/securegcm.proto

#include "proto/securegcm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace securegcm {
constexpr GcmDeviceInfo::GcmDeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_software_features_()
  , enabled_software_features_()
  , user_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locale_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_handle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_os_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_os_release_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_os_codename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_software_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_software_package_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , long_device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gcm_registration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_master_key_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , apn_registration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bluetooth_mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enrollment_session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oauth_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , android_device_id_(uint64_t{0u})
  , counter_(int64_t{0})
  , device_os_version_code_(int64_t{0})
  , device_software_version_code_(int64_t{0})
  , device_display_diagonal_mils_(0)
  , device_authzen_version_(0)
  , pixel_experience_(false)
  , arc_plus_plus_(false)
  , is_screenlock_state_flaky_(false)
  , using_secure_screenlock_(false)
  , auto_unlock_screenlock_supported_(false)
  , auto_unlock_screenlock_enabled_(false)
  , bluetooth_radio_supported_(false)
  , bluetooth_radio_enabled_(false)
  , mobile_data_supported_(false)
  , tethering_supported_(false)
  , ble_radio_supported_(false)
  , device_type_(1)

  , notification_enabled_(true){}
struct GcmDeviceInfoDefaultTypeInternal {
  constexpr GcmDeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GcmDeviceInfoDefaultTypeInternal() {}
  union {
    GcmDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GcmDeviceInfoDefaultTypeInternal _GcmDeviceInfo_default_instance_;
constexpr GcmMetadata::GcmMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , version_(0){}
struct GcmMetadataDefaultTypeInternal {
  constexpr GcmMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GcmMetadataDefaultTypeInternal() {}
  union {
    GcmMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GcmMetadataDefaultTypeInternal _GcmMetadata_default_instance_;
constexpr Tickle::Tickle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expiry_time_(uint64_t{0u}){}
struct TickleDefaultTypeInternal {
  constexpr TickleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TickleDefaultTypeInternal() {}
  union {
    Tickle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TickleDefaultTypeInternal _Tickle_default_instance_;
constexpr LoginNotificationInfo::LoginNotificationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_time_(uint64_t{0u}){}
struct LoginNotificationInfoDefaultTypeInternal {
  constexpr LoginNotificationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginNotificationInfoDefaultTypeInternal() {}
  union {
    LoginNotificationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginNotificationInfoDefaultTypeInternal _LoginNotificationInfo_default_instance_;
}  // namespace securegcm
namespace securegcm {
bool AppleDeviceDiagonalMils_IsValid(int value) {
  switch (value) {
    case 4000:
    case 7900:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppleDeviceDiagonalMils_strings[2] = {};

static const char AppleDeviceDiagonalMils_names[] =
  "APPLE_PAD"
  "APPLE_PHONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppleDeviceDiagonalMils_entries[] = {
  { {AppleDeviceDiagonalMils_names + 0, 9}, 7900 },
  { {AppleDeviceDiagonalMils_names + 9, 11}, 4000 },
};

static const int AppleDeviceDiagonalMils_entries_by_number[] = {
  1, // 4000 -> APPLE_PHONE
  0, // 7900 -> APPLE_PAD
};

const std::string& AppleDeviceDiagonalMils_Name(
    AppleDeviceDiagonalMils value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppleDeviceDiagonalMils_entries,
          AppleDeviceDiagonalMils_entries_by_number,
          2, AppleDeviceDiagonalMils_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppleDeviceDiagonalMils_entries,
      AppleDeviceDiagonalMils_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppleDeviceDiagonalMils_strings[idx].get();
}
bool AppleDeviceDiagonalMils_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppleDeviceDiagonalMils* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppleDeviceDiagonalMils_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AppleDeviceDiagonalMils>(int_value);
  }
  return success;
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceType_strings[6] = {};

static const char DeviceType_names[] =
  "ANDROID"
  "BROWSER"
  "CHROME"
  "IOS"
  "OSX"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceType_entries[] = {
  { {DeviceType_names + 0, 7}, 1 },
  { {DeviceType_names + 7, 7}, 4 },
  { {DeviceType_names + 14, 6}, 2 },
  { {DeviceType_names + 20, 3}, 3 },
  { {DeviceType_names + 23, 3}, 5 },
  { {DeviceType_names + 26, 7}, 0 },
};

static const int DeviceType_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  0, // 1 -> ANDROID
  2, // 2 -> CHROME
  3, // 3 -> IOS
  1, // 4 -> BROWSER
  4, // 5 -> OSX
};

const std::string& DeviceType_Name(
    DeviceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceType_entries,
          DeviceType_entries_by_number,
          6, DeviceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceType_entries,
      DeviceType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceType_strings[idx].get();
}
bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DeviceType>(int_value);
  }
  return success;
}
bool SoftwareFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SoftwareFeature_strings[9] = {};

static const char SoftwareFeature_names[] =
  "BETTER_TOGETHER_CLIENT"
  "BETTER_TOGETHER_HOST"
  "EASY_UNLOCK_CLIENT"
  "EASY_UNLOCK_HOST"
  "MAGIC_TETHER_CLIENT"
  "MAGIC_TETHER_HOST"
  "SMS_CONNECT_CLIENT"
  "SMS_CONNECT_HOST"
  "UNKNOWN_FEATURE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SoftwareFeature_entries[] = {
  { {SoftwareFeature_names + 0, 22}, 2 },
  { {SoftwareFeature_names + 22, 20}, 1 },
  { {SoftwareFeature_names + 42, 18}, 4 },
  { {SoftwareFeature_names + 60, 16}, 3 },
  { {SoftwareFeature_names + 76, 19}, 6 },
  { {SoftwareFeature_names + 95, 17}, 5 },
  { {SoftwareFeature_names + 112, 18}, 8 },
  { {SoftwareFeature_names + 130, 16}, 7 },
  { {SoftwareFeature_names + 146, 15}, 0 },
};

static const int SoftwareFeature_entries_by_number[] = {
  8, // 0 -> UNKNOWN_FEATURE
  1, // 1 -> BETTER_TOGETHER_HOST
  0, // 2 -> BETTER_TOGETHER_CLIENT
  3, // 3 -> EASY_UNLOCK_HOST
  2, // 4 -> EASY_UNLOCK_CLIENT
  5, // 5 -> MAGIC_TETHER_HOST
  4, // 6 -> MAGIC_TETHER_CLIENT
  7, // 7 -> SMS_CONNECT_HOST
  6, // 8 -> SMS_CONNECT_CLIENT
};

const std::string& SoftwareFeature_Name(
    SoftwareFeature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SoftwareFeature_entries,
          SoftwareFeature_entries_by_number,
          9, SoftwareFeature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SoftwareFeature_entries,
      SoftwareFeature_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SoftwareFeature_strings[idx].get();
}
bool SoftwareFeature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SoftwareFeature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SoftwareFeature_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<SoftwareFeature>(int_value);
  }
  return success;
}
bool InvocationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InvocationReason_strings[16] = {};

static const char InvocationReason_names[] =
  "REASON_ADDRESS_CHANGE"
  "REASON_CHANGED_ACCOUNT"
  "REASON_CUSTOM_KEY_INVALIDATION"
  "REASON_EXPIRATION"
  "REASON_FAILURE_RECOVERY"
  "REASON_FAST_PERIODIC"
  "REASON_FEATURE_TOGGLED"
  "REASON_INITIALIZATION"
  "REASON_MANUAL"
  "REASON_NEW_ACCOUNT"
  "REASON_PERIODIC"
  "REASON_PROXIMITY_PERIODIC"
  "REASON_SERVER_INITIATED"
  "REASON_SLOW_PERIODIC"
  "REASON_SOFTWARE_UPDATE"
  "REASON_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InvocationReason_entries[] = {
  { {InvocationReason_names + 0, 21}, 11 },
  { {InvocationReason_names + 21, 22}, 8 },
  { {InvocationReason_names + 43, 30}, 14 },
  { {InvocationReason_names + 73, 17}, 5 },
  { {InvocationReason_names + 90, 23}, 6 },
  { {InvocationReason_names + 113, 20}, 4 },
  { {InvocationReason_names + 133, 22}, 9 },
  { {InvocationReason_names + 155, 21}, 1 },
  { {InvocationReason_names + 176, 13}, 13 },
  { {InvocationReason_names + 189, 18}, 7 },
  { {InvocationReason_names + 207, 15}, 2 },
  { {InvocationReason_names + 222, 25}, 15 },
  { {InvocationReason_names + 247, 23}, 10 },
  { {InvocationReason_names + 270, 20}, 3 },
  { {InvocationReason_names + 290, 22}, 12 },
  { {InvocationReason_names + 312, 14}, 0 },
};

static const int InvocationReason_entries_by_number[] = {
  15, // 0 -> REASON_UNKNOWN
  7, // 1 -> REASON_INITIALIZATION
  10, // 2 -> REASON_PERIODIC
  13, // 3 -> REASON_SLOW_PERIODIC
  5, // 4 -> REASON_FAST_PERIODIC
  3, // 5 -> REASON_EXPIRATION
  4, // 6 -> REASON_FAILURE_RECOVERY
  9, // 7 -> REASON_NEW_ACCOUNT
  1, // 8 -> REASON_CHANGED_ACCOUNT
  6, // 9 -> REASON_FEATURE_TOGGLED
  12, // 10 -> REASON_SERVER_INITIATED
  0, // 11 -> REASON_ADDRESS_CHANGE
  14, // 12 -> REASON_SOFTWARE_UPDATE
  8, // 13 -> REASON_MANUAL
  2, // 14 -> REASON_CUSTOM_KEY_INVALIDATION
  11, // 15 -> REASON_PROXIMITY_PERIODIC
};

const std::string& InvocationReason_Name(
    InvocationReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InvocationReason_entries,
          InvocationReason_entries_by_number,
          16, InvocationReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InvocationReason_entries,
      InvocationReason_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InvocationReason_strings[idx].get();
}
bool InvocationReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InvocationReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InvocationReason_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<InvocationReason>(int_value);
  }
  return success;
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 101:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Type_strings[16] = {};

static const char Type_names[] =
  "DEVICE_INFO_UPDATE"
  "DEVICE_PROXIMITY_CALLBACK"
  "DEVICE_TO_DEVICE_MESSAGE"
  "DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD"
  "ENROLLMENT"
  "GCMV1_IDENTITY_ASSERTION"
  "LOGIN_NOTIFICATION"
  "PROXIMITYAUTH_PAIRING"
  "TICKLE"
  "TX_CANCEL_REQUEST"
  "TX_PING"
  "TX_REPLY"
  "TX_REQUEST"
  "TX_SYNC_REQUEST"
  "TX_SYNC_RESPONSE"
  "UNLOCK_KEY_SIGNED_CHALLENGE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Type_entries[] = {
  { {Type_names + 0, 18}, 7 },
  { {Type_names + 18, 25}, 14 },
  { {Type_names + 43, 24}, 13 },
  { {Type_names + 67, 40}, 12 },
  { {Type_names + 107, 10}, 0 },
  { {Type_names + 117, 24}, 11 },
  { {Type_names + 141, 18}, 101 },
  { {Type_names + 159, 21}, 10 },
  { {Type_names + 180, 6}, 1 },
  { {Type_names + 186, 17}, 8 },
  { {Type_names + 203, 7}, 6 },
  { {Type_names + 210, 8}, 3 },
  { {Type_names + 218, 10}, 2 },
  { {Type_names + 228, 15}, 4 },
  { {Type_names + 243, 16}, 5 },
  { {Type_names + 259, 27}, 15 },
};

static const int Type_entries_by_number[] = {
  4, // 0 -> ENROLLMENT
  8, // 1 -> TICKLE
  12, // 2 -> TX_REQUEST
  11, // 3 -> TX_REPLY
  13, // 4 -> TX_SYNC_REQUEST
  14, // 5 -> TX_SYNC_RESPONSE
  10, // 6 -> TX_PING
  0, // 7 -> DEVICE_INFO_UPDATE
  9, // 8 -> TX_CANCEL_REQUEST
  7, // 10 -> PROXIMITYAUTH_PAIRING
  5, // 11 -> GCMV1_IDENTITY_ASSERTION
  3, // 12 -> DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD
  2, // 13 -> DEVICE_TO_DEVICE_MESSAGE
  1, // 14 -> DEVICE_PROXIMITY_CALLBACK
  15, // 15 -> UNLOCK_KEY_SIGNED_CHALLENGE
  6, // 101 -> LOGIN_NOTIFICATION
};

const std::string& Type_Name(
    Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Type_entries,
          Type_entries_by_number,
          16, Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Type_entries,
      Type_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Type_strings[idx].get();
}
bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Type_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<Type>(int_value);
  }
  return success;
}

// ===================================================================

class GcmDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmDeviceInfo>()._has_bits_);
  static void set_has_android_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gcm_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_apn_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_notification_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_bluetooth_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_device_master_key_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_user_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_device_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_os_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_device_os_release(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_device_os_codename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_device_software_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_device_software_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_device_software_package(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_display_diagonal_mils(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_device_authzen_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_long_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_device_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_using_secure_screenlock(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_auto_unlock_screenlock_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_auto_unlock_screenlock_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_bluetooth_radio_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_bluetooth_radio_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mobile_data_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tethering_supported(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ble_radio_supported(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pixel_experience(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_arc_plus_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_screenlock_state_flaky(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_enrollment_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_oauth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GcmDeviceInfo::GcmDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  supported_software_features_(arena),
  enabled_software_features_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:securegcm.GcmDeviceInfo)
}
GcmDeviceInfo::GcmDeviceInfo(const GcmDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      supported_software_features_(from.supported_software_features_),
      enabled_software_features_(from.enabled_software_features_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_public_key()) {
    user_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_public_key(), 
      GetArenaForAllocation());
  }
  device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_model()) {
    device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_model(), 
      GetArenaForAllocation());
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locale(), 
      GetArenaForAllocation());
  }
  key_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_handle()) {
    key_handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_handle(), 
      GetArenaForAllocation());
  }
  device_os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_os_version()) {
    device_os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_os_version(), 
      GetArenaForAllocation());
  }
  device_os_release_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_os_release_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_os_release()) {
    device_os_release_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_os_release(), 
      GetArenaForAllocation());
  }
  device_os_codename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_os_codename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_os_codename()) {
    device_os_codename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_os_codename(), 
      GetArenaForAllocation());
  }
  device_software_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_software_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_software_version()) {
    device_software_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_software_version(), 
      GetArenaForAllocation());
  }
  device_software_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_software_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_software_package()) {
    device_software_package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_software_package(), 
      GetArenaForAllocation());
  }
  long_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    long_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_long_device_id()) {
    long_device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_long_device_id(), 
      GetArenaForAllocation());
  }
  device_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_manufacturer()) {
    device_manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_manufacturer(), 
      GetArenaForAllocation());
  }
  gcm_registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gcm_registration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gcm_registration_id()) {
    gcm_registration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gcm_registration_id(), 
      GetArenaForAllocation());
  }
  device_master_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_master_key_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_master_key_hash()) {
    device_master_key_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_master_key_hash(), 
      GetArenaForAllocation());
  }
  apn_registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    apn_registration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apn_registration_id()) {
    apn_registration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apn_registration_id(), 
      GetArenaForAllocation());
  }
  bluetooth_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluetooth_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bluetooth_mac_address()) {
    bluetooth_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluetooth_mac_address(), 
      GetArenaForAllocation());
  }
  enrollment_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enrollment_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enrollment_session_id()) {
    enrollment_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollment_session_id(), 
      GetArenaForAllocation());
  }
  oauth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oauth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oauth_token()) {
    oauth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oauth_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&android_device_id_, &from.android_device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_enabled_) -
    reinterpret_cast<char*>(&android_device_id_)) + sizeof(notification_enabled_));
  // @@protoc_insertion_point(copy_constructor:securegcm.GcmDeviceInfo)
}

inline void GcmDeviceInfo::SharedCtor() {
user_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_os_release_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_os_release_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_os_codename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_os_codename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_software_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_software_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_software_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_software_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
long_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  long_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gcm_registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gcm_registration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_master_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_master_key_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
apn_registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  apn_registration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bluetooth_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluetooth_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enrollment_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enrollment_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oauth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oauth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&android_device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ble_radio_supported_) -
    reinterpret_cast<char*>(&android_device_id_)) + sizeof(ble_radio_supported_));
device_type_ = 1;
notification_enabled_ = true;
}

GcmDeviceInfo::~GcmDeviceInfo() {
  // @@protoc_insertion_point(destructor:securegcm.GcmDeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GcmDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_os_release_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_os_codename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_software_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_software_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gcm_registration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_master_key_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apn_registration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bluetooth_mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enrollment_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oauth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GcmDeviceInfo::ArenaDtor(void* object) {
  GcmDeviceInfo* _this = reinterpret_cast< GcmDeviceInfo* >(object);
  (void)_this;
}
void GcmDeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcmDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcmDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.GcmDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_software_features_.Clear();
  enabled_software_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      user_public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      key_handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      device_os_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      device_os_release_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      device_os_codename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      device_software_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      device_software_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      long_device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      device_manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      gcm_registration_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      device_master_key_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      apn_registration_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      bluetooth_mac_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      enrollment_session_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    oauth_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00fe0000u) {
    ::memset(&android_device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_experience_) -
        reinterpret_cast<char*>(&android_device_id_)) + sizeof(pixel_experience_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&arc_plus_plus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mobile_data_supported_) -
        reinterpret_cast<char*>(&arc_plus_plus_)) + sizeof(mobile_data_supported_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tethering_supported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ble_radio_supported_) -
        reinterpret_cast<char*>(&tethering_supported_)) + sizeof(ble_radio_supported_));
    device_type_ = 1;
    notification_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GcmDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 android_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_android_device_id(&_has_bits_);
          android_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // required bytes user_public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_model = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_device_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes key_handle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_key_handle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 counter = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_counter(&_has_bits_);
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_os_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_device_os_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 device_os_version_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_device_os_version_code(&_has_bits_);
          device_os_version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_os_release = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_device_os_release();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_os_codename = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_device_os_codename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_software_version = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_device_software_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 device_software_version_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_device_software_version_code(&_has_bits_);
          device_software_version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_software_package = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_device_software_package();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_display_diagonal_mils = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_device_display_diagonal_mils(&_has_bits_);
          device_display_diagonal_mils_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_authzen_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_device_authzen_version(&_has_bits_);
          device_authzen_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes long_device_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_long_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_manufacturer = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_device_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .securegcm.DeviceType device_type = 32 [default = ANDROID];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::DeviceType_IsValid(val))) {
            _internal_set_device_type(static_cast<::securegcm::DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes gcm_registration_id = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gcm_registration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes device_master_key_hash = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_device_master_key_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes apn_registration_id = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_apn_registration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notification_enabled = 203 [default = true];
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_notification_enabled(&_has_bits_);
          notification_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bluetooth_mac_address = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_bluetooth_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool using_secure_screenlock = 400 [default = false];
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_using_secure_screenlock(&_has_bits_);
          using_secure_screenlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_unlock_screenlock_supported = 401 [default = false];
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_auto_unlock_screenlock_supported(&_has_bits_);
          auto_unlock_screenlock_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_unlock_screenlock_enabled = 402 [default = false];
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_auto_unlock_screenlock_enabled(&_has_bits_);
          auto_unlock_screenlock_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bluetooth_radio_supported = 403 [default = false];
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_bluetooth_radio_supported(&_has_bits_);
          bluetooth_radio_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bluetooth_radio_enabled = 404 [default = false];
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_bluetooth_radio_enabled(&_has_bits_);
          bluetooth_radio_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_data_supported = 405 [default = false];
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_mobile_data_supported(&_has_bits_);
          mobile_data_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tethering_supported = 406 [default = false];
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tethering_supported(&_has_bits_);
          tethering_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ble_radio_supported = 407 [default = false];
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_ble_radio_supported(&_has_bits_);
          ble_radio_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pixel_experience = 408 [default = false];
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_pixel_experience(&_has_bits_);
          pixel_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool arc_plus_plus = 409 [default = false];
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_arc_plus_plus(&_has_bits_);
          arc_plus_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_screenlock_state_flaky = 410 [default = false];
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_is_screenlock_state_flaky(&_has_bits_);
          is_screenlock_state_flaky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .securegcm.SoftwareFeature supported_software_features = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::securegcm::SoftwareFeature_IsValid(val))) {
              _internal_add_supported_software_features(static_cast<::securegcm::SoftwareFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(411, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3288>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_supported_software_features(), ptr, ctx, ::securegcm::SoftwareFeature_IsValid, &_internal_metadata_, 411);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .securegcm.SoftwareFeature enabled_software_features = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::securegcm::SoftwareFeature_IsValid(val))) {
              _internal_add_enabled_software_features(static_cast<::securegcm::SoftwareFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(412, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3296>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_enabled_software_features(), ptr, ctx, ::securegcm::SoftwareFeature_IsValid, &_internal_metadata_, 412);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes enrollment_session_id = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_enrollment_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string oauth_token = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_oauth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcmDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.GcmDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 android_device_id = 1;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_android_device_id(), target);
  }

  // required bytes user_public_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_public_key(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_model(), target);
  }

  // optional string locale = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_locale(), target);
  }

  // optional bytes key_handle = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_key_handle(), target);
  }

  // optional int64 counter = 12 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_counter(), target);
  }

  // optional string device_os_version = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_device_os_version(), target);
  }

  // optional int64 device_os_version_code = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_device_os_version_code(), target);
  }

  // optional string device_os_release = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_device_os_release(), target);
  }

  // optional string device_os_codename = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_device_os_codename(), target);
  }

  // optional string device_software_version = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_device_software_version(), target);
  }

  // optional int64 device_software_version_code = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_device_software_version_code(), target);
  }

  // optional string device_software_package = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_device_software_package(), target);
  }

  // optional int32 device_display_diagonal_mils = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_device_display_diagonal_mils(), target);
  }

  // optional int32 device_authzen_version = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_device_authzen_version(), target);
  }

  // optional bytes long_device_id = 29;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        29, this->_internal_long_device_id(), target);
  }

  // optional string device_manufacturer = 31;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_device_manufacturer(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .securegcm.DeviceType device_type = 32 [default = ANDROID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      32, this->_internal_device_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes gcm_registration_id = 102;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        102, this->_internal_gcm_registration_id(), target);
  }

  // optional bytes device_master_key_hash = 103;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteBytesMaybeAliased(
        103, this->_internal_device_master_key_hash(), target);
  }

  // optional bytes apn_registration_id = 202;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        202, this->_internal_apn_registration_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool notification_enabled = 203 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(203, this->_internal_notification_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string bluetooth_mac_address = 302;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteStringMaybeAliased(
        302, this->_internal_bluetooth_mac_address(), target);
  }

  // optional bool using_secure_screenlock = 400 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(400, this->_internal_using_secure_screenlock(), target);
  }

  // optional bool auto_unlock_screenlock_supported = 401 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(401, this->_internal_auto_unlock_screenlock_supported(), target);
  }

  // optional bool auto_unlock_screenlock_enabled = 402 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(402, this->_internal_auto_unlock_screenlock_enabled(), target);
  }

  // optional bool bluetooth_radio_supported = 403 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(403, this->_internal_bluetooth_radio_supported(), target);
  }

  // optional bool bluetooth_radio_enabled = 404 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(404, this->_internal_bluetooth_radio_enabled(), target);
  }

  // optional bool mobile_data_supported = 405 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(405, this->_internal_mobile_data_supported(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tethering_supported = 406 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(406, this->_internal_tethering_supported(), target);
  }

  // optional bool ble_radio_supported = 407 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(407, this->_internal_ble_radio_supported(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool pixel_experience = 408 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(408, this->_internal_pixel_experience(), target);
  }

  // optional bool arc_plus_plus = 409 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(409, this->_internal_arc_plus_plus(), target);
  }

  // optional bool is_screenlock_state_flaky = 410 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(410, this->_internal_is_screenlock_state_flaky(), target);
  }

  // repeated .securegcm.SoftwareFeature supported_software_features = 411;
  for (int i = 0, n = this->_internal_supported_software_features_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        411, this->_internal_supported_software_features(i), target);
  }

  // repeated .securegcm.SoftwareFeature enabled_software_features = 412;
  for (int i = 0, n = this->_internal_enabled_software_features_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        412, this->_internal_enabled_software_features(i), target);
  }

  // optional bytes enrollment_session_id = 1000;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteBytesMaybeAliased(
        1000, this->_internal_enrollment_session_id(), target);
  }

  // optional string oauth_token = 1001;
  if (cached_has_bits & 0x00010000u) {
    target = stream->WriteStringMaybeAliased(
        1001, this->_internal_oauth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.GcmDeviceInfo)
  return target;
}

size_t GcmDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.GcmDeviceInfo)
  size_t total_size = 0;

  // required bytes user_public_key = 4;
  if (_internal_has_user_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_public_key());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .securegcm.SoftwareFeature supported_software_features = 411;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_software_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_software_features(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .securegcm.SoftwareFeature enabled_software_features = 412;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_software_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enabled_software_features(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string device_model = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_model());
    }

    // optional string locale = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional bytes key_handle = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_handle());
    }

    // optional string device_os_version = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_os_version());
    }

    // optional string device_os_release = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_os_release());
    }

    // optional string device_os_codename = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_os_codename());
    }

    // optional string device_software_version = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_software_version());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string device_software_package = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_software_package());
    }

    // optional bytes long_device_id = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_long_device_id());
    }

    // optional string device_manufacturer = 31;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_manufacturer());
    }

    // optional bytes gcm_registration_id = 102;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gcm_registration_id());
    }

    // optional bytes device_master_key_hash = 103;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_device_master_key_hash());
    }

    // optional bytes apn_registration_id = 202;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_apn_registration_id());
    }

    // optional string bluetooth_mac_address = 302;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bluetooth_mac_address());
    }

    // optional bytes enrollment_session_id = 1000;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_enrollment_session_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string oauth_token = 1001;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oauth_token());
    }

    // optional fixed64 android_device_id = 1;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional int64 counter = 12 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_counter());
    }

    // optional int64 device_os_version_code = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_device_os_version_code());
    }

    // optional int64 device_software_version_code = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_device_software_version_code());
    }

    // optional int32 device_display_diagonal_mils = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_device_display_diagonal_mils());
    }

    // optional int32 device_authzen_version = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_device_authzen_version());
    }

    // optional bool pixel_experience = 408 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool arc_plus_plus = 409 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_screenlock_state_flaky = 410 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool using_secure_screenlock = 400 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool auto_unlock_screenlock_supported = 401 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool auto_unlock_screenlock_enabled = 402 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool bluetooth_radio_supported = 403 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool bluetooth_radio_enabled = 404 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool mobile_data_supported = 405 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool tethering_supported = 406 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool ble_radio_supported = 407 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional .securegcm.DeviceType device_type = 32 [default = ANDROID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
    }

    // optional bool notification_enabled = 203 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmDeviceInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmDeviceInfo*>(
      &from));
}

void GcmDeviceInfo::MergeFrom(const GcmDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:securegcm.GcmDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_software_features_.MergeFrom(from.supported_software_features_);
  enabled_software_features_.MergeFrom(from.enabled_software_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_public_key(from._internal_user_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_model(from._internal_device_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_key_handle(from._internal_key_handle());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_device_os_version(from._internal_device_os_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_device_os_release(from._internal_device_os_release());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_device_os_codename(from._internal_device_os_codename());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_device_software_version(from._internal_device_software_version());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_device_software_package(from._internal_device_software_package());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_long_device_id(from._internal_long_device_id());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_device_manufacturer(from._internal_device_manufacturer());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_gcm_registration_id(from._internal_gcm_registration_id());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_device_master_key_hash(from._internal_device_master_key_hash());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_apn_registration_id(from._internal_apn_registration_id());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_bluetooth_mac_address(from._internal_bluetooth_mac_address());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_enrollment_session_id(from._internal_enrollment_session_id());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_oauth_token(from._internal_oauth_token());
    }
    if (cached_has_bits & 0x00020000u) {
      android_device_id_ = from.android_device_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      counter_ = from.counter_;
    }
    if (cached_has_bits & 0x00080000u) {
      device_os_version_code_ = from.device_os_version_code_;
    }
    if (cached_has_bits & 0x00100000u) {
      device_software_version_code_ = from.device_software_version_code_;
    }
    if (cached_has_bits & 0x00200000u) {
      device_display_diagonal_mils_ = from.device_display_diagonal_mils_;
    }
    if (cached_has_bits & 0x00400000u) {
      device_authzen_version_ = from.device_authzen_version_;
    }
    if (cached_has_bits & 0x00800000u) {
      pixel_experience_ = from.pixel_experience_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      arc_plus_plus_ = from.arc_plus_plus_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_screenlock_state_flaky_ = from.is_screenlock_state_flaky_;
    }
    if (cached_has_bits & 0x04000000u) {
      using_secure_screenlock_ = from.using_secure_screenlock_;
    }
    if (cached_has_bits & 0x08000000u) {
      auto_unlock_screenlock_supported_ = from.auto_unlock_screenlock_supported_;
    }
    if (cached_has_bits & 0x10000000u) {
      auto_unlock_screenlock_enabled_ = from.auto_unlock_screenlock_enabled_;
    }
    if (cached_has_bits & 0x20000000u) {
      bluetooth_radio_supported_ = from.bluetooth_radio_supported_;
    }
    if (cached_has_bits & 0x40000000u) {
      bluetooth_radio_enabled_ = from.bluetooth_radio_enabled_;
    }
    if (cached_has_bits & 0x80000000u) {
      mobile_data_supported_ = from.mobile_data_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tethering_supported_ = from.tethering_supported_;
    }
    if (cached_has_bits & 0x00000002u) {
      ble_radio_supported_ = from.ble_radio_supported_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_type_ = from.device_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      notification_enabled_ = from.notification_enabled_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GcmDeviceInfo::CopyFrom(const GcmDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.GcmDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmDeviceInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GcmDeviceInfo::InternalSwap(GcmDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  supported_software_features_.InternalSwap(&other->supported_software_features_);
  enabled_software_features_.InternalSwap(&other->enabled_software_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_public_key_, lhs_arena,
      &other->user_public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_model_, lhs_arena,
      &other->device_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_handle_, lhs_arena,
      &other->key_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_os_version_, lhs_arena,
      &other->device_os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_os_release_, lhs_arena,
      &other->device_os_release_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_os_codename_, lhs_arena,
      &other->device_os_codename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_software_version_, lhs_arena,
      &other->device_software_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_software_package_, lhs_arena,
      &other->device_software_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &long_device_id_, lhs_arena,
      &other->long_device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_manufacturer_, lhs_arena,
      &other->device_manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gcm_registration_id_, lhs_arena,
      &other->gcm_registration_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_master_key_hash_, lhs_arena,
      &other->device_master_key_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &apn_registration_id_, lhs_arena,
      &other->apn_registration_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluetooth_mac_address_, lhs_arena,
      &other->bluetooth_mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollment_session_id_, lhs_arena,
      &other->enrollment_session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oauth_token_, lhs_arena,
      &other->oauth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcmDeviceInfo, ble_radio_supported_)
      + sizeof(GcmDeviceInfo::ble_radio_supported_)
      - PROTOBUF_FIELD_OFFSET(GcmDeviceInfo, android_device_id_)>(
          reinterpret_cast<char*>(&android_device_id_),
          reinterpret_cast<char*>(&other->android_device_id_));
  swap(device_type_, other->device_type_);
  swap(notification_enabled_, other->notification_enabled_);
}

std::string GcmDeviceInfo::GetTypeName() const {
  return "securegcm.GcmDeviceInfo";
}


// ===================================================================

class GcmMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmMetadata>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GcmMetadata::GcmMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:securegcm.GcmMetadata)
}
GcmMetadata::GcmMetadata(const GcmMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:securegcm.GcmMetadata)
}

inline void GcmMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
}

GcmMetadata::~GcmMetadata() {
  // @@protoc_insertion_point(destructor:securegcm.GcmMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GcmMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcmMetadata::ArenaDtor(void* object) {
  GcmMetadata* _this = reinterpret_cast< GcmMetadata* >(object);
  (void)_this;
}
void GcmMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcmMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcmMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.GcmMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&type_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GcmMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .securegcm.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Type_IsValid(val))) {
            _internal_set_type(static_cast<::securegcm::Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcmMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.GcmMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .securegcm.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 version = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.GcmMetadata)
  return target;
}

size_t GcmMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.GcmMetadata)
  size_t total_size = 0;

  // required .securegcm.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 version = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmMetadata*>(
      &from));
}

void GcmMetadata::MergeFrom(const GcmMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:securegcm.GcmMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GcmMetadata::CopyFrom(const GcmMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.GcmMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GcmMetadata::InternalSwap(GcmMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcmMetadata, version_)
      + sizeof(GcmMetadata::version_)
      - PROTOBUF_FIELD_OFFSET(GcmMetadata, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string GcmMetadata::GetTypeName() const {
  return "securegcm.GcmMetadata";
}


// ===================================================================

class Tickle::_Internal {
 public:
  using HasBits = decltype(std::declval<Tickle>()._has_bits_);
  static void set_has_expiry_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Tickle::Tickle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:securegcm.Tickle)
}
Tickle::Tickle(const Tickle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  expiry_time_ = from.expiry_time_;
  // @@protoc_insertion_point(copy_constructor:securegcm.Tickle)
}

inline void Tickle::SharedCtor() {
expiry_time_ = uint64_t{0u};
}

Tickle::~Tickle() {
  // @@protoc_insertion_point(destructor:securegcm.Tickle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Tickle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tickle::ArenaDtor(void* object) {
  Tickle* _this = reinterpret_cast< Tickle* >(object);
  (void)_this;
}
void Tickle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tickle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tickle::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Tickle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expiry_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tickle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 expiry_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_expiry_time(&has_bits);
          expiry_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tickle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Tickle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 expiry_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_expiry_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Tickle)
  return target;
}

size_t Tickle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Tickle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 expiry_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tickle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Tickle*>(
      &from));
}

void Tickle::MergeFrom(const Tickle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Tickle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expiry_time()) {
    _internal_set_expiry_time(from._internal_expiry_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tickle::CopyFrom(const Tickle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Tickle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tickle::IsInitialized() const {
  return true;
}

void Tickle::InternalSwap(Tickle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expiry_time_, other->expiry_time_);
}

std::string Tickle::GetTypeName() const {
  return "securegcm.Tickle";
}


// ===================================================================

class LoginNotificationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginNotificationInfo>()._has_bits_);
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LoginNotificationInfo::LoginNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:securegcm.LoginNotificationInfo)
}
LoginNotificationInfo::LoginNotificationInfo(const LoginNotificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArenaForAllocation());
  }
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_type()) {
    event_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_type(), 
      GetArenaForAllocation());
  }
  creation_time_ = from.creation_time_;
  // @@protoc_insertion_point(copy_constructor:securegcm.LoginNotificationInfo)
}

inline void LoginNotificationInfo::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creation_time_ = uint64_t{0u};
}

LoginNotificationInfo::~LoginNotificationInfo() {
  // @@protoc_insertion_point(destructor:securegcm.LoginNotificationInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void LoginNotificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginNotificationInfo::ArenaDtor(void* object) {
  LoginNotificationInfo* _this = reinterpret_cast< LoginNotificationInfo* >(object);
  (void)_this;
}
void LoginNotificationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginNotificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.LoginNotificationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_.ClearNonDefaultToEmpty();
    }
  }
  creation_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginNotificationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 creation_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string event_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_event_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginNotificationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.LoginNotificationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 creation_time = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_creation_time(), target);
  }

  // optional string email = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host(), target);
  }

  // optional string source = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source(), target);
  }

  // optional string event_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.LoginNotificationInfo)
  return target;
}

size_t LoginNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.LoginNotificationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string email = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string host = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional string source = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string event_type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_type());
    }

    // optional fixed64 creation_time = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginNotificationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginNotificationInfo*>(
      &from));
}

void LoginNotificationInfo::MergeFrom(const LoginNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:securegcm.LoginNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_event_type(from._internal_event_type());
    }
    if (cached_has_bits & 0x00000010u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginNotificationInfo::CopyFrom(const LoginNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.LoginNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotificationInfo::IsInitialized() const {
  return true;
}

void LoginNotificationInfo::InternalSwap(LoginNotificationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_type_, lhs_arena,
      &other->event_type_, rhs_arena
  );
  swap(creation_time_, other->creation_time_);
}

std::string LoginNotificationInfo::GetTypeName() const {
  return "securegcm.LoginNotificationInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::securegcm::GcmDeviceInfo* Arena::CreateMaybeMessage< ::securegcm::GcmDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::GcmDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::GcmMetadata* Arena::CreateMaybeMessage< ::securegcm::GcmMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::GcmMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Tickle* Arena::CreateMaybeMessage< ::securegcm::Tickle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Tickle >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::LoginNotificationInfo* Arena::CreateMaybeMessage< ::securegcm::LoginNotificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::LoginNotificationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
