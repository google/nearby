// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/proximity_payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fproximity_5fpayloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fproximity_5fpayloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "securegcm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fproximity_5fpayloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fproximity_5fpayloads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace securegcm {
class CloudToDeviceProximityAuthPairing;
struct CloudToDeviceProximityAuthPairingDefaultTypeInternal;
extern CloudToDeviceProximityAuthPairingDefaultTypeInternal _CloudToDeviceProximityAuthPairing_default_instance_;
class DeviceProximityCallback;
struct DeviceProximityCallbackDefaultTypeInternal;
extern DeviceProximityCallbackDefaultTypeInternal _DeviceProximityCallback_default_instance_;
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template<> ::securegcm::CloudToDeviceProximityAuthPairing* Arena::CreateMaybeMessage<::securegcm::CloudToDeviceProximityAuthPairing>(Arena*);
template<> ::securegcm::DeviceProximityCallback* Arena::CreateMaybeMessage<::securegcm::DeviceProximityCallback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace securegcm {

// ===================================================================

class CloudToDeviceProximityAuthPairing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.CloudToDeviceProximityAuthPairing) */ {
 public:
  inline CloudToDeviceProximityAuthPairing() : CloudToDeviceProximityAuthPairing(nullptr) {}
  ~CloudToDeviceProximityAuthPairing() override;
  explicit constexpr CloudToDeviceProximityAuthPairing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudToDeviceProximityAuthPairing(const CloudToDeviceProximityAuthPairing& from);
  CloudToDeviceProximityAuthPairing(CloudToDeviceProximityAuthPairing&& from) noexcept
    : CloudToDeviceProximityAuthPairing() {
    *this = ::std::move(from);
  }

  inline CloudToDeviceProximityAuthPairing& operator=(const CloudToDeviceProximityAuthPairing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudToDeviceProximityAuthPairing& operator=(CloudToDeviceProximityAuthPairing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CloudToDeviceProximityAuthPairing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudToDeviceProximityAuthPairing* internal_default_instance() {
    return reinterpret_cast<const CloudToDeviceProximityAuthPairing*>(
               &_CloudToDeviceProximityAuthPairing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloudToDeviceProximityAuthPairing& a, CloudToDeviceProximityAuthPairing& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudToDeviceProximityAuthPairing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudToDeviceProximityAuthPairing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudToDeviceProximityAuthPairing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudToDeviceProximityAuthPairing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CloudToDeviceProximityAuthPairing& from);
  void MergeFrom(const CloudToDeviceProximityAuthPairing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloudToDeviceProximityAuthPairing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "securegcm.CloudToDeviceProximityAuthPairing";
  }
  protected:
  explicit CloudToDeviceProximityAuthPairing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitiatingDeviceNameFieldNumber = 1,
    kInitiatingDeviceBtAddressFieldNumber = 2,
    kEphemeralSymmetricKeyFieldNumber = 3,
    kAdditionalMetadataFieldNumber = 4,
  };
  // optional string initiating_device_name = 1;
  bool has_initiating_device_name() const;
  private:
  bool _internal_has_initiating_device_name() const;
  public:
  void clear_initiating_device_name();
  const std::string& initiating_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initiating_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initiating_device_name();
  PROTOBUF_NODISCARD std::string* release_initiating_device_name();
  void set_allocated_initiating_device_name(std::string* initiating_device_name);
  private:
  const std::string& _internal_initiating_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiating_device_name(const std::string& value);
  std::string* _internal_mutable_initiating_device_name();
  public:

  // optional string initiating_device_bt_address = 2;
  bool has_initiating_device_bt_address() const;
  private:
  bool _internal_has_initiating_device_bt_address() const;
  public:
  void clear_initiating_device_bt_address();
  const std::string& initiating_device_bt_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initiating_device_bt_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initiating_device_bt_address();
  PROTOBUF_NODISCARD std::string* release_initiating_device_bt_address();
  void set_allocated_initiating_device_bt_address(std::string* initiating_device_bt_address);
  private:
  const std::string& _internal_initiating_device_bt_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiating_device_bt_address(const std::string& value);
  std::string* _internal_mutable_initiating_device_bt_address();
  public:

  // optional bytes ephemeral_symmetric_key = 3;
  bool has_ephemeral_symmetric_key() const;
  private:
  bool _internal_has_ephemeral_symmetric_key() const;
  public:
  void clear_ephemeral_symmetric_key();
  const std::string& ephemeral_symmetric_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ephemeral_symmetric_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ephemeral_symmetric_key();
  PROTOBUF_NODISCARD std::string* release_ephemeral_symmetric_key();
  void set_allocated_ephemeral_symmetric_key(std::string* ephemeral_symmetric_key);
  private:
  const std::string& _internal_ephemeral_symmetric_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ephemeral_symmetric_key(const std::string& value);
  std::string* _internal_mutable_ephemeral_symmetric_key();
  public:

  // optional bytes additional_metadata = 4;
  bool has_additional_metadata() const;
  private:
  bool _internal_has_additional_metadata() const;
  public:
  void clear_additional_metadata();
  const std::string& additional_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additional_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additional_metadata();
  PROTOBUF_NODISCARD std::string* release_additional_metadata();
  void set_allocated_additional_metadata(std::string* additional_metadata);
  private:
  const std::string& _internal_additional_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_metadata(const std::string& value);
  std::string* _internal_mutable_additional_metadata();
  public:

  // @@protoc_insertion_point(class_scope:securegcm.CloudToDeviceProximityAuthPairing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initiating_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initiating_device_bt_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ephemeral_symmetric_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_metadata_;
  friend struct ::TableStruct_proto_2fproximity_5fpayloads_2eproto;
};
// -------------------------------------------------------------------

class DeviceProximityCallback final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.DeviceProximityCallback) */ {
 public:
  inline DeviceProximityCallback() : DeviceProximityCallback(nullptr) {}
  ~DeviceProximityCallback() override;
  explicit constexpr DeviceProximityCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceProximityCallback(const DeviceProximityCallback& from);
  DeviceProximityCallback(DeviceProximityCallback&& from) noexcept
    : DeviceProximityCallback() {
    *this = ::std::move(from);
  }

  inline DeviceProximityCallback& operator=(const DeviceProximityCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProximityCallback& operator=(DeviceProximityCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceProximityCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceProximityCallback* internal_default_instance() {
    return reinterpret_cast<const DeviceProximityCallback*>(
               &_DeviceProximityCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceProximityCallback& a, DeviceProximityCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceProximityCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProximityCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceProximityCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceProximityCallback>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeviceProximityCallback& from);
  void MergeFrom(const DeviceProximityCallback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceProximityCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "securegcm.DeviceProximityCallback";
  }
  protected:
  explicit DeviceProximityCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackBluetoothAddressFieldNumber = 1,
    kSourceDeviceTypeFieldNumber = 2,
    kProtocolVersionFieldNumber = 3,
  };
  // optional string callback_bluetooth_address = 1;
  bool has_callback_bluetooth_address() const;
  private:
  bool _internal_has_callback_bluetooth_address() const;
  public:
  void clear_callback_bluetooth_address();
  const std::string& callback_bluetooth_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback_bluetooth_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback_bluetooth_address();
  PROTOBUF_NODISCARD std::string* release_callback_bluetooth_address();
  void set_allocated_callback_bluetooth_address(std::string* callback_bluetooth_address);
  private:
  const std::string& _internal_callback_bluetooth_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_bluetooth_address(const std::string& value);
  std::string* _internal_mutable_callback_bluetooth_address();
  public:

  // optional .securegcm.DeviceType source_device_type = 2;
  bool has_source_device_type() const;
  private:
  bool _internal_has_source_device_type() const;
  public:
  void clear_source_device_type();
  ::securegcm::DeviceType source_device_type() const;
  void set_source_device_type(::securegcm::DeviceType value);
  private:
  ::securegcm::DeviceType _internal_source_device_type() const;
  void _internal_set_source_device_type(::securegcm::DeviceType value);
  public:

  // optional int32 protocol_version = 3;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  int32_t protocol_version() const;
  void set_protocol_version(int32_t value);
  private:
  int32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:securegcm.DeviceProximityCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_bluetooth_address_;
  int source_device_type_;
  int32_t protocol_version_;
  friend struct ::TableStruct_proto_2fproximity_5fpayloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudToDeviceProximityAuthPairing

// optional string initiating_device_name = 1;
inline bool CloudToDeviceProximityAuthPairing::_internal_has_initiating_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloudToDeviceProximityAuthPairing::has_initiating_device_name() const {
  return _internal_has_initiating_device_name();
}
inline void CloudToDeviceProximityAuthPairing::clear_initiating_device_name() {
  initiating_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloudToDeviceProximityAuthPairing::initiating_device_name() const {
  // @@protoc_insertion_point(field_get:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_name)
  return _internal_initiating_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudToDeviceProximityAuthPairing::set_initiating_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 initiating_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_name)
}
inline std::string* CloudToDeviceProximityAuthPairing::mutable_initiating_device_name() {
  std::string* _s = _internal_mutable_initiating_device_name();
  // @@protoc_insertion_point(field_mutable:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_name)
  return _s;
}
inline const std::string& CloudToDeviceProximityAuthPairing::_internal_initiating_device_name() const {
  return initiating_device_name_.Get();
}
inline void CloudToDeviceProximityAuthPairing::_internal_set_initiating_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  initiating_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::_internal_mutable_initiating_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return initiating_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::release_initiating_device_name() {
  // @@protoc_insertion_point(field_release:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_name)
  if (!_internal_has_initiating_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = initiating_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiating_device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiating_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudToDeviceProximityAuthPairing::set_allocated_initiating_device_name(std::string* initiating_device_name) {
  if (initiating_device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  initiating_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initiating_device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiating_device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiating_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_name)
}

// optional string initiating_device_bt_address = 2;
inline bool CloudToDeviceProximityAuthPairing::_internal_has_initiating_device_bt_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloudToDeviceProximityAuthPairing::has_initiating_device_bt_address() const {
  return _internal_has_initiating_device_bt_address();
}
inline void CloudToDeviceProximityAuthPairing::clear_initiating_device_bt_address() {
  initiating_device_bt_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CloudToDeviceProximityAuthPairing::initiating_device_bt_address() const {
  // @@protoc_insertion_point(field_get:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_bt_address)
  return _internal_initiating_device_bt_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudToDeviceProximityAuthPairing::set_initiating_device_bt_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 initiating_device_bt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_bt_address)
}
inline std::string* CloudToDeviceProximityAuthPairing::mutable_initiating_device_bt_address() {
  std::string* _s = _internal_mutable_initiating_device_bt_address();
  // @@protoc_insertion_point(field_mutable:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_bt_address)
  return _s;
}
inline const std::string& CloudToDeviceProximityAuthPairing::_internal_initiating_device_bt_address() const {
  return initiating_device_bt_address_.Get();
}
inline void CloudToDeviceProximityAuthPairing::_internal_set_initiating_device_bt_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  initiating_device_bt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::_internal_mutable_initiating_device_bt_address() {
  _has_bits_[0] |= 0x00000002u;
  return initiating_device_bt_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::release_initiating_device_bt_address() {
  // @@protoc_insertion_point(field_release:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_bt_address)
  if (!_internal_has_initiating_device_bt_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = initiating_device_bt_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiating_device_bt_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiating_device_bt_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudToDeviceProximityAuthPairing::set_allocated_initiating_device_bt_address(std::string* initiating_device_bt_address) {
  if (initiating_device_bt_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  initiating_device_bt_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initiating_device_bt_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiating_device_bt_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiating_device_bt_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.CloudToDeviceProximityAuthPairing.initiating_device_bt_address)
}

// optional bytes ephemeral_symmetric_key = 3;
inline bool CloudToDeviceProximityAuthPairing::_internal_has_ephemeral_symmetric_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CloudToDeviceProximityAuthPairing::has_ephemeral_symmetric_key() const {
  return _internal_has_ephemeral_symmetric_key();
}
inline void CloudToDeviceProximityAuthPairing::clear_ephemeral_symmetric_key() {
  ephemeral_symmetric_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CloudToDeviceProximityAuthPairing::ephemeral_symmetric_key() const {
  // @@protoc_insertion_point(field_get:securegcm.CloudToDeviceProximityAuthPairing.ephemeral_symmetric_key)
  return _internal_ephemeral_symmetric_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudToDeviceProximityAuthPairing::set_ephemeral_symmetric_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ephemeral_symmetric_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.CloudToDeviceProximityAuthPairing.ephemeral_symmetric_key)
}
inline std::string* CloudToDeviceProximityAuthPairing::mutable_ephemeral_symmetric_key() {
  std::string* _s = _internal_mutable_ephemeral_symmetric_key();
  // @@protoc_insertion_point(field_mutable:securegcm.CloudToDeviceProximityAuthPairing.ephemeral_symmetric_key)
  return _s;
}
inline const std::string& CloudToDeviceProximityAuthPairing::_internal_ephemeral_symmetric_key() const {
  return ephemeral_symmetric_key_.Get();
}
inline void CloudToDeviceProximityAuthPairing::_internal_set_ephemeral_symmetric_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ephemeral_symmetric_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::_internal_mutable_ephemeral_symmetric_key() {
  _has_bits_[0] |= 0x00000004u;
  return ephemeral_symmetric_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::release_ephemeral_symmetric_key() {
  // @@protoc_insertion_point(field_release:securegcm.CloudToDeviceProximityAuthPairing.ephemeral_symmetric_key)
  if (!_internal_has_ephemeral_symmetric_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = ephemeral_symmetric_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ephemeral_symmetric_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ephemeral_symmetric_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudToDeviceProximityAuthPairing::set_allocated_ephemeral_symmetric_key(std::string* ephemeral_symmetric_key) {
  if (ephemeral_symmetric_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ephemeral_symmetric_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ephemeral_symmetric_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ephemeral_symmetric_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ephemeral_symmetric_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.CloudToDeviceProximityAuthPairing.ephemeral_symmetric_key)
}

// optional bytes additional_metadata = 4;
inline bool CloudToDeviceProximityAuthPairing::_internal_has_additional_metadata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CloudToDeviceProximityAuthPairing::has_additional_metadata() const {
  return _internal_has_additional_metadata();
}
inline void CloudToDeviceProximityAuthPairing::clear_additional_metadata() {
  additional_metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CloudToDeviceProximityAuthPairing::additional_metadata() const {
  // @@protoc_insertion_point(field_get:securegcm.CloudToDeviceProximityAuthPairing.additional_metadata)
  return _internal_additional_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudToDeviceProximityAuthPairing::set_additional_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 additional_metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.CloudToDeviceProximityAuthPairing.additional_metadata)
}
inline std::string* CloudToDeviceProximityAuthPairing::mutable_additional_metadata() {
  std::string* _s = _internal_mutable_additional_metadata();
  // @@protoc_insertion_point(field_mutable:securegcm.CloudToDeviceProximityAuthPairing.additional_metadata)
  return _s;
}
inline const std::string& CloudToDeviceProximityAuthPairing::_internal_additional_metadata() const {
  return additional_metadata_.Get();
}
inline void CloudToDeviceProximityAuthPairing::_internal_set_additional_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  additional_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::_internal_mutable_additional_metadata() {
  _has_bits_[0] |= 0x00000008u;
  return additional_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloudToDeviceProximityAuthPairing::release_additional_metadata() {
  // @@protoc_insertion_point(field_release:securegcm.CloudToDeviceProximityAuthPairing.additional_metadata)
  if (!_internal_has_additional_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = additional_metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudToDeviceProximityAuthPairing::set_allocated_additional_metadata(std::string* additional_metadata) {
  if (additional_metadata != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  additional_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.CloudToDeviceProximityAuthPairing.additional_metadata)
}

// -------------------------------------------------------------------

// DeviceProximityCallback

// optional string callback_bluetooth_address = 1;
inline bool DeviceProximityCallback::_internal_has_callback_bluetooth_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceProximityCallback::has_callback_bluetooth_address() const {
  return _internal_has_callback_bluetooth_address();
}
inline void DeviceProximityCallback::clear_callback_bluetooth_address() {
  callback_bluetooth_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceProximityCallback::callback_bluetooth_address() const {
  // @@protoc_insertion_point(field_get:securegcm.DeviceProximityCallback.callback_bluetooth_address)
  return _internal_callback_bluetooth_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceProximityCallback::set_callback_bluetooth_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 callback_bluetooth_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.DeviceProximityCallback.callback_bluetooth_address)
}
inline std::string* DeviceProximityCallback::mutable_callback_bluetooth_address() {
  std::string* _s = _internal_mutable_callback_bluetooth_address();
  // @@protoc_insertion_point(field_mutable:securegcm.DeviceProximityCallback.callback_bluetooth_address)
  return _s;
}
inline const std::string& DeviceProximityCallback::_internal_callback_bluetooth_address() const {
  return callback_bluetooth_address_.Get();
}
inline void DeviceProximityCallback::_internal_set_callback_bluetooth_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callback_bluetooth_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceProximityCallback::_internal_mutable_callback_bluetooth_address() {
  _has_bits_[0] |= 0x00000001u;
  return callback_bluetooth_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceProximityCallback::release_callback_bluetooth_address() {
  // @@protoc_insertion_point(field_release:securegcm.DeviceProximityCallback.callback_bluetooth_address)
  if (!_internal_has_callback_bluetooth_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = callback_bluetooth_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callback_bluetooth_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callback_bluetooth_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceProximityCallback::set_allocated_callback_bluetooth_address(std::string* callback_bluetooth_address) {
  if (callback_bluetooth_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callback_bluetooth_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback_bluetooth_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callback_bluetooth_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callback_bluetooth_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.DeviceProximityCallback.callback_bluetooth_address)
}

// optional .securegcm.DeviceType source_device_type = 2;
inline bool DeviceProximityCallback::_internal_has_source_device_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceProximityCallback::has_source_device_type() const {
  return _internal_has_source_device_type();
}
inline void DeviceProximityCallback::clear_source_device_type() {
  source_device_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::securegcm::DeviceType DeviceProximityCallback::_internal_source_device_type() const {
  return static_cast< ::securegcm::DeviceType >(source_device_type_);
}
inline ::securegcm::DeviceType DeviceProximityCallback::source_device_type() const {
  // @@protoc_insertion_point(field_get:securegcm.DeviceProximityCallback.source_device_type)
  return _internal_source_device_type();
}
inline void DeviceProximityCallback::_internal_set_source_device_type(::securegcm::DeviceType value) {
  assert(::securegcm::DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  source_device_type_ = value;
}
inline void DeviceProximityCallback::set_source_device_type(::securegcm::DeviceType value) {
  _internal_set_source_device_type(value);
  // @@protoc_insertion_point(field_set:securegcm.DeviceProximityCallback.source_device_type)
}

// optional int32 protocol_version = 3;
inline bool DeviceProximityCallback::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceProximityCallback::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void DeviceProximityCallback::clear_protocol_version() {
  protocol_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DeviceProximityCallback::_internal_protocol_version() const {
  return protocol_version_;
}
inline int32_t DeviceProximityCallback::protocol_version() const {
  // @@protoc_insertion_point(field_get:securegcm.DeviceProximityCallback.protocol_version)
  return _internal_protocol_version();
}
inline void DeviceProximityCallback::_internal_set_protocol_version(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  protocol_version_ = value;
}
inline void DeviceProximityCallback::set_protocol_version(int32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:securegcm.DeviceProximityCallback.protocol_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace securegcm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fproximity_5fpayloads_2eproto
