// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/passwordless_auth_payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fpasswordless_5fauth_5fpayloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fpasswordless_5fauth_5fpayloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fpasswordless_5fauth_5fpayloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fpasswordless_5fauth_5fpayloads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace securegcm {
class IdentityAssertion;
struct IdentityAssertionDefaultTypeInternal;
extern IdentityAssertionDefaultTypeInternal _IdentityAssertion_default_instance_;
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template<> ::securegcm::IdentityAssertion* Arena::CreateMaybeMessage<::securegcm::IdentityAssertion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace securegcm {

// ===================================================================

class IdentityAssertion final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.IdentityAssertion) */ {
 public:
  inline IdentityAssertion() : IdentityAssertion(nullptr) {}
  ~IdentityAssertion() override;
  explicit constexpr IdentityAssertion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentityAssertion(const IdentityAssertion& from);
  IdentityAssertion(IdentityAssertion&& from) noexcept
    : IdentityAssertion() {
    *this = ::std::move(from);
  }

  inline IdentityAssertion& operator=(const IdentityAssertion& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentityAssertion& operator=(IdentityAssertion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IdentityAssertion& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentityAssertion* internal_default_instance() {
    return reinterpret_cast<const IdentityAssertion*>(
               &_IdentityAssertion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdentityAssertion& a, IdentityAssertion& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentityAssertion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentityAssertion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentityAssertion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdentityAssertion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IdentityAssertion& from);
  void MergeFrom(const IdentityAssertion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentityAssertion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "securegcm.IdentityAssertion";
  }
  protected:
  explicit IdentityAssertion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserDataHashFieldNumber = 1,
    kCounterFieldNumber = 2,
    kUserApprovalFieldNumber = 3,
  };
  // optional bytes browser_data_hash = 1;
  bool has_browser_data_hash() const;
  private:
  bool _internal_has_browser_data_hash() const;
  public:
  void clear_browser_data_hash();
  const std::string& browser_data_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser_data_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser_data_hash();
  PROTOBUF_NODISCARD std::string* release_browser_data_hash();
  void set_allocated_browser_data_hash(std::string* browser_data_hash);
  private:
  const std::string& _internal_browser_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser_data_hash(const std::string& value);
  std::string* _internal_mutable_browser_data_hash();
  public:

  // optional int64 counter = 2;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  int64_t counter() const;
  void set_counter(int64_t value);
  private:
  int64_t _internal_counter() const;
  void _internal_set_counter(int64_t value);
  public:

  // optional int32 user_approval = 3;
  bool has_user_approval() const;
  private:
  bool _internal_has_user_approval() const;
  public:
  void clear_user_approval();
  int32_t user_approval() const;
  void set_user_approval(int32_t value);
  private:
  int32_t _internal_user_approval() const;
  void _internal_set_user_approval(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:securegcm.IdentityAssertion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_data_hash_;
  int64_t counter_;
  int32_t user_approval_;
  friend struct ::TableStruct_proto_2fpasswordless_5fauth_5fpayloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdentityAssertion

// optional bytes browser_data_hash = 1;
inline bool IdentityAssertion::_internal_has_browser_data_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IdentityAssertion::has_browser_data_hash() const {
  return _internal_has_browser_data_hash();
}
inline void IdentityAssertion::clear_browser_data_hash() {
  browser_data_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IdentityAssertion::browser_data_hash() const {
  // @@protoc_insertion_point(field_get:securegcm.IdentityAssertion.browser_data_hash)
  return _internal_browser_data_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IdentityAssertion::set_browser_data_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 browser_data_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.IdentityAssertion.browser_data_hash)
}
inline std::string* IdentityAssertion::mutable_browser_data_hash() {
  std::string* _s = _internal_mutable_browser_data_hash();
  // @@protoc_insertion_point(field_mutable:securegcm.IdentityAssertion.browser_data_hash)
  return _s;
}
inline const std::string& IdentityAssertion::_internal_browser_data_hash() const {
  return browser_data_hash_.Get();
}
inline void IdentityAssertion::_internal_set_browser_data_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  browser_data_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IdentityAssertion::_internal_mutable_browser_data_hash() {
  _has_bits_[0] |= 0x00000001u;
  return browser_data_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IdentityAssertion::release_browser_data_hash() {
  // @@protoc_insertion_point(field_release:securegcm.IdentityAssertion.browser_data_hash)
  if (!_internal_has_browser_data_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = browser_data_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_data_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    browser_data_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IdentityAssertion::set_allocated_browser_data_hash(std::string* browser_data_hash) {
  if (browser_data_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  browser_data_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), browser_data_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_data_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    browser_data_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.IdentityAssertion.browser_data_hash)
}

// optional int64 counter = 2;
inline bool IdentityAssertion::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IdentityAssertion::has_counter() const {
  return _internal_has_counter();
}
inline void IdentityAssertion::clear_counter() {
  counter_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t IdentityAssertion::_internal_counter() const {
  return counter_;
}
inline int64_t IdentityAssertion::counter() const {
  // @@protoc_insertion_point(field_get:securegcm.IdentityAssertion.counter)
  return _internal_counter();
}
inline void IdentityAssertion::_internal_set_counter(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  counter_ = value;
}
inline void IdentityAssertion::set_counter(int64_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:securegcm.IdentityAssertion.counter)
}

// optional int32 user_approval = 3;
inline bool IdentityAssertion::_internal_has_user_approval() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IdentityAssertion::has_user_approval() const {
  return _internal_has_user_approval();
}
inline void IdentityAssertion::clear_user_approval() {
  user_approval_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t IdentityAssertion::_internal_user_approval() const {
  return user_approval_;
}
inline int32_t IdentityAssertion::user_approval() const {
  // @@protoc_insertion_point(field_get:securegcm.IdentityAssertion.user_approval)
  return _internal_user_approval();
}
inline void IdentityAssertion::_internal_set_user_approval(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  user_approval_ = value;
}
inline void IdentityAssertion::set_user_approval(int32_t value) {
  _internal_set_user_approval(value);
  // @@protoc_insertion_point(field_set:securegcm.IdentityAssertion.user_approval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace securegcm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fpasswordless_5fauth_5fpayloads_2eproto
