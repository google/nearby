
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__login_session_client_glue_h__proxy__H__
#define __sdbuscpp__login_session_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace login1 {

class Session_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.login1.Session";

protected:
    Session_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("PauseDevice").onInterface(INTERFACE_NAME).call([this](const uint32_t& major, const uint32_t& minor, const std::string& type){ this->onPauseDevice(major, minor, type); });
        proxy_.uponSignal("ResumeDevice").onInterface(INTERFACE_NAME).call([this](const uint32_t& major, const uint32_t& minor, const sdbus::UnixFd& fd){ this->onResumeDevice(major, minor, fd); });
        proxy_.uponSignal("Lock").onInterface(INTERFACE_NAME).call([this](){ this->onLock(); });
        proxy_.uponSignal("Unlock").onInterface(INTERFACE_NAME).call([this](){ this->onUnlock(); });
    }

    ~Session_proxy() = default;

    virtual void onPauseDevice(const uint32_t& major, const uint32_t& minor, const std::string& type) = 0;
    virtual void onResumeDevice(const uint32_t& major, const uint32_t& minor, const sdbus::UnixFd& fd) = 0;
    virtual void onLock() = 0;
    virtual void onUnlock() = 0;

public:
    void Terminate()
    {
        proxy_.callMethod("Terminate").onInterface(INTERFACE_NAME);
    }

    void Activate()
    {
        proxy_.callMethod("Activate").onInterface(INTERFACE_NAME);
    }

    void Lock()
    {
        proxy_.callMethod("Lock").onInterface(INTERFACE_NAME);
    }

    void Unlock()
    {
        proxy_.callMethod("Unlock").onInterface(INTERFACE_NAME);
    }

    void SetIdleHint(const bool& idle)
    {
        proxy_.callMethod("SetIdleHint").onInterface(INTERFACE_NAME).withArguments(idle);
    }

    void SetLockedHint(const bool& locked)
    {
        proxy_.callMethod("SetLockedHint").onInterface(INTERFACE_NAME).withArguments(locked);
    }

    void Kill(const std::string& who, const int32_t& signal_number)
    {
        proxy_.callMethod("Kill").onInterface(INTERFACE_NAME).withArguments(who, signal_number);
    }

    void TakeControl(const bool& force)
    {
        proxy_.callMethod("TakeControl").onInterface(INTERFACE_NAME).withArguments(force);
    }

    void ReleaseControl()
    {
        proxy_.callMethod("ReleaseControl").onInterface(INTERFACE_NAME);
    }

    void SetType(const std::string& type)
    {
        proxy_.callMethod("SetType").onInterface(INTERFACE_NAME).withArguments(type);
    }

    void SetDisplay(const std::string& display)
    {
        proxy_.callMethod("SetDisplay").onInterface(INTERFACE_NAME).withArguments(display);
    }

    void SetTTY(const sdbus::UnixFd& tty_fd)
    {
        proxy_.callMethod("SetTTY").onInterface(INTERFACE_NAME).withArguments(tty_fd);
    }

    std::tuple<sdbus::UnixFd, bool> TakeDevice(const uint32_t& major, const uint32_t& minor)
    {
        std::tuple<sdbus::UnixFd, bool> result;
        proxy_.callMethod("TakeDevice").onInterface(INTERFACE_NAME).withArguments(major, minor).storeResultsTo(result);
        return result;
    }

    void ReleaseDevice(const uint32_t& major, const uint32_t& minor)
    {
        proxy_.callMethod("ReleaseDevice").onInterface(INTERFACE_NAME).withArguments(major, minor);
    }

    void PauseDeviceComplete(const uint32_t& major, const uint32_t& minor)
    {
        proxy_.callMethod("PauseDeviceComplete").onInterface(INTERFACE_NAME).withArguments(major, minor);
    }

    void SetBrightness(const std::string& subsystem, const std::string& name, const uint32_t& brightness)
    {
        proxy_.callMethod("SetBrightness").onInterface(INTERFACE_NAME).withArguments(subsystem, name, brightness);
    }

public:
    std::string Id()
    {
        return proxy_.getProperty("Id").onInterface(INTERFACE_NAME);
    }

    sdbus::Struct<uint32_t, sdbus::ObjectPath> User()
    {
        return proxy_.getProperty("User").onInterface(INTERFACE_NAME);
    }

    std::string Name()
    {
        return proxy_.getProperty("Name").onInterface(INTERFACE_NAME);
    }

    uint64_t Timestamp()
    {
        return proxy_.getProperty("Timestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t TimestampMonotonic()
    {
        return proxy_.getProperty("TimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint32_t VTNr()
    {
        return proxy_.getProperty("VTNr").onInterface(INTERFACE_NAME);
    }

    sdbus::Struct<std::string, sdbus::ObjectPath> Seat()
    {
        return proxy_.getProperty("Seat").onInterface(INTERFACE_NAME);
    }

    std::string TTY()
    {
        return proxy_.getProperty("TTY").onInterface(INTERFACE_NAME);
    }

    std::string Display()
    {
        return proxy_.getProperty("Display").onInterface(INTERFACE_NAME);
    }

    bool Remote()
    {
        return proxy_.getProperty("Remote").onInterface(INTERFACE_NAME);
    }

    std::string RemoteHost()
    {
        return proxy_.getProperty("RemoteHost").onInterface(INTERFACE_NAME);
    }

    std::string RemoteUser()
    {
        return proxy_.getProperty("RemoteUser").onInterface(INTERFACE_NAME);
    }

    std::string Service()
    {
        return proxy_.getProperty("Service").onInterface(INTERFACE_NAME);
    }

    std::string Desktop()
    {
        return proxy_.getProperty("Desktop").onInterface(INTERFACE_NAME);
    }

    std::string Scope()
    {
        return proxy_.getProperty("Scope").onInterface(INTERFACE_NAME);
    }

    uint32_t Leader()
    {
        return proxy_.getProperty("Leader").onInterface(INTERFACE_NAME);
    }

    uint32_t Audit()
    {
        return proxy_.getProperty("Audit").onInterface(INTERFACE_NAME);
    }

    std::string Type()
    {
        return proxy_.getProperty("Type").onInterface(INTERFACE_NAME);
    }

    std::string Class()
    {
        return proxy_.getProperty("Class").onInterface(INTERFACE_NAME);
    }

    bool Active()
    {
        return proxy_.getProperty("Active").onInterface(INTERFACE_NAME);
    }

    std::string State()
    {
        return proxy_.getProperty("State").onInterface(INTERFACE_NAME);
    }

    bool IdleHint()
    {
        return proxy_.getProperty("IdleHint").onInterface(INTERFACE_NAME);
    }

    uint64_t IdleSinceHint()
    {
        return proxy_.getProperty("IdleSinceHint").onInterface(INTERFACE_NAME);
    }

    uint64_t IdleSinceHintMonotonic()
    {
        return proxy_.getProperty("IdleSinceHintMonotonic").onInterface(INTERFACE_NAME);
    }

    bool LockedHint()
    {
        return proxy_.getProperty("LockedHint").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
