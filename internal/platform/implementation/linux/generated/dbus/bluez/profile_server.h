
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__bluez_profile_glue_h__adaptor__H__
#define __sdbuscpp__bluez_profile_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Profile1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.Profile1";

protected:
    Profile1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Release").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Release(); });
        object_.registerMethod("NewConnection").onInterface(INTERFACE_NAME).withInputParamNames("device", "fd", "fd_properties").implementedAs([this](const sdbus::ObjectPath& device, const sdbus::UnixFd& fd, const std::map<std::string, sdbus::Variant>& fd_properties){ return this->NewConnection(device, fd, fd_properties); });
        object_.registerMethod("RequestDisconnection").onInterface(INTERFACE_NAME).withInputParamNames("device").implementedAs([this](const sdbus::ObjectPath& device){ return this->RequestDisconnection(device); });
    }

    ~Profile1_adaptor() = default;

private:
    virtual void Release() = 0;
    virtual void NewConnection(const sdbus::ObjectPath& device, const sdbus::UnixFd& fd, const std::map<std::string, sdbus::Variant>& fd_properties) = 0;
    virtual void RequestDisconnection(const sdbus::ObjectPath& device) = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
