
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__advertisement_monitor_server_h__adaptor__H__
#define __sdbuscpp__advertisement_monitor_server_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class AdvertisementMonitor1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.AdvertisementMonitor1";

protected:
    AdvertisementMonitor1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Release").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Release(); });
        object_.registerMethod("Activate").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Activate(); });
        object_.registerMethod("DeviceFound").onInterface(INTERFACE_NAME).withInputParamNames("device").implementedAs([this](const sdbus::ObjectPath& device){ return this->DeviceFound(device); });
        object_.registerMethod("DeviceLost").onInterface(INTERFACE_NAME).withInputParamNames("device").implementedAs([this](const sdbus::ObjectPath& device){ return this->DeviceLost(device); });
        object_.registerProperty("Type").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Type(); });
        object_.registerProperty("RSSILowThreshold").onInterface(INTERFACE_NAME).withGetter([this](){ return this->RSSILowThreshold(); });
        object_.registerProperty("RSSIHighThreshold").onInterface(INTERFACE_NAME).withGetter([this](){ return this->RSSIHighThreshold(); });
        object_.registerProperty("RSSISamplingPeriod").onInterface(INTERFACE_NAME).withGetter([this](){ return this->RSSISamplingPeriod(); });
        object_.registerProperty("Patterns").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Patterns(); });
    }

    ~AdvertisementMonitor1_adaptor() = default;

private:
    virtual void Release() = 0;
    virtual void Activate() = 0;
    virtual void DeviceFound(const sdbus::ObjectPath& device) = 0;
    virtual void DeviceLost(const sdbus::ObjectPath& device) = 0;

private:
    virtual std::string Type() = 0;
    virtual int16_t RSSILowThreshold() = 0;
    virtual int16_t RSSIHighThreshold() = 0;
    virtual uint16_t RSSISamplingPeriod() = 0;
    virtual std::vector<sdbus::Struct<uint8_t, uint8_t, std::vector<uint8_t>>> Patterns() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
