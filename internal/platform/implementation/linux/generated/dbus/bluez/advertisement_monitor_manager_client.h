
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__advertisement_monitor_manager_client_h__proxy__H__
#define __sdbuscpp__advertisement_monitor_manager_client_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class AdvertisementMonitorManager1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.AdvertisementMonitorManager1";

protected:
    AdvertisementMonitorManager1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~AdvertisementMonitorManager1_proxy() = default;

public:
    void RegisterMonitor(const sdbus::ObjectPath& application)
    {
        proxy_.callMethod("RegisterMonitor").onInterface(INTERFACE_NAME).withArguments(application);
    }

    void UnregisterMonitor(const sdbus::ObjectPath& application)
    {
        proxy_.callMethod("UnregisterMonitor").onInterface(INTERFACE_NAME).withArguments(application);
    }

public:
    std::vector<std::string> SupportedMonitorTypes()
    {
        return proxy_.getProperty("SupportedMonitorTypes").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> SupportedFeatures()
    {
        return proxy_.getProperty("SupportedFeatures").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
