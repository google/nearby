
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__gatt_characteristic_client_h__proxy__H__
#define __sdbuscpp__gatt_characteristic_client_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class GattCharacteristic1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.GattCharacteristic1";

protected:
    GattCharacteristic1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~GattCharacteristic1_proxy() = default;

public:
    std::vector<uint8_t> ReadValue(const std::map<std::string, sdbus::Variant>& options)
    {
        std::vector<uint8_t> result;
        proxy_.callMethod("ReadValue").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    void WriteValue(const std::vector<uint8_t>& value, const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("WriteValue").onInterface(INTERFACE_NAME).withArguments(value, options);
    }

    std::tuple<sdbus::UnixFd, uint16_t> AcquireWrite(const std::map<std::string, sdbus::Variant>& options)
    {
        std::tuple<sdbus::UnixFd, uint16_t> result;
        proxy_.callMethod("AcquireWrite").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    std::tuple<sdbus::UnixFd, uint16_t> AcquireNotify(const std::map<std::string, sdbus::Variant>& options)
    {
        std::tuple<sdbus::UnixFd, uint16_t> result;
        proxy_.callMethod("AcquireNotify").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    void StartNotify()
    {
        proxy_.callMethod("StartNotify").onInterface(INTERFACE_NAME);
    }

    void StopNotify()
    {
        proxy_.callMethod("StopNotify").onInterface(INTERFACE_NAME);
    }

public:
    uint16_t Handle()
    {
        return proxy_.getProperty("Handle").onInterface(INTERFACE_NAME);
    }

    std::string UUID()
    {
        return proxy_.getProperty("UUID").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Service()
    {
        return proxy_.getProperty("Service").onInterface(INTERFACE_NAME);
    }

    std::vector<uint8_t> Value()
    {
        return proxy_.getProperty("Value").onInterface(INTERFACE_NAME);
    }

    bool Notifying()
    {
        return proxy_.getProperty("Notifying").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> Flags()
    {
        return proxy_.getProperty("Flags").onInterface(INTERFACE_NAME);
    }

    bool WriteAcquired()
    {
        return proxy_.getProperty("WriteAcquired").onInterface(INTERFACE_NAME);
    }

    bool NotifyAcquired()
    {
        return proxy_.getProperty("NotifyAcquired").onInterface(INTERFACE_NAME);
    }

    uint16_t MTU()
    {
        return proxy_.getProperty("MTU").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
