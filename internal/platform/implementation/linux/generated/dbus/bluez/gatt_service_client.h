
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__gatt_service_client_h__proxy__H__
#define __sdbuscpp__gatt_service_client_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class GattService1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.GattService1";

protected:
    GattService1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~GattService1_proxy() = default;

public:
    std::string UUID()
    {
        return proxy_.getProperty("UUID").onInterface(INTERFACE_NAME);
    }

    bool Primary()
    {
        return proxy_.getProperty("Primary").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Device()
    {
        return proxy_.getProperty("Device").onInterface(INTERFACE_NAME);
    }

    std::vector<sdbus::ObjectPath> Includes()
    {
        return proxy_.getProperty("Includes").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
