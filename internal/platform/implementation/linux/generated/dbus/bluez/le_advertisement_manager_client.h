
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__generated_dbus_bluez_le_advertisement_manager_client_h__proxy__H__
#define __sdbuscpp__generated_dbus_bluez_le_advertisement_manager_client_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class LEAdvertisingManager1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.LEAdvertisingManager1";

protected:
    LEAdvertisingManager1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~LEAdvertisingManager1_proxy() = default;

public:
    void RegisterAdvertisement(const sdbus::ObjectPath& advertisement, const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("RegisterAdvertisement").onInterface(INTERFACE_NAME).withArguments(advertisement, options);
    }

    void UnregisterAdvertisement(const sdbus::ObjectPath& service)
    {
        proxy_.callMethod("UnregisterAdvertisement").onInterface(INTERFACE_NAME).withArguments(service);
    }

public:
    uint8_t ActiveInstances()
    {
        return proxy_.getProperty("ActiveInstances").onInterface(INTERFACE_NAME);
    }

    uint8_t SupportedInstances()
    {
        return proxy_.getProperty("SupportedInstances").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> SupportedIncludes()
    {
        return proxy_.getProperty("SupportedIncludes").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> SupportedSecondaryChannels()
    {
        return proxy_.getProperty("SupportedSecondaryChannels").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> SupportedFeatures()
    {
        return proxy_.getProperty("SupportedFeatures").onInterface(INTERFACE_NAME);
    }

    std::map<std::string, sdbus::Variant> SupportedCapabilities()
    {
        return proxy_.getProperty("SupportedCapabilities").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
