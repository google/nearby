
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__generated_dbus_bluez_le_advertisement_server_h__adaptor__H__
#define __sdbuscpp__generated_dbus_bluez_le_advertisement_server_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class LEAdvertisement1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.LEAdvertisement1";

protected:
    LEAdvertisement1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Release").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Release(); });
        object_.registerProperty("Type").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Type(); });
        object_.registerProperty("ServiceUUIDs").onInterface(INTERFACE_NAME).withGetter([this](){ return this->ServiceUUIDs(); });
        object_.registerProperty("ManufacturerData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->ManufacturerData(); });
        object_.registerProperty("SolicitUUIDs").onInterface(INTERFACE_NAME).withGetter([this](){ return this->SolicitUUIDs(); });
        object_.registerProperty("ServiceData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->ServiceData(); });
        object_.registerProperty("Includes").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Includes(); });
        object_.registerProperty("LocalName").onInterface(INTERFACE_NAME).withGetter([this](){ return this->LocalName(); });
        object_.registerProperty("Duration").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Duration(); });
        object_.registerProperty("Timeout").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Timeout(); });
        object_.registerProperty("MinInterval").onInterface(INTERFACE_NAME).withGetter([this](){ return this->MinInterval(); });
        object_.registerProperty("MaxInterval").onInterface(INTERFACE_NAME).withGetter([this](){ return this->MaxInterval(); });
        object_.registerProperty("TxPower").onInterface(INTERFACE_NAME).withGetter([this](){ return this->TxPower(); });
    }

    ~LEAdvertisement1_adaptor() = default;

private:
    virtual void Release() = 0;

private:
    virtual std::string Type() = 0;
    virtual std::vector<std::string> ServiceUUIDs() = 0;
    virtual std::map<std::string, sdbus::Variant> ManufacturerData() = 0;
    virtual std::vector<std::string> SolicitUUIDs() = 0;
    virtual std::map<std::string, sdbus::Variant> ServiceData() = 0;
    virtual std::vector<std::string> Includes() = 0;
    virtual std::string LocalName() = 0;
    virtual uint16_t Duration() = 0;
    virtual uint16_t Timeout() = 0;
    virtual uint32_t MinInterval() = 0;
    virtual uint32_t MaxInterval() = 0;
    virtual int16_t TxPower() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
