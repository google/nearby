
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__networkmanager_connection_active_client_glue_h__proxy__H__
#define __sdbuscpp__networkmanager_connection_active_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Connection {

class Active_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.Connection.Active";

protected:
    Active_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("StateChanged").onInterface(INTERFACE_NAME).call([this](const uint32_t& state, const uint32_t& reason){ this->onStateChanged(state, reason); });
    }

    ~Active_proxy() = default;

    virtual void onStateChanged(const uint32_t& state, const uint32_t& reason) = 0;

public:
    sdbus::ObjectPath Connection()
    {
        return proxy_.getProperty("Connection").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath SpecificObject()
    {
        return proxy_.getProperty("SpecificObject").onInterface(INTERFACE_NAME);
    }

    std::string Id()
    {
        return proxy_.getProperty("Id").onInterface(INTERFACE_NAME);
    }

    std::string Uuid()
    {
        return proxy_.getProperty("Uuid").onInterface(INTERFACE_NAME);
    }

    std::string Type()
    {
        return proxy_.getProperty("Type").onInterface(INTERFACE_NAME);
    }

    std::vector<sdbus::ObjectPath> Devices()
    {
        return proxy_.getProperty("Devices").onInterface(INTERFACE_NAME);
    }

    uint32_t State()
    {
        return proxy_.getProperty("State").onInterface(INTERFACE_NAME);
    }

    uint32_t StateFlags()
    {
        return proxy_.getProperty("StateFlags").onInterface(INTERFACE_NAME);
    }

    bool Default()
    {
        return proxy_.getProperty("Default").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Ip4Config()
    {
        return proxy_.getProperty("Ip4Config").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Dhcp4Config()
    {
        return proxy_.getProperty("Dhcp4Config").onInterface(INTERFACE_NAME);
    }

    bool Default6()
    {
        return proxy_.getProperty("Default6").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Ip6Config()
    {
        return proxy_.getProperty("Ip6Config").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Dhcp6Config()
    {
        return proxy_.getProperty("Dhcp6Config").onInterface(INTERFACE_NAME);
    }

    bool Vpn()
    {
        return proxy_.getProperty("Vpn").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Controller()
    {
        return proxy_.getProperty("Controller").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Master()
    {
        return proxy_.getProperty("Master").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
