
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__networkmanager_device_wifip2p_client_glue_h__proxy__H__
#define __sdbuscpp__networkmanager_device_wifip2p_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Device {

class WifiP2P_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.Device.WifiP2P";

protected:
    WifiP2P_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("PeerAdded").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& peer){ this->onPeerAdded(peer); });
        proxy_.uponSignal("PeerRemoved").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& peer){ this->onPeerRemoved(peer); });
    }

    ~WifiP2P_proxy() = default;

    virtual void onPeerAdded(const sdbus::ObjectPath& peer) = 0;
    virtual void onPeerRemoved(const sdbus::ObjectPath& peer) = 0;

public:
    void StartFind(const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("StartFind").onInterface(INTERFACE_NAME).withArguments(options);
    }

    void StopFind()
    {
        proxy_.callMethod("StopFind").onInterface(INTERFACE_NAME);
    }

public:
    std::string HwAddress()
    {
        return proxy_.getProperty("HwAddress").onInterface(INTERFACE_NAME);
    }

    std::vector<sdbus::ObjectPath> Peers()
    {
        return proxy_.getProperty("Peers").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
