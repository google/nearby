
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__org_freedesktop_logcontrol_server_glue_h__adaptor__H__
#define __sdbuscpp__org_freedesktop_logcontrol_server_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {

class LogControl1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.LogControl1";

protected:
    LogControl1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerProperty("LogLevel").onInterface(INTERFACE_NAME).withGetter([this](){ return this->LogLevel(); }).withSetter([this](const std::string& value){ this->LogLevel(value); }).withUpdateBehavior(sdbus::Flags::EMITS_NO_SIGNAL).markAsPrivileged();
        object_.registerProperty("LogTarget").onInterface(INTERFACE_NAME).withGetter([this](){ return this->LogTarget(); }).withSetter([this](const std::string& value){ this->LogTarget(value); }).withUpdateBehavior(sdbus::Flags::EMITS_NO_SIGNAL).markAsPrivileged();
        object_.registerProperty("SyslogIdentifier").onInterface(INTERFACE_NAME).withGetter([this](){ return this->SyslogIdentifier(); }).withUpdateBehavior(sdbus::Flags::EMITS_NO_SIGNAL);
    }

    ~LogControl1_adaptor() = default;

private:
    virtual std::string LogLevel() = 0;
    virtual void LogLevel(const std::string& value) = 0;
    virtual std::string LogTarget() = 0;
    virtual void LogTarget(const std::string& value) = 0;
    virtual std::string SyslogIdentifier() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
