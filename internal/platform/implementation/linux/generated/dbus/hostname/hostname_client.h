
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__hostname_client_glue_h__proxy__H__
#define __sdbuscpp__hostname_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {

class hostname1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.hostname1";

protected:
    hostname1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~hostname1_proxy() = default;

public:
    void SetHostname(const std::string& hostname, const bool& interactive)
    {
        proxy_.callMethod("SetHostname").onInterface(INTERFACE_NAME).withArguments(hostname, interactive);
    }

    void SetStaticHostname(const std::string& hostname, const bool& interactive)
    {
        proxy_.callMethod("SetStaticHostname").onInterface(INTERFACE_NAME).withArguments(hostname, interactive);
    }

    void SetPrettyHostname(const std::string& hostname, const bool& interactive)
    {
        proxy_.callMethod("SetPrettyHostname").onInterface(INTERFACE_NAME).withArguments(hostname, interactive);
    }

    void SetIconName(const std::string& icon, const bool& interactive)
    {
        proxy_.callMethod("SetIconName").onInterface(INTERFACE_NAME).withArguments(icon, interactive);
    }

    void SetChassis(const std::string& chassis, const bool& interactive)
    {
        proxy_.callMethod("SetChassis").onInterface(INTERFACE_NAME).withArguments(chassis, interactive);
    }

    void SetDeployment(const std::string& deployment, const bool& interactive)
    {
        proxy_.callMethod("SetDeployment").onInterface(INTERFACE_NAME).withArguments(deployment, interactive);
    }

    void SetLocation(const std::string& location, const bool& interactive)
    {
        proxy_.callMethod("SetLocation").onInterface(INTERFACE_NAME).withArguments(location, interactive);
    }

    std::vector<uint8_t> GetProductUUID(const bool& interactive)
    {
        std::vector<uint8_t> result;
        proxy_.callMethod("GetProductUUID").onInterface(INTERFACE_NAME).withArguments(interactive).storeResultsTo(result);
        return result;
    }

    std::string GetHardwareSerial()
    {
        std::string result;
        proxy_.callMethod("GetHardwareSerial").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::string Describe()
    {
        std::string result;
        proxy_.callMethod("Describe").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

public:
    std::string Hostname()
    {
        return proxy_.getProperty("Hostname").onInterface(INTERFACE_NAME);
    }

    std::string StaticHostname()
    {
        return proxy_.getProperty("StaticHostname").onInterface(INTERFACE_NAME);
    }

    std::string PrettyHostname()
    {
        return proxy_.getProperty("PrettyHostname").onInterface(INTERFACE_NAME);
    }

    std::string DefaultHostname()
    {
        return proxy_.getProperty("DefaultHostname").onInterface(INTERFACE_NAME);
    }

    std::string HostnameSource()
    {
        return proxy_.getProperty("HostnameSource").onInterface(INTERFACE_NAME);
    }

    std::string IconName()
    {
        return proxy_.getProperty("IconName").onInterface(INTERFACE_NAME);
    }

    std::string Chassis()
    {
        return proxy_.getProperty("Chassis").onInterface(INTERFACE_NAME);
    }

    std::string Deployment()
    {
        return proxy_.getProperty("Deployment").onInterface(INTERFACE_NAME);
    }

    std::string Location()
    {
        return proxy_.getProperty("Location").onInterface(INTERFACE_NAME);
    }

    std::string KernelName()
    {
        return proxy_.getProperty("KernelName").onInterface(INTERFACE_NAME);
    }

    std::string KernelRelease()
    {
        return proxy_.getProperty("KernelRelease").onInterface(INTERFACE_NAME);
    }

    std::string KernelVersion()
    {
        return proxy_.getProperty("KernelVersion").onInterface(INTERFACE_NAME);
    }

    std::string OperatingSystemPrettyName()
    {
        return proxy_.getProperty("OperatingSystemPrettyName").onInterface(INTERFACE_NAME);
    }

    std::string OperatingSystemCPEName()
    {
        return proxy_.getProperty("OperatingSystemCPEName").onInterface(INTERFACE_NAME);
    }

    uint64_t OperatingSystemSupportEnd()
    {
        return proxy_.getProperty("OperatingSystemSupportEnd").onInterface(INTERFACE_NAME);
    }

    std::string HomeURL()
    {
        return proxy_.getProperty("HomeURL").onInterface(INTERFACE_NAME);
    }

    std::string HardwareVendor()
    {
        return proxy_.getProperty("HardwareVendor").onInterface(INTERFACE_NAME);
    }

    std::string HardwareModel()
    {
        return proxy_.getProperty("HardwareModel").onInterface(INTERFACE_NAME);
    }

    std::string FirmwareVersion()
    {
        return proxy_.getProperty("FirmwareVersion").onInterface(INTERFACE_NAME);
    }

    std::string FirmwareVendor()
    {
        return proxy_.getProperty("FirmwareVendor").onInterface(INTERFACE_NAME);
    }

    uint64_t FirmwareDate()
    {
        return proxy_.getProperty("FirmwareDate").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
