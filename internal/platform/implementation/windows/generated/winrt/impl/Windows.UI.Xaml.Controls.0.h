// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.220912.1

#pragma once
#ifndef WINRT_Windows_UI_Xaml_Controls_0_H
#define WINRT_Windows_UI_Xaml_Controls_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Contacts
{
    struct Contact;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::DataTransfer
{
    struct DataPackage;
    enum class DataPackageOperation : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Search
{
    struct LocalContentSuggestionSettings;
    struct SearchQueryLinguisticDetails;
    struct SearchSuggestionsRequest;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Deferral;
    template <typename T> struct __declspec(empty_bases) EventHandler;
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename T> struct __declspec(empty_bases) IReference;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IIterable;
    template <typename T> struct __declspec(empty_bases) IObservableVector;
    struct IPropertySet;
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::Globalization
{
    enum class DayOfWeek : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Media::Capture
{
    struct MediaCapture;
}
WINRT_EXPORT namespace winrt::Windows::Media::Casting
{
    struct CastingSource;
}
WINRT_EXPORT namespace winrt::Windows::Media::Core
{
    struct IMediaSource;
}
WINRT_EXPORT namespace winrt::Windows::Media::PlayTo
{
    struct PlayToSource;
}
WINRT_EXPORT namespace winrt::Windows::Media::Playback
{
    struct IMediaPlaybackSource;
    struct MediaPlayer;
}
WINRT_EXPORT namespace winrt::Windows::Media::Protection
{
    struct MediaProtectionManager;
}
WINRT_EXPORT namespace winrt::Windows::Storage::Streams
{
    struct IRandomAccessStream;
}
WINRT_EXPORT namespace winrt::Windows::System
{
    enum class VirtualKeyModifiers : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct CompositionBrush;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CoreIndependentInputSource;
    enum class CoreInputDeviceTypes : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Input::Inking
{
    struct InkDrawingAttributes;
    struct InkPresenter;
    struct InkPresenterProtractor;
    struct InkPresenterRuler;
}
WINRT_EXPORT namespace winrt::Windows::UI::Text
{
    struct ContentLinkInfo;
    enum class FontStretch : int32_t;
    enum class FontStyle : int32_t;
    struct FontWeight;
    struct ITextDocument;
    struct RichEditTextDocument;
    enum class TextDecorations : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml
{
    struct BrushTransition;
    struct CornerRadius;
    struct DataTemplate;
    struct DependencyObject;
    struct DependencyObjectCollection;
    struct DependencyProperty;
    struct DependencyPropertyChangedEventHandler;
    struct DragEventArgs;
    struct Duration;
    enum class ElementSoundMode : int32_t;
    struct ExceptionRoutedEventHandler;
    enum class FocusState : int32_t;
    struct FrameworkElement;
    struct GridLength;
    enum class HorizontalAlignment : int32_t;
    enum class LineStackingStrategy : int32_t;
    enum class OpticalMarginAlignment : int32_t;
    struct RoutedEventArgs;
    struct RoutedEventHandler;
    struct Style;
    enum class TextAlignment : int32_t;
    enum class TextLineBounds : int32_t;
    enum class TextReadingOrder : int32_t;
    enum class TextTrimming : int32_t;
    enum class TextWrapping : int32_t;
    struct Thickness;
    struct UIElement;
    enum class VerticalAlignment : int32_t;
    enum class Visibility : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls::Primitives
{
    struct AppBarButtonTemplateSettings;
    struct AppBarTemplateSettings;
    struct AppBarToggleButtonTemplateSettings;
    struct CalendarViewTemplateSettings;
    struct ComboBoxTemplateSettings;
    struct CommandBarTemplateSettings;
    struct FlyoutBase;
    enum class GeneratorDirection : int32_t;
    struct GeneratorPosition;
    struct GridViewItemTemplateSettings;
    enum class GroupHeaderPlacement : int32_t;
    struct ItemsChangedEventArgs;
    struct ItemsChangedEventHandler;
    struct ListViewItemTemplateSettings;
    struct MenuFlyoutItemTemplateSettings;
    struct MenuFlyoutPresenterTemplateSettings;
    enum class PlacementMode : int32_t;
    struct ProgressBarTemplateSettings;
    struct ProgressRingTemplateSettings;
    struct SelectorItem;
    struct SettingsFlyoutTemplateSettings;
    enum class SliderSnapsTo : int32_t;
    enum class SnapPointsAlignment : int32_t;
    struct SplitViewTemplateSettings;
    enum class TickPlacement : int32_t;
    struct ToggleSwitchTemplateSettings;
    struct ToolTipTemplateSettings;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data
{
    struct IValueConverter;
    struct ItemIndexRange;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Documents
{
    struct BlockCollection;
    struct ContentLinkInvokedEventArgs;
    struct ContentLinkProviderCollection;
    struct InlineCollection;
    struct TextPointer;
    struct TextRange;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Input
{
    struct CharacterReceivedRoutedEventArgs;
    struct DoubleTappedRoutedEventArgs;
    struct HoldingRoutedEventArgs;
    struct ICommand;
    struct InputScope;
    struct KeyRoutedEventArgs;
    enum class KeyboardNavigationMode : int32_t;
    struct ManipulationCompletedRoutedEventArgs;
    struct ManipulationDeltaRoutedEventArgs;
    struct ManipulationInertiaStartingRoutedEventArgs;
    struct ManipulationStartedRoutedEventArgs;
    struct ManipulationStartingRoutedEventArgs;
    struct PointerRoutedEventArgs;
    struct RightTappedRoutedEventArgs;
    struct TappedRoutedEventArgs;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop
{
    struct TypeName;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media
{
    enum class AudioCategory : int32_t;
    enum class AudioDeviceType : int32_t;
    struct Brush;
    enum class FastPlayFallbackBehaviour : int32_t;
    struct FontFamily;
    struct Geometry;
    struct ImageSource;
    enum class MediaCanPlayResponse : int32_t;
    enum class MediaElementState : int32_t;
    struct MediaTransportControlsThumbnailRequestedEventArgs;
    struct PartialMediaFailureDetectedEventArgs;
    struct RateChangedRoutedEventHandler;
    struct SolidColorBrush;
    enum class Stereo3DVideoPackingMode : int32_t;
    enum class Stereo3DVideoRenderMode : int32_t;
    enum class Stretch : int32_t;
    struct TimelineMarkerCollection;
    struct TimelineMarkerRoutedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Animation
{
    struct ConnectedAnimation;
    struct NavigationTransitionInfo;
    struct TransitionCollection;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Navigation
{
    struct FrameNavigationOptions;
    struct LoadCompletedEventHandler;
    struct NavigatedEventHandler;
    struct NavigatingCancelEventArgs;
    struct NavigatingCancelEventHandler;
    enum class NavigationCacheMode : int32_t;
    struct NavigationEventArgs;
    struct NavigationFailedEventHandler;
    struct NavigationStoppedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Web
{
    struct IUriToStreamResolver;
    enum class WebErrorStatus : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Web::Http
{
    struct HttpRequestMessage;
    struct HttpResponseMessage;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls
{
    enum class AppBarClosedDisplayMode : int32_t
    {
        Compact = 0,
        Minimal = 1,
        Hidden = 2,
    };
    enum class AutoSuggestionBoxTextChangeReason : int32_t
    {
        UserInput = 0,
        ProgrammaticChange = 1,
        SuggestionChosen = 2,
    };
    enum class BackgroundSizing : int32_t
    {
        InnerBorderEdge = 0,
        OuterBorderEdge = 1,
    };
    enum class CalendarViewDisplayMode : int32_t
    {
        Month = 0,
        Year = 1,
        Decade = 2,
    };
    enum class CalendarViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class CandidateWindowAlignment : int32_t
    {
        Default = 0,
        BottomEdge = 1,
    };
    enum class CharacterCasing : int32_t
    {
        Normal = 0,
        Lower = 1,
        Upper = 2,
    };
    enum class ClickMode : int32_t
    {
        Release = 0,
        Press = 1,
        Hover = 2,
    };
    enum class ColorPickerHsvChannel : int32_t
    {
        Hue = 0,
        Saturation = 1,
        Value = 2,
        Alpha = 3,
    };
    enum class ColorSpectrumComponents : int32_t
    {
        HueValue = 0,
        ValueHue = 1,
        HueSaturation = 2,
        SaturationHue = 3,
        SaturationValue = 4,
        ValueSaturation = 5,
    };
    enum class ColorSpectrumShape : int32_t
    {
        Box = 0,
        Ring = 1,
    };
    enum class ComboBoxSelectionChangedTrigger : int32_t
    {
        Committed = 0,
        Always = 1,
    };
    enum class CommandBarDefaultLabelPosition : int32_t
    {
        Bottom = 0,
        Right = 1,
        Collapsed = 2,
    };
    enum class CommandBarDynamicOverflowAction : int32_t
    {
        AddingToOverflow = 0,
        RemovingFromOverflow = 1,
    };
    enum class CommandBarLabelPosition : int32_t
    {
        Default = 0,
        Collapsed = 1,
    };
    enum class CommandBarOverflowButtonVisibility : int32_t
    {
        Auto = 0,
        Visible = 1,
        Collapsed = 2,
    };
    enum class ContentDialogButton : int32_t
    {
        None = 0,
        Primary = 1,
        Secondary = 2,
        Close = 3,
    };
    enum class ContentDialogPlacement : int32_t
    {
        Popup = 0,
        InPlace = 1,
    };
    enum class ContentDialogResult : int32_t
    {
        None = 0,
        Primary = 1,
        Secondary = 2,
    };
    enum class ContentLinkChangeKind : int32_t
    {
        Inserted = 0,
        Removed = 1,
        Edited = 2,
    };
    enum class DisabledFormattingAccelerators : uint32_t
    {
        None = 0,
        Bold = 0x1,
        Italic = 0x2,
        Underline = 0x4,
        All = 0xffffffff,
    };
    enum class HandwritingPanelPlacementAlignment : int32_t
    {
        Auto = 0,
        TopLeft = 1,
        TopRight = 2,
        BottomLeft = 3,
        BottomRight = 4,
    };
    enum class IncrementalLoadingTrigger : int32_t
    {
        None = 0,
        Edge = 1,
    };
    enum class InkToolbarButtonFlyoutPlacement : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
        Left = 3,
        Right = 4,
    };
    enum class InkToolbarFlyoutItemKind : int32_t
    {
        Simple = 0,
        Radio = 1,
        Check = 2,
        RadioCheck = 3,
    };
    enum class InkToolbarInitialControls : int32_t
    {
        All = 0,
        None = 1,
        PensOnly = 2,
        AllExceptPens = 3,
    };
    enum class InkToolbarMenuKind : int32_t
    {
        Stencil = 0,
    };
    enum class InkToolbarStencilKind : int32_t
    {
        Ruler = 0,
        Protractor = 1,
    };
    enum class InkToolbarToggle : int32_t
    {
        Ruler = 0,
        Custom = 1,
    };
    enum class InkToolbarTool : int32_t
    {
        BallpointPen = 0,
        Pencil = 1,
        Highlighter = 2,
        Eraser = 3,
        CustomPen = 4,
        CustomTool = 5,
    };
    enum class ItemsUpdatingScrollMode : int32_t
    {
        KeepItemsInView = 0,
        KeepScrollOffset = 1,
        KeepLastItemInView = 2,
    };
    enum class LightDismissOverlayMode : int32_t
    {
        Auto = 0,
        On = 1,
        Off = 2,
    };
    enum class ListPickerFlyoutSelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
    };
    enum class ListViewReorderMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class ListViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
        Extended = 3,
    };
    enum class NavigationViewBackButtonVisible : int32_t
    {
        Collapsed = 0,
        Visible = 1,
        Auto = 2,
    };
    enum class NavigationViewDisplayMode : int32_t
    {
        Minimal = 0,
        Compact = 1,
        Expanded = 2,
    };
    enum class NavigationViewOverflowLabelMode : int32_t
    {
        MoreLabel = 0,
        NoLabel = 1,
    };
    enum class NavigationViewPaneDisplayMode : int32_t
    {
        Auto = 0,
        Left = 1,
        Top = 2,
        LeftCompact = 3,
        LeftMinimal = 4,
    };
    enum class NavigationViewSelectionFollowsFocus : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class NavigationViewShoulderNavigationEnabled : int32_t
    {
        WhenSelectionFollowsFocus = 0,
        Always = 1,
        Never = 2,
    };
    enum class Orientation : int32_t
    {
        Vertical = 0,
        Horizontal = 1,
    };
    enum class PanelScrollingDirection : int32_t
    {
        None = 0,
        Forward = 1,
        Backward = 2,
    };
    enum class ParallaxSourceOffsetKind : int32_t
    {
        Absolute = 0,
        Relative = 1,
    };
    enum class PasswordRevealMode : int32_t
    {
        Peek = 0,
        Hidden = 1,
        Visible = 2,
    };
    enum class PivotHeaderFocusVisualPlacement : int32_t
    {
        ItemHeaders = 0,
        SelectedItemHeader = 1,
    };
    enum class PivotSlideInAnimationGroup : int32_t
    {
        Default = 0,
        GroupOne = 1,
        GroupTwo = 2,
        GroupThree = 3,
    };
    enum class RefreshPullDirection : int32_t
    {
        LeftToRight = 0,
        TopToBottom = 1,
        RightToLeft = 2,
        BottomToTop = 3,
    };
    enum class RefreshVisualizerOrientation : int32_t
    {
        Auto = 0,
        Normal = 1,
        Rotate90DegreesCounterclockwise = 2,
        Rotate270DegreesCounterclockwise = 3,
    };
    enum class RefreshVisualizerState : int32_t
    {
        Idle = 0,
        Peeking = 1,
        Interacting = 2,
        Pending = 3,
        Refreshing = 4,
    };
    enum class RequiresPointer : int32_t
    {
        Never = 0,
        WhenEngaged = 1,
        WhenFocused = 2,
    };
    enum class RichEditClipboardFormat : int32_t
    {
        AllFormats = 0,
        PlainText = 1,
    };
    enum class ScrollBarVisibility : int32_t
    {
        Disabled = 0,
        Auto = 1,
        Hidden = 2,
        Visible = 3,
    };
    enum class ScrollIntoViewAlignment : int32_t
    {
        Default = 0,
        Leading = 1,
    };
    enum class ScrollMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
        Auto = 2,
    };
    enum class SelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
        Extended = 2,
    };
    enum class SnapPointsType : int32_t
    {
        None = 0,
        Optional = 1,
        Mandatory = 2,
        OptionalSingle = 3,
        MandatorySingle = 4,
    };
    enum class SplitViewDisplayMode : int32_t
    {
        Overlay = 0,
        Inline = 1,
        CompactOverlay = 2,
        CompactInline = 3,
    };
    enum class SplitViewPanePlacement : int32_t
    {
        Left = 0,
        Right = 1,
    };
    enum class StretchDirection : int32_t
    {
        UpOnly = 0,
        DownOnly = 1,
        Both = 2,
    };
    enum class SwipeBehaviorOnInvoked : int32_t
    {
        Auto = 0,
        Close = 1,
        RemainOpen = 2,
    };
    enum class SwipeMode : int32_t
    {
        Reveal = 0,
        Execute = 1,
    };
    enum class Symbol : int32_t
    {
        Previous = 57600,
        Next = 57601,
        Play = 57602,
        Pause = 57603,
        Edit = 57604,
        Save = 57605,
        Clear = 57606,
        Delete = 57607,
        Remove = 57608,
        Add = 57609,
        Cancel = 57610,
        Accept = 57611,
        More = 57612,
        Redo = 57613,
        Undo = 57614,
        Home = 57615,
        Up = 57616,
        Forward = 57617,
        Back = 57618,
        Favorite = 57619,
        Camera = 57620,
        Setting = 57621,
        Video = 57622,
        Sync = 57623,
        Download = 57624,
        Mail = 57625,
        Find = 57626,
        Help = 57627,
        Upload = 57628,
        Emoji = 57629,
        TwoPage = 57630,
        LeaveChat = 57631,
        MailForward = 57632,
        Clock = 57633,
        Send = 57634,
        Crop = 57635,
        RotateCamera = 57636,
        People = 57637,
        OpenPane = 57638,
        ClosePane = 57639,
        World = 57640,
        Flag = 57641,
        PreviewLink = 57642,
        Globe = 57643,
        Trim = 57644,
        AttachCamera = 57645,
        ZoomIn = 57646,
        Bookmarks = 57647,
        Document = 57648,
        ProtectedDocument = 57649,
        Page = 57650,
        Bullets = 57651,
        Comment = 57652,
        MailFilled = 57653,
        ContactInfo = 57654,
        HangUp = 57655,
        ViewAll = 57656,
        MapPin = 57657,
        Phone = 57658,
        VideoChat = 57659,
        Switch = 57660,
        Contact = 57661,
        Rename = 57662,
        Pin = 57665,
        MusicInfo = 57666,
        Go = 57667,
        Keyboard = 57668,
        DockLeft = 57669,
        DockRight = 57670,
        DockBottom = 57671,
        Remote = 57672,
        Refresh = 57673,
        Rotate = 57674,
        Shuffle = 57675,
        List = 57676,
        Shop = 57677,
        SelectAll = 57678,
        Orientation = 57679,
        Import = 57680,
        ImportAll = 57681,
        BrowsePhotos = 57685,
        WebCam = 57686,
        Pictures = 57688,
        SaveLocal = 57689,
        Caption = 57690,
        Stop = 57691,
        ShowResults = 57692,
        Volume = 57693,
        Repair = 57694,
        Message = 57695,
        Page2 = 57696,
        CalendarDay = 57697,
        CalendarWeek = 57698,
        Calendar = 57699,
        Character = 57700,
        MailReplyAll = 57701,
        Read = 57702,
        Link = 57703,
        Account = 57704,
        ShowBcc = 57705,
        HideBcc = 57706,
        Cut = 57707,
        Attach = 57708,
        Paste = 57709,
        Filter = 57710,
        Copy = 57711,
        Emoji2 = 57712,
        Important = 57713,
        MailReply = 57714,
        SlideShow = 57715,
        Sort = 57716,
        Manage = 57720,
        AllApps = 57721,
        DisconnectDrive = 57722,
        MapDrive = 57723,
        NewWindow = 57724,
        OpenWith = 57725,
        ContactPresence = 57729,
        Priority = 57730,
        GoToToday = 57732,
        Font = 57733,
        FontColor = 57734,
        Contact2 = 57735,
        Folder = 57736,
        Audio = 57737,
        Placeholder = 57738,
        View = 57739,
        SetLockScreen = 57740,
        SetTile = 57741,
        ClosedCaption = 57744,
        StopSlideShow = 57745,
        Permissions = 57746,
        Highlight = 57747,
        DisableUpdates = 57748,
        UnFavorite = 57749,
        UnPin = 57750,
        OpenLocal = 57751,
        Mute = 57752,
        Italic = 57753,
        Underline = 57754,
        Bold = 57755,
        MoveToFolder = 57756,
        LikeDislike = 57757,
        Dislike = 57758,
        Like = 57759,
        AlignRight = 57760,
        AlignCenter = 57761,
        AlignLeft = 57762,
        Zoom = 57763,
        ZoomOut = 57764,
        OpenFile = 57765,
        OtherUser = 57766,
        Admin = 57767,
        Street = 57795,
        Map = 57796,
        ClearSelection = 57797,
        FontDecrease = 57798,
        FontIncrease = 57799,
        FontSize = 57800,
        CellPhone = 57801,
        ReShare = 57802,
        Tag = 57803,
        RepeatOne = 57804,
        RepeatAll = 57805,
        OutlineStar = 57806,
        SolidStar = 57807,
        Calculator = 57808,
        Directions = 57809,
        Target = 57810,
        Library = 57811,
        PhoneBook = 57812,
        Memo = 57813,
        Microphone = 57814,
        PostUpdate = 57815,
        BackToWindow = 57816,
        FullScreen = 57817,
        NewFolder = 57818,
        CalendarReply = 57819,
        UnSyncFolder = 57821,
        ReportHacked = 57822,
        SyncFolder = 57823,
        BlockContact = 57824,
        SwitchApps = 57825,
        AddFriend = 57826,
        TouchPointer = 57827,
        GoToStart = 57828,
        ZeroBars = 57829,
        OneBar = 57830,
        TwoBars = 57831,
        ThreeBars = 57832,
        FourBars = 57833,
        Scan = 58004,
        Preview = 58005,
        GlobalNavigationButton = 59136,
        Share = 59181,
        Print = 59209,
        XboxOneConsole = 59792,
    };
    enum class TreeViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class TwoPaneViewMode : int32_t
    {
        SinglePane = 0,
        Wide = 1,
        Tall = 2,
    };
    enum class TwoPaneViewPriority : int32_t
    {
        Pane1 = 0,
        Pane2 = 1,
    };
    enum class TwoPaneViewTallModeConfiguration : int32_t
    {
        SinglePane = 0,
        TopBottom = 1,
        BottomTop = 2,
    };
    enum class TwoPaneViewWideModeConfiguration : int32_t
    {
        SinglePane = 0,
        LeftRight = 1,
        RightLeft = 2,
    };
    enum class VirtualizationMode : int32_t
    {
        Standard = 0,
        Recycling = 1,
    };
    enum class WebViewExecutionMode : int32_t
    {
        SameThread = 0,
        SeparateThread = 1,
        SeparateProcess = 2,
    };
    enum class WebViewPermissionState : int32_t
    {
        Unknown = 0,
        Defer = 1,
        Allow = 2,
        Deny = 3,
    };
    enum class WebViewPermissionType : int32_t
    {
        Geolocation = 0,
        UnlimitedIndexedDBQuota = 1,
        Media = 2,
        PointerLock = 3,
        WebNotifications = 4,
        Screen = 5,
        ImmersiveView = 6,
    };
    enum class ZoomMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    struct IAnchorRequestedEventArgs;
    struct IAppBar;
    struct IAppBar2;
    struct IAppBar3;
    struct IAppBar4;
    struct IAppBarButton;
    struct IAppBarButton3;
    struct IAppBarButton4;
    struct IAppBarButton5;
    struct IAppBarButtonFactory;
    struct IAppBarButtonStatics;
    struct IAppBarButtonStatics3;
    struct IAppBarButtonStatics4;
    struct IAppBarElementContainer;
    struct IAppBarElementContainerFactory;
    struct IAppBarElementContainerStatics;
    struct IAppBarFactory;
    struct IAppBarOverrides;
    struct IAppBarOverrides3;
    struct IAppBarSeparator;
    struct IAppBarSeparatorFactory;
    struct IAppBarSeparatorStatics;
    struct IAppBarSeparatorStatics3;
    struct IAppBarStatics;
    struct IAppBarStatics2;
    struct IAppBarStatics4;
    struct IAppBarToggleButton;
    struct IAppBarToggleButton3;
    struct IAppBarToggleButton4;
    struct IAppBarToggleButton5;
    struct IAppBarToggleButtonFactory;
    struct IAppBarToggleButtonStatics;
    struct IAppBarToggleButtonStatics3;
    struct IAppBarToggleButtonStatics4;
    struct IAutoSuggestBox;
    struct IAutoSuggestBox2;
    struct IAutoSuggestBox3;
    struct IAutoSuggestBox4;
    struct IAutoSuggestBoxQuerySubmittedEventArgs;
    struct IAutoSuggestBoxStatics;
    struct IAutoSuggestBoxStatics2;
    struct IAutoSuggestBoxStatics3;
    struct IAutoSuggestBoxStatics4;
    struct IAutoSuggestBoxSuggestionChosenEventArgs;
    struct IAutoSuggestBoxTextChangedEventArgs;
    struct IAutoSuggestBoxTextChangedEventArgsStatics;
    struct IBackClickEventArgs;
    struct IBitmapIcon;
    struct IBitmapIcon2;
    struct IBitmapIconFactory;
    struct IBitmapIconSource;
    struct IBitmapIconSourceFactory;
    struct IBitmapIconSourceStatics;
    struct IBitmapIconStatics;
    struct IBitmapIconStatics2;
    struct IBorder;
    struct IBorder2;
    struct IBorderStatics;
    struct IBorderStatics2;
    struct IButton;
    struct IButtonFactory;
    struct IButtonStaticsWithFlyout;
    struct IButtonWithFlyout;
    struct ICalendarDatePicker;
    struct ICalendarDatePicker2;
    struct ICalendarDatePicker3;
    struct ICalendarDatePickerDateChangedEventArgs;
    struct ICalendarDatePickerFactory;
    struct ICalendarDatePickerStatics;
    struct ICalendarDatePickerStatics2;
    struct ICalendarDatePickerStatics3;
    struct ICalendarView;
    struct ICalendarViewDayItem;
    struct ICalendarViewDayItemChangingEventArgs;
    struct ICalendarViewDayItemFactory;
    struct ICalendarViewDayItemStatics;
    struct ICalendarViewFactory;
    struct ICalendarViewSelectedDatesChangedEventArgs;
    struct ICalendarViewStatics;
    struct ICandidateWindowBoundsChangedEventArgs;
    struct ICanvas;
    struct ICanvasFactory;
    struct ICanvasStatics;
    struct ICaptureElement;
    struct ICaptureElementStatics;
    struct ICheckBox;
    struct ICheckBoxFactory;
    struct IChoosingGroupHeaderContainerEventArgs;
    struct IChoosingItemContainerEventArgs;
    struct ICleanUpVirtualizedItemEventArgs;
    struct IColorChangedEventArgs;
    struct IColorPicker;
    struct IColorPickerFactory;
    struct IColorPickerStatics;
    struct IColumnDefinition;
    struct IColumnDefinitionStatics;
    struct IComboBox;
    struct IComboBox2;
    struct IComboBox3;
    struct IComboBox4;
    struct IComboBox5;
    struct IComboBox6;
    struct IComboBoxFactory;
    struct IComboBoxItem;
    struct IComboBoxItemFactory;
    struct IComboBoxOverrides;
    struct IComboBoxStatics;
    struct IComboBoxStatics2;
    struct IComboBoxStatics3;
    struct IComboBoxStatics4;
    struct IComboBoxStatics5;
    struct IComboBoxStatics6;
    struct IComboBoxTextSubmittedEventArgs;
    struct ICommandBar;
    struct ICommandBar2;
    struct ICommandBar3;
    struct ICommandBarElement;
    struct ICommandBarElement2;
    struct ICommandBarFactory;
    struct ICommandBarFlyout;
    struct ICommandBarFlyoutFactory;
    struct ICommandBarOverflowPresenter;
    struct ICommandBarOverflowPresenterFactory;
    struct ICommandBarStatics;
    struct ICommandBarStatics2;
    struct ICommandBarStatics3;
    struct IContainerContentChangingEventArgs;
    struct IContentControl;
    struct IContentControl2;
    struct IContentControlFactory;
    struct IContentControlOverrides;
    struct IContentControlStatics;
    struct IContentDialog;
    struct IContentDialog2;
    struct IContentDialog3;
    struct IContentDialogButtonClickDeferral;
    struct IContentDialogButtonClickEventArgs;
    struct IContentDialogClosedEventArgs;
    struct IContentDialogClosingDeferral;
    struct IContentDialogClosingEventArgs;
    struct IContentDialogFactory;
    struct IContentDialogOpenedEventArgs;
    struct IContentDialogStatics;
    struct IContentDialogStatics2;
    struct IContentLinkChangedEventArgs;
    struct IContentPresenter;
    struct IContentPresenter2;
    struct IContentPresenter3;
    struct IContentPresenter4;
    struct IContentPresenter5;
    struct IContentPresenterFactory;
    struct IContentPresenterOverrides;
    struct IContentPresenterStatics;
    struct IContentPresenterStatics2;
    struct IContentPresenterStatics3;
    struct IContentPresenterStatics4;
    struct IContentPresenterStatics5;
    struct IContextMenuEventArgs;
    struct IControl;
    struct IControl2;
    struct IControl3;
    struct IControl4;
    struct IControl5;
    struct IControl7;
    struct IControlFactory;
    struct IControlOverrides;
    struct IControlOverrides6;
    struct IControlProtected;
    struct IControlStatics;
    struct IControlStatics2;
    struct IControlStatics3;
    struct IControlStatics4;
    struct IControlStatics5;
    struct IControlStatics7;
    struct IControlTemplate;
    struct IDataTemplateSelector;
    struct IDataTemplateSelector2;
    struct IDataTemplateSelectorFactory;
    struct IDataTemplateSelectorOverrides;
    struct IDataTemplateSelectorOverrides2;
    struct IDatePickedEventArgs;
    struct IDatePicker;
    struct IDatePicker2;
    struct IDatePicker3;
    struct IDatePickerFactory;
    struct IDatePickerFlyout;
    struct IDatePickerFlyout2;
    struct IDatePickerFlyoutItem;
    struct IDatePickerFlyoutItemStatics;
    struct IDatePickerFlyoutPresenter;
    struct IDatePickerFlyoutPresenter2;
    struct IDatePickerFlyoutPresenterStatics2;
    struct IDatePickerFlyoutStatics;
    struct IDatePickerFlyoutStatics2;
    struct IDatePickerSelectedValueChangedEventArgs;
    struct IDatePickerStatics;
    struct IDatePickerStatics2;
    struct IDatePickerStatics3;
    struct IDatePickerValueChangedEventArgs;
    struct IDragItemsCompletedEventArgs;
    struct IDragItemsStartingEventArgs;
    struct IDropDownButton;
    struct IDropDownButtonAutomationPeer;
    struct IDropDownButtonAutomationPeerFactory;
    struct IDropDownButtonFactory;
    struct IDynamicOverflowItemsChangingEventArgs;
    struct IFlipView;
    struct IFlipView2;
    struct IFlipViewFactory;
    struct IFlipViewItem;
    struct IFlipViewItemFactory;
    struct IFlipViewStatics2;
    struct IFlyout;
    struct IFlyoutFactory;
    struct IFlyoutPresenter;
    struct IFlyoutPresenter2;
    struct IFlyoutPresenterFactory;
    struct IFlyoutPresenterStatics2;
    struct IFlyoutStatics;
    struct IFocusDisengagedEventArgs;
    struct IFocusEngagedEventArgs;
    struct IFocusEngagedEventArgs2;
    struct IFontIcon;
    struct IFontIcon2;
    struct IFontIcon3;
    struct IFontIconFactory;
    struct IFontIconSource;
    struct IFontIconSourceFactory;
    struct IFontIconSourceStatics;
    struct IFontIconStatics;
    struct IFontIconStatics2;
    struct IFontIconStatics3;
    struct IFrame;
    struct IFrame2;
    struct IFrame3;
    struct IFrame4;
    struct IFrame5;
    struct IFrameFactory;
    struct IFrameStatics;
    struct IFrameStatics2;
    struct IFrameStatics5;
    struct IGrid;
    struct IGrid2;
    struct IGrid3;
    struct IGrid4;
    struct IGridFactory;
    struct IGridStatics;
    struct IGridStatics2;
    struct IGridStatics3;
    struct IGridStatics4;
    struct IGridView;
    struct IGridViewFactory;
    struct IGridViewHeaderItem;
    struct IGridViewHeaderItemFactory;
    struct IGridViewItem;
    struct IGridViewItemFactory;
    struct IGroupItem;
    struct IGroupItemFactory;
    struct IGroupStyle;
    struct IGroupStyle2;
    struct IGroupStyleFactory;
    struct IGroupStyleSelector;
    struct IGroupStyleSelectorFactory;
    struct IGroupStyleSelectorOverrides;
    struct IHandwritingPanelClosedEventArgs;
    struct IHandwritingPanelOpenedEventArgs;
    struct IHandwritingView;
    struct IHandwritingView2;
    struct IHandwritingViewCandidatesChangedEventArgs;
    struct IHandwritingViewFactory;
    struct IHandwritingViewStatics;
    struct IHandwritingViewStatics2;
    struct IHandwritingViewTextSubmittedEventArgs;
    struct IHub;
    struct IHubFactory;
    struct IHubSection;
    struct IHubSectionFactory;
    struct IHubSectionHeaderClickEventArgs;
    struct IHubSectionStatics;
    struct IHubStatics;
    struct IHyperlinkButton;
    struct IHyperlinkButtonFactory;
    struct IHyperlinkButtonStatics;
    struct IIconElement;
    struct IIconElementFactory;
    struct IIconElementStatics;
    struct IIconSource;
    struct IIconSourceElement;
    struct IIconSourceElementFactory;
    struct IIconSourceElementStatics;
    struct IIconSourceFactory;
    struct IIconSourceStatics;
    struct IImage;
    struct IImage2;
    struct IImage3;
    struct IImageStatics;
    struct IInkCanvas;
    struct IInkCanvasFactory;
    struct IInkToolbar;
    struct IInkToolbar2;
    struct IInkToolbar3;
    struct IInkToolbarBallpointPenButton;
    struct IInkToolbarBallpointPenButtonFactory;
    struct IInkToolbarCustomPen;
    struct IInkToolbarCustomPenButton;
    struct IInkToolbarCustomPenButtonFactory;
    struct IInkToolbarCustomPenButtonStatics;
    struct IInkToolbarCustomPenFactory;
    struct IInkToolbarCustomPenOverrides;
    struct IInkToolbarCustomToggleButton;
    struct IInkToolbarCustomToggleButtonFactory;
    struct IInkToolbarCustomToolButton;
    struct IInkToolbarCustomToolButtonFactory;
    struct IInkToolbarCustomToolButtonStatics;
    struct IInkToolbarEraserButton;
    struct IInkToolbarEraserButton2;
    struct IInkToolbarEraserButtonFactory;
    struct IInkToolbarEraserButtonStatics2;
    struct IInkToolbarFactory;
    struct IInkToolbarFlyoutItem;
    struct IInkToolbarFlyoutItemFactory;
    struct IInkToolbarFlyoutItemStatics;
    struct IInkToolbarHighlighterButton;
    struct IInkToolbarHighlighterButtonFactory;
    struct IInkToolbarIsStencilButtonCheckedChangedEventArgs;
    struct IInkToolbarMenuButton;
    struct IInkToolbarMenuButtonFactory;
    struct IInkToolbarMenuButtonStatics;
    struct IInkToolbarPenButton;
    struct IInkToolbarPenButtonFactory;
    struct IInkToolbarPenButtonStatics;
    struct IInkToolbarPenConfigurationControl;
    struct IInkToolbarPenConfigurationControlFactory;
    struct IInkToolbarPenConfigurationControlStatics;
    struct IInkToolbarPencilButton;
    struct IInkToolbarPencilButtonFactory;
    struct IInkToolbarRulerButton;
    struct IInkToolbarRulerButtonFactory;
    struct IInkToolbarRulerButtonStatics;
    struct IInkToolbarStatics;
    struct IInkToolbarStatics2;
    struct IInkToolbarStatics3;
    struct IInkToolbarStencilButton;
    struct IInkToolbarStencilButtonFactory;
    struct IInkToolbarStencilButtonStatics;
    struct IInkToolbarToggleButton;
    struct IInkToolbarToggleButtonFactory;
    struct IInkToolbarToolButton;
    struct IInkToolbarToolButtonFactory;
    struct IInkToolbarToolButtonStatics;
    struct IInsertionPanel;
    struct IIsTextTrimmedChangedEventArgs;
    struct IItemClickEventArgs;
    struct IItemContainerGenerator;
    struct IItemContainerMapping;
    struct IItemsControl;
    struct IItemsControl2;
    struct IItemsControl3;
    struct IItemsControlFactory;
    struct IItemsControlOverrides;
    struct IItemsControlStatics;
    struct IItemsPanelTemplate;
    struct IItemsPickedEventArgs;
    struct IItemsPresenter;
    struct IItemsPresenter2;
    struct IItemsPresenterStatics;
    struct IItemsPresenterStatics2;
    struct IItemsStackPanel;
    struct IItemsStackPanel2;
    struct IItemsStackPanelStatics;
    struct IItemsStackPanelStatics2;
    struct IItemsWrapGrid;
    struct IItemsWrapGrid2;
    struct IItemsWrapGridStatics;
    struct IItemsWrapGridStatics2;
    struct IListBox;
    struct IListBox2;
    struct IListBoxFactory;
    struct IListBoxItem;
    struct IListBoxItemFactory;
    struct IListBoxStatics;
    struct IListBoxStatics2;
    struct IListPickerFlyout;
    struct IListPickerFlyoutPresenter;
    struct IListPickerFlyoutStatics;
    struct IListView;
    struct IListViewBase;
    struct IListViewBase2;
    struct IListViewBase3;
    struct IListViewBase4;
    struct IListViewBase5;
    struct IListViewBase6;
    struct IListViewBaseFactory;
    struct IListViewBaseHeaderItem;
    struct IListViewBaseHeaderItemFactory;
    struct IListViewBaseStatics;
    struct IListViewBaseStatics2;
    struct IListViewBaseStatics3;
    struct IListViewBaseStatics4;
    struct IListViewBaseStatics5;
    struct IListViewFactory;
    struct IListViewHeaderItem;
    struct IListViewHeaderItemFactory;
    struct IListViewItem;
    struct IListViewItemFactory;
    struct IListViewPersistenceHelper;
    struct IListViewPersistenceHelperStatics;
    struct IMediaElement;
    struct IMediaElement2;
    struct IMediaElement3;
    struct IMediaElementStatics;
    struct IMediaElementStatics2;
    struct IMediaPlayerElement;
    struct IMediaPlayerElementFactory;
    struct IMediaPlayerElementStatics;
    struct IMediaPlayerPresenter;
    struct IMediaPlayerPresenterFactory;
    struct IMediaPlayerPresenterStatics;
    struct IMediaTransportControls;
    struct IMediaTransportControls2;
    struct IMediaTransportControls3;
    struct IMediaTransportControls4;
    struct IMediaTransportControlsFactory;
    struct IMediaTransportControlsHelper;
    struct IMediaTransportControlsHelperStatics;
    struct IMediaTransportControlsStatics;
    struct IMediaTransportControlsStatics2;
    struct IMediaTransportControlsStatics3;
    struct IMediaTransportControlsStatics4;
    struct IMenuBar;
    struct IMenuBarFactory;
    struct IMenuBarItem;
    struct IMenuBarItemFactory;
    struct IMenuBarItemFlyout;
    struct IMenuBarItemFlyoutFactory;
    struct IMenuBarItemStatics;
    struct IMenuBarStatics;
    struct IMenuFlyout;
    struct IMenuFlyout2;
    struct IMenuFlyoutFactory;
    struct IMenuFlyoutItem;
    struct IMenuFlyoutItem2;
    struct IMenuFlyoutItem3;
    struct IMenuFlyoutItemBase;
    struct IMenuFlyoutItemBaseFactory;
    struct IMenuFlyoutItemFactory;
    struct IMenuFlyoutItemStatics;
    struct IMenuFlyoutItemStatics2;
    struct IMenuFlyoutItemStatics3;
    struct IMenuFlyoutPresenter;
    struct IMenuFlyoutPresenter2;
    struct IMenuFlyoutPresenter3;
    struct IMenuFlyoutPresenterFactory;
    struct IMenuFlyoutPresenterStatics3;
    struct IMenuFlyoutSeparator;
    struct IMenuFlyoutSeparatorFactory;
    struct IMenuFlyoutStatics;
    struct IMenuFlyoutSubItem;
    struct IMenuFlyoutSubItem2;
    struct IMenuFlyoutSubItemStatics;
    struct IMenuFlyoutSubItemStatics2;
    struct INavigate;
    struct INavigationView;
    struct INavigationView2;
    struct INavigationView3;
    struct INavigationViewBackRequestedEventArgs;
    struct INavigationViewDisplayModeChangedEventArgs;
    struct INavigationViewFactory;
    struct INavigationViewItem;
    struct INavigationViewItem2;
    struct INavigationViewItemBase;
    struct INavigationViewItemBaseFactory;
    struct INavigationViewItemFactory;
    struct INavigationViewItemHeader;
    struct INavigationViewItemHeaderFactory;
    struct INavigationViewItemInvokedEventArgs;
    struct INavigationViewItemInvokedEventArgs2;
    struct INavigationViewItemSeparator;
    struct INavigationViewItemSeparatorFactory;
    struct INavigationViewItemStatics;
    struct INavigationViewItemStatics2;
    struct INavigationViewList;
    struct INavigationViewListFactory;
    struct INavigationViewPaneClosingEventArgs;
    struct INavigationViewSelectionChangedEventArgs;
    struct INavigationViewSelectionChangedEventArgs2;
    struct INavigationViewStatics;
    struct INavigationViewStatics2;
    struct INavigationViewStatics3;
    struct INavigationViewTemplateSettings;
    struct INavigationViewTemplateSettingsFactory;
    struct INavigationViewTemplateSettingsStatics;
    struct INotifyEventArgs;
    struct INotifyEventArgs2;
    struct IPage;
    struct IPageFactory;
    struct IPageOverrides;
    struct IPageStatics;
    struct IPanel;
    struct IPanel2;
    struct IPanelFactory;
    struct IPanelStatics;
    struct IParallaxView;
    struct IParallaxViewFactory;
    struct IParallaxViewStatics;
    struct IPasswordBox;
    struct IPasswordBox2;
    struct IPasswordBox3;
    struct IPasswordBox4;
    struct IPasswordBox5;
    struct IPasswordBoxPasswordChangingEventArgs;
    struct IPasswordBoxStatics;
    struct IPasswordBoxStatics2;
    struct IPasswordBoxStatics3;
    struct IPasswordBoxStatics5;
    struct IPathIcon;
    struct IPathIconFactory;
    struct IPathIconSource;
    struct IPathIconSourceFactory;
    struct IPathIconSourceStatics;
    struct IPathIconStatics;
    struct IPersonPicture;
    struct IPersonPictureFactory;
    struct IPersonPictureStatics;
    struct IPickerConfirmedEventArgs;
    struct IPickerFlyout;
    struct IPickerFlyoutPresenter;
    struct IPickerFlyoutStatics;
    struct IPivot;
    struct IPivot2;
    struct IPivot3;
    struct IPivotFactory;
    struct IPivotItem;
    struct IPivotItemEventArgs;
    struct IPivotItemFactory;
    struct IPivotItemStatics;
    struct IPivotStatics;
    struct IPivotStatics2;
    struct IPivotStatics3;
    struct IProgressBar;
    struct IProgressBarFactory;
    struct IProgressBarStatics;
    struct IProgressRing;
    struct IProgressRingStatics;
    struct IRadioButton;
    struct IRadioButtonFactory;
    struct IRadioButtonStatics;
    struct IRatingControl;
    struct IRatingControlFactory;
    struct IRatingControlStatics;
    struct IRatingItemFontInfo;
    struct IRatingItemFontInfoFactory;
    struct IRatingItemFontInfoStatics;
    struct IRatingItemImageInfo;
    struct IRatingItemImageInfoFactory;
    struct IRatingItemImageInfoStatics;
    struct IRatingItemInfo;
    struct IRatingItemInfoFactory;
    struct IRefreshContainer;
    struct IRefreshContainerFactory;
    struct IRefreshContainerStatics;
    struct IRefreshInteractionRatioChangedEventArgs;
    struct IRefreshRequestedEventArgs;
    struct IRefreshStateChangedEventArgs;
    struct IRefreshVisualizer;
    struct IRefreshVisualizerFactory;
    struct IRefreshVisualizerStatics;
    struct IRelativePanel;
    struct IRelativePanel2;
    struct IRelativePanelFactory;
    struct IRelativePanelStatics;
    struct IRelativePanelStatics2;
    struct IRichEditBox;
    struct IRichEditBox2;
    struct IRichEditBox3;
    struct IRichEditBox4;
    struct IRichEditBox5;
    struct IRichEditBox6;
    struct IRichEditBox7;
    struct IRichEditBox8;
    struct IRichEditBoxFactory;
    struct IRichEditBoxSelectionChangingEventArgs;
    struct IRichEditBoxStatics;
    struct IRichEditBoxStatics2;
    struct IRichEditBoxStatics3;
    struct IRichEditBoxStatics4;
    struct IRichEditBoxStatics5;
    struct IRichEditBoxStatics6;
    struct IRichEditBoxStatics7;
    struct IRichEditBoxStatics8;
    struct IRichEditBoxTextChangingEventArgs;
    struct IRichEditBoxTextChangingEventArgs2;
    struct IRichTextBlock;
    struct IRichTextBlock2;
    struct IRichTextBlock3;
    struct IRichTextBlock4;
    struct IRichTextBlock5;
    struct IRichTextBlock6;
    struct IRichTextBlockOverflow;
    struct IRichTextBlockOverflow2;
    struct IRichTextBlockOverflow3;
    struct IRichTextBlockOverflowStatics;
    struct IRichTextBlockOverflowStatics2;
    struct IRichTextBlockOverflowStatics3;
    struct IRichTextBlockStatics;
    struct IRichTextBlockStatics2;
    struct IRichTextBlockStatics3;
    struct IRichTextBlockStatics4;
    struct IRichTextBlockStatics5;
    struct IRichTextBlockStatics6;
    struct IRowDefinition;
    struct IRowDefinitionStatics;
    struct IScrollAnchorProvider;
    struct IScrollContentPresenter;
    struct IScrollContentPresenter2;
    struct IScrollContentPresenterStatics2;
    struct IScrollViewer;
    struct IScrollViewer2;
    struct IScrollViewer3;
    struct IScrollViewer4;
    struct IScrollViewerStatics;
    struct IScrollViewerStatics2;
    struct IScrollViewerStatics4;
    struct IScrollViewerView;
    struct IScrollViewerViewChangedEventArgs;
    struct IScrollViewerViewChangingEventArgs;
    struct ISearchBox;
    struct ISearchBoxFactory;
    struct ISearchBoxQueryChangedEventArgs;
    struct ISearchBoxQuerySubmittedEventArgs;
    struct ISearchBoxResultSuggestionChosenEventArgs;
    struct ISearchBoxStatics;
    struct ISearchBoxSuggestionsRequestedEventArgs;
    struct ISectionsInViewChangedEventArgs;
    struct ISectionsInViewChangedEventArgsFactory;
    struct ISelectionChangedEventArgs;
    struct ISelectionChangedEventArgsFactory;
    struct ISemanticZoom;
    struct ISemanticZoomInformation;
    struct ISemanticZoomLocation;
    struct ISemanticZoomStatics;
    struct ISemanticZoomViewChangedEventArgs;
    struct ISettingsFlyout;
    struct ISettingsFlyoutFactory;
    struct ISettingsFlyoutStatics;
    struct ISlider;
    struct ISlider2;
    struct ISliderFactory;
    struct ISliderStatics;
    struct ISliderStatics2;
    struct ISplitButton;
    struct ISplitButtonAutomationPeer;
    struct ISplitButtonAutomationPeerFactory;
    struct ISplitButtonClickEventArgs;
    struct ISplitButtonFactory;
    struct ISplitButtonStatics;
    struct ISplitView;
    struct ISplitView2;
    struct ISplitView3;
    struct ISplitViewFactory;
    struct ISplitViewPaneClosingEventArgs;
    struct ISplitViewStatics;
    struct ISplitViewStatics2;
    struct IStackPanel;
    struct IStackPanel2;
    struct IStackPanel4;
    struct IStackPanel5;
    struct IStackPanelFactory;
    struct IStackPanelStatics;
    struct IStackPanelStatics2;
    struct IStackPanelStatics4;
    struct IStackPanelStatics5;
    struct IStyleSelector;
    struct IStyleSelectorFactory;
    struct IStyleSelectorOverrides;
    struct ISwapChainBackgroundPanel;
    struct ISwapChainBackgroundPanel2;
    struct ISwapChainBackgroundPanelFactory;
    struct ISwapChainPanel;
    struct ISwapChainPanelFactory;
    struct ISwapChainPanelStatics;
    struct ISwipeControl;
    struct ISwipeControlFactory;
    struct ISwipeControlStatics;
    struct ISwipeItem;
    struct ISwipeItemFactory;
    struct ISwipeItemInvokedEventArgs;
    struct ISwipeItemStatics;
    struct ISwipeItems;
    struct ISwipeItemsFactory;
    struct ISwipeItemsStatics;
    struct ISymbolIcon;
    struct ISymbolIconFactory;
    struct ISymbolIconSource;
    struct ISymbolIconSourceFactory;
    struct ISymbolIconSourceStatics;
    struct ISymbolIconStatics;
    struct ITextBlock;
    struct ITextBlock2;
    struct ITextBlock3;
    struct ITextBlock4;
    struct ITextBlock5;
    struct ITextBlock6;
    struct ITextBlock7;
    struct ITextBlockStatics;
    struct ITextBlockStatics2;
    struct ITextBlockStatics3;
    struct ITextBlockStatics5;
    struct ITextBlockStatics6;
    struct ITextBlockStatics7;
    struct ITextBox;
    struct ITextBox2;
    struct ITextBox3;
    struct ITextBox4;
    struct ITextBox5;
    struct ITextBox6;
    struct ITextBox7;
    struct ITextBox8;
    struct ITextBoxBeforeTextChangingEventArgs;
    struct ITextBoxFactory;
    struct ITextBoxSelectionChangingEventArgs;
    struct ITextBoxStatics;
    struct ITextBoxStatics2;
    struct ITextBoxStatics3;
    struct ITextBoxStatics5;
    struct ITextBoxStatics6;
    struct ITextBoxStatics7;
    struct ITextBoxStatics8;
    struct ITextBoxTextChangingEventArgs;
    struct ITextBoxTextChangingEventArgs2;
    struct ITextChangedEventArgs;
    struct ITextCommandBarFlyout;
    struct ITextCommandBarFlyoutFactory;
    struct ITextCompositionChangedEventArgs;
    struct ITextCompositionEndedEventArgs;
    struct ITextCompositionStartedEventArgs;
    struct ITextControlCopyingToClipboardEventArgs;
    struct ITextControlCuttingToClipboardEventArgs;
    struct ITextControlPasteEventArgs;
    struct ITimePickedEventArgs;
    struct ITimePicker;
    struct ITimePicker2;
    struct ITimePicker3;
    struct ITimePickerFactory;
    struct ITimePickerFlyout;
    struct ITimePickerFlyoutPresenter;
    struct ITimePickerFlyoutPresenter2;
    struct ITimePickerFlyoutPresenterStatics2;
    struct ITimePickerFlyoutStatics;
    struct ITimePickerSelectedValueChangedEventArgs;
    struct ITimePickerStatics;
    struct ITimePickerStatics2;
    struct ITimePickerStatics3;
    struct ITimePickerValueChangedEventArgs;
    struct IToggleMenuFlyoutItem;
    struct IToggleMenuFlyoutItemFactory;
    struct IToggleMenuFlyoutItemStatics;
    struct IToggleSplitButton;
    struct IToggleSplitButtonAutomationPeer;
    struct IToggleSplitButtonAutomationPeerFactory;
    struct IToggleSplitButtonFactory;
    struct IToggleSplitButtonIsCheckedChangedEventArgs;
    struct IToggleSwitch;
    struct IToggleSwitchOverrides;
    struct IToggleSwitchStatics;
    struct IToolTip;
    struct IToolTip2;
    struct IToolTipFactory;
    struct IToolTipService;
    struct IToolTipServiceStatics;
    struct IToolTipStatics;
    struct IToolTipStatics2;
    struct ITreeView;
    struct ITreeView2;
    struct ITreeViewCollapsedEventArgs;
    struct ITreeViewCollapsedEventArgs2;
    struct ITreeViewDragItemsCompletedEventArgs;
    struct ITreeViewDragItemsStartingEventArgs;
    struct ITreeViewExpandingEventArgs;
    struct ITreeViewExpandingEventArgs2;
    struct ITreeViewFactory;
    struct ITreeViewItem;
    struct ITreeViewItem2;
    struct ITreeViewItemFactory;
    struct ITreeViewItemInvokedEventArgs;
    struct ITreeViewItemStatics;
    struct ITreeViewItemStatics2;
    struct ITreeViewItemTemplateSettings;
    struct ITreeViewItemTemplateSettingsFactory;
    struct ITreeViewItemTemplateSettingsStatics;
    struct ITreeViewList;
    struct ITreeViewListFactory;
    struct ITreeViewNode;
    struct ITreeViewNodeFactory;
    struct ITreeViewNodeStatics;
    struct ITreeViewStatics;
    struct ITreeViewStatics2;
    struct ITwoPaneView;
    struct ITwoPaneViewFactory;
    struct ITwoPaneViewStatics;
    struct IUIElementCollection;
    struct IUserControl;
    struct IUserControlFactory;
    struct IUserControlStatics;
    struct IVariableSizedWrapGrid;
    struct IVariableSizedWrapGridStatics;
    struct IViewbox;
    struct IViewboxStatics;
    struct IVirtualizingPanel;
    struct IVirtualizingPanelFactory;
    struct IVirtualizingPanelOverrides;
    struct IVirtualizingPanelProtected;
    struct IVirtualizingStackPanel;
    struct IVirtualizingStackPanelOverrides;
    struct IVirtualizingStackPanelStatics;
    struct IWebView;
    struct IWebView2;
    struct IWebView3;
    struct IWebView4;
    struct IWebView5;
    struct IWebView6;
    struct IWebView7;
    struct IWebViewBrush;
    struct IWebViewBrushStatics;
    struct IWebViewContentLoadingEventArgs;
    struct IWebViewDOMContentLoadedEventArgs;
    struct IWebViewDeferredPermissionRequest;
    struct IWebViewFactory4;
    struct IWebViewLongRunningScriptDetectedEventArgs;
    struct IWebViewNavigationCompletedEventArgs;
    struct IWebViewNavigationFailedEventArgs;
    struct IWebViewNavigationStartingEventArgs;
    struct IWebViewNewWindowRequestedEventArgs;
    struct IWebViewPermissionRequest;
    struct IWebViewPermissionRequestedEventArgs;
    struct IWebViewSeparateProcessLostEventArgs;
    struct IWebViewSettings;
    struct IWebViewStatics;
    struct IWebViewStatics2;
    struct IWebViewStatics3;
    struct IWebViewStatics4;
    struct IWebViewStatics5;
    struct IWebViewUnsupportedUriSchemeIdentifiedEventArgs;
    struct IWebViewUnviewableContentIdentifiedEventArgs;
    struct IWebViewUnviewableContentIdentifiedEventArgs2;
    struct IWebViewWebResourceRequestedEventArgs;
    struct IWrapGrid;
    struct IWrapGridStatics;
    struct AnchorRequestedEventArgs;
    struct AppBar;
    struct AppBarButton;
    struct AppBarElementContainer;
    struct AppBarSeparator;
    struct AppBarToggleButton;
    struct AutoSuggestBox;
    struct AutoSuggestBoxQuerySubmittedEventArgs;
    struct AutoSuggestBoxSuggestionChosenEventArgs;
    struct AutoSuggestBoxTextChangedEventArgs;
    struct BackClickEventArgs;
    struct BitmapIcon;
    struct BitmapIconSource;
    struct Border;
    struct Button;
    struct CalendarDatePicker;
    struct CalendarDatePickerDateChangedEventArgs;
    struct CalendarView;
    struct CalendarViewDayItem;
    struct CalendarViewDayItemChangingEventArgs;
    struct CalendarViewSelectedDatesChangedEventArgs;
    struct CandidateWindowBoundsChangedEventArgs;
    struct Canvas;
    struct CaptureElement;
    struct CheckBox;
    struct ChoosingGroupHeaderContainerEventArgs;
    struct ChoosingItemContainerEventArgs;
    struct CleanUpVirtualizedItemEventArgs;
    struct ColorChangedEventArgs;
    struct ColorPicker;
    struct ColumnDefinition;
    struct ColumnDefinitionCollection;
    struct ComboBox;
    struct ComboBoxItem;
    struct ComboBoxTextSubmittedEventArgs;
    struct CommandBar;
    struct CommandBarFlyout;
    struct CommandBarOverflowPresenter;
    struct ContainerContentChangingEventArgs;
    struct ContentControl;
    struct ContentDialog;
    struct ContentDialogButtonClickDeferral;
    struct ContentDialogButtonClickEventArgs;
    struct ContentDialogClosedEventArgs;
    struct ContentDialogClosingDeferral;
    struct ContentDialogClosingEventArgs;
    struct ContentDialogOpenedEventArgs;
    struct ContentLinkChangedEventArgs;
    struct ContentPresenter;
    struct ContextMenuEventArgs;
    struct Control;
    struct ControlTemplate;
    struct DataTemplateSelector;
    struct DatePickedEventArgs;
    struct DatePicker;
    struct DatePickerFlyout;
    struct DatePickerFlyoutItem;
    struct DatePickerFlyoutPresenter;
    struct DatePickerSelectedValueChangedEventArgs;
    struct DatePickerValueChangedEventArgs;
    struct DragItemsCompletedEventArgs;
    struct DragItemsStartingEventArgs;
    struct DropDownButton;
    struct DropDownButtonAutomationPeer;
    struct DynamicOverflowItemsChangingEventArgs;
    struct FlipView;
    struct FlipViewItem;
    struct Flyout;
    struct FlyoutPresenter;
    struct FocusDisengagedEventArgs;
    struct FocusEngagedEventArgs;
    struct FontIcon;
    struct FontIconSource;
    struct Frame;
    struct Grid;
    struct GridView;
    struct GridViewHeaderItem;
    struct GridViewItem;
    struct GroupItem;
    struct GroupStyle;
    struct GroupStyleSelector;
    struct HandwritingPanelClosedEventArgs;
    struct HandwritingPanelOpenedEventArgs;
    struct HandwritingView;
    struct HandwritingViewCandidatesChangedEventArgs;
    struct HandwritingViewTextSubmittedEventArgs;
    struct Hub;
    struct HubSection;
    struct HubSectionCollection;
    struct HubSectionHeaderClickEventArgs;
    struct HyperlinkButton;
    struct IconElement;
    struct IconSource;
    struct IconSourceElement;
    struct Image;
    struct InkCanvas;
    struct InkToolbar;
    struct InkToolbarBallpointPenButton;
    struct InkToolbarCustomPen;
    struct InkToolbarCustomPenButton;
    struct InkToolbarCustomToggleButton;
    struct InkToolbarCustomToolButton;
    struct InkToolbarEraserButton;
    struct InkToolbarFlyoutItem;
    struct InkToolbarHighlighterButton;
    struct InkToolbarIsStencilButtonCheckedChangedEventArgs;
    struct InkToolbarMenuButton;
    struct InkToolbarPenButton;
    struct InkToolbarPenConfigurationControl;
    struct InkToolbarPencilButton;
    struct InkToolbarRulerButton;
    struct InkToolbarStencilButton;
    struct InkToolbarToggleButton;
    struct InkToolbarToolButton;
    struct IsTextTrimmedChangedEventArgs;
    struct ItemClickEventArgs;
    struct ItemCollection;
    struct ItemContainerGenerator;
    struct ItemsControl;
    struct ItemsPanelTemplate;
    struct ItemsPickedEventArgs;
    struct ItemsPresenter;
    struct ItemsStackPanel;
    struct ItemsWrapGrid;
    struct ListBox;
    struct ListBoxItem;
    struct ListPickerFlyout;
    struct ListPickerFlyoutPresenter;
    struct ListView;
    struct ListViewBase;
    struct ListViewBaseHeaderItem;
    struct ListViewHeaderItem;
    struct ListViewItem;
    struct ListViewPersistenceHelper;
    struct MediaElement;
    struct MediaPlayerElement;
    struct MediaPlayerPresenter;
    struct MediaTransportControls;
    struct MediaTransportControlsHelper;
    struct MenuBar;
    struct MenuBarItem;
    struct MenuBarItemFlyout;
    struct MenuFlyout;
    struct MenuFlyoutItem;
    struct MenuFlyoutItemBase;
    struct MenuFlyoutPresenter;
    struct MenuFlyoutSeparator;
    struct MenuFlyoutSubItem;
    struct NavigationView;
    struct NavigationViewBackRequestedEventArgs;
    struct NavigationViewDisplayModeChangedEventArgs;
    struct NavigationViewItem;
    struct NavigationViewItemBase;
    struct NavigationViewItemHeader;
    struct NavigationViewItemInvokedEventArgs;
    struct NavigationViewItemSeparator;
    struct NavigationViewList;
    struct NavigationViewPaneClosingEventArgs;
    struct NavigationViewSelectionChangedEventArgs;
    struct NavigationViewTemplateSettings;
    struct NotifyEventArgs;
    struct Page;
    struct Panel;
    struct ParallaxView;
    struct PasswordBox;
    struct PasswordBoxPasswordChangingEventArgs;
    struct PathIcon;
    struct PathIconSource;
    struct PersonPicture;
    struct PickerConfirmedEventArgs;
    struct PickerFlyout;
    struct PickerFlyoutPresenter;
    struct Pivot;
    struct PivotItem;
    struct PivotItemEventArgs;
    struct ProgressBar;
    struct ProgressRing;
    struct RadioButton;
    struct RatingControl;
    struct RatingItemFontInfo;
    struct RatingItemImageInfo;
    struct RatingItemInfo;
    struct RefreshContainer;
    struct RefreshInteractionRatioChangedEventArgs;
    struct RefreshRequestedEventArgs;
    struct RefreshStateChangedEventArgs;
    struct RefreshVisualizer;
    struct RelativePanel;
    struct RichEditBox;
    struct RichEditBoxSelectionChangingEventArgs;
    struct RichEditBoxTextChangingEventArgs;
    struct RichTextBlock;
    struct RichTextBlockOverflow;
    struct RowDefinition;
    struct RowDefinitionCollection;
    struct ScrollContentPresenter;
    struct ScrollViewer;
    struct ScrollViewerView;
    struct ScrollViewerViewChangedEventArgs;
    struct ScrollViewerViewChangingEventArgs;
    struct SearchBox;
    struct SearchBoxQueryChangedEventArgs;
    struct SearchBoxQuerySubmittedEventArgs;
    struct SearchBoxResultSuggestionChosenEventArgs;
    struct SearchBoxSuggestionsRequestedEventArgs;
    struct SectionsInViewChangedEventArgs;
    struct SelectionChangedEventArgs;
    struct SemanticZoom;
    struct SemanticZoomLocation;
    struct SemanticZoomViewChangedEventArgs;
    struct SettingsFlyout;
    struct Slider;
    struct SplitButton;
    struct SplitButtonAutomationPeer;
    struct SplitButtonClickEventArgs;
    struct SplitView;
    struct SplitViewPaneClosingEventArgs;
    struct StackPanel;
    struct StyleSelector;
    struct SwapChainBackgroundPanel;
    struct SwapChainPanel;
    struct SwipeControl;
    struct SwipeItem;
    struct SwipeItemInvokedEventArgs;
    struct SwipeItems;
    struct SymbolIcon;
    struct SymbolIconSource;
    struct TextBlock;
    struct TextBox;
    struct TextBoxBeforeTextChangingEventArgs;
    struct TextBoxSelectionChangingEventArgs;
    struct TextBoxTextChangingEventArgs;
    struct TextChangedEventArgs;
    struct TextCommandBarFlyout;
    struct TextCompositionChangedEventArgs;
    struct TextCompositionEndedEventArgs;
    struct TextCompositionStartedEventArgs;
    struct TextControlCopyingToClipboardEventArgs;
    struct TextControlCuttingToClipboardEventArgs;
    struct TextControlPasteEventArgs;
    struct TimePickedEventArgs;
    struct TimePicker;
    struct TimePickerFlyout;
    struct TimePickerFlyoutPresenter;
    struct TimePickerSelectedValueChangedEventArgs;
    struct TimePickerValueChangedEventArgs;
    struct ToggleMenuFlyoutItem;
    struct ToggleSplitButton;
    struct ToggleSplitButtonAutomationPeer;
    struct ToggleSplitButtonIsCheckedChangedEventArgs;
    struct ToggleSwitch;
    struct ToolTip;
    struct ToolTipService;
    struct TreeView;
    struct TreeViewCollapsedEventArgs;
    struct TreeViewDragItemsCompletedEventArgs;
    struct TreeViewDragItemsStartingEventArgs;
    struct TreeViewExpandingEventArgs;
    struct TreeViewItem;
    struct TreeViewItemInvokedEventArgs;
    struct TreeViewItemTemplateSettings;
    struct TreeViewList;
    struct TreeViewNode;
    struct TwoPaneView;
    struct UIElementCollection;
    struct UserControl;
    struct VariableSizedWrapGrid;
    struct Viewbox;
    struct VirtualizingPanel;
    struct VirtualizingStackPanel;
    struct WebView;
    struct WebViewBrush;
    struct WebViewContentLoadingEventArgs;
    struct WebViewDOMContentLoadedEventArgs;
    struct WebViewDeferredPermissionRequest;
    struct WebViewLongRunningScriptDetectedEventArgs;
    struct WebViewNavigationCompletedEventArgs;
    struct WebViewNavigationFailedEventArgs;
    struct WebViewNavigationStartingEventArgs;
    struct WebViewNewWindowRequestedEventArgs;
    struct WebViewPermissionRequest;
    struct WebViewPermissionRequestedEventArgs;
    struct WebViewSeparateProcessLostEventArgs;
    struct WebViewSettings;
    struct WebViewUnsupportedUriSchemeIdentifiedEventArgs;
    struct WebViewUnviewableContentIdentifiedEventArgs;
    struct WebViewWebResourceRequestedEventArgs;
    struct WrapGrid;
    struct BackClickEventHandler;
    struct CalendarViewDayItemChangingEventHandler;
    struct CleanUpVirtualizedItemEventHandler;
    struct ContextMenuOpeningEventHandler;
    struct DragItemsStartingEventHandler;
    struct HubSectionHeaderClickEventHandler;
    struct ItemClickEventHandler;
    struct ListViewItemToKeyHandler;
    struct ListViewKeyToItemHandler;
    struct NotifyEventHandler;
    struct SectionsInViewChangedEventHandler;
    struct SelectionChangedEventHandler;
    struct SemanticZoomViewChangedEventHandler;
    struct TextChangedEventHandler;
    struct TextControlPasteEventHandler;
    struct WebViewNavigationFailedEventHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBar>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBar2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBar3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBar4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButton3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButton4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButton5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIcon>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIcon2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBorder>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBorder2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBorderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IBorderStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICanvas>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICanvasFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICanvasStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICaptureElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICheckBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColorPicker>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColorPickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColorPickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColumnDefinition>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBox6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBar>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBar2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBar3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentControl2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialog>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialog2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialog3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenter3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenter4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenter5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControl7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlOverrides6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlProtected>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlStatics7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IControlTemplate>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePicker>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePicker2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePicker3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDropDownButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDropDownButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIcon>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIcon2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIcon3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrame>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrame2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrame3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrame4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrame5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrameStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IFrameStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGrid>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGrid2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGrid3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGrid4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyle>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyle2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHub>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubSection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHubStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSourceElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSourceElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSourceElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IImage>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IImage2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IImage3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IImageStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkCanvas>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbar>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbar2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbar3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IInsertionPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControl2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControl3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBoxItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBase6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaElement2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaElement3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBar>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigate>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationView3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItem2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewList>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewListFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPage>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPageFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPageOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPageStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPanel2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IParallaxView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IParallaxViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IParallaxViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBox3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBox4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBox5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIcon>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPathIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPersonPicture>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPersonPictureFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPersonPictureStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivot>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivot2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivot3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IPivotStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IProgressBar>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IProgressRing>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRadioButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemInfo>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshContainer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRelativePanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRelativePanel2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBox8>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics8>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlock6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRowDefinition>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollAnchorProvider>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewer4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISlider>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISlider2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISliderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISliderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISliderStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitView3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanel2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanel4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanel5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStyleSelector>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItems>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIcon>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlock7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBox8>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics8>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePicker>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePicker2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePicker3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTip>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTip2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTipFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTipService>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTipStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IToolTipStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItem2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewList>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewListFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewNode>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITwoPaneView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IUIElementCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IUserControl>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IUserControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IUserControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IViewbox>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IViewboxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView6>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebView7>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewBrush>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewSettings>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AnchorRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBar>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBarButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBarElementContainer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBarSeparator>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBarToggleButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::BackClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::BitmapIcon>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::BitmapIconSource>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Border>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Button>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Canvas>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CaptureElement>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CheckBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColorPicker>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColumnDefinition>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ComboBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ComboBoxItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBar>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialog>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Control>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ControlTemplate>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DataTemplateSelector>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePicker>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DropDownButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DropDownButtonAutomationPeer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FlipView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FlipViewItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Flyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FontIcon>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::FontIconSource>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Frame>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Grid>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GridView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GridViewHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GridViewItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GroupItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GroupStyle>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::GroupStyleSelector>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingViewCandidatesChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingViewTextSubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Hub>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HubSection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HubSectionCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HyperlinkButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IconElement>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IconSource>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IconSourceElement>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Image>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkCanvas>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbar>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarEraserButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarMenuButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarPenButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarPencilButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarRulerButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarStencilButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarToggleButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemContainerGenerator>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsStackPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsWrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListBoxItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewBase>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MediaElement>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MediaPlayerElement>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MediaTransportControls>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuBar>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuBarItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewItemBase>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewList>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NotifyEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Page>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Panel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ParallaxView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PasswordBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PathIcon>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PathIconSource>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PersonPicture>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Pivot>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PivotItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ProgressBar>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ProgressRing>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RadioButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RatingControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RatingItemFontInfo>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RatingItemImageInfo>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RatingItemInfo>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshContainer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RelativePanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichEditBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichTextBlock>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RowDefinition>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RowDefinitionCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollContentPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollViewer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollViewerView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SearchBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SemanticZoom>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SettingsFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Slider>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitButtonAutomationPeer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::StackPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::StyleSelector>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwapChainPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeItems>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SymbolIcon>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SymbolIconSource>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextBlock>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextBox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePicker>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToggleSplitButton>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToggleSwitch>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToolTip>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ToolTipService>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewItem>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewList>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewNode>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TwoPaneView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::UIElementCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::UserControl>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Viewbox>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::VirtualizingPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebView>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewBrush>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequest>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewSettings>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewWebResourceRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AppBarClosedDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::BackgroundSizing>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CandidateWindowAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CharacterCasing>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ClickMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColorPickerHsvChannel>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColorSpectrumComponents>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ColorSpectrumShape>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarLabelPosition>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogButton>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentDialogResult>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContentLinkChangeKind>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DisabledFormattingAccelerators>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::IncrementalLoadingTrigger>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarInitialControls>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarMenuKind>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarStencilKind>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarToggle>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::InkToolbarTool>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewReorderMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewOverflowLabelMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewPaneDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Orientation>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PanelScrollingDirection>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PasswordRevealMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshPullDirection>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshVisualizerOrientation>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RefreshVisualizerState>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RequiresPointer>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::RichEditClipboardFormat>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollIntoViewAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ScrollMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SnapPointsType>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SplitViewPanePlacement>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::StretchDirection>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SwipeMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::Symbol>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TreeViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TwoPaneViewMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TwoPaneViewPriority>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::VirtualizationMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewExecutionMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewPermissionState>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewPermissionType>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ZoomMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::BackClickEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::NotifyEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AnchorRequestedEventArgs> = L"Windows.UI.Xaml.Controls.AnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBar> = L"Windows.UI.Xaml.Controls.AppBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBarButton> = L"Windows.UI.Xaml.Controls.AppBarButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBarElementContainer> = L"Windows.UI.Xaml.Controls.AppBarElementContainer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBarSeparator> = L"Windows.UI.Xaml.Controls.AppBarSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBarToggleButton> = L"Windows.UI.Xaml.Controls.AppBarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox> = L"Windows.UI.Xaml.Controls.AutoSuggestBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> = L"Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> = L"Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> = L"Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::BackClickEventArgs> = L"Windows.UI.Xaml.Controls.BackClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::BitmapIcon> = L"Windows.UI.Xaml.Controls.BitmapIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::BitmapIconSource> = L"Windows.UI.Xaml.Controls.BitmapIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Border> = L"Windows.UI.Xaml.Controls.Border";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Button> = L"Windows.UI.Xaml.Controls.Button";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker> = L"Windows.UI.Xaml.Controls.CalendarDatePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> = L"Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarView> = L"Windows.UI.Xaml.Controls.CalendarView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItem> = L"Windows.UI.Xaml.Controls.CalendarViewDayItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> = L"Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> = L"Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> = L"Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Canvas> = L"Windows.UI.Xaml.Controls.Canvas";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CaptureElement> = L"Windows.UI.Xaml.Controls.CaptureElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CheckBox> = L"Windows.UI.Xaml.Controls.CheckBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> = L"Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> = L"Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs> = L"Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColorChangedEventArgs> = L"Windows.UI.Xaml.Controls.ColorChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColorPicker> = L"Windows.UI.Xaml.Controls.ColorPicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColumnDefinition> = L"Windows.UI.Xaml.Controls.ColumnDefinition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColumnDefinitionCollection> = L"Windows.UI.Xaml.Controls.ColumnDefinitionCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ComboBox> = L"Windows.UI.Xaml.Controls.ComboBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ComboBoxItem> = L"Windows.UI.Xaml.Controls.ComboBoxItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> = L"Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBar> = L"Windows.UI.Xaml.Controls.CommandBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarFlyout> = L"Windows.UI.Xaml.Controls.CommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowPresenter> = L"Windows.UI.Xaml.Controls.CommandBarOverflowPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> = L"Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentControl> = L"Windows.UI.Xaml.Controls.ContentControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialog> = L"Windows.UI.Xaml.Controls.ContentDialog";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral> = L"Windows.UI.Xaml.Controls.ContentDialogButtonClickDeferral";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> = L"Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> = L"Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingDeferral> = L"Windows.UI.Xaml.Controls.ContentDialogClosingDeferral";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> = L"Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> = L"Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs> = L"Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentPresenter> = L"Windows.UI.Xaml.Controls.ContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContextMenuEventArgs> = L"Windows.UI.Xaml.Controls.ContextMenuEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Control> = L"Windows.UI.Xaml.Controls.Control";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ControlTemplate> = L"Windows.UI.Xaml.Controls.ControlTemplate";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DataTemplateSelector> = L"Windows.UI.Xaml.Controls.DataTemplateSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs> = L"Windows.UI.Xaml.Controls.DatePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePicker> = L"Windows.UI.Xaml.Controls.DatePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout> = L"Windows.UI.Xaml.Controls.DatePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutItem> = L"Windows.UI.Xaml.Controls.DatePickerFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.DatePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> = L"Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs> = L"Windows.UI.Xaml.Controls.DragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DropDownButton> = L"Windows.UI.Xaml.Controls.DropDownButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DropDownButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.DropDownButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> = L"Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FlipView> = L"Windows.UI.Xaml.Controls.FlipView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FlipViewItem> = L"Windows.UI.Xaml.Controls.FlipViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Flyout> = L"Windows.UI.Xaml.Controls.Flyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FlyoutPresenter> = L"Windows.UI.Xaml.Controls.FlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> = L"Windows.UI.Xaml.Controls.FocusDisengagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs> = L"Windows.UI.Xaml.Controls.FocusEngagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FontIcon> = L"Windows.UI.Xaml.Controls.FontIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::FontIconSource> = L"Windows.UI.Xaml.Controls.FontIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Frame> = L"Windows.UI.Xaml.Controls.Frame";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Grid> = L"Windows.UI.Xaml.Controls.Grid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GridView> = L"Windows.UI.Xaml.Controls.GridView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GridViewHeaderItem> = L"Windows.UI.Xaml.Controls.GridViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GridViewItem> = L"Windows.UI.Xaml.Controls.GridViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GroupItem> = L"Windows.UI.Xaml.Controls.GroupItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GroupStyle> = L"Windows.UI.Xaml.Controls.GroupStyle";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::GroupStyleSelector> = L"Windows.UI.Xaml.Controls.GroupStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs> = L"Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs> = L"Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingView> = L"Windows.UI.Xaml.Controls.HandwritingView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingViewCandidatesChangedEventArgs> = L"Windows.UI.Xaml.Controls.HandwritingViewCandidatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingViewTextSubmittedEventArgs> = L"Windows.UI.Xaml.Controls.HandwritingViewTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Hub> = L"Windows.UI.Xaml.Controls.Hub";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HubSection> = L"Windows.UI.Xaml.Controls.HubSection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HubSectionCollection> = L"Windows.UI.Xaml.Controls.HubSectionCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs> = L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HyperlinkButton> = L"Windows.UI.Xaml.Controls.HyperlinkButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IconElement> = L"Windows.UI.Xaml.Controls.IconElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IconSource> = L"Windows.UI.Xaml.Controls.IconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IconSourceElement> = L"Windows.UI.Xaml.Controls.IconSourceElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Image> = L"Windows.UI.Xaml.Controls.Image";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkCanvas> = L"Windows.UI.Xaml.Controls.InkCanvas";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbar> = L"Windows.UI.Xaml.Controls.InkToolbar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton> = L"Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen> = L"Windows.UI.Xaml.Controls.InkToolbarCustomPen";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPenButton> = L"Windows.UI.Xaml.Controls.InkToolbarCustomPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton> = L"Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToolButton> = L"Windows.UI.Xaml.Controls.InkToolbarCustomToolButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarEraserButton> = L"Windows.UI.Xaml.Controls.InkToolbarEraserButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem> = L"Windows.UI.Xaml.Controls.InkToolbarFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarHighlighterButton> = L"Windows.UI.Xaml.Controls.InkToolbarHighlighterButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs> = L"Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarMenuButton> = L"Windows.UI.Xaml.Controls.InkToolbarMenuButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarPenButton> = L"Windows.UI.Xaml.Controls.InkToolbarPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl> = L"Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarPencilButton> = L"Windows.UI.Xaml.Controls.InkToolbarPencilButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarRulerButton> = L"Windows.UI.Xaml.Controls.InkToolbarRulerButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarStencilButton> = L"Windows.UI.Xaml.Controls.InkToolbarStencilButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarToggleButton> = L"Windows.UI.Xaml.Controls.InkToolbarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton> = L"Windows.UI.Xaml.Controls.InkToolbarToolButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> = L"Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs> = L"Windows.UI.Xaml.Controls.ItemClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemCollection> = L"Windows.UI.Xaml.Controls.ItemCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemContainerGenerator> = L"Windows.UI.Xaml.Controls.ItemContainerGenerator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsControl> = L"Windows.UI.Xaml.Controls.ItemsControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate> = L"Windows.UI.Xaml.Controls.ItemsPanelTemplate";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs> = L"Windows.UI.Xaml.Controls.ItemsPickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsPresenter> = L"Windows.UI.Xaml.Controls.ItemsPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsStackPanel> = L"Windows.UI.Xaml.Controls.ItemsStackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsWrapGrid> = L"Windows.UI.Xaml.Controls.ItemsWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListBox> = L"Windows.UI.Xaml.Controls.ListBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListBoxItem> = L"Windows.UI.Xaml.Controls.ListBoxItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout> = L"Windows.UI.Xaml.Controls.ListPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListView> = L"Windows.UI.Xaml.Controls.ListView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewBase> = L"Windows.UI.Xaml.Controls.ListViewBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem> = L"Windows.UI.Xaml.Controls.ListViewBaseHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewHeaderItem> = L"Windows.UI.Xaml.Controls.ListViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewItem> = L"Windows.UI.Xaml.Controls.ListViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewPersistenceHelper> = L"Windows.UI.Xaml.Controls.ListViewPersistenceHelper";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MediaElement> = L"Windows.UI.Xaml.Controls.MediaElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MediaPlayerElement> = L"Windows.UI.Xaml.Controls.MediaPlayerElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MediaPlayerPresenter> = L"Windows.UI.Xaml.Controls.MediaPlayerPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MediaTransportControls> = L"Windows.UI.Xaml.Controls.MediaTransportControls";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MediaTransportControlsHelper> = L"Windows.UI.Xaml.Controls.MediaTransportControlsHelper";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuBar> = L"Windows.UI.Xaml.Controls.MenuBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuBarItem> = L"Windows.UI.Xaml.Controls.MenuBarItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuBarItemFlyout> = L"Windows.UI.Xaml.Controls.MenuBarItemFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyout> = L"Windows.UI.Xaml.Controls.MenuFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItem> = L"Windows.UI.Xaml.Controls.MenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase> = L"Windows.UI.Xaml.Controls.MenuFlyoutItemBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyoutPresenter> = L"Windows.UI.Xaml.Controls.MenuFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSeparator> = L"Windows.UI.Xaml.Controls.MenuFlyoutSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSubItem> = L"Windows.UI.Xaml.Controls.MenuFlyoutSubItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationView> = L"Windows.UI.Xaml.Controls.NavigationView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> = L"Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> = L"Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewItem> = L"Windows.UI.Xaml.Controls.NavigationViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewItemBase> = L"Windows.UI.Xaml.Controls.NavigationViewItemBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewItemHeader> = L"Windows.UI.Xaml.Controls.NavigationViewItemHeader";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewItemSeparator> = L"Windows.UI.Xaml.Controls.NavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewList> = L"Windows.UI.Xaml.Controls.NavigationViewList";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> = L"Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> = L"Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewTemplateSettings> = L"Windows.UI.Xaml.Controls.NavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NotifyEventArgs> = L"Windows.UI.Xaml.Controls.NotifyEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Page> = L"Windows.UI.Xaml.Controls.Page";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Panel> = L"Windows.UI.Xaml.Controls.Panel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ParallaxView> = L"Windows.UI.Xaml.Controls.ParallaxView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PasswordBox> = L"Windows.UI.Xaml.Controls.PasswordBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> = L"Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PathIcon> = L"Windows.UI.Xaml.Controls.PathIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PathIconSource> = L"Windows.UI.Xaml.Controls.PathIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PersonPicture> = L"Windows.UI.Xaml.Controls.PersonPicture";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> = L"Windows.UI.Xaml.Controls.PickerConfirmedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PickerFlyout> = L"Windows.UI.Xaml.Controls.PickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.PickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Pivot> = L"Windows.UI.Xaml.Controls.Pivot";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PivotItem> = L"Windows.UI.Xaml.Controls.PivotItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> = L"Windows.UI.Xaml.Controls.PivotItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ProgressBar> = L"Windows.UI.Xaml.Controls.ProgressBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ProgressRing> = L"Windows.UI.Xaml.Controls.ProgressRing";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RadioButton> = L"Windows.UI.Xaml.Controls.RadioButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RatingControl> = L"Windows.UI.Xaml.Controls.RatingControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RatingItemFontInfo> = L"Windows.UI.Xaml.Controls.RatingItemFontInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RatingItemImageInfo> = L"Windows.UI.Xaml.Controls.RatingItemImageInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RatingItemInfo> = L"Windows.UI.Xaml.Controls.RatingItemInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshContainer> = L"Windows.UI.Xaml.Controls.RefreshContainer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs> = L"Windows.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> = L"Windows.UI.Xaml.Controls.RefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs> = L"Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer> = L"Windows.UI.Xaml.Controls.RefreshVisualizer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RelativePanel> = L"Windows.UI.Xaml.Controls.RelativePanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichEditBox> = L"Windows.UI.Xaml.Controls.RichEditBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> = L"Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichTextBlock> = L"Windows.UI.Xaml.Controls.RichTextBlock";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow> = L"Windows.UI.Xaml.Controls.RichTextBlockOverflow";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RowDefinition> = L"Windows.UI.Xaml.Controls.RowDefinition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RowDefinitionCollection> = L"Windows.UI.Xaml.Controls.RowDefinitionCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollContentPresenter> = L"Windows.UI.Xaml.Controls.ScrollContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollViewer> = L"Windows.UI.Xaml.Controls.ScrollViewer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollViewerView> = L"Windows.UI.Xaml.Controls.ScrollViewerView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> = L"Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SearchBox> = L"Windows.UI.Xaml.Controls.SearchBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> = L"Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> = L"Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> = L"Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> = L"Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs> = L"Windows.UI.Xaml.Controls.SelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SemanticZoom> = L"Windows.UI.Xaml.Controls.SemanticZoom";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation> = L"Windows.UI.Xaml.Controls.SemanticZoomLocation";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SettingsFlyout> = L"Windows.UI.Xaml.Controls.SettingsFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Slider> = L"Windows.UI.Xaml.Controls.Slider";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitButton> = L"Windows.UI.Xaml.Controls.SplitButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.SplitButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitButtonClickEventArgs> = L"Windows.UI.Xaml.Controls.SplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitView> = L"Windows.UI.Xaml.Controls.SplitView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> = L"Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::StackPanel> = L"Windows.UI.Xaml.Controls.StackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::StyleSelector> = L"Windows.UI.Xaml.Controls.StyleSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel> = L"Windows.UI.Xaml.Controls.SwapChainBackgroundPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwapChainPanel> = L"Windows.UI.Xaml.Controls.SwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeControl> = L"Windows.UI.Xaml.Controls.SwipeControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeItem> = L"Windows.UI.Xaml.Controls.SwipeItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeItems> = L"Windows.UI.Xaml.Controls.SwipeItems";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SymbolIcon> = L"Windows.UI.Xaml.Controls.SymbolIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SymbolIconSource> = L"Windows.UI.Xaml.Controls.SymbolIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextBlock> = L"Windows.UI.Xaml.Controls.TextBlock";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextBox> = L"Windows.UI.Xaml.Controls.TextBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> = L"Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextChangedEventArgs> = L"Windows.UI.Xaml.Controls.TextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextCommandBarFlyout> = L"Windows.UI.Xaml.Controls.TextCommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> = L"Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> = L"Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> = L"Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> = L"Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> = L"Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventArgs> = L"Windows.UI.Xaml.Controls.TextControlPasteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs> = L"Windows.UI.Xaml.Controls.TimePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePicker> = L"Windows.UI.Xaml.Controls.TimePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout> = L"Windows.UI.Xaml.Controls.TimePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.TimePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem> = L"Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToggleSplitButton> = L"Windows.UI.Xaml.Controls.ToggleSplitButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.ToggleSplitButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> = L"Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToggleSwitch> = L"Windows.UI.Xaml.Controls.ToggleSwitch";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToolTip> = L"Windows.UI.Xaml.Controls.ToolTip";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ToolTipService> = L"Windows.UI.Xaml.Controls.ToolTipService";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeView> = L"Windows.UI.Xaml.Controls.TreeView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs> = L"Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> = L"Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> = L"Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs> = L"Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewItem> = L"Windows.UI.Xaml.Controls.TreeViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings> = L"Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewList> = L"Windows.UI.Xaml.Controls.TreeViewList";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewNode> = L"Windows.UI.Xaml.Controls.TreeViewNode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TwoPaneView> = L"Windows.UI.Xaml.Controls.TwoPaneView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::UIElementCollection> = L"Windows.UI.Xaml.Controls.UIElementCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::UserControl> = L"Windows.UI.Xaml.Controls.UserControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::VariableSizedWrapGrid> = L"Windows.UI.Xaml.Controls.VariableSizedWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Viewbox> = L"Windows.UI.Xaml.Controls.Viewbox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::VirtualizingPanel> = L"Windows.UI.Xaml.Controls.VirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::VirtualizingStackPanel> = L"Windows.UI.Xaml.Controls.VirtualizingStackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebView> = L"Windows.UI.Xaml.Controls.WebView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewBrush> = L"Windows.UI.Xaml.Controls.WebViewBrush";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> = L"Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> = L"Windows.UI.Xaml.Controls.WebViewDeferredPermissionRequest";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> = L"Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequest> = L"Windows.UI.Xaml.Controls.WebViewPermissionRequest";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs> = L"Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewSettings> = L"Windows.UI.Xaml.Controls.WebViewSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewWebResourceRequestedEventArgs> = L"Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WrapGrid> = L"Windows.UI.Xaml.Controls.WrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AppBarClosedDisplayMode> = L"Windows.UI.Xaml.Controls.AppBarClosedDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason> = L"Windows.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::BackgroundSizing> = L"Windows.UI.Xaml.Controls.BackgroundSizing";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewDisplayMode> = L"Windows.UI.Xaml.Controls.CalendarViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectionMode> = L"Windows.UI.Xaml.Controls.CalendarViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CandidateWindowAlignment> = L"Windows.UI.Xaml.Controls.CandidateWindowAlignment";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CharacterCasing> = L"Windows.UI.Xaml.Controls.CharacterCasing";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ClickMode> = L"Windows.UI.Xaml.Controls.ClickMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColorPickerHsvChannel> = L"Windows.UI.Xaml.Controls.ColorPickerHsvChannel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColorSpectrumComponents> = L"Windows.UI.Xaml.Controls.ColorSpectrumComponents";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ColorSpectrumShape> = L"Windows.UI.Xaml.Controls.ColorSpectrumShape";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger> = L"Windows.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition> = L"Windows.UI.Xaml.Controls.CommandBarDefaultLabelPosition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction> = L"Windows.UI.Xaml.Controls.CommandBarDynamicOverflowAction";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarLabelPosition> = L"Windows.UI.Xaml.Controls.CommandBarLabelPosition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility> = L"Windows.UI.Xaml.Controls.CommandBarOverflowButtonVisibility";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogButton> = L"Windows.UI.Xaml.Controls.ContentDialogButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogPlacement> = L"Windows.UI.Xaml.Controls.ContentDialogPlacement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> = L"Windows.UI.Xaml.Controls.ContentDialogResult";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContentLinkChangeKind> = L"Windows.UI.Xaml.Controls.ContentLinkChangeKind";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DisabledFormattingAccelerators> = L"Windows.UI.Xaml.Controls.DisabledFormattingAccelerators";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment> = L"Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IncrementalLoadingTrigger> = L"Windows.UI.Xaml.Controls.IncrementalLoadingTrigger";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement> = L"Windows.UI.Xaml.Controls.InkToolbarButtonFlyoutPlacement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind> = L"Windows.UI.Xaml.Controls.InkToolbarFlyoutItemKind";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarInitialControls> = L"Windows.UI.Xaml.Controls.InkToolbarInitialControls";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarMenuKind> = L"Windows.UI.Xaml.Controls.InkToolbarMenuKind";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarStencilKind> = L"Windows.UI.Xaml.Controls.InkToolbarStencilKind";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarToggle> = L"Windows.UI.Xaml.Controls.InkToolbarToggle";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::InkToolbarTool> = L"Windows.UI.Xaml.Controls.InkToolbarTool";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode> = L"Windows.UI.Xaml.Controls.ItemsUpdatingScrollMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode> = L"Windows.UI.Xaml.Controls.LightDismissOverlayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode> = L"Windows.UI.Xaml.Controls.ListPickerFlyoutSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewReorderMode> = L"Windows.UI.Xaml.Controls.ListViewReorderMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewSelectionMode> = L"Windows.UI.Xaml.Controls.ListViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible> = L"Windows.UI.Xaml.Controls.NavigationViewBackButtonVisible";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayMode> = L"Windows.UI.Xaml.Controls.NavigationViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewOverflowLabelMode> = L"Windows.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewPaneDisplayMode> = L"Windows.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus> = L"Windows.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled> = L"Windows.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Orientation> = L"Windows.UI.Xaml.Controls.Orientation";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PanelScrollingDirection> = L"Windows.UI.Xaml.Controls.PanelScrollingDirection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind> = L"Windows.UI.Xaml.Controls.ParallaxSourceOffsetKind";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PasswordRevealMode> = L"Windows.UI.Xaml.Controls.PasswordRevealMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement> = L"Windows.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup> = L"Windows.UI.Xaml.Controls.PivotSlideInAnimationGroup";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshPullDirection> = L"Windows.UI.Xaml.Controls.RefreshPullDirection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshVisualizerOrientation> = L"Windows.UI.Xaml.Controls.RefreshVisualizerOrientation";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RefreshVisualizerState> = L"Windows.UI.Xaml.Controls.RefreshVisualizerState";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RequiresPointer> = L"Windows.UI.Xaml.Controls.RequiresPointer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::RichEditClipboardFormat> = L"Windows.UI.Xaml.Controls.RichEditClipboardFormat";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility> = L"Windows.UI.Xaml.Controls.ScrollBarVisibility";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollIntoViewAlignment> = L"Windows.UI.Xaml.Controls.ScrollIntoViewAlignment";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ScrollMode> = L"Windows.UI.Xaml.Controls.ScrollMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SelectionMode> = L"Windows.UI.Xaml.Controls.SelectionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SnapPointsType> = L"Windows.UI.Xaml.Controls.SnapPointsType";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitViewDisplayMode> = L"Windows.UI.Xaml.Controls.SplitViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SplitViewPanePlacement> = L"Windows.UI.Xaml.Controls.SplitViewPanePlacement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::StretchDirection> = L"Windows.UI.Xaml.Controls.StretchDirection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked> = L"Windows.UI.Xaml.Controls.SwipeBehaviorOnInvoked";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SwipeMode> = L"Windows.UI.Xaml.Controls.SwipeMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::Symbol> = L"Windows.UI.Xaml.Controls.Symbol";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TreeViewSelectionMode> = L"Windows.UI.Xaml.Controls.TreeViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TwoPaneViewMode> = L"Windows.UI.Xaml.Controls.TwoPaneViewMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TwoPaneViewPriority> = L"Windows.UI.Xaml.Controls.TwoPaneViewPriority";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration> = L"Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration> = L"Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::VirtualizationMode> = L"Windows.UI.Xaml.Controls.VirtualizationMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewExecutionMode> = L"Windows.UI.Xaml.Controls.WebViewExecutionMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewPermissionState> = L"Windows.UI.Xaml.Controls.WebViewPermissionState";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewPermissionType> = L"Windows.UI.Xaml.Controls.WebViewPermissionType";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ZoomMode> = L"Windows.UI.Xaml.Controls.ZoomMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs> = L"Windows.UI.Xaml.Controls.IAnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBar> = L"Windows.UI.Xaml.Controls.IAppBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBar2> = L"Windows.UI.Xaml.Controls.IAppBar2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBar3> = L"Windows.UI.Xaml.Controls.IAppBar3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBar4> = L"Windows.UI.Xaml.Controls.IAppBar4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton> = L"Windows.UI.Xaml.Controls.IAppBarButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton3> = L"Windows.UI.Xaml.Controls.IAppBarButton3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton4> = L"Windows.UI.Xaml.Controls.IAppBarButton4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton5> = L"Windows.UI.Xaml.Controls.IAppBarButton5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory> = L"Windows.UI.Xaml.Controls.IAppBarButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics> = L"Windows.UI.Xaml.Controls.IAppBarButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3> = L"Windows.UI.Xaml.Controls.IAppBarButtonStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics4> = L"Windows.UI.Xaml.Controls.IAppBarButtonStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer> = L"Windows.UI.Xaml.Controls.IAppBarElementContainer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerFactory> = L"Windows.UI.Xaml.Controls.IAppBarElementContainerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerStatics> = L"Windows.UI.Xaml.Controls.IAppBarElementContainerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarFactory> = L"Windows.UI.Xaml.Controls.IAppBarFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides> = L"Windows.UI.Xaml.Controls.IAppBarOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3> = L"Windows.UI.Xaml.Controls.IAppBarOverrides3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator> = L"Windows.UI.Xaml.Controls.IAppBarSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory> = L"Windows.UI.Xaml.Controls.IAppBarSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> = L"Windows.UI.Xaml.Controls.IAppBarSeparatorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> = L"Windows.UI.Xaml.Controls.IAppBarSeparatorStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics> = L"Windows.UI.Xaml.Controls.IAppBarStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2> = L"Windows.UI.Xaml.Controls.IAppBarStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4> = L"Windows.UI.Xaml.Controls.IAppBarStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton> = L"Windows.UI.Xaml.Controls.IAppBarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3> = L"Windows.UI.Xaml.Controls.IAppBarToggleButton3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton4> = L"Windows.UI.Xaml.Controls.IAppBarToggleButton4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton5> = L"Windows.UI.Xaml.Controls.IAppBarToggleButton5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory> = L"Windows.UI.Xaml.Controls.IAppBarToggleButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> = L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> = L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4> = L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox> = L"Windows.UI.Xaml.Controls.IAutoSuggestBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2> = L"Windows.UI.Xaml.Controls.IAutoSuggestBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3> = L"Windows.UI.Xaml.Controls.IAutoSuggestBox3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox4> = L"Windows.UI.Xaml.Controls.IAutoSuggestBox4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics4> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> = L"Windows.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgsStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs> = L"Windows.UI.Xaml.Controls.IBackClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIcon> = L"Windows.UI.Xaml.Controls.IBitmapIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIcon2> = L"Windows.UI.Xaml.Controls.IBitmapIcon2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory> = L"Windows.UI.Xaml.Controls.IBitmapIconFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSource> = L"Windows.UI.Xaml.Controls.IBitmapIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceFactory> = L"Windows.UI.Xaml.Controls.IBitmapIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceStatics> = L"Windows.UI.Xaml.Controls.IBitmapIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics> = L"Windows.UI.Xaml.Controls.IBitmapIconStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics2> = L"Windows.UI.Xaml.Controls.IBitmapIconStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBorder> = L"Windows.UI.Xaml.Controls.IBorder";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBorder2> = L"Windows.UI.Xaml.Controls.IBorder2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBorderStatics> = L"Windows.UI.Xaml.Controls.IBorderStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IBorderStatics2> = L"Windows.UI.Xaml.Controls.IBorderStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IButton> = L"Windows.UI.Xaml.Controls.IButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IButtonFactory> = L"Windows.UI.Xaml.Controls.IButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> = L"Windows.UI.Xaml.Controls.IButtonStaticsWithFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout> = L"Windows.UI.Xaml.Controls.IButtonWithFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker> = L"Windows.UI.Xaml.Controls.ICalendarDatePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2> = L"Windows.UI.Xaml.Controls.ICalendarDatePicker2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker3> = L"Windows.UI.Xaml.Controls.ICalendarDatePicker3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> = L"Windows.UI.Xaml.Controls.ICalendarDatePickerDateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory> = L"Windows.UI.Xaml.Controls.ICalendarDatePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> = L"Windows.UI.Xaml.Controls.ICalendarDatePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> = L"Windows.UI.Xaml.Controls.ICalendarDatePickerStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics3> = L"Windows.UI.Xaml.Controls.ICalendarDatePickerStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarView> = L"Windows.UI.Xaml.Controls.ICalendarView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem> = L"Windows.UI.Xaml.Controls.ICalendarViewDayItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> = L"Windows.UI.Xaml.Controls.ICalendarViewDayItemChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory> = L"Windows.UI.Xaml.Controls.ICalendarViewDayItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> = L"Windows.UI.Xaml.Controls.ICalendarViewDayItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory> = L"Windows.UI.Xaml.Controls.ICalendarViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> = L"Windows.UI.Xaml.Controls.ICalendarViewSelectedDatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics> = L"Windows.UI.Xaml.Controls.ICalendarViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> = L"Windows.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICanvas> = L"Windows.UI.Xaml.Controls.ICanvas";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICanvasFactory> = L"Windows.UI.Xaml.Controls.ICanvasFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICanvasStatics> = L"Windows.UI.Xaml.Controls.ICanvasStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICaptureElement> = L"Windows.UI.Xaml.Controls.ICaptureElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics> = L"Windows.UI.Xaml.Controls.ICaptureElementStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICheckBox> = L"Windows.UI.Xaml.Controls.ICheckBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory> = L"Windows.UI.Xaml.Controls.ICheckBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> = L"Windows.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs> = L"Windows.UI.Xaml.Controls.IChoosingItemContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> = L"Windows.UI.Xaml.Controls.ICleanUpVirtualizedItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs> = L"Windows.UI.Xaml.Controls.IColorChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColorPicker> = L"Windows.UI.Xaml.Controls.IColorPicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColorPickerFactory> = L"Windows.UI.Xaml.Controls.IColorPickerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColorPickerStatics> = L"Windows.UI.Xaml.Controls.IColorPickerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColumnDefinition> = L"Windows.UI.Xaml.Controls.IColumnDefinition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics> = L"Windows.UI.Xaml.Controls.IColumnDefinitionStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox> = L"Windows.UI.Xaml.Controls.IComboBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox2> = L"Windows.UI.Xaml.Controls.IComboBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox3> = L"Windows.UI.Xaml.Controls.IComboBox3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox4> = L"Windows.UI.Xaml.Controls.IComboBox4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox5> = L"Windows.UI.Xaml.Controls.IComboBox5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBox6> = L"Windows.UI.Xaml.Controls.IComboBox6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory> = L"Windows.UI.Xaml.Controls.IComboBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxItem> = L"Windows.UI.Xaml.Controls.IComboBoxItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory> = L"Windows.UI.Xaml.Controls.IComboBoxItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides> = L"Windows.UI.Xaml.Controls.IComboBoxOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics> = L"Windows.UI.Xaml.Controls.IComboBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2> = L"Windows.UI.Xaml.Controls.IComboBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3> = L"Windows.UI.Xaml.Controls.IComboBoxStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics4> = L"Windows.UI.Xaml.Controls.IComboBoxStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics5> = L"Windows.UI.Xaml.Controls.IComboBoxStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics6> = L"Windows.UI.Xaml.Controls.IComboBoxStatics6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs> = L"Windows.UI.Xaml.Controls.IComboBoxTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBar> = L"Windows.UI.Xaml.Controls.ICommandBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBar2> = L"Windows.UI.Xaml.Controls.ICommandBar2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBar3> = L"Windows.UI.Xaml.Controls.ICommandBar3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarElement> = L"Windows.UI.Xaml.Controls.ICommandBarElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2> = L"Windows.UI.Xaml.Controls.ICommandBarElement2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory> = L"Windows.UI.Xaml.Controls.ICommandBarFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout> = L"Windows.UI.Xaml.Controls.ICommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyoutFactory> = L"Windows.UI.Xaml.Controls.ICommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> = L"Windows.UI.Xaml.Controls.ICommandBarOverflowPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> = L"Windows.UI.Xaml.Controls.ICommandBarOverflowPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics> = L"Windows.UI.Xaml.Controls.ICommandBarStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2> = L"Windows.UI.Xaml.Controls.ICommandBarStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3> = L"Windows.UI.Xaml.Controls.ICommandBarStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs> = L"Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentControl> = L"Windows.UI.Xaml.Controls.IContentControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentControl2> = L"Windows.UI.Xaml.Controls.IContentControl2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentControlFactory> = L"Windows.UI.Xaml.Controls.IContentControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides> = L"Windows.UI.Xaml.Controls.IContentControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentControlStatics> = L"Windows.UI.Xaml.Controls.IContentControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialog> = L"Windows.UI.Xaml.Controls.IContentDialog";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialog2> = L"Windows.UI.Xaml.Controls.IContentDialog2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialog3> = L"Windows.UI.Xaml.Controls.IContentDialog3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> = L"Windows.UI.Xaml.Controls.IContentDialogButtonClickDeferral";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> = L"Windows.UI.Xaml.Controls.IContentDialogButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs> = L"Windows.UI.Xaml.Controls.IContentDialogClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> = L"Windows.UI.Xaml.Controls.IContentDialogClosingDeferral";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs> = L"Windows.UI.Xaml.Controls.IContentDialogClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory> = L"Windows.UI.Xaml.Controls.IContentDialogFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs> = L"Windows.UI.Xaml.Controls.IContentDialogOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics> = L"Windows.UI.Xaml.Controls.IContentDialogStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics2> = L"Windows.UI.Xaml.Controls.IContentDialogStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs> = L"Windows.UI.Xaml.Controls.IContentLinkChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter> = L"Windows.UI.Xaml.Controls.IContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter2> = L"Windows.UI.Xaml.Controls.IContentPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter3> = L"Windows.UI.Xaml.Controls.IContentPresenter3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter4> = L"Windows.UI.Xaml.Controls.IContentPresenter4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter5> = L"Windows.UI.Xaml.Controls.IContentPresenter5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory> = L"Windows.UI.Xaml.Controls.IContentPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides> = L"Windows.UI.Xaml.Controls.IContentPresenterOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics> = L"Windows.UI.Xaml.Controls.IContentPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2> = L"Windows.UI.Xaml.Controls.IContentPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3> = L"Windows.UI.Xaml.Controls.IContentPresenterStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4> = L"Windows.UI.Xaml.Controls.IContentPresenterStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics5> = L"Windows.UI.Xaml.Controls.IContentPresenterStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs> = L"Windows.UI.Xaml.Controls.IContextMenuEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl> = L"Windows.UI.Xaml.Controls.IControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl2> = L"Windows.UI.Xaml.Controls.IControl2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl3> = L"Windows.UI.Xaml.Controls.IControl3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl4> = L"Windows.UI.Xaml.Controls.IControl4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl5> = L"Windows.UI.Xaml.Controls.IControl5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControl7> = L"Windows.UI.Xaml.Controls.IControl7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlFactory> = L"Windows.UI.Xaml.Controls.IControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlOverrides> = L"Windows.UI.Xaml.Controls.IControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlOverrides6> = L"Windows.UI.Xaml.Controls.IControlOverrides6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlProtected> = L"Windows.UI.Xaml.Controls.IControlProtected";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics> = L"Windows.UI.Xaml.Controls.IControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics2> = L"Windows.UI.Xaml.Controls.IControlStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics3> = L"Windows.UI.Xaml.Controls.IControlStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics4> = L"Windows.UI.Xaml.Controls.IControlStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics5> = L"Windows.UI.Xaml.Controls.IControlStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlStatics7> = L"Windows.UI.Xaml.Controls.IControlStatics7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IControlTemplate> = L"Windows.UI.Xaml.Controls.IControlTemplate";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector> = L"Windows.UI.Xaml.Controls.IDataTemplateSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2> = L"Windows.UI.Xaml.Controls.IDataTemplateSelector2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory> = L"Windows.UI.Xaml.Controls.IDataTemplateSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides> = L"Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2> = L"Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs> = L"Windows.UI.Xaml.Controls.IDatePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePicker> = L"Windows.UI.Xaml.Controls.IDatePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePicker2> = L"Windows.UI.Xaml.Controls.IDatePicker2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePicker3> = L"Windows.UI.Xaml.Controls.IDatePicker3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory> = L"Windows.UI.Xaml.Controls.IDatePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout> = L"Windows.UI.Xaml.Controls.IDatePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2> = L"Windows.UI.Xaml.Controls.IDatePickerFlyout2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter2> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics2> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> = L"Windows.UI.Xaml.Controls.IDatePickerFlyoutStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.IDatePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics> = L"Windows.UI.Xaml.Controls.IDatePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2> = L"Windows.UI.Xaml.Controls.IDatePickerStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics3> = L"Windows.UI.Xaml.Controls.IDatePickerStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.IDatePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs> = L"Windows.UI.Xaml.Controls.IDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs> = L"Windows.UI.Xaml.Controls.IDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDropDownButton> = L"Windows.UI.Xaml.Controls.IDropDownButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.IDropDownButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory> = L"Windows.UI.Xaml.Controls.IDropDownButtonAutomationPeerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonFactory> = L"Windows.UI.Xaml.Controls.IDropDownButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> = L"Windows.UI.Xaml.Controls.IDynamicOverflowItemsChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipView> = L"Windows.UI.Xaml.Controls.IFlipView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipView2> = L"Windows.UI.Xaml.Controls.IFlipView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory> = L"Windows.UI.Xaml.Controls.IFlipViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipViewItem> = L"Windows.UI.Xaml.Controls.IFlipViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory> = L"Windows.UI.Xaml.Controls.IFlipViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2> = L"Windows.UI.Xaml.Controls.IFlipViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyout> = L"Windows.UI.Xaml.Controls.IFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory> = L"Windows.UI.Xaml.Controls.IFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter> = L"Windows.UI.Xaml.Controls.IFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter2> = L"Windows.UI.Xaml.Controls.IFlyoutPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory> = L"Windows.UI.Xaml.Controls.IFlyoutPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterStatics2> = L"Windows.UI.Xaml.Controls.IFlyoutPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics> = L"Windows.UI.Xaml.Controls.IFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs> = L"Windows.UI.Xaml.Controls.IFocusDisengagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs> = L"Windows.UI.Xaml.Controls.IFocusEngagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2> = L"Windows.UI.Xaml.Controls.IFocusEngagedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIcon> = L"Windows.UI.Xaml.Controls.IFontIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIcon2> = L"Windows.UI.Xaml.Controls.IFontIcon2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIcon3> = L"Windows.UI.Xaml.Controls.IFontIcon3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconFactory> = L"Windows.UI.Xaml.Controls.IFontIconFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconSource> = L"Windows.UI.Xaml.Controls.IFontIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconSourceFactory> = L"Windows.UI.Xaml.Controls.IFontIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconSourceStatics> = L"Windows.UI.Xaml.Controls.IFontIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics> = L"Windows.UI.Xaml.Controls.IFontIconStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2> = L"Windows.UI.Xaml.Controls.IFontIconStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3> = L"Windows.UI.Xaml.Controls.IFontIconStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrame> = L"Windows.UI.Xaml.Controls.IFrame";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrame2> = L"Windows.UI.Xaml.Controls.IFrame2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrame3> = L"Windows.UI.Xaml.Controls.IFrame3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrame4> = L"Windows.UI.Xaml.Controls.IFrame4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrame5> = L"Windows.UI.Xaml.Controls.IFrame5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrameFactory> = L"Windows.UI.Xaml.Controls.IFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics> = L"Windows.UI.Xaml.Controls.IFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics2> = L"Windows.UI.Xaml.Controls.IFrameStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics5> = L"Windows.UI.Xaml.Controls.IFrameStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGrid> = L"Windows.UI.Xaml.Controls.IGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGrid2> = L"Windows.UI.Xaml.Controls.IGrid2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGrid3> = L"Windows.UI.Xaml.Controls.IGrid3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGrid4> = L"Windows.UI.Xaml.Controls.IGrid4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridFactory> = L"Windows.UI.Xaml.Controls.IGridFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridStatics> = L"Windows.UI.Xaml.Controls.IGridStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridStatics2> = L"Windows.UI.Xaml.Controls.IGridStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridStatics3> = L"Windows.UI.Xaml.Controls.IGridStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridStatics4> = L"Windows.UI.Xaml.Controls.IGridStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridView> = L"Windows.UI.Xaml.Controls.IGridView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridViewFactory> = L"Windows.UI.Xaml.Controls.IGridViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem> = L"Windows.UI.Xaml.Controls.IGridViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory> = L"Windows.UI.Xaml.Controls.IGridViewHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridViewItem> = L"Windows.UI.Xaml.Controls.IGridViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory> = L"Windows.UI.Xaml.Controls.IGridViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupItem> = L"Windows.UI.Xaml.Controls.IGroupItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory> = L"Windows.UI.Xaml.Controls.IGroupItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyle> = L"Windows.UI.Xaml.Controls.IGroupStyle";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyle2> = L"Windows.UI.Xaml.Controls.IGroupStyle2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory> = L"Windows.UI.Xaml.Controls.IGroupStyleFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector> = L"Windows.UI.Xaml.Controls.IGroupStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory> = L"Windows.UI.Xaml.Controls.IGroupStyleSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides> = L"Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs> = L"Windows.UI.Xaml.Controls.IHandwritingPanelClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs> = L"Windows.UI.Xaml.Controls.IHandwritingPanelOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingView> = L"Windows.UI.Xaml.Controls.IHandwritingView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingView2> = L"Windows.UI.Xaml.Controls.IHandwritingView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs> = L"Windows.UI.Xaml.Controls.IHandwritingViewCandidatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewFactory> = L"Windows.UI.Xaml.Controls.IHandwritingViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics> = L"Windows.UI.Xaml.Controls.IHandwritingViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics2> = L"Windows.UI.Xaml.Controls.IHandwritingViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs> = L"Windows.UI.Xaml.Controls.IHandwritingViewTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHub> = L"Windows.UI.Xaml.Controls.IHub";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubFactory> = L"Windows.UI.Xaml.Controls.IHubFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubSection> = L"Windows.UI.Xaml.Controls.IHubSection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory> = L"Windows.UI.Xaml.Controls.IHubSectionFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> = L"Windows.UI.Xaml.Controls.IHubSectionHeaderClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics> = L"Windows.UI.Xaml.Controls.IHubSectionStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHubStatics> = L"Windows.UI.Xaml.Controls.IHubStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton> = L"Windows.UI.Xaml.Controls.IHyperlinkButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory> = L"Windows.UI.Xaml.Controls.IHyperlinkButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> = L"Windows.UI.Xaml.Controls.IHyperlinkButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconElement> = L"Windows.UI.Xaml.Controls.IIconElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconElementFactory> = L"Windows.UI.Xaml.Controls.IIconElementFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconElementStatics> = L"Windows.UI.Xaml.Controls.IIconElementStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSource> = L"Windows.UI.Xaml.Controls.IIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElement> = L"Windows.UI.Xaml.Controls.IIconSourceElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElementFactory> = L"Windows.UI.Xaml.Controls.IIconSourceElementFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElementStatics> = L"Windows.UI.Xaml.Controls.IIconSourceElementStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSourceFactory> = L"Windows.UI.Xaml.Controls.IIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIconSourceStatics> = L"Windows.UI.Xaml.Controls.IIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IImage> = L"Windows.UI.Xaml.Controls.IImage";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IImage2> = L"Windows.UI.Xaml.Controls.IImage2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IImage3> = L"Windows.UI.Xaml.Controls.IImage3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IImageStatics> = L"Windows.UI.Xaml.Controls.IImageStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkCanvas> = L"Windows.UI.Xaml.Controls.IInkCanvas";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory> = L"Windows.UI.Xaml.Controls.IInkCanvasFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar> = L"Windows.UI.Xaml.Controls.IInkToolbar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar2> = L"Windows.UI.Xaml.Controls.IInkToolbar2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar3> = L"Windows.UI.Xaml.Controls.IInkToolbar3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> = L"Windows.UI.Xaml.Controls.IInkToolbarBallpointPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarBallpointPenButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPen";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomToggleButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton> = L"Windows.UI.Xaml.Controls.IInkToolbarEraserButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton2> = L"Windows.UI.Xaml.Controls.IInkToolbarEraserButton2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarEraserButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2> = L"Windows.UI.Xaml.Controls.IInkToolbarEraserButtonStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem> = L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> = L"Windows.UI.Xaml.Controls.IInkToolbarHighlighterButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarHighlighterButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs> = L"Windows.UI.Xaml.Controls.IInkToolbarIsStencilButtonCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton> = L"Windows.UI.Xaml.Controls.IInkToolbarMenuButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarMenuButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarMenuButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton> = L"Windows.UI.Xaml.Controls.IInkToolbarPenButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarPenButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarPenButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> = L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton> = L"Windows.UI.Xaml.Controls.IInkToolbarPencilButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarPencilButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton> = L"Windows.UI.Xaml.Controls.IInkToolbarRulerButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarRulerButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarRulerButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics2> = L"Windows.UI.Xaml.Controls.IInkToolbarStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics3> = L"Windows.UI.Xaml.Controls.IInkToolbarStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton> = L"Windows.UI.Xaml.Controls.IInkToolbarStencilButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarStencilButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarStencilButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton> = L"Windows.UI.Xaml.Controls.IInkToolbarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarToggleButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton> = L"Windows.UI.Xaml.Controls.IInkToolbarToolButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory> = L"Windows.UI.Xaml.Controls.IInkToolbarToolButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> = L"Windows.UI.Xaml.Controls.IInkToolbarToolButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IInsertionPanel> = L"Windows.UI.Xaml.Controls.IInsertionPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs> = L"Windows.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs> = L"Windows.UI.Xaml.Controls.IItemClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator> = L"Windows.UI.Xaml.Controls.IItemContainerGenerator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping> = L"Windows.UI.Xaml.Controls.IItemContainerMapping";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControl> = L"Windows.UI.Xaml.Controls.IItemsControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControl2> = L"Windows.UI.Xaml.Controls.IItemsControl2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControl3> = L"Windows.UI.Xaml.Controls.IItemsControl3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory> = L"Windows.UI.Xaml.Controls.IItemsControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides> = L"Windows.UI.Xaml.Controls.IItemsControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics> = L"Windows.UI.Xaml.Controls.IItemsControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate> = L"Windows.UI.Xaml.Controls.IItemsPanelTemplate";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs> = L"Windows.UI.Xaml.Controls.IItemsPickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenter> = L"Windows.UI.Xaml.Controls.IItemsPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2> = L"Windows.UI.Xaml.Controls.IItemsPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics> = L"Windows.UI.Xaml.Controls.IItemsPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2> = L"Windows.UI.Xaml.Controls.IItemsPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel> = L"Windows.UI.Xaml.Controls.IItemsStackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2> = L"Windows.UI.Xaml.Controls.IItemsStackPanel2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics> = L"Windows.UI.Xaml.Controls.IItemsStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> = L"Windows.UI.Xaml.Controls.IItemsStackPanelStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid> = L"Windows.UI.Xaml.Controls.IItemsWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2> = L"Windows.UI.Xaml.Controls.IItemsWrapGrid2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics> = L"Windows.UI.Xaml.Controls.IItemsWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> = L"Windows.UI.Xaml.Controls.IItemsWrapGridStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBox> = L"Windows.UI.Xaml.Controls.IListBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBox2> = L"Windows.UI.Xaml.Controls.IListBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBoxFactory> = L"Windows.UI.Xaml.Controls.IListBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBoxItem> = L"Windows.UI.Xaml.Controls.IListBoxItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory> = L"Windows.UI.Xaml.Controls.IListBoxItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBoxStatics> = L"Windows.UI.Xaml.Controls.IListBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2> = L"Windows.UI.Xaml.Controls.IListBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout> = L"Windows.UI.Xaml.Controls.IListPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.IListPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> = L"Windows.UI.Xaml.Controls.IListPickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListView> = L"Windows.UI.Xaml.Controls.IListView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase> = L"Windows.UI.Xaml.Controls.IListViewBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase2> = L"Windows.UI.Xaml.Controls.IListViewBase2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase3> = L"Windows.UI.Xaml.Controls.IListViewBase3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase4> = L"Windows.UI.Xaml.Controls.IListViewBase4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase5> = L"Windows.UI.Xaml.Controls.IListViewBase5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBase6> = L"Windows.UI.Xaml.Controls.IListViewBase6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory> = L"Windows.UI.Xaml.Controls.IListViewBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> = L"Windows.UI.Xaml.Controls.IListViewBaseHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory> = L"Windows.UI.Xaml.Controls.IListViewBaseHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics> = L"Windows.UI.Xaml.Controls.IListViewBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2> = L"Windows.UI.Xaml.Controls.IListViewBaseStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3> = L"Windows.UI.Xaml.Controls.IListViewBaseStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4> = L"Windows.UI.Xaml.Controls.IListViewBaseStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5> = L"Windows.UI.Xaml.Controls.IListViewBaseStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewFactory> = L"Windows.UI.Xaml.Controls.IListViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem> = L"Windows.UI.Xaml.Controls.IListViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory> = L"Windows.UI.Xaml.Controls.IListViewHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewItem> = L"Windows.UI.Xaml.Controls.IListViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory> = L"Windows.UI.Xaml.Controls.IListViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper> = L"Windows.UI.Xaml.Controls.IListViewPersistenceHelper";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> = L"Windows.UI.Xaml.Controls.IListViewPersistenceHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaElement> = L"Windows.UI.Xaml.Controls.IMediaElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaElement2> = L"Windows.UI.Xaml.Controls.IMediaElement2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaElement3> = L"Windows.UI.Xaml.Controls.IMediaElement3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics> = L"Windows.UI.Xaml.Controls.IMediaElementStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2> = L"Windows.UI.Xaml.Controls.IMediaElementStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement> = L"Windows.UI.Xaml.Controls.IMediaPlayerElement";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory> = L"Windows.UI.Xaml.Controls.IMediaPlayerElementFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> = L"Windows.UI.Xaml.Controls.IMediaPlayerElementStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter> = L"Windows.UI.Xaml.Controls.IMediaPlayerPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory> = L"Windows.UI.Xaml.Controls.IMediaPlayerPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> = L"Windows.UI.Xaml.Controls.IMediaPlayerPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls> = L"Windows.UI.Xaml.Controls.IMediaTransportControls";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2> = L"Windows.UI.Xaml.Controls.IMediaTransportControls2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls3> = L"Windows.UI.Xaml.Controls.IMediaTransportControls3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls4> = L"Windows.UI.Xaml.Controls.IMediaTransportControls4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsHelper";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4> = L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBar> = L"Windows.UI.Xaml.Controls.IMenuBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarFactory> = L"Windows.UI.Xaml.Controls.IMenuBarFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItem> = L"Windows.UI.Xaml.Controls.IMenuBarItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFactory> = L"Windows.UI.Xaml.Controls.IMenuBarItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout> = L"Windows.UI.Xaml.Controls.IMenuBarItemFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> = L"Windows.UI.Xaml.Controls.IMenuBarItemFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemStatics> = L"Windows.UI.Xaml.Controls.IMenuBarItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuBarStatics> = L"Windows.UI.Xaml.Controls.IMenuBarStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyout> = L"Windows.UI.Xaml.Controls.IMenuFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2> = L"Windows.UI.Xaml.Controls.IMenuFlyout2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory> = L"Windows.UI.Xaml.Controls.IMenuFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem2> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItem2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem3> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItem3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3> = L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> = L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2> = L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter3> = L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenter3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> = L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterStatics3> = L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenterStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics> = L"Windows.UI.Xaml.Controls.IMenuFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItem2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2> = L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigate> = L"Windows.UI.Xaml.Controls.INavigate";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationView> = L"Windows.UI.Xaml.Controls.INavigationView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationView2> = L"Windows.UI.Xaml.Controls.INavigationView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationView3> = L"Windows.UI.Xaml.Controls.INavigationView3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> = L"Windows.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> = L"Windows.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewFactory> = L"Windows.UI.Xaml.Controls.INavigationViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItem> = L"Windows.UI.Xaml.Controls.INavigationViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItem2> = L"Windows.UI.Xaml.Controls.INavigationViewItem2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase> = L"Windows.UI.Xaml.Controls.INavigationViewItemBase";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory> = L"Windows.UI.Xaml.Controls.INavigationViewItemBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemFactory> = L"Windows.UI.Xaml.Controls.INavigationViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader> = L"Windows.UI.Xaml.Controls.INavigationViewItemHeader";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory> = L"Windows.UI.Xaml.Controls.INavigationViewItemHeaderFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2> = L"Windows.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator> = L"Windows.UI.Xaml.Controls.INavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> = L"Windows.UI.Xaml.Controls.INavigationViewItemSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics> = L"Windows.UI.Xaml.Controls.INavigationViewItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics2> = L"Windows.UI.Xaml.Controls.INavigationViewItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewList> = L"Windows.UI.Xaml.Controls.INavigationViewList";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewListFactory> = L"Windows.UI.Xaml.Controls.INavigationViewListFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> = L"Windows.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> = L"Windows.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2> = L"Windows.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics> = L"Windows.UI.Xaml.Controls.INavigationViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics2> = L"Windows.UI.Xaml.Controls.INavigationViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics3> = L"Windows.UI.Xaml.Controls.INavigationViewStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings> = L"Windows.UI.Xaml.Controls.INavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> = L"Windows.UI.Xaml.Controls.INavigationViewTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> = L"Windows.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs> = L"Windows.UI.Xaml.Controls.INotifyEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2> = L"Windows.UI.Xaml.Controls.INotifyEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPage> = L"Windows.UI.Xaml.Controls.IPage";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPageFactory> = L"Windows.UI.Xaml.Controls.IPageFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPageOverrides> = L"Windows.UI.Xaml.Controls.IPageOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPageStatics> = L"Windows.UI.Xaml.Controls.IPageStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPanel> = L"Windows.UI.Xaml.Controls.IPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPanel2> = L"Windows.UI.Xaml.Controls.IPanel2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPanelFactory> = L"Windows.UI.Xaml.Controls.IPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPanelStatics> = L"Windows.UI.Xaml.Controls.IPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IParallaxView> = L"Windows.UI.Xaml.Controls.IParallaxView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IParallaxViewFactory> = L"Windows.UI.Xaml.Controls.IParallaxViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IParallaxViewStatics> = L"Windows.UI.Xaml.Controls.IParallaxViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox> = L"Windows.UI.Xaml.Controls.IPasswordBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox2> = L"Windows.UI.Xaml.Controls.IPasswordBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox3> = L"Windows.UI.Xaml.Controls.IPasswordBox3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox4> = L"Windows.UI.Xaml.Controls.IPasswordBox4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox5> = L"Windows.UI.Xaml.Controls.IPasswordBox5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs> = L"Windows.UI.Xaml.Controls.IPasswordBoxPasswordChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics> = L"Windows.UI.Xaml.Controls.IPasswordBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2> = L"Windows.UI.Xaml.Controls.IPasswordBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3> = L"Windows.UI.Xaml.Controls.IPasswordBoxStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics5> = L"Windows.UI.Xaml.Controls.IPasswordBoxStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIcon> = L"Windows.UI.Xaml.Controls.IPathIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIconFactory> = L"Windows.UI.Xaml.Controls.IPathIconFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIconSource> = L"Windows.UI.Xaml.Controls.IPathIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIconSourceFactory> = L"Windows.UI.Xaml.Controls.IPathIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIconSourceStatics> = L"Windows.UI.Xaml.Controls.IPathIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPathIconStatics> = L"Windows.UI.Xaml.Controls.IPathIconStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPersonPicture> = L"Windows.UI.Xaml.Controls.IPersonPicture";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPersonPictureFactory> = L"Windows.UI.Xaml.Controls.IPersonPictureFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPersonPictureStatics> = L"Windows.UI.Xaml.Controls.IPersonPictureStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs> = L"Windows.UI.Xaml.Controls.IPickerConfirmedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyout> = L"Windows.UI.Xaml.Controls.IPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.IPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics> = L"Windows.UI.Xaml.Controls.IPickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivot> = L"Windows.UI.Xaml.Controls.IPivot";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivot2> = L"Windows.UI.Xaml.Controls.IPivot2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivot3> = L"Windows.UI.Xaml.Controls.IPivot3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotFactory> = L"Windows.UI.Xaml.Controls.IPivotFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotItem> = L"Windows.UI.Xaml.Controls.IPivotItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs> = L"Windows.UI.Xaml.Controls.IPivotItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory> = L"Windows.UI.Xaml.Controls.IPivotItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics> = L"Windows.UI.Xaml.Controls.IPivotItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics> = L"Windows.UI.Xaml.Controls.IPivotStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics2> = L"Windows.UI.Xaml.Controls.IPivotStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics3> = L"Windows.UI.Xaml.Controls.IPivotStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IProgressBar> = L"Windows.UI.Xaml.Controls.IProgressBar";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory> = L"Windows.UI.Xaml.Controls.IProgressBarFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics> = L"Windows.UI.Xaml.Controls.IProgressBarStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IProgressRing> = L"Windows.UI.Xaml.Controls.IProgressRing";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics> = L"Windows.UI.Xaml.Controls.IProgressRingStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRadioButton> = L"Windows.UI.Xaml.Controls.IRadioButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory> = L"Windows.UI.Xaml.Controls.IRadioButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics> = L"Windows.UI.Xaml.Controls.IRadioButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingControl> = L"Windows.UI.Xaml.Controls.IRatingControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingControlFactory> = L"Windows.UI.Xaml.Controls.IRatingControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingControlStatics> = L"Windows.UI.Xaml.Controls.IRatingControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo> = L"Windows.UI.Xaml.Controls.IRatingItemFontInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory> = L"Windows.UI.Xaml.Controls.IRatingItemFontInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics> = L"Windows.UI.Xaml.Controls.IRatingItemFontInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo> = L"Windows.UI.Xaml.Controls.IRatingItemImageInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory> = L"Windows.UI.Xaml.Controls.IRatingItemImageInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics> = L"Windows.UI.Xaml.Controls.IRatingItemImageInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemInfo> = L"Windows.UI.Xaml.Controls.IRatingItemInfo";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRatingItemInfoFactory> = L"Windows.UI.Xaml.Controls.IRatingItemInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainer> = L"Windows.UI.Xaml.Controls.IRefreshContainer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainerFactory> = L"Windows.UI.Xaml.Controls.IRefreshContainerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainerStatics> = L"Windows.UI.Xaml.Controls.IRefreshContainerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> = L"Windows.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs> = L"Windows.UI.Xaml.Controls.IRefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs> = L"Windows.UI.Xaml.Controls.IRefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer> = L"Windows.UI.Xaml.Controls.IRefreshVisualizer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerFactory> = L"Windows.UI.Xaml.Controls.IRefreshVisualizerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerStatics> = L"Windows.UI.Xaml.Controls.IRefreshVisualizerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRelativePanel> = L"Windows.UI.Xaml.Controls.IRelativePanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRelativePanel2> = L"Windows.UI.Xaml.Controls.IRelativePanel2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory> = L"Windows.UI.Xaml.Controls.IRelativePanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics> = L"Windows.UI.Xaml.Controls.IRelativePanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics2> = L"Windows.UI.Xaml.Controls.IRelativePanelStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox> = L"Windows.UI.Xaml.Controls.IRichEditBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox2> = L"Windows.UI.Xaml.Controls.IRichEditBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox3> = L"Windows.UI.Xaml.Controls.IRichEditBox3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox4> = L"Windows.UI.Xaml.Controls.IRichEditBox4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox5> = L"Windows.UI.Xaml.Controls.IRichEditBox5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox6> = L"Windows.UI.Xaml.Controls.IRichEditBox6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox7> = L"Windows.UI.Xaml.Controls.IRichEditBox7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox8> = L"Windows.UI.Xaml.Controls.IRichEditBox8";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory> = L"Windows.UI.Xaml.Controls.IRichEditBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs> = L"Windows.UI.Xaml.Controls.IRichEditBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics5> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics6> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics7> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics8> = L"Windows.UI.Xaml.Controls.IRichEditBoxStatics8";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2> = L"Windows.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock> = L"Windows.UI.Xaml.Controls.IRichTextBlock";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2> = L"Windows.UI.Xaml.Controls.IRichTextBlock2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3> = L"Windows.UI.Xaml.Controls.IRichTextBlock3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock4> = L"Windows.UI.Xaml.Controls.IRichTextBlock4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5> = L"Windows.UI.Xaml.Controls.IRichTextBlock5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock6> = L"Windows.UI.Xaml.Controls.IRichTextBlock6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3> = L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics4> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics5> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics6> = L"Windows.UI.Xaml.Controls.IRichTextBlockStatics6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRowDefinition> = L"Windows.UI.Xaml.Controls.IRowDefinition";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics> = L"Windows.UI.Xaml.Controls.IRowDefinitionStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollAnchorProvider> = L"Windows.UI.Xaml.Controls.IScrollAnchorProvider";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter> = L"Windows.UI.Xaml.Controls.IScrollContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter2> = L"Windows.UI.Xaml.Controls.IScrollContentPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenterStatics2> = L"Windows.UI.Xaml.Controls.IScrollContentPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer> = L"Windows.UI.Xaml.Controls.IScrollViewer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer2> = L"Windows.UI.Xaml.Controls.IScrollViewer2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer3> = L"Windows.UI.Xaml.Controls.IScrollViewer3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer4> = L"Windows.UI.Xaml.Controls.IScrollViewer4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics> = L"Windows.UI.Xaml.Controls.IScrollViewerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2> = L"Windows.UI.Xaml.Controls.IScrollViewerStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics4> = L"Windows.UI.Xaml.Controls.IScrollViewerStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerView> = L"Windows.UI.Xaml.Controls.IScrollViewerView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> = L"Windows.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBox> = L"Windows.UI.Xaml.Controls.ISearchBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory> = L"Windows.UI.Xaml.Controls.ISearchBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs> = L"Windows.UI.Xaml.Controls.ISearchBoxQueryChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs> = L"Windows.UI.Xaml.Controls.ISearchBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs> = L"Windows.UI.Xaml.Controls.ISearchBoxResultSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics> = L"Windows.UI.Xaml.Controls.ISearchBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs> = L"Windows.UI.Xaml.Controls.ISearchBoxSuggestionsRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.ISectionsInViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory> = L"Windows.UI.Xaml.Controls.ISectionsInViewChangedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> = L"Windows.UI.Xaml.Controls.ISelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> = L"Windows.UI.Xaml.Controls.ISelectionChangedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoom> = L"Windows.UI.Xaml.Controls.ISemanticZoom";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation> = L"Windows.UI.Xaml.Controls.ISemanticZoomInformation";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation> = L"Windows.UI.Xaml.Controls.ISemanticZoomLocation";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics> = L"Windows.UI.Xaml.Controls.ISemanticZoomStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> = L"Windows.UI.Xaml.Controls.ISemanticZoomViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout> = L"Windows.UI.Xaml.Controls.ISettingsFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory> = L"Windows.UI.Xaml.Controls.ISettingsFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> = L"Windows.UI.Xaml.Controls.ISettingsFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISlider> = L"Windows.UI.Xaml.Controls.ISlider";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISlider2> = L"Windows.UI.Xaml.Controls.ISlider2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISliderFactory> = L"Windows.UI.Xaml.Controls.ISliderFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISliderStatics> = L"Windows.UI.Xaml.Controls.ISliderStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISliderStatics2> = L"Windows.UI.Xaml.Controls.ISliderStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButton> = L"Windows.UI.Xaml.Controls.ISplitButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.ISplitButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory> = L"Windows.UI.Xaml.Controls.ISplitButtonAutomationPeerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs> = L"Windows.UI.Xaml.Controls.ISplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonFactory> = L"Windows.UI.Xaml.Controls.ISplitButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonStatics> = L"Windows.UI.Xaml.Controls.ISplitButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitView> = L"Windows.UI.Xaml.Controls.ISplitView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitView2> = L"Windows.UI.Xaml.Controls.ISplitView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitView3> = L"Windows.UI.Xaml.Controls.ISplitView3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory> = L"Windows.UI.Xaml.Controls.ISplitViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> = L"Windows.UI.Xaml.Controls.ISplitViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics> = L"Windows.UI.Xaml.Controls.ISplitViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2> = L"Windows.UI.Xaml.Controls.ISplitViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanel> = L"Windows.UI.Xaml.Controls.IStackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanel2> = L"Windows.UI.Xaml.Controls.IStackPanel2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanel4> = L"Windows.UI.Xaml.Controls.IStackPanel4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanel5> = L"Windows.UI.Xaml.Controls.IStackPanel5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory> = L"Windows.UI.Xaml.Controls.IStackPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics> = L"Windows.UI.Xaml.Controls.IStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2> = L"Windows.UI.Xaml.Controls.IStackPanelStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics4> = L"Windows.UI.Xaml.Controls.IStackPanelStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics5> = L"Windows.UI.Xaml.Controls.IStackPanelStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStyleSelector> = L"Windows.UI.Xaml.Controls.IStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory> = L"Windows.UI.Xaml.Controls.IStyleSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides> = L"Windows.UI.Xaml.Controls.IStyleSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> = L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2> = L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanel2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> = L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel> = L"Windows.UI.Xaml.Controls.ISwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory> = L"Windows.UI.Xaml.Controls.ISwapChainPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics> = L"Windows.UI.Xaml.Controls.ISwapChainPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeControl> = L"Windows.UI.Xaml.Controls.ISwipeControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeControlFactory> = L"Windows.UI.Xaml.Controls.ISwipeControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeControlStatics> = L"Windows.UI.Xaml.Controls.ISwipeControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItem> = L"Windows.UI.Xaml.Controls.ISwipeItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemFactory> = L"Windows.UI.Xaml.Controls.ISwipeItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.ISwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemStatics> = L"Windows.UI.Xaml.Controls.ISwipeItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItems> = L"Windows.UI.Xaml.Controls.ISwipeItems";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemsFactory> = L"Windows.UI.Xaml.Controls.ISwipeItemsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemsStatics> = L"Windows.UI.Xaml.Controls.ISwipeItemsStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIcon> = L"Windows.UI.Xaml.Controls.ISymbolIcon";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory> = L"Windows.UI.Xaml.Controls.ISymbolIconFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSource> = L"Windows.UI.Xaml.Controls.ISymbolIconSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceFactory> = L"Windows.UI.Xaml.Controls.ISymbolIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceStatics> = L"Windows.UI.Xaml.Controls.ISymbolIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics> = L"Windows.UI.Xaml.Controls.ISymbolIconStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock> = L"Windows.UI.Xaml.Controls.ITextBlock";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock2> = L"Windows.UI.Xaml.Controls.ITextBlock2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock3> = L"Windows.UI.Xaml.Controls.ITextBlock3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock4> = L"Windows.UI.Xaml.Controls.ITextBlock4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock5> = L"Windows.UI.Xaml.Controls.ITextBlock5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock6> = L"Windows.UI.Xaml.Controls.ITextBlock6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlock7> = L"Windows.UI.Xaml.Controls.ITextBlock7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics> = L"Windows.UI.Xaml.Controls.ITextBlockStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2> = L"Windows.UI.Xaml.Controls.ITextBlockStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3> = L"Windows.UI.Xaml.Controls.ITextBlockStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics5> = L"Windows.UI.Xaml.Controls.ITextBlockStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics6> = L"Windows.UI.Xaml.Controls.ITextBlockStatics6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics7> = L"Windows.UI.Xaml.Controls.ITextBlockStatics7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox> = L"Windows.UI.Xaml.Controls.ITextBox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox2> = L"Windows.UI.Xaml.Controls.ITextBox2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox3> = L"Windows.UI.Xaml.Controls.ITextBox3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox4> = L"Windows.UI.Xaml.Controls.ITextBox4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox5> = L"Windows.UI.Xaml.Controls.ITextBox5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox6> = L"Windows.UI.Xaml.Controls.ITextBox6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox7> = L"Windows.UI.Xaml.Controls.ITextBox7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBox8> = L"Windows.UI.Xaml.Controls.ITextBox8";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory> = L"Windows.UI.Xaml.Controls.ITextBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs> = L"Windows.UI.Xaml.Controls.ITextBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics> = L"Windows.UI.Xaml.Controls.ITextBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2> = L"Windows.UI.Xaml.Controls.ITextBoxStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3> = L"Windows.UI.Xaml.Controls.ITextBoxStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics5> = L"Windows.UI.Xaml.Controls.ITextBoxStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics6> = L"Windows.UI.Xaml.Controls.ITextBoxStatics6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics7> = L"Windows.UI.Xaml.Controls.ITextBoxStatics7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics8> = L"Windows.UI.Xaml.Controls.ITextBoxStatics8";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> = L"Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2> = L"Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs> = L"Windows.UI.Xaml.Controls.ITextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout> = L"Windows.UI.Xaml.Controls.ITextCommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> = L"Windows.UI.Xaml.Controls.ITextCommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs> = L"Windows.UI.Xaml.Controls.ITextCompositionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs> = L"Windows.UI.Xaml.Controls.ITextCompositionEndedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs> = L"Windows.UI.Xaml.Controls.ITextCompositionStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs> = L"Windows.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs> = L"Windows.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs> = L"Windows.UI.Xaml.Controls.ITextControlPasteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs> = L"Windows.UI.Xaml.Controls.ITimePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePicker> = L"Windows.UI.Xaml.Controls.ITimePicker";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePicker2> = L"Windows.UI.Xaml.Controls.ITimePicker2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePicker3> = L"Windows.UI.Xaml.Controls.ITimePicker3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory> = L"Windows.UI.Xaml.Controls.ITimePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout> = L"Windows.UI.Xaml.Controls.ITimePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter> = L"Windows.UI.Xaml.Controls.ITimePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter2> = L"Windows.UI.Xaml.Controls.ITimePickerFlyoutPresenter2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics2> = L"Windows.UI.Xaml.Controls.ITimePickerFlyoutPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> = L"Windows.UI.Xaml.Controls.ITimePickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.ITimePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics> = L"Windows.UI.Xaml.Controls.ITimePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2> = L"Windows.UI.Xaml.Controls.ITimePickerStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics3> = L"Windows.UI.Xaml.Controls.ITimePickerStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> = L"Windows.UI.Xaml.Controls.ITimePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> = L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> = L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> = L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton> = L"Windows.UI.Xaml.Controls.IToggleSplitButton";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer> = L"Windows.UI.Xaml.Controls.IToggleSplitButtonAutomationPeer";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory> = L"Windows.UI.Xaml.Controls.IToggleSplitButtonAutomationPeerFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonFactory> = L"Windows.UI.Xaml.Controls.IToggleSplitButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> = L"Windows.UI.Xaml.Controls.IToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitch> = L"Windows.UI.Xaml.Controls.IToggleSwitch";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides> = L"Windows.UI.Xaml.Controls.IToggleSwitchOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics> = L"Windows.UI.Xaml.Controls.IToggleSwitchStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTip> = L"Windows.UI.Xaml.Controls.IToolTip";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTip2> = L"Windows.UI.Xaml.Controls.IToolTip2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTipFactory> = L"Windows.UI.Xaml.Controls.IToolTipFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTipService> = L"Windows.UI.Xaml.Controls.IToolTipService";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics> = L"Windows.UI.Xaml.Controls.IToolTipServiceStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTipStatics> = L"Windows.UI.Xaml.Controls.IToolTipStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IToolTipStatics2> = L"Windows.UI.Xaml.Controls.IToolTipStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeView> = L"Windows.UI.Xaml.Controls.ITreeView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeView2> = L"Windows.UI.Xaml.Controls.ITreeView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> = L"Windows.UI.Xaml.Controls.ITreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2> = L"Windows.UI.Xaml.Controls.ITreeViewCollapsedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> = L"Windows.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> = L"Windows.UI.Xaml.Controls.ITreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs> = L"Windows.UI.Xaml.Controls.ITreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs2> = L"Windows.UI.Xaml.Controls.ITreeViewExpandingEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewFactory> = L"Windows.UI.Xaml.Controls.ITreeViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItem> = L"Windows.UI.Xaml.Controls.ITreeViewItem";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItem2> = L"Windows.UI.Xaml.Controls.ITreeViewItem2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemFactory> = L"Windows.UI.Xaml.Controls.ITreeViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> = L"Windows.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics> = L"Windows.UI.Xaml.Controls.ITreeViewItemStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics2> = L"Windows.UI.Xaml.Controls.ITreeViewItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings> = L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> = L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> = L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewList> = L"Windows.UI.Xaml.Controls.ITreeViewList";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewListFactory> = L"Windows.UI.Xaml.Controls.ITreeViewListFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNode> = L"Windows.UI.Xaml.Controls.ITreeViewNode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeFactory> = L"Windows.UI.Xaml.Controls.ITreeViewNodeFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeStatics> = L"Windows.UI.Xaml.Controls.ITreeViewNodeStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics> = L"Windows.UI.Xaml.Controls.ITreeViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics2> = L"Windows.UI.Xaml.Controls.ITreeViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneView> = L"Windows.UI.Xaml.Controls.ITwoPaneView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewFactory> = L"Windows.UI.Xaml.Controls.ITwoPaneViewFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewStatics> = L"Windows.UI.Xaml.Controls.ITwoPaneViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IUIElementCollection> = L"Windows.UI.Xaml.Controls.IUIElementCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IUserControl> = L"Windows.UI.Xaml.Controls.IUserControl";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IUserControlFactory> = L"Windows.UI.Xaml.Controls.IUserControlFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IUserControlStatics> = L"Windows.UI.Xaml.Controls.IUserControlStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid> = L"Windows.UI.Xaml.Controls.IVariableSizedWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> = L"Windows.UI.Xaml.Controls.IVariableSizedWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IViewbox> = L"Windows.UI.Xaml.Controls.IViewbox";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IViewboxStatics> = L"Windows.UI.Xaml.Controls.IViewboxStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel> = L"Windows.UI.Xaml.Controls.IVirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory> = L"Windows.UI.Xaml.Controls.IVirtualizingPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides> = L"Windows.UI.Xaml.Controls.IVirtualizingPanelOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected> = L"Windows.UI.Xaml.Controls.IVirtualizingPanelProtected";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel> = L"Windows.UI.Xaml.Controls.IVirtualizingStackPanel";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides> = L"Windows.UI.Xaml.Controls.IVirtualizingStackPanelOverrides";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> = L"Windows.UI.Xaml.Controls.IVirtualizingStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView> = L"Windows.UI.Xaml.Controls.IWebView";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView2> = L"Windows.UI.Xaml.Controls.IWebView2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView3> = L"Windows.UI.Xaml.Controls.IWebView3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView4> = L"Windows.UI.Xaml.Controls.IWebView4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView5> = L"Windows.UI.Xaml.Controls.IWebView5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView6> = L"Windows.UI.Xaml.Controls.IWebView6";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebView7> = L"Windows.UI.Xaml.Controls.IWebView7";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewBrush> = L"Windows.UI.Xaml.Controls.IWebViewBrush";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics> = L"Windows.UI.Xaml.Controls.IWebViewBrushStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewContentLoadingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewDOMContentLoadedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> = L"Windows.UI.Xaml.Controls.IWebViewDeferredPermissionRequest";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4> = L"Windows.UI.Xaml.Controls.IWebViewFactory4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewLongRunningScriptDetectedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewNavigationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewNavigationFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewNavigationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewNewWindowRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest> = L"Windows.UI.Xaml.Controls.IWebViewPermissionRequest";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewPermissionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewSeparateProcessLostEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewSettings> = L"Windows.UI.Xaml.Controls.IWebViewSettings";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics> = L"Windows.UI.Xaml.Controls.IWebViewStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2> = L"Windows.UI.Xaml.Controls.IWebViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3> = L"Windows.UI.Xaml.Controls.IWebViewStatics3";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4> = L"Windows.UI.Xaml.Controls.IWebViewStatics4";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5> = L"Windows.UI.Xaml.Controls.IWebViewStatics5";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewUnsupportedUriSchemeIdentifiedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewUnviewableContentIdentifiedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2> = L"Windows.UI.Xaml.Controls.IWebViewUnviewableContentIdentifiedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs> = L"Windows.UI.Xaml.Controls.IWebViewWebResourceRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWrapGrid> = L"Windows.UI.Xaml.Controls.IWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics> = L"Windows.UI.Xaml.Controls.IWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::BackClickEventHandler> = L"Windows.UI.Xaml.Controls.BackClickEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler> = L"Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler> = L"Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> = L"Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler> = L"Windows.UI.Xaml.Controls.DragItemsStartingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler> = L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler> = L"Windows.UI.Xaml.Controls.ItemClickEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewItemToKeyHandler> = L"Windows.UI.Xaml.Controls.ListViewItemToKeyHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::ListViewKeyToItemHandler> = L"Windows.UI.Xaml.Controls.ListViewKeyToItemHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::NotifyEventHandler> = L"Windows.UI.Xaml.Controls.NotifyEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler> = L"Windows.UI.Xaml.Controls.SectionsInViewChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler> = L"Windows.UI.Xaml.Controls.SelectionChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> = L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler> = L"Windows.UI.Xaml.Controls.TextChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler> = L"Windows.UI.Xaml.Controls.TextControlPasteEventHandler";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler> = L"Windows.UI.Xaml.Controls.WebViewNavigationFailedEventHandler";
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs>{ 0x5175F55D,0x4785,0x5A72,{ 0xB4,0x62,0xEB,0x11,0xE9,0xBD,0xF8,0x97 } }; // 5175F55D-4785-5A72-B462-EB11E9BDF897
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBar>{ 0x7B0FC253,0x86A5,0x4B43,{ 0x98,0x72,0x0B,0x8A,0x62,0x34,0xB7,0x4B } }; // 7B0FC253-86A5-4B43-9872-0B8A6234B74B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBar2>{ 0xC3AB17B3,0x7AD7,0x4676,{ 0x99,0x10,0x7F,0xE3,0xF0,0xE8,0xE9,0x93 } }; // C3AB17B3-7AD7-4676-9910-7FE3F0E8E993
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBar3>{ 0x982B001F,0x752E,0x4E7A,{ 0xB0,0x55,0x54,0x80,0x2C,0x9E,0xA7,0x49 } }; // 982B001F-752E-4E7A-B055-54802C9EA749
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBar4>{ 0x94EBC8CD,0x0A64,0x4DA3,{ 0xBF,0x43,0xF1,0x31,0x00,0xA4,0x66,0x05 } }; // 94EBC8CD-0A64-4DA3-BF43-F13100A46605
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton>{ 0x4459A451,0x69E8,0x440C,{ 0x98,0x96,0x4B,0xB4,0xF5,0xF6,0x42,0xD1 } }; // 4459A451-69E8-440C-9896-4BB4F5F642D1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton3>{ 0x0B282150,0x198B,0x4E84,{ 0x8F,0x1C,0x9F,0x6A,0x8B,0xA2,0x67,0xA7 } }; // 0B282150-198B-4E84-8F1C-9F6A8BA267A7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton4>{ 0x958FCE6B,0xFD08,0x4414,{ 0x84,0x58,0x9D,0x40,0x86,0x6D,0xC8,0x4E } }; // 958FCE6B-FD08-4414-8458-9D40866DC84E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButton5>{ 0x4096FC7F,0x1AEC,0x4B0F,{ 0xA0,0x31,0xCA,0x8C,0x4E,0x06,0xD2,0xED } }; // 4096FC7F-1AEC-4B0F-A031-CA8C4E06D2ED
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ 0xBDBB1BB6,0xCB2E,0x4276,{ 0xAB,0xD6,0x79,0x35,0x13,0x05,0x10,0xE0 } }; // BDBB1BB6-CB2E-4276-ABD6-7935130510E0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ 0x7CCD13E6,0x5301,0x407F,{ 0x87,0x4E,0xDC,0x91,0x60,0xAA,0x07,0xAF } }; // 7CCD13E6-5301-407F-874E-DC9160AA07AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ 0x4D7BF314,0x2EDE,0x4328,{ 0x89,0x06,0x75,0x2A,0x1F,0x27,0xCD,0xFA } }; // 4D7BF314-2EDE-4328-8906-752A1F27CDFA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ 0x1C0AE26A,0xC755,0x4FE6,{ 0xA3,0xB6,0x0E,0x33,0x94,0xE9,0x52,0xC0 } }; // 1C0AE26A-C755-4FE6-A3B6-0E3394E952C0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer>{ 0x1D5BA067,0xA990,0x5DAB,{ 0xA9,0xC3,0xE6,0xBE,0x56,0x64,0x2A,0x1A } }; // 1D5BA067-A990-5DAB-A9C3-E6BE56642A1A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerFactory>{ 0xB506530E,0x8897,0x5D6F,{ 0xA4,0x3E,0xF0,0x58,0x63,0x38,0xD2,0x82 } }; // B506530E-8897-5D6F-A43E-F0586338D282
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerStatics>{ 0xEBBEF840,0xC745,0x5A6F,{ 0x86,0x71,0x9A,0x41,0xEB,0x21,0x96,0xE7 } }; // EBBEF840-C745-5A6F-8671-9A41EB2196E7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarFactory>{ 0x614708D1,0x8E65,0x43CB,{ 0x92,0xD7,0x8E,0xEE,0x17,0x51,0x5F,0x8D } }; // 614708D1-8E65-43CB-92D7-8EEE17515F8D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides>{ 0xF003E4E2,0x7B0F,0x4F4A,{ 0x97,0x0D,0xAE,0x8A,0x0E,0xAA,0x9B,0x70 } }; // F003E4E2-7B0F-4F4A-970D-AE8A0EAA9B70
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3>{ 0x412BBBC8,0x51D0,0x4B49,{ 0xAB,0x62,0xA3,0xDD,0x6B,0xDC,0xB2,0x98 } }; // 412BBBC8-51D0-4B49-AB62-A3DD6BDCB298
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator>{ 0x1B0795A1,0x1BC1,0x4D53,{ 0x95,0xEA,0xFB,0x0A,0x2C,0xCC,0xC9,0x05 } }; // 1B0795A1-1BC1-4D53-95EA-FB0A2CCCC905
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ 0x05DA25CD,0xF407,0x48DE,{ 0x8B,0x50,0xFF,0x87,0xD1,0xE2,0x81,0x8F } }; // 05DA25CD-F407-48DE-8B50-FF87D1E2818F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ 0x37F23484,0x5B35,0x4663,{ 0xA7,0x5D,0xF2,0xD5,0x0C,0xB9,0xC6,0x19 } }; // 37F23484-5B35-4663-A75D-F2D50CB9C619
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ 0x36C753F9,0x7373,0x4E5E,{ 0x9B,0xA4,0xC3,0x62,0x2A,0x00,0x3C,0x4E } }; // 36C753F9-7373-4E5E-9BA4-C3622A003C4E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics>{ 0x79BB7E8D,0xDCA9,0x4B5F,{ 0xA4,0x48,0x37,0xB1,0x32,0x38,0xED,0x76 } }; // 79BB7E8D-DCA9-4B5F-A448-37B13238ED76
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2>{ 0x222355E9,0x0384,0x49DE,{ 0x87,0x38,0xDF,0xC9,0xD4,0x09,0xAC,0x5D } }; // 222355E9-0384-49DE-8738-DFC9D409AC5D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4>{ 0xBA02082E,0x1165,0x4451,{ 0x94,0xB3,0xEB,0x3A,0xC7,0x3E,0x41,0x96 } }; // BA02082E-1165-4451-94B3-EB3AC73E4196
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton>{ 0x2E914438,0xFD53,0x4B8D,{ 0x85,0x8B,0x36,0x44,0x26,0x9F,0x8E,0x4D } }; // 2E914438-FD53-4B8D-858B-3644269F8E4D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ 0xEF9A85E5,0x16FF,0x4D72,{ 0xB9,0xE8,0x9B,0x86,0x1E,0xAF,0x84,0xA8 } }; // EF9A85E5-16FF-4D72-B9E8-9B861EAF84A8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ 0xB86B736E,0x3EAF,0x4751,{ 0xA8,0x97,0x00,0x02,0x9F,0x1F,0x6A,0xCA } }; // B86B736E-3EAF-4751-A897-00029F1F6ACA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ 0x9DCA3357,0xC130,0x4FB6,{ 0xA1,0xE2,0xD2,0xB3,0x48,0xFE,0x43,0xBE } }; // 9DCA3357-C130-4FB6-A1E2-D2B348FE43BE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ 0x028AA7D4,0x8F54,0x45A6,{ 0x9F,0x90,0x13,0x60,0x56,0x56,0xD7,0x93 } }; // 028AA7D4-8F54-45A6-9F90-13605656D793
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ 0xFE5AAF96,0x7929,0x4DA1,{ 0xAA,0x67,0xCD,0xDF,0x73,0xA3,0xE4,0xB5 } }; // FE5AAF96-7929-4DA1-AA67-CDDF73A3E4B5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ 0xBD4C65BF,0x2EDD,0x44D1,{ 0xAC,0xD5,0x35,0xC0,0x0E,0x2F,0x21,0xBC } }; // BD4C65BF-2EDD-44D1-ACD5-35C00E2F21BC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ 0xA478B984,0xE916,0x4137,{ 0xBD,0xBD,0x95,0xBD,0x46,0xFF,0x3C,0xE6 } }; // A478B984-E916-4137-BDBD-95BD46FF3CE6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>{ 0x103E9B13,0x3400,0x4A16,{ 0x90,0xB9,0x69,0x12,0xBF,0x06,0x97,0x4F } }; // 103E9B13-3400-4A16-90B9-6912BF06974F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ 0xAA87DDDE,0xE679,0x45B2,{ 0xA7,0xC9,0x9A,0xED,0xC3,0x9D,0xB8,0x86 } }; // AA87DDDE-E679-45B2-A7C9-9AEDC39DB886
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ 0x9BBBFCEF,0xF32D,0x402E,{ 0x90,0x09,0x05,0xBD,0xBA,0xF6,0x33,0x6E } }; // 9BBBFCEF-F32D-402E-9009-05BDBAF6336E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox4>{ 0xC22DF897,0xA3E8,0x5051,{ 0xB3,0xCC,0xB5,0xF0,0xF5,0x26,0x29,0x50 } }; // C22DF897-A3E8-5051-B3CC-B5F0F5262950
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ 0x78DCB116,0x818A,0x4CB5,{ 0xBC,0xA7,0x38,0x2C,0xE6,0xDD,0xC9,0x0D } }; // 78DCB116-818A-4CB5-BCA7-382CE6DDC90D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ 0xEE22C7F4,0xC15D,0x4FF3,{ 0x8A,0x94,0xF5,0x0D,0xFD,0xFB,0xE8,0x9A } }; // EE22C7F4-C15D-4FF3-8A94-F50DFDFBE89A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ 0x1CD297A8,0x8E6A,0x41EF,{ 0xA9,0x5D,0x71,0x57,0xDC,0x0C,0x71,0x06 } }; // 1CD297A8-8E6A-41EF-A95D-7157DC0C7106
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ 0x2CEAD2DD,0xC4D5,0x4AB2,{ 0x8A,0x13,0xAF,0xDD,0xCF,0x06,0x7C,0x86 } }; // 2CEAD2DD-C4D5-4AB2-8A13-AFDDCF067C86
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics4>{ 0xD63EFAAE,0xB9DF,0x58D8,{ 0xA0,0x0A,0xDB,0xFE,0x9F,0xFD,0xED,0xD0 } }; // D63EFAAE-B9DF-58D8-A00A-DBFE9FFDEDD0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ 0x396F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; // 396F7254-1ED5-4BC5-A060-655530BCA6BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ 0x3A6F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; // 3A6F7254-1ED5-4BC5-A060-655530BCA6BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ 0xFEF7772B,0x9F45,0x44DB,{ 0x8C,0x27,0xBD,0xA3,0xF9,0x33,0xE7,0xB5 } }; // FEF7772B-9F45-44DB-8C27-BDA3F933E7B5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs>{ 0x2AE6146C,0x477E,0x48C9,{ 0x88,0x30,0x2C,0x46,0x4B,0x7C,0x71,0x04 } }; // 2AE6146C-477E-48C9-8830-2C464B7C7104
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIcon>{ 0xE8FE17CB,0x35F7,0x40F3,{ 0xA1,0x85,0x48,0xB3,0x97,0xB7,0x3E,0x68 } }; // E8FE17CB-35F7-40F3-A185-48B397B73E68
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIcon2>{ 0x0624A20A,0x9DD1,0x4201,{ 0xBB,0x20,0x42,0x86,0x3D,0xA1,0x56,0x58 } }; // 0624A20A-9DD1-4201-BB20-42863DA15658
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory>{ 0x46D64B1D,0x7A49,0x4F66,{ 0x97,0x29,0x28,0x48,0xC7,0x88,0xE4,0x02 } }; // 46D64B1D-7A49-4F66-9729-2848C788E402
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSource>{ 0xC8E33DC7,0xD4AE,0x4A87,{ 0x94,0x7F,0xAC,0x4D,0x0B,0xCF,0x5A,0xF4 } }; // C8E33DC7-D4AE-4A87-947F-AC4D0BCF5AF4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ 0x6509E5C6,0x44B6,0x4CD1,{ 0x86,0xCD,0xC3,0x18,0x9B,0x12,0xC4,0x3C } }; // 6509E5C6-44B6-4CD1-86CD-C3189B12C43C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ 0x5A105887,0xE494,0x4D2B,{ 0x85,0x28,0x39,0x47,0x22,0x96,0x13,0x3F } }; // 5A105887-E494-4D2B-8528-39472296133F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics>{ 0xE072D117,0xE4E7,0x4E0C,{ 0x94,0x70,0x53,0xFF,0x1C,0xE8,0x4F,0x67 } }; // E072D117-E4E7-4E0C-9470-53FF1CE84F67
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ 0x9745026B,0xB742,0x4A89,{ 0xA5,0xD7,0xA0,0xE5,0xFB,0x80,0x9A,0xF1 } }; // 9745026B-B742-4A89-A5D7-A0E5FB809AF1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBorder>{ 0x797C4539,0x45BD,0x4633,{ 0xA0,0x44,0xBF,0xB0,0x2E,0xF5,0x17,0x0F } }; // 797C4539-45BD-4633-A044-BFB02EF5170F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBorder2>{ 0xA1EFBD9D,0xCB8B,0x56B5,{ 0x87,0x8D,0x3A,0x7F,0x43,0xBC,0x97,0x30 } }; // A1EFBD9D-CB8B-56B5-878D-3A7F43BC9730
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBorderStatics>{ 0xB81D1639,0xE911,0x4FD7,{ 0xA4,0xC4,0xB9,0xC7,0xF0,0x08,0xB7,0xFC } }; // B81D1639-E911-4FD7-A4C4-B9C7F008B7FC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IBorderStatics2>{ 0xA26D4476,0x803F,0x5040,{ 0xA0,0xF3,0xE6,0x6D,0xB3,0x73,0x31,0x66 } }; // A26D4476-803F-5040-A0F3-E66DB3733166
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IButton>{ 0x280335AE,0x5570,0x46C7,{ 0x8E,0x0B,0x60,0x2B,0xE7,0x12,0x29,0xA2 } }; // 280335AE-5570-46C7-8E0B-602BE71229A2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IButtonFactory>{ 0x80A13C19,0x843A,0x451C,{ 0x8C,0xF5,0x44,0xC7,0x01,0xB0,0xE2,0x16 } }; // 80A13C19-843A-451C-8CF5-44C701B0E216
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ 0x90143898,0xA16C,0x4759,{ 0xB2,0xF0,0xA5,0xF7,0xE6,0x25,0x16,0x9E } }; // 90143898-A16C-4759-B2F0-A5F7E625169E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout>{ 0x09108F87,0xDF6C,0x4180,{ 0x9B,0x3A,0xE6,0x08,0x45,0x82,0x58,0x11 } }; // 09108F87-DF6C-4180-9B3A-E60845825811
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>{ 0x63C9C16F,0x668C,0x4491,{ 0x94,0x44,0xD4,0x5D,0x8B,0xF4,0xFA,0x29 } }; // 63C9C16F-668C-4491-9444-D45D8BF4FA29
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ 0xB216C159,0x2411,0x4A60,{ 0xA7,0xAA,0x27,0x41,0x6B,0x49,0x48,0x1E } }; // B216C159-2411-4A60-A7AA-27416B49481E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker3>{ 0x645856C0,0xDB7B,0x5E75,{ 0x85,0xE9,0xF6,0x23,0xE3,0x45,0x7E,0xA6 } }; // 645856C0-DB7B-5E75-85E9-F623E3457EA6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ 0x60D90DB2,0x5010,0x46BA,{ 0x84,0x2D,0xA4,0x15,0x2C,0x65,0x04,0xE7 } }; // 60D90DB2-5010-46BA-842D-A4152C6504E7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ 0x107AAD5D,0x38BE,0x42AF,{ 0xA9,0x57,0xFC,0x86,0xA5,0xCF,0x1E,0x9A } }; // 107AAD5D-38BE-42AF-A957-FC86A5CF1E9A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ 0x39A3D291,0xAFAB,0x4B94,{ 0x83,0x95,0xBA,0x7B,0x87,0x4E,0x3C,0x8C } }; // 39A3D291-AFAB-4B94-8395-BA7B874E3C8C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ 0x30206B58,0xA2F6,0x4A00,{ 0x8D,0x13,0x33,0xC4,0x6B,0x6B,0x8E,0x0D } }; // 30206B58-A2F6-4A00-8D13-33C46B6B8E0D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics3>{ 0xB188741D,0xCF69,0x568C,{ 0x97,0x07,0xBA,0xAA,0xEC,0x2B,0x64,0xDB } }; // B188741D-CF69-568C-9707-BAAAEC2B64DB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarView>{ 0xCD639203,0xDFB5,0x4312,{ 0xAC,0x07,0xC0,0x39,0x18,0x24,0x60,0x7B } }; // CD639203-DFB5-4312-AC07-C0391824607B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ 0x0FDB2DC5,0x32C1,0x4B8F,{ 0xBE,0xFC,0x01,0x7B,0x55,0x5B,0x32,0xD2 } }; // 0FDB2DC5-32C1-4B8F-BEFC-017B555B32D2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ 0x73146666,0x1FB1,0x44F9,{ 0xB7,0xAD,0x4D,0xE8,0x59,0xEC,0xC5,0x65 } }; // 73146666-1FB1-44F9-B7AD-4DE859ECC565
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ 0x62112BDC,0x1D2F,0x4E44,{ 0x9B,0xAF,0x16,0x65,0x74,0x95,0x21,0xF2 } }; // 62112BDC-1D2F-4E44-9BAF-1665749521F2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ 0xC3A1DBBF,0xBD88,0x488B,{ 0xB9,0x16,0xD0,0x0D,0x69,0xB1,0x73,0x5A } }; // C3A1DBBF-BD88-488B-B916-D00D69B1735A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory>{ 0x3D8F82E3,0x6CC6,0x423E,{ 0x8D,0x7C,0x70,0x14,0xD9,0x54,0xDD,0xEF } }; // 3D8F82E3-6CC6-423E-8D7C-7014D954DDEF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ 0xEE6069F6,0x13EF,0x4896,{ 0x8F,0xFC,0x53,0x02,0xB1,0xB1,0x75,0x39 } }; // EE6069F6-13EF-4896-8FFC-5302B1B17539
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics>{ 0x7260F1C4,0x2F5D,0x41BD,{ 0x99,0xBB,0x45,0x71,0xB2,0x0B,0x79,0xA8 } }; // 7260F1C4-2F5D-41BD-99BB-4571B20B79A8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ 0x8A946458,0x83B0,0x4C32,{ 0x94,0x50,0x51,0x69,0xA5,0x83,0x8B,0x55 } }; // 8A946458-83B0-4C32-9450-5169A5838B55
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICanvas>{ 0x79190E19,0xCD38,0x4823,{ 0xAE,0xAE,0x64,0xA7,0x71,0x32,0xF5,0x19 } }; // 79190E19-CD38-4823-AEAE-64A77132F519
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICanvasFactory>{ 0x1B328BD1,0xB400,0x4A8E,{ 0x94,0x3B,0x5A,0xD2,0xC4,0x5B,0xE0,0xDF } }; // 1B328BD1-B400-4A8E-943B-5AD2C45BE0DF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICanvasStatics>{ 0x40CE5C46,0x2962,0x446F,{ 0xAA,0xFB,0x4C,0xDC,0x48,0x69,0x39,0xC9 } }; // 40CE5C46-2962-446F-AAFB-4CDC486939C9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICaptureElement>{ 0x31A5C0E7,0xF307,0x4D4A,{ 0xB6,0x26,0xE9,0x78,0x86,0x3F,0x5B,0x74 } }; // 31A5C0E7-F307-4D4A-B626-E978863F5B74
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics>{ 0x1E438DED,0x7DA6,0x409E,{ 0x80,0x6E,0x30,0x5A,0xE4,0xAD,0x9B,0x3F } }; // 1E438DED-7DA6-409E-806E-305AE4AD9B3F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICheckBox>{ 0x2294C894,0x7E2A,0x4B70,{ 0xB0,0x88,0x8F,0x5D,0x81,0x48,0x75,0xBA } }; // 2294C894-7E2A-4B70-B088-8F5D814875BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory>{ 0x4FA6AABB,0x3F4B,0x4301,{ 0xBE,0x07,0x11,0x72,0xEA,0x61,0xEE,0xFB } }; // 4FA6AABB-3F4B-4301-BE07-1172EA61EEFB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ 0x67DB44D6,0xD201,0x4D72,{ 0xBE,0xAC,0x5E,0x8E,0x58,0xAF,0xD8,0xC7 } }; // 67DB44D6-D201-4D72-BEAC-5E8E58AFD8C7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ 0x9BB43BCE,0xAE67,0x4A80,{ 0x83,0x63,0xE3,0xFE,0x1B,0x24,0x4F,0x2C } }; // 9BB43BCE-AE67-4A80-8363-E3FE1B244F2C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ 0xEA05CCE9,0x937C,0x4120,{ 0x84,0x06,0x79,0x21,0x85,0x78,0x43,0x38 } }; // EA05CCE9-937C-4120-8406-792185784338
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ 0x34F7201F,0xAAD0,0x4C3A,{ 0xB9,0x7B,0x2A,0xBF,0x36,0x45,0x55,0x39 } }; // 34F7201F-AAD0-4C3A-B97B-2ABF36455539
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColorPicker>{ 0x6232E371,0x5C64,0x43CB,{ 0x8B,0x35,0x7F,0x82,0xDD,0xE3,0x67,0x40 } }; // 6232E371-5C64-43CB-8B35-7F82DDE36740
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColorPickerFactory>{ 0xABAE07FF,0xAECF,0x481D,{ 0x92,0x04,0x20,0x1C,0x38,0x94,0xCD,0x1B } }; // ABAE07FF-AECF-481D-9204-201C3894CD1B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColorPickerStatics>{ 0x67CA9BE7,0x1574,0x451A,{ 0xB6,0xDF,0xFE,0x57,0xD9,0xD0,0x7B,0x46 } }; // 67CA9BE7-1574-451A-B6DF-FE57D9D07B46
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColumnDefinition>{ 0xF7F1B229,0xF024,0x467F,{ 0x97,0x0A,0x7E,0x70,0x56,0x15,0xDB,0x7B } }; // F7F1B229-F024-467F-970A-7E705615DB7B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ 0x06B0D728,0xD044,0x40C6,{ 0x94,0x2E,0xAE,0x60,0xEA,0xC7,0x48,0x51 } }; // 06B0D728-D044-40C6-942E-AE60EAC74851
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox>{ 0xB9A8D05C,0xAC97,0x47F1,{ 0xA5,0xF4,0x3F,0x9F,0x4D,0x4B,0x11,0x6C } }; // B9A8D05C-AC97-47F1-A5F4-3F9F4D4B116C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox2>{ 0xEA0CBF91,0xCA36,0x4FAD,{ 0x97,0x2A,0x2E,0x53,0xA6,0x71,0x8B,0x9F } }; // EA0CBF91-CA36-4FAD-972A-2E53A6718B9F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox3>{ 0x52400A63,0x476C,0x4BB6,{ 0xB7,0x81,0x01,0x93,0x24,0xD3,0xFE,0xD9 } }; // 52400A63-476C-4BB6-B781-019324D3FED9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox4>{ 0xB7974F49,0xB05C,0x47F9,{ 0x9A,0xAF,0xD6,0xF9,0x18,0x7B,0xE5,0xFD } }; // B7974F49-B05C-47F9-9AAF-D6F9187BE5FD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox5>{ 0xAB79D646,0x800A,0x4A28,{ 0x96,0x9B,0x34,0xBB,0x8F,0xB4,0x58,0xCF } }; // AB79D646-800A-4A28-969B-34BB8FB458CF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBox6>{ 0x61AAD6A5,0x81FB,0x5F87,{ 0xBA,0xE3,0x36,0x9F,0xBE,0x2E,0xA1,0xF3 } }; // 61AAD6A5-81FB-5F87-BAE3-369FBE2EA1F3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory>{ 0xAC0D0444,0xA65B,0x4ABD,{ 0x86,0xDF,0x30,0x16,0x04,0x9E,0xFE,0xDC } }; // AC0D0444-A65B-4ABD-86DF-3016049EFEDC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxItem>{ 0x993FD6D2,0x2AAE,0x4F3B,{ 0xB4,0x4D,0x56,0x48,0xF4,0xD0,0x61,0x14 } }; // 993FD6D2-2AAE-4F3B-B44D-5648F4D06114
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ 0x8FFFE867,0xD94C,0x4E87,{ 0x8F,0xC4,0x6E,0xBC,0xD6,0x3C,0x5A,0xC2 } }; // 8FFFE867-D94C-4E87-8FC4-6EBCD63C5AC2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides>{ 0x4F016541,0xBCFE,0x4A22,{ 0x89,0x32,0xC9,0x14,0x98,0x1C,0x22,0x40 } }; // 4F016541-BCFE-4A22-8932-C914981C2240
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics>{ 0x3E14C9B1,0xD15B,0x4DC9,{ 0x81,0x10,0xCF,0x3A,0x11,0x7B,0x96,0xE7 } }; // 3E14C9B1-D15B-4DC9-8110-CF3A117B96E7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2>{ 0x93988A11,0x402C,0x4B13,{ 0x96,0xD1,0x72,0x20,0x26,0x6B,0x92,0x20 } }; // 93988A11-402C-4B13-96D1-7220266B9220
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3>{ 0x949E140F,0xCE7F,0x4E41,{ 0xBD,0xC5,0xD1,0xD3,0x38,0x8A,0xD0,0xA6 } }; // 949E140F-CE7F-4E41-BDC5-D1D3388AD0A6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics4>{ 0xD9F58358,0xF7B0,0x46CE,{ 0x80,0x61,0xAD,0x83,0xEC,0x2F,0x2D,0xD4 } }; // D9F58358-F7B0-46CE-8061-AD83EC2F2DD4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics5>{ 0xB802CEF1,0xA264,0x444A,{ 0x9A,0x61,0xAA,0x88,0x67,0xB7,0xA6,0x3C } }; // B802CEF1-A264-444A-9A61-AA8867B7A63C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics6>{ 0x516C88E0,0xEC6B,0x54AC,{ 0x8C,0x57,0x5E,0xC0,0x80,0xEE,0x05,0xC8 } }; // 516C88E0-EC6B-54AC-8C57-5EC080EE05C8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>{ 0xCB698CBB,0x6879,0x558E,{ 0xAF,0x82,0xDF,0x1D,0x08,0xF6,0x2A,0xFA } }; // CB698CBB-6879-558E-AF82-DF1D08F62AFA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBar>{ 0x98BC4280,0x4A3D,0x4CEE,{ 0xBD,0x07,0x22,0xCE,0x94,0xC5,0xAF,0x76 } }; // 98BC4280-4A3D-4CEE-BD07-22CE94C5AF76
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBar2>{ 0x57662F58,0x5B32,0x475D,{ 0xBE,0x64,0x4C,0xA3,0x6E,0x7B,0x97,0xD4 } }; // 57662F58-5B32-475D-BE64-4CA36E7B97D4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBar3>{ 0x40EBBC23,0x2A79,0x48B3,{ 0x9A,0x67,0x64,0x9B,0x85,0x2D,0x85,0x89 } }; // 40EBBC23-2A79-48B3-9A67-649B852D8589
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarElement>{ 0x67918E1B,0xF2D5,0x44D1,{ 0x8B,0x84,0x92,0xB8,0x7F,0x80,0xA3,0x50 } }; // 67918E1B-F2D5-44D1-8B84-92B87F80A350
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2>{ 0xA9BF1236,0x4402,0x4688,{ 0xB9,0x87,0x9D,0x2B,0x9B,0x7B,0xF2,0xBD } }; // A9BF1236-4402-4688-B987-9D2B9B7BF2BD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory>{ 0x67BDEB44,0x20E1,0x4177,{ 0xAD,0x44,0xF6,0x17,0xB3,0x74,0xE8,0xE8 } }; // 67BDEB44-20E1-4177-AD44-F617B374E8E8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout>{ 0xFECD2C4D,0xF16A,0x58CD,{ 0x8A,0xCA,0xDB,0x0F,0x04,0x6F,0x25,0xC3 } }; // FECD2C4D-F16A-58CD-8ACA-DB0F046F25C3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ 0xDD6441B3,0x6DF1,0x593D,{ 0xB8,0x0C,0xDA,0xF5,0xC1,0xDA,0xEE,0x41 } }; // DD6441B3-6DF1-593D-B80C-DAF5C1DAEE41
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ 0x6E7A9427,0x58EF,0x4366,{ 0xA0,0x17,0x18,0xC1,0x93,0xD5,0x6B,0x14 } }; // 6E7A9427-58EF-4366-A017-18C193D56B14
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ 0x8323F774,0x5AAA,0x4049,{ 0xB7,0x8F,0x21,0x8C,0x6A,0x19,0xC3,0x7E } }; // 8323F774-5AAA-4049-B78F-218C6A19C37E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics>{ 0x5BD981EA,0xE278,0x409C,{ 0xB5,0x22,0xF9,0x46,0xCA,0x25,0x3B,0x44 } }; // 5BD981EA-E278-409C-B522-F946CA253B44
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2>{ 0x3D9EC8E3,0x51A9,0x4E34,{ 0x95,0x6C,0x70,0x81,0xD0,0x6F,0x26,0xF8 } }; // 3D9EC8E3-51A9-4E34-956C-7081D06F26F8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3>{ 0xB45A24A4,0x8AF1,0x4843,{ 0xB3,0x19,0xE0,0x3F,0xC4,0x5A,0xB7,0x26 } }; // B45A24A4-8AF1-4843-B319-E03FC45AB726
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ 0x07DEEAA7,0x018F,0x4DDA,{ 0xB3,0x99,0xFD,0x4E,0x13,0xA3,0x1B,0xEA } }; // 07DEEAA7-018F-4DDA-B399-FD4E13A31BEA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentControl>{ 0xA26DD1DC,0xCD44,0x435C,{ 0xBE,0x94,0x01,0xD6,0x24,0x1C,0x23,0x1C } }; // A26DD1DC-CD44-435C-BE94-01D6241C231C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentControl2>{ 0x652C208C,0x8CCF,0x4399,{ 0xBD,0x3E,0x5A,0x01,0x5A,0xA1,0xBC,0x03 } }; // 652C208C-8CCF-4399-BD3E-5A015AA1BC03
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentControlFactory>{ 0xAB017B19,0x196E,0x4ED5,{ 0xA2,0x7F,0x55,0xC5,0x8F,0xB1,0x67,0x3F } }; // AB017B19-196E-4ED5-A27F-55C58FB1673F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides>{ 0x5F4C0B10,0xE38E,0x4B5D,{ 0xBE,0x1A,0x5E,0xD0,0x42,0x46,0xA6,0x35 } }; // 5F4C0B10-E38E-4B5D-BE1A-5ED04246A635
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentControlStatics>{ 0x116982A4,0x5CF5,0x4C05,{ 0xA5,0x3F,0x15,0xE4,0x87,0x6C,0x85,0xEC } }; // 116982A4-5CF5-4C05-A53F-15E4876C85EC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialog>{ 0x38DC4404,0xD24E,0x40D8,{ 0x94,0x15,0x34,0x94,0x64,0xC1,0xAF,0xDC } }; // 38DC4404-D24E-40D8-9415-349464C1AFDC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialog2>{ 0x2F93EB45,0xEE43,0x4303,{ 0x9B,0x38,0x3F,0xE1,0xA1,0x11,0xEC,0xBF } }; // 2F93EB45-EE43-4303-9B38-3FE1A111ECBF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialog3>{ 0x9D9A089E,0xF954,0x4EDE,{ 0xB0,0x7F,0x6B,0x06,0x9A,0x9C,0x01,0x80 } }; // 9D9A089E-F954-4EDE-B07F-6B069A9C0180
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ 0xBD0D3637,0x19CE,0x4946,{ 0x8E,0x77,0xBD,0x03,0xFE,0x8E,0xBE,0x03 } }; // BD0D3637-19CE-4946-8E77-BD03FE8EBE03
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ 0x5F34C205,0x8AFA,0x4CF2,{ 0x8C,0xA0,0x26,0x4D,0x73,0xBE,0xD6,0x3D } }; // 5F34C205-8AFA-4CF2-8CA0-264D73BED63D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ 0x905522EF,0x2CBA,0x4AF8,{ 0xB6,0x66,0xCC,0x36,0xC2,0x27,0x32,0xFB } }; // 905522EF-2CBA-4AF8-B666-CC36C22732FB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ 0x215D4D11,0x7E30,0x4CB9,{ 0xA7,0x10,0x5A,0x4F,0x9C,0xCA,0x8B,0x42 } }; // 215D4D11-7E30-4CB9-A710-5A4F9CCA8B42
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ 0xDB3C1C34,0x3BBF,0x47D4,{ 0xBE,0x4F,0xC9,0xEC,0x11,0x59,0x18,0xB9 } }; // DB3C1C34-3BBF-47D4-BE4F-C9EC115918B9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory>{ 0x05557178,0x9D8E,0x4315,{ 0xB3,0x7D,0x68,0x0C,0x14,0x01,0x2C,0x35 } }; // 05557178-9D8E-4315-B37D-680C14012C35
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ 0x0966B315,0x5F59,0x4999,{ 0x9E,0x3E,0x37,0x4C,0x0F,0x17,0x4B,0x04 } }; // 0966B315-5F59-4999-9E3E-374C0F174B04
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics>{ 0x23AB47A6,0x508A,0x4F33,{ 0xB7,0x86,0xF2,0xFA,0x96,0xD8,0x69,0xAF } }; // 23AB47A6-508A-4F33-B786-F2FA96D869AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics2>{ 0x329825B2,0x8FB0,0x4125,{ 0xBB,0x07,0xE7,0x9A,0x5A,0x03,0x81,0x9F } }; // 329825B2-8FB0-4125-BB07-E79A5A03819F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ 0x64F3F1DE,0x89FB,0x4B77,{ 0x8B,0x9B,0x19,0x1B,0x6D,0x19,0x29,0x0A } }; // 64F3F1DE-89FB-4B77-8B9B-191B6D19290A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter>{ 0x79FDE5B4,0xCD37,0x491C,{ 0x88,0x45,0xDA,0xF4,0x72,0xDE,0xFF,0xF6 } }; // 79FDE5B4-CD37-491C-8845-DAF472DEFFF6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter2>{ 0x5138E958,0x335D,0x4210,{ 0x8B,0xBB,0x0A,0xA2,0xB4,0xB5,0xC2,0x9E } }; // 5138E958-335D-4210-8BBB-0AA2B4B5C29E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter3>{ 0xB038876A,0x9C4D,0x4402,{ 0xAC,0x56,0xA2,0x23,0x48,0x7D,0xC6,0xC8 } }; // B038876A-9C4D-4402-AC56-A223487DC6C8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter4>{ 0x997B1B17,0x3BF8,0x432B,{ 0x8F,0xD9,0x68,0xC7,0xBA,0xB2,0x1F,0x9D } }; // 997B1B17-3BF8-432B-8FD9-68C7BAB21F9D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenter5>{ 0xD248970C,0xB785,0x5E7F,{ 0x9C,0x11,0x8A,0x6C,0xD3,0xD5,0x92,0x9B } }; // D248970C-B785-5E7F-9C11-8A6CD3D5929B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory>{ 0x3339D4F7,0x4815,0x44C4,{ 0x9F,0x76,0x68,0xC8,0x38,0x80,0xEF,0x10 } }; // 3339D4F7-4815-44C4-9F76-68C83880EF10
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ 0xA76339ED,0x32FF,0x438B,{ 0xAA,0xD5,0x1D,0x68,0xFA,0xE9,0x34,0x26 } }; // A76339ED-32FF-438B-AAD5-1D68FAE93426
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics>{ 0x18C2893B,0xDA2E,0x4426,{ 0xB8,0x5A,0x2C,0x7E,0x21,0x71,0xBE,0xDF } }; // 18C2893B-DA2E-4426-B85A-2C7E2171BEDF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ 0xC7D89DD9,0x06E6,0x46BE,{ 0xA8,0xA0,0x9C,0x11,0x7D,0x30,0x24,0xA3 } }; // C7D89DD9-06E6-46BE-A8A0-9C117D3024A3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ 0xCBE6CF5B,0x38B1,0x4D5D,{ 0xB0,0x98,0xBC,0x94,0xB3,0x5C,0x8D,0xDF } }; // CBE6CF5B-38B1-4D5D-B098-BC94B35C8DDF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ 0xFF8BE292,0xAF28,0x47EB,{ 0xA5,0xC3,0xDC,0x44,0xCE,0xD4,0x0F,0xD2 } }; // FF8BE292-AF28-47EB-A5C3-DC44CED40FD2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics5>{ 0x169E700F,0xE8E6,0x5F6A,{ 0xB9,0x7E,0x7E,0xF8,0xF7,0x00,0x6F,0x49 } }; // 169E700F-E8E6-5F6A-B97E-7EF8F7006F49
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ 0x1F7DF263,0xC14B,0x4528,{ 0xB6,0xF0,0x63,0x79,0x99,0xD8,0x3C,0xC6 } }; // 1F7DF263-C14B-4528-B6F0-637999D83CC6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl>{ 0xA8912263,0x2951,0x4F58,{ 0xA9,0xC5,0x5A,0x13,0x4E,0xAA,0x7F,0x07 } }; // A8912263-2951-4F58-A9C5-5A134EAA7F07
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl2>{ 0x43E0FE10,0x14EC,0x427E,{ 0x8C,0x57,0xDE,0xE6,0x0D,0xF6,0x0A,0xA8 } }; // 43E0FE10-14EC-427E-8C57-DEE60DF60AA8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl3>{ 0x077B29E4,0xDADE,0x4F55,{ 0x9B,0x96,0x09,0xE2,0x1B,0x28,0xEB,0x1C } }; // 077B29E4-DADE-4F55-9B96-09E21B28EB1C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl4>{ 0x0E18AEEE,0x5F2E,0x44EA,{ 0x85,0x13,0xD3,0x87,0x5C,0x0A,0x75,0x13 } }; // 0E18AEEE-5F2E-44EA-8513-D3875C0A7513
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl5>{ 0x5EBB51D5,0x9E58,0x49B7,{ 0xBC,0x2D,0x01,0x55,0xFF,0x11,0x86,0x64 } }; // 5EBB51D5-9E58-49B7-BC2D-0155FF118664
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControl7>{ 0x3550DBE1,0xE561,0x5934,{ 0xA3,0xEF,0x7D,0xB8,0xBF,0x6E,0x3B,0x45 } }; // 3550DBE1-E561-5934-A3EF-7DB8BF6E3B45
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlFactory>{ 0xB12B1D5A,0x6419,0x4E16,{ 0xB2,0x12,0xA4,0x53,0x36,0xB7,0x57,0x78 } }; // B12B1D5A-6419-4E16-B212-A45336B75778
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlOverrides>{ 0xA09691DF,0x9824,0x41FE,{ 0xB5,0x30,0xB0,0xD8,0x99,0x0E,0x64,0xC1 } }; // A09691DF-9824-41FE-B530-B0D8990E64C1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlOverrides6>{ 0xE194C96A,0xD8CC,0x4339,{ 0xA0,0xE1,0x2E,0x9C,0x42,0x08,0x79,0xEC } }; // E194C96A-D8CC-4339-A0E1-2E9C420879EC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlProtected>{ 0x1791587A,0x2A7C,0x4981,{ 0xA2,0xD8,0xAB,0x99,0xFF,0xFC,0x65,0xB9 } }; // 1791587A-2A7C-4981-A2D8-AB99FFFC65B9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics>{ 0x473B305B,0x877D,0x4C35,{ 0x8F,0xCA,0x46,0xA0,0x5F,0x96,0x60,0x7A } }; // 473B305B-877D-4C35-8FCA-46A05F96607A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics2>{ 0x32233E36,0xAB74,0x4A25,{ 0xA5,0x56,0x45,0x29,0x31,0x35,0xB2,0xC5 } }; // 32233E36-AB74-4A25-A556-45293135B2C5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics3>{ 0xAAD15E61,0xE4B9,0x4D72,{ 0xB6,0x53,0x93,0x41,0x49,0xAA,0x50,0x03 } }; // AAD15E61-E4B9-4D72-B653-934149AA5003
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics4>{ 0x59FDA728,0xC05A,0x4EC2,{ 0x8A,0x4B,0x06,0xAD,0x69,0xB6,0x6E,0x15 } }; // 59FDA728-C05A-4EC2-8A4B-06AD69B66E15
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics5>{ 0xF635B5A3,0xEF8E,0x404F,{ 0x87,0x7B,0x55,0x80,0x47,0x37,0x10,0xA6 } }; // F635B5A3-EF8E-404F-877B-5580473710A6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlStatics7>{ 0xAEE1CA45,0xC910,0x5DAB,{ 0xA2,0x66,0xFD,0xF5,0x0C,0x0B,0xED,0xD2 } }; // AEE1CA45-C910-5DAB-A266-FDF50C0BEDD2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IControlTemplate>{ 0xEFD2418E,0x41E0,0x48BB,{ 0x8B,0x82,0x91,0xED,0xA1,0xBA,0x3F,0xE2 } }; // EFD2418E-41E0-48BB-8B82-91EDA1BA3FE2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector>{ 0xA907D496,0x46A0,0x4CD7,{ 0x8D,0xBE,0xF9,0xA5,0x81,0xDF,0x60,0xB1 } }; // A907D496-46A0-4CD7-8DBE-F9A581DF60B1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ 0x3792BC47,0x8C4B,0x4257,{ 0xA5,0xAE,0xCC,0x3F,0x8E,0xD7,0x86,0xEB } }; // 3792BC47-8C4B-4257-A5AE-CC3F8ED786EB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ 0x511BAAD0,0x210A,0x457D,{ 0x95,0x21,0x43,0x3D,0x2B,0x11,0xB7,0xD2 } }; // 511BAAD0-210A-457D-9521-433D2B11B7D2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ 0x2D162925,0x5966,0x4BFA,{ 0x86,0x38,0x4D,0x34,0x56,0x89,0xF6,0xCF } }; // 2D162925-5966-4BFA-8638-4D345689F6CF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ 0x6C3FB5FC,0x8E84,0x4C91,{ 0xAC,0x15,0x04,0xA1,0xD8,0x85,0x50,0x0F } }; // 6C3FB5FC-8E84-4C91-AC15-04A1D885500F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ 0xA1527B12,0x59C1,0x4521,{ 0xB2,0x8C,0xB1,0x76,0x67,0x5E,0x7C,0x5A } }; // A1527B12-59C1-4521-B28C-B176675E7C5A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePicker>{ 0x06DA3946,0x08B8,0x4103,{ 0x8B,0x8A,0x09,0x3E,0xFD,0x6A,0x76,0x57 } }; // 06DA3946-08B8-4103-8B8A-093EFD6A7657
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePicker2>{ 0xBB28B475,0x2C1F,0x4340,{ 0x9E,0x30,0x94,0x8F,0x99,0xC9,0xE5,0x7A } }; // BB28B475-2C1F-4340-9E30-948F99C9E57A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePicker3>{ 0x7DA12A3B,0xA764,0x5AE1,{ 0xAB,0xAE,0x6A,0xFF,0xC1,0x42,0x8E,0x1E } }; // 7DA12A3B-A764-5AE1-ABAE-6AFFC1428E1E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory>{ 0xEEC3CA84,0x9896,0x4A7D,{ 0xBB,0x35,0x6F,0xB2,0x1E,0xAE,0xCA,0x11 } }; // EEC3CA84-9896-4A7D-BB35-6FB21EAECA11
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>{ 0xFBF33B1A,0xA3A4,0x4DF8,{ 0x92,0x28,0x23,0xA5,0xAC,0x27,0xDF,0x4E } }; // FBF33B1A-A3A4-4DF8-9228-23A5AC27DF4E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ 0xCFB18DBB,0x9931,0x4119,{ 0x8B,0xDA,0x54,0xA8,0x6F,0xDF,0xAC,0x84 } }; // CFB18DBB-9931-4119-8BDA-54A86FDFAC84
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ 0x9D9BC289,0x00D2,0x4AAC,{ 0x9C,0x85,0xD7,0x4F,0x06,0x36,0x78,0x87 } }; // 9D9BC289-00D2-4AAC-9C85-D74F06367887
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ 0xAA9C91DA,0x07F6,0x4CDF,{ 0x89,0xB4,0xDD,0xA3,0xBD,0xB0,0xEA,0x6B } }; // AA9C91DA-07F6-4CDF-89B4-DDA3BDB0EA6B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ 0x7C62F70E,0x2DDC,0x4381,{ 0x83,0x2F,0x54,0xCB,0xDF,0xAA,0x84,0x9A } }; // 7C62F70E-2DDC-4381-832F-54CBDFAA849A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter2>{ 0xC5B2578F,0x96D8,0x55CC,{ 0x97,0xEE,0x3F,0x88,0xFC,0x85,0xE4,0x79 } }; // C5B2578F-96D8-55CC-97EE-3F88FC85E479
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics2>{ 0x4DC0C49E,0x1F8E,0x5966,{ 0xBB,0xDB,0x21,0x57,0x50,0xC7,0x3A,0xBA } }; // 4DC0C49E-1F8E-5966-BBDB-215750C73ABA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ 0xCD570377,0x5845,0x4C12,{ 0x8C,0x10,0x59,0x2D,0x9F,0xCC,0x7C,0xD9 } }; // CD570377-5845-4C12-8C10-592D9FCC7CD9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ 0xAFD3E569,0x81E6,0x4B54,{ 0x84,0xA9,0x68,0x07,0x9B,0x73,0xE3,0x4E } }; // AFD3E569-81E6-4B54-84A9-68079B73E34E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>{ 0x564DCEED,0x744A,0x5C3A,{ 0x9B,0xD2,0x4D,0xCD,0x99,0x19,0xA7,0xB7 } }; // 564DCEED-744A-5C3A-9BD2-4DCD9919A7B7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics>{ 0x182E7C69,0x2116,0x4C67,{ 0xB5,0x13,0x71,0x33,0x64,0x83,0x1D,0x79 } }; // 182E7C69-2116-4C67-B513-713364831D79
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2>{ 0xF1076DF6,0xFBA6,0x4550,{ 0x8B,0x88,0xA6,0x42,0x08,0x47,0xF6,0x0D } }; // F1076DF6-FBA6-4550-8B88-A6420847F60D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics3>{ 0xA9F80AFE,0xA30A,0x5F26,{ 0xA4,0x46,0xFE,0xC2,0x07,0x5D,0x4A,0x0E } }; // A9F80AFE-A30A-5F26-A446-FEC2075D4A0E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ 0x1AE661B2,0xB1B4,0x4273,{ 0x96,0xE0,0x19,0xDA,0xFF,0x18,0x74,0x46 } }; // 1AE661B2-B1B4-4273-96E0-19DAFF187446
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ 0xAF05F22F,0x9E78,0x4B21,{ 0x9A,0x8E,0x41,0xC2,0xD1,0x36,0x7A,0x2A } }; // AF05F22F-9E78-4B21-9A8E-41C2D1367A2A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ 0x71CF215C,0xDAED,0x4783,{ 0xAA,0x11,0xDC,0x57,0x4D,0x27,0x13,0xE9 } }; // 71CF215C-DAED-4783-AA11-DC574D2713E9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDropDownButton>{ 0x671F74E6,0x2A27,0x5FA8,{ 0xB0,0xA2,0x79,0xB2,0xE7,0x1E,0xBD,0x87 } }; // 671F74E6-2A27-5FA8-B0A2-79B2E71EBD87
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ 0x72F294F1,0xBFF6,0x5D07,{ 0x9D,0xB4,0x54,0x13,0x45,0x06,0xBC,0x80 } }; // 72F294F1-BFF6-5D07-9DB4-54134506BC80
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ 0xB8C449B2,0x6354,0x5C0C,{ 0x9E,0x95,0xE0,0xC9,0x9A,0x29,0x3A,0x44 } }; // B8C449B2-6354-5C0C-9E95-E0C99A293A44
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDropDownButtonFactory>{ 0x0D9F8AB5,0xE70D,0x52BD,{ 0x9C,0xA0,0x36,0xCE,0xEC,0xAA,0x64,0x2A } }; // 0D9F8AB5-E70D-52BD-9CA0-36CEECAA642A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ 0xC93C736F,0x6F6E,0x4E43,{ 0x90,0xD9,0x9B,0x46,0xA0,0xD8,0x8B,0x9F } }; // C93C736F-6F6E-4E43-90D9-9B46A0D88B9F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipView>{ 0xA1582F68,0x3D7D,0x4D3B,{ 0xB7,0x1D,0x48,0x8E,0xED,0x1E,0x34,0x93 } }; // A1582F68-3D7D-4D3B-B71D-488EED1E3493
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipView2>{ 0xC4FEA4FD,0x7AF3,0x4952,{ 0x9F,0xD9,0x9E,0x09,0x87,0xFC,0x4F,0x29 } }; // C4FEA4FD-7AF3-4952-9FD9-9E0987FC4F29
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory>{ 0xF1DEA9BE,0x9AE8,0x4D4B,{ 0xAB,0x43,0x16,0xD3,0x1E,0x05,0xF4,0xF3 } }; // F1DEA9BE-9AE8-4D4B-AB43-16D31E05F4F3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipViewItem>{ 0x56196565,0xCE2B,0x4BDA,{ 0xA3,0x6B,0x82,0xA2,0xB8,0xB0,0xD4,0xC0 } }; // 56196565-CE2B-4BDA-A36B-82A2B8B0D4C0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ 0xF21D91FE,0x22A0,0x4412,{ 0xA8,0x53,0x9D,0x6A,0x6E,0x8F,0x2A,0xAF } }; // F21D91FE-22A0-4412-A853-9D6A6E8F2AAF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2>{ 0x70E3D93F,0x4308,0x4BA2,{ 0xBB,0xCE,0xE2,0xCB,0x0E,0xD3,0x44,0x76 } }; // 70E3D93F-4308-4BA2-BBCE-E2CB0ED34476
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyout>{ 0x6584EBDF,0xCBC7,0x4E19,{ 0x84,0x3A,0xA1,0x4F,0x24,0xA7,0x93,0xEA } }; // 6584EBDF-CBC7-4E19-843A-A14F24A793EA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory>{ 0x4BED4933,0x008E,0x4B03,{ 0xA3,0x85,0x79,0xFE,0x52,0x66,0xDD,0xBA } }; // 4BED4933-008E-4B03-A385-79FE5266DDBA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter>{ 0x827D5B79,0xE37B,0x46A5,{ 0x8D,0x44,0x63,0xA1,0x1A,0x58,0x0E,0x83 } }; // 827D5B79-E37B-46A5-8D44-63A11A580E83
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter2>{ 0x4F857E92,0x36B4,0x5048,{ 0x90,0x51,0xA9,0x92,0xB4,0x3E,0x8A,0x1D } }; // 4F857E92-36B4-5048-9051-A992B43E8A1D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ 0xEE4D668F,0xDA76,0x469A,{ 0xAC,0xD7,0x30,0x60,0xE6,0x13,0xAD,0xE7 } }; // EE4D668F-DA76-469A-ACD7-3060E613ADE7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterStatics2>{ 0x1492AE4B,0x2727,0x5E8E,{ 0x91,0x05,0x6D,0x7A,0x2B,0x11,0x85,0xB2 } }; // 1492AE4B-2727-5E8E-9105-6D7A2B1185B2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics>{ 0x61364E0B,0xDB75,0x47E1,{ 0xB2,0xC3,0x5B,0x90,0x1C,0x3D,0x74,0xB6 } }; // 61364E0B-DB75-47E1-B2C3-5B901C3D74B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ 0x5E14280F,0x953E,0x4CF8,{ 0xB9,0xEA,0xC5,0x30,0xA1,0xCE,0x02,0xAD } }; // 5E14280F-953E-4CF8-B9EA-C530A1CE02AD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ 0xA69FC352,0xDA66,0x404C,{ 0x82,0x3F,0x53,0x58,0x59,0x4E,0x70,0xBB } }; // A69FC352-DA66-404C-823F-5358594E70BB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ 0x4A59E0F4,0x87C0,0x4CCD,{ 0x93,0xC4,0xA3,0xA0,0x1C,0xE3,0x92,0x65 } }; // 4A59E0F4-87C0-4CCD-93C4-A3A01CE39265
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIcon>{ 0xD4D61391,0x39AC,0x4950,{ 0x91,0x66,0x36,0x06,0xC2,0x64,0x41,0x8B } }; // D4D61391-39AC-4950-9166-3606C264418B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIcon2>{ 0xF6EBD84D,0x37E8,0x46EE,{ 0xA5,0x74,0x41,0xAD,0x55,0x04,0x82,0xE0 } }; // F6EBD84D-37E8-46EE-A574-41AD550482E0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIcon3>{ 0x6155D919,0x1C6C,0x4950,{ 0x87,0x94,0x23,0x1E,0xF0,0x91,0x4D,0x94 } }; // 6155D919-1C6C-4950-8794-231EF0914D94
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconFactory>{ 0x1C781B6B,0x37BF,0x4DDC,{ 0xA1,0xA8,0x1B,0x77,0xDB,0x3C,0xF0,0xEA } }; // 1C781B6B-37BF-4DDC-A1A8-1B77DB3CF0EA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconSource>{ 0x2211AC9A,0x74E3,0x43ED,{ 0xB6,0x1C,0x21,0xAF,0xC7,0xDF,0x4D,0x10 } }; // 2211AC9A-74E3-43ED-B61C-21AFC7DF4D10
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ 0x8BDCF6BD,0xFC06,0x42B8,{ 0xB3,0x0B,0x75,0x05,0x08,0x2A,0xC3,0x8F } }; // 8BDCF6BD-FC06-42B8-B30B-7505082AC38F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ 0x8C0E422F,0x8269,0x43B1,{ 0xB9,0x5A,0xEF,0x07,0x0E,0x86,0x77,0x0D } }; // 8C0E422F-8269-43B1-B95A-EF070E86770D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics>{ 0xB3BE7BF6,0x1467,0x4086,{ 0xBB,0xCB,0x4E,0x21,0xD9,0x7A,0x7B,0x4D } }; // B3BE7BF6-1467-4086-BBCB-4E21D97A7B4D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2>{ 0xE6080672,0x08F8,0x43D3,{ 0x87,0x90,0x46,0x04,0x29,0x0C,0xBE,0xBD } }; // E6080672-08F8-43D3-8790-4604290CBEBD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3>{ 0xA4528B17,0xB084,0x4BD5,{ 0xAA,0xB4,0xFE,0xAE,0x9D,0x3B,0x5D,0x26 } }; // A4528B17-B084-4BD5-AAB4-FEAE9D3B5D26
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrame>{ 0x68EA500B,0x3FE9,0x4735,{ 0xB6,0xA0,0xE7,0x60,0x19,0x33,0xB0,0x89 } }; // 68EA500B-3FE9-4735-B6A0-E7601933B089
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrame2>{ 0x3F367F87,0x9F5A,0x4B04,{ 0xB8,0x18,0xB5,0x54,0xC0,0x69,0x59,0x7A } }; // 3F367F87-9F5A-4B04-B818-B554C069597A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrame3>{ 0x648A2B4D,0x53CA,0x4B5A,{ 0xAA,0x8E,0x3C,0xC7,0x44,0x0F,0x4A,0x67 } }; // 648A2B4D-53CA-4B5A-AA8E-3CC7440F4A67
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrame4>{ 0x9B17C21A,0xBD2B,0x4A00,{ 0x99,0xEB,0x94,0x6B,0xE9,0x61,0x80,0x84 } }; // 9B17C21A-BD2B-4A00-99EB-946BE9618084
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrame5>{ 0x453FB92E,0x82B5,0x5F93,{ 0x92,0xAB,0x15,0x34,0x18,0x06,0xC9,0xDA } }; // 453FB92E-82B5-5F93-92AB-15341806C9DA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrameFactory>{ 0x02EE93D4,0x448E,0x469E,{ 0x97,0x99,0x0A,0x8A,0x1F,0x70,0xF1,0x71 } }; // 02EE93D4-448E-469E-9799-0A8A1F70F171
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics>{ 0xD5ACF0E9,0xD967,0x471B,{ 0x84,0x59,0xC8,0xAF,0x43,0x41,0x51,0x1B } }; // D5ACF0E9-D967-471B-8459-C8AF4341511B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics2>{ 0xE4B5CDFE,0x42F0,0x4462,{ 0xA1,0xC1,0x5D,0x25,0x9D,0xD8,0x2A,0x03 } }; // E4B5CDFE-42F0-4462-A1C1-5D259DD82A03
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IFrameStatics5>{ 0x53C89B25,0xF0E0,0x58F1,{ 0xA0,0x6D,0x44,0x10,0x75,0x91,0x4F,0xF8 } }; // 53C89B25-F0E0-58F1-A06D-441075914FF8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGrid>{ 0xFD104460,0x2E15,0x4BA3,{ 0x8B,0x8F,0xFA,0x69,0x3A,0x41,0x61,0xE9 } }; // FD104460-2E15-4BA3-8B8F-FA693A4161E9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGrid2>{ 0xF76EFA41,0x380E,0x45DB,{ 0xBE,0x87,0x9E,0x13,0x26,0xBA,0x4B,0x57 } }; // F76EFA41-380E-45DB-BE87-9E1326BA4B57
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGrid3>{ 0x12DFC5FC,0x2342,0x4DD2,{ 0x9E,0x7D,0x20,0x90,0xA1,0x71,0xD1,0xEF } }; // 12DFC5FC-2342-4DD2-9E7D-2090A171D1EF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGrid4>{ 0xED02D274,0x81F1,0x5AC2,{ 0xA0,0xC3,0xBB,0xDA,0xF5,0xA3,0xFF,0xEE } }; // ED02D274-81F1-5AC2-A0C3-BBDAF5A3FFEE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridFactory>{ 0xAE814041,0xC531,0x43B4,{ 0xBF,0x99,0x12,0xF5,0x06,0xF7,0xB0,0x1C } }; // AE814041-C531-43B4-BF99-12F506F7B01C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridStatics>{ 0x64FE2E9F,0xF951,0x42B6,{ 0xA9,0xCE,0xBB,0x17,0x9A,0xF1,0x15,0x95 } }; // 64FE2E9F-F951-42B6-A9CE-BB179AF11595
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridStatics2>{ 0x2D666658,0x58B6,0x4A1B,{ 0x84,0x1B,0x87,0x5B,0xA9,0x3B,0x5D,0x6A } }; // 2D666658-58B6-4A1B-841B-875BA93B5D6A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridStatics3>{ 0xC3FBA437,0x5A0C,0x407A,{ 0x96,0x21,0x79,0x54,0x53,0x86,0xD8,0x11 } }; // C3FBA437-5A0C-407A-9621-79545386D811
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridStatics4>{ 0x691AF349,0x1F63,0x57AA,{ 0x87,0x26,0x9C,0xDC,0xC1,0xB1,0x4C,0x02 } }; // 691AF349-1F63-57AA-8726-9CDCC1B14C02
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridView>{ 0x026AE934,0xB67E,0x4D80,{ 0x8F,0x72,0x8A,0xA6,0x4B,0x4D,0x82,0x7B } }; // 026AE934-B67E-4D80-8F72-8AA64B4D827B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridViewFactory>{ 0xD9BCCA89,0x09F9,0x4C6E,{ 0xA8,0x3E,0xF1,0x99,0x14,0x6F,0x0E,0x7D } }; // D9BCCA89-09F9-4C6E-A83E-F199146F0E7D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ 0x72D75D7E,0x5DC3,0x4FFC,{ 0x9B,0x1C,0x93,0x9B,0x5C,0x37,0x16,0x1C } }; // 72D75D7E-5DC3-4FFC-9B1C-939B5C37161C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ 0x36E0C96E,0xB56A,0x4B3B,{ 0x8B,0xAC,0x7A,0xEF,0x5E,0x6F,0x99,0x45 } }; // 36E0C96E-B56A-4B3B-8BAC-7AEF5E6F9945
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridViewItem>{ 0x7D9901F1,0xE7C1,0x4E83,{ 0xB4,0x70,0xC9,0xD6,0xD7,0xBD,0xA9,0xF5 } }; // 7D9901F1-E7C1-4E83-B470-C9D6D7BDA9F5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory>{ 0x229B00AF,0x3FA6,0x43E9,{ 0x97,0x9D,0x07,0xEA,0x0D,0x62,0x80,0xDC } }; // 229B00AF-3FA6-43E9-979D-07EA0D6280DC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupItem>{ 0x4AE8D5D1,0x7228,0x4A16,{ 0xA6,0x1F,0x88,0xC0,0xE8,0xF4,0x5C,0x76 } }; // 4AE8D5D1-7228-4A16-A61F-88C0E8F45C76
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory>{ 0xD9A1D53E,0xB1E0,0x4319,{ 0x98,0x08,0x7A,0x9E,0x88,0x7E,0x13,0xB0 } }; // D9A1D53E-B1E0-4319-9808-7A9E887E13B0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyle>{ 0x71CA300B,0xB89E,0x4184,{ 0xB0,0xDF,0xA9,0xE9,0x54,0x47,0xDE,0x8D } }; // 71CA300B-B89E-4184-B0DF-A9E95447DE8D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyle2>{ 0x69F90679,0x3A11,0x4FE7,{ 0xB4,0xDF,0x2A,0x01,0x39,0xD4,0x01,0x8B } }; // 69F90679-3A11-4FE7-B4DF-2A0139D4018B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory>{ 0x56FF664F,0xE2D7,0x4F49,{ 0x80,0x3D,0xC7,0x27,0xCD,0xF9,0x37,0x2D } }; // 56FF664F-E2D7-4F49-803D-C727CDF9372D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector>{ 0x6DDA119E,0x9A74,0x478F,{ 0xA3,0x39,0x5B,0xB5,0x2D,0xE6,0xC5,0x1E } }; // 6DDA119E-9A74-478F-A339-5BB52DE6C51E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ 0xBF570D33,0xB2F6,0x481F,{ 0xA4,0x50,0xC8,0x0C,0x29,0x1F,0xB2,0x2D } }; // BF570D33-B2F6-481F-A450-C80C291FB22D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ 0xF691CAB2,0x77AD,0x4D3D,{ 0xA5,0x1C,0x8E,0xF9,0xC3,0x83,0x64,0x56 } }; // F691CAB2-77AD-4D3D-A51C-8EF9C3836456
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ 0x4FB91C73,0x192D,0x4DD2,{ 0xA1,0xA2,0x80,0xED,0x01,0x12,0x58,0x76 } }; // 4FB91C73-192D-4DD2-A1A2-80ED01125876
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ 0xFC15B16D,0x9F15,0x47B0,{ 0xB9,0x7A,0x94,0xA6,0x8C,0xC6,0x13,0x45 } }; // FC15B16D-9F15-47B0-B97A-94A68CC61345
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingView>{ 0xC44204A7,0x31E0,0x44BC,{ 0xA3,0x8B,0x4B,0xEE,0x64,0xEC,0xD9,0x9F } }; // C44204A7-31E0-44BC-A38B-4BEE64ECD99F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>{ 0x4BCF991B,0x0DE1,0x5C9E,{ 0x89,0x70,0x37,0xB9,0x87,0x8F,0xE1,0x71 } }; // 4BCF991B-0DE1-5C9E-8970-37B9878FE171
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs>{ 0x6F5F63D8,0x56B1,0x56C5,{ 0xA4,0x16,0xC1,0x9C,0x16,0xBF,0x78,0x84 } }; // 6F5F63D8-56B1-56C5-A416-C19C16BF7884
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ 0xE00C873F,0x0012,0x475C,{ 0x89,0x0C,0x97,0xAE,0x30,0x86,0x42,0xDE } }; // E00C873F-0012-475C-890C-97AE308642DE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ 0xBB7CEED0,0xCC5F,0x4004,{ 0xB8,0xC8,0x14,0x2E,0x19,0x5F,0x06,0x18 } }; // BB7CEED0-CC5F-4004-B8C8-142E195F0618
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics2>{ 0x2CD052E4,0xD703,0x5183,{ 0xA1,0xBE,0x7E,0x28,0x5D,0xF9,0x78,0xD9 } }; // 2CD052E4-D703-5183-A1BE-7E285DF978D9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs>{ 0x55AC0F47,0xF5E4,0x55DA,{ 0xB8,0xA3,0xD4,0x18,0xB7,0x56,0x42,0x91 } }; // 55AC0F47-F5E4-55DA-B8A3-D418B7564291
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHub>{ 0xAE692E82,0x7314,0x4F51,{ 0xAB,0x11,0x2A,0xF1,0xED,0x4A,0x19,0xF8 } }; // AE692E82-7314-4F51-AB11-2AF1ED4A19F8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubFactory>{ 0xDCA6B2BA,0xC6F5,0x4961,{ 0x99,0x53,0xC5,0x18,0x73,0xDB,0x54,0x24 } }; // DCA6B2BA-C6F5-4961-9953-C51873DB5424
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubSection>{ 0xA4E66CB7,0x7FDD,0x4FE0,{ 0xAB,0x49,0xC2,0x46,0x63,0x9D,0xCC,0xF9 } }; // A4E66CB7-7FDD-4FE0-AB49-C246639DCCF9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory>{ 0xFFF55FA2,0xECE4,0x4BBA,{ 0xAA,0x3B,0x98,0x04,0xAE,0xF4,0x78,0x83 } }; // FFF55FA2-ECE4-4BBA-AA3B-9804AEF47883
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ 0xE1C5EF04,0x1EDD,0x4112,{ 0xAE,0xEB,0x99,0x6C,0x96,0x40,0x06,0x98 } }; // E1C5EF04-1EDD-4112-AEEB-996C96400698
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics>{ 0x12D2D85A,0xEA27,0x42D1,{ 0x99,0x8B,0x61,0xE5,0x2A,0xED,0x84,0x2B } }; // 12D2D85A-EA27-42D1-998B-61E52AED842B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHubStatics>{ 0x0E6FA034,0xAD3C,0x4F32,{ 0xB7,0x01,0xE2,0x4F,0xAB,0x56,0x20,0x28 } }; // 0E6FA034-AD3C-4F32-B701-E24FAB562028
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton>{ 0xCCEBACA3,0x3B5C,0x4F4C,{ 0x9B,0xFD,0x86,0x88,0x7B,0xC7,0x97,0x72 } }; // CCEBACA3-3B5C-4F4C-9BFD-86887BC79772
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ 0x43521BAD,0x4E97,0x4DA9,{ 0xA6,0x4D,0x93,0x5D,0xFD,0x8C,0xED,0xF2 } }; // 43521BAD-4E97-4DA9-A64D-935DFD8CEDF2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ 0xFBAEB5C7,0xCDB7,0x4263,{ 0xB7,0xD6,0x3C,0x0D,0x29,0x04,0xED,0x98 } }; // FBAEB5C7-CDB7-4263-B7D6-3C0D2904ED98
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconElement>{ 0x9AF0803B,0xD04C,0x467A,{ 0xBB,0xD5,0x9B,0x81,0xF0,0x2D,0x9A,0x56 } }; // 9AF0803B-D04C-467A-BBD5-9B81F02D9A56
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconElementFactory>{ 0xCF37A562,0x0424,0x43C7,{ 0x8B,0xEA,0x72,0x0F,0xBA,0x97,0x3E,0xF1 } }; // CF37A562-0424-43C7-8BEA-720FBA973EF1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconElementStatics>{ 0xBE19A623,0x77CF,0x472F,{ 0x82,0xEA,0x04,0x78,0x01,0xD1,0x20,0x12 } }; // BE19A623-77CF-472F-82EA-047801D12012
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSource>{ 0x92EC8D55,0x45EB,0x47A4,{ 0x86,0x3C,0x91,0xB2,0x24,0x04,0x4F,0x9B } }; // 92EC8D55-45EB-47A4-863C-91B224044F9B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElement>{ 0xD7A64502,0xDDDA,0x55CD,{ 0xB4,0xC9,0xE7,0x9A,0xBC,0x8B,0x0E,0xA4 } }; // D7A64502-DDDA-55CD-B4C9-E79ABC8B0EA4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElementFactory>{ 0x26B59FAB,0x2092,0x5B95,{ 0xB5,0x9E,0xF2,0x7F,0x21,0x06,0x89,0xE7 } }; // 26B59FAB-2092-5B95-B59E-F27F210689E7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSourceElementStatics>{ 0xF37CFD45,0xF3D8,0x50FF,{ 0xA1,0xB8,0x0F,0xBA,0x4A,0xE6,0x1D,0x79 } }; // F37CFD45-F3D8-50FF-A1B8-0FBA4AE61D79
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSourceFactory>{ 0x4D117CF1,0x1FD6,0x49D7,{ 0xB4,0x83,0x02,0xEC,0x3D,0xE9,0x97,0xD6 } }; // 4D117CF1-1FD6-49D7-B483-02EC3DE997D6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIconSourceStatics>{ 0x1D389DBE,0x1CD3,0x4F4F,{ 0x83,0xB0,0x55,0xDC,0x63,0x87,0x68,0x5B } }; // 1D389DBE-1CD3-4F4F-83B0-55DC6387685B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IImage>{ 0x495B7402,0x9AF3,0x4E50,{ 0xAA,0x90,0x03,0x38,0x8F,0x30,0x86,0xD2 } }; // 495B7402-9AF3-4E50-AA90-03388F3086D2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IImage2>{ 0xF445119E,0x881F,0x48BB,{ 0x87,0x3A,0x64,0x41,0x7C,0xA4,0xF0,0x02 } }; // F445119E-881F-48BB-873A-64417CA4F002
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IImage3>{ 0x06EBE792,0x47C2,0x4D92,{ 0xA4,0x88,0x8C,0xD6,0x85,0xD0,0x6A,0xCA } }; // 06EBE792-47C2-4D92-A488-8CD685D06ACA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IImageStatics>{ 0x89903772,0xC336,0x43D1,{ 0x9D,0x51,0xC3,0xBB,0xD5,0xD5,0xD6,0x91 } }; // 89903772-C336-43D1-9D51-C3BBD5D5D691
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkCanvas>{ 0x29443C28,0x8E48,0x4FC8,{ 0xA4,0x73,0x35,0xB0,0xBA,0x12,0xAC,0xEA } }; // 29443C28-8E48-4FC8-A473-35B0BA12ACEA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory>{ 0x924AC2DE,0xAB04,0x48F0,{ 0x96,0x53,0xE0,0xF2,0xDA,0x4D,0xBF,0x1A } }; // 924AC2DE-AB04-48F0-9653-E0F2DA4DBF1A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar>{ 0x3DDD0CCA,0x51F0,0x486F,{ 0xA0,0x3E,0x4E,0xE1,0x3D,0xC1,0x2B,0xCB } }; // 3DDD0CCA-51F0-486F-A03E-4EE13DC12BCB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar2>{ 0x86F0C111,0xB484,0x454A,{ 0xAE,0x78,0x1D,0x25,0xA3,0x3D,0x1C,0x67 } }; // 86F0C111-B484-454A-AE78-1D25A33D1C67
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbar3>{ 0xA8A6DEF0,0x7AA8,0x5326,{ 0xB7,0xC4,0x88,0xAE,0x25,0x01,0x33,0x62 } }; // A8A6DEF0-7AA8-5326-B7C4-88AE25013362
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ 0x158329F8,0x1E99,0x3ACC,{ 0x91,0x0F,0x9D,0xA2,0xD8,0x72,0xAE,0x12 } }; // 158329F8-1E99-3ACC-910F-9DA2D872AE12
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ 0x2F0BD3E4,0xD754,0x4255,{ 0x8E,0xC4,0x00,0xCD,0x10,0x12,0x96,0xAB } }; // 2F0BD3E4-D754-4255-8EC4-00CD101296AB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ 0x4082207B,0x2F3D,0x4E6A,{ 0x8C,0x27,0xFE,0x61,0xEF,0x7E,0x70,0xEB } }; // 4082207B-2F3D-4E6A-8C27-FE61EF7E70EB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ 0x46024401,0x2B2A,0x4F3C,{ 0xA5,0x3C,0x1A,0x04,0x5A,0x40,0x8E,0xFA } }; // 46024401-2B2A-4F3C-A53C-1A045A408EFA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ 0x0F2EF0BA,0xC8B9,0x4C36,{ 0x89,0x87,0x94,0xD3,0xDA,0xFE,0xDE,0x18 } }; // 0F2EF0BA-C8B9-4C36-8987-94D3DAFEDE18
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ 0x373C25F4,0xE555,0x4E85,{ 0xA8,0x0D,0xDA,0x6B,0x84,0x33,0xDB,0xDE } }; // 373C25F4-E555-4E85-A80D-DA6B8433DBDE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ 0xD214D636,0xF1AA,0x4F48,{ 0xBF,0x2C,0xA9,0x26,0xCA,0xAE,0x4C,0x60 } }; // D214D636-F1AA-4F48-BF2C-A926CAAE4C60
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ 0x9D22EB6C,0x1255,0x4256,{ 0xB6,0xBD,0x82,0xC2,0xFD,0x27,0x34,0x88 } }; // 9D22EB6C-1255-4256-B6BD-82C2FD273488
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ 0x550C4D84,0x4F54,0x4FBE,{ 0xB1,0x2B,0xE0,0xA5,0x0A,0xAB,0x0D,0x05 } }; // 550C4D84-4F54-4FBE-B12B-E0A50AAB0D05
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ 0x4A00374D,0x4CD2,0x4ED9,{ 0x86,0x3E,0x83,0xB8,0xCF,0x3F,0xD2,0xAF } }; // 4A00374D-4CD2-4ED9-863E-83B8CF3FD2AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ 0x9F98ACD7,0xC605,0x4105,{ 0xBE,0x10,0x39,0x43,0xA7,0xC0,0xDA,0x3C } }; // 9F98ACD7-C605-4105-BE10-3943A7C0DA3C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ 0xC295FE4E,0x30EB,0x4130,{ 0xA6,0xB6,0x8C,0x85,0xD8,0xE2,0x6E,0x89 } }; // C295FE4E-30EB-4130-A6B6-8C85D8E26E89
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ 0x11FE4CB9,0xBBAC,0x4314,{ 0x93,0x44,0x92,0xC6,0x69,0x3D,0xDE,0xAF } }; // 11FE4CB9-BBAC-4314-9344-92C6693DDEAF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ 0x4CBDB92E,0x5F5E,0x4B35,{ 0xA4,0x1C,0x16,0xFF,0xB0,0x28,0x3B,0xC0 } }; // 4CBDB92E-5F5E-4B35-A41C-16FFB0283BC0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ 0xE7A59257,0x5AE8,0x436D,{ 0xB2,0xE2,0x93,0xC2,0x00,0x90,0x0C,0xA0 } }; // E7A59257-5AE8-436D-B2E2-93C200900CA0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ 0xFD40611D,0xD1BA,0x4D67,{ 0xAF,0x00,0x14,0x80,0x36,0xAD,0x49,0x2C } }; // FD40611D-D1BA-4D67-AF00-148036AD492C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ 0x038A1736,0xC5CD,0x4311,{ 0x83,0xF4,0x38,0xCB,0xF0,0x7C,0x20,0x66 } }; // 038A1736-C5CD-4311-83F4-38CBF07C2066
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory>{ 0x3947AA99,0x36B1,0x4374,{ 0xAB,0x5C,0x98,0xBF,0x07,0xA4,0x32,0x0B } }; // 3947AA99-36B1-4374-AB5C-98BF07A4320B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ 0x92B68786,0x37EE,0x4915,{ 0x9E,0x89,0xE1,0x87,0x56,0x4A,0x88,0x9A } }; // 92B68786-37EE-4915-9E89-E187564A889A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ 0x352E7B93,0x803B,0x4F0E,{ 0x8C,0x72,0x9D,0xFC,0x03,0x29,0x32,0x9F } }; // 352E7B93-803B-4F0E-8C72-9DFC0329329F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ 0x1FE54B64,0x4063,0x4A5F,{ 0xB8,0x9C,0x9F,0x58,0x93,0x5E,0xE3,0x79 } }; // 1FE54B64-4063-4A5F-B89C-9F58935EE379
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ 0x0B3CC15B,0x7ABF,0x487E,{ 0xAC,0xC1,0x5B,0x50,0x48,0xFE,0xE6,0xD2 } }; // 0B3CC15B-7ABF-487E-ACC1-5B5048FEE6D2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ 0x7C334ADD,0x42CA,0x4943,{ 0x94,0xA4,0x23,0xB5,0xA6,0xE5,0x5C,0xF1 } }; // 7C334ADD-42CA-4943-94A4-23B5A6E55CF1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ 0x026EDD26,0xD32B,0x4E28,{ 0xA0,0x33,0xD5,0x09,0x76,0x62,0xB2,0x92 } }; // 026EDD26-D32B-4E28-A033-D5097662B292
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ 0x860ECAE5,0x7633,0x4EA1,{ 0xA2,0x09,0x50,0x39,0x2D,0x1A,0xEB,0xD1 } }; // 860ECAE5-7633-4EA1-A209-50392D1AEBD1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ 0x7A463A9D,0x5DC7,0x44A7,{ 0xAF,0xD0,0x2B,0x68,0x5C,0xB9,0xA9,0x6C } }; // 7A463A9D-5DC7-44A7-AFD0-2B685CB9A96C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ 0xF03B17A6,0xB8B0,0x4A87,{ 0xA9,0x61,0x37,0xCD,0x05,0xD8,0x31,0x37 } }; // F03B17A6-B8B0-4A87-A961-37CD05D83137
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ 0xE0B80C21,0xB032,0x40EE,{ 0xA2,0xB9,0x50,0x7F,0x6C,0xCB,0x82,0x7B } }; // E0B80C21-B032-40EE-A2B9-507F6CCB827B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ 0xB1463D21,0x59CB,0x4A83,{ 0x92,0xE1,0x69,0x28,0x42,0x79,0x7B,0x2E } }; // B1463D21-59CB-4A83-92E1-692842797B2E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ 0xB922CE42,0x09F0,0x453D,{ 0x80,0x26,0x44,0xDA,0xF2,0x75,0x3F,0x65 } }; // B922CE42-09F0-453D-8026-44DAF2753F65
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ 0x601AE5F6,0x28A5,0x44CC,{ 0x89,0xA6,0x38,0x0E,0x91,0xA5,0x72,0xDD } }; // 601AE5F6-28A5-44CC-89A6-380E91A572DD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ 0x67F065EE,0xF5E7,0x46EB,{ 0x91,0x87,0x8D,0x3C,0xA3,0xAF,0x89,0x1B } }; // 67F065EE-F5E7-46EB-9187-8D3CA3AF891B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ 0x48A61BEF,0x19CE,0x41BB,{ 0xAB,0xE0,0x7C,0x87,0x26,0xFA,0xE7,0x5E } }; // 48A61BEF-19CE-41BB-ABE0-7C8726FAE75E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ 0x5B112832,0x1984,0x4148,{ 0x9F,0x25,0x38,0x2B,0x35,0xDB,0x08,0x7F } }; // 5B112832-1984-4148-9F25-382B35DB087F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ 0xDB66D85F,0xCFD6,0x495F,{ 0x93,0xAB,0xB8,0x56,0x6A,0xF9,0xF8,0xAF } }; // DB66D85F-CFD6-495F-93AB-B8566AF9F8AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ 0x4A992832,0x1984,0x4148,{ 0x9F,0x25,0x38,0x2B,0x35,0xDB,0x08,0x7F } }; // 4A992832-1984-4148-9F25-382B35DB087F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ 0xBB26D85F,0xCFD6,0x495F,{ 0x93,0xAB,0xB8,0x56,0x6A,0xF9,0xF8,0xAF } }; // BB26D85F-CFD6-495F-93AB-B8566AF9F8AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ 0xBAE75F65,0xBE30,0x4BEE,{ 0x96,0x4B,0xFF,0x9E,0x49,0x8F,0xEE,0x37 } }; // BAE75F65-BE30-4BEE-964B-FF9E498FEE37
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics>{ 0xA3B493BB,0xCB4F,0x4E6B,{ 0xA3,0x3D,0xF1,0x1E,0x7A,0x29,0x5E,0xFA } }; // A3B493BB-CB4F-4E6B-A33D-F11E7A295EFA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ 0xAAC1F8F2,0x2C1F,0x4E9C,{ 0xB3,0xF3,0x31,0xFF,0x22,0xB5,0x1C,0x7A } }; // AAC1F8F2-2C1F-4E9C-B3F3-31FF22B51C7A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics3>{ 0xA0EE663D,0xB63F,0x516E,{ 0xA0,0xA4,0x07,0x04,0xC4,0x54,0x4D,0x62 } }; // A0EE663D-B63F-516E-A0A4-0704C4544D62
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ 0x306A2616,0x5B40,0x4BF3,{ 0x92,0xB7,0xF1,0xDF,0x93,0x6A,0xEF,0xF5 } }; // 306A2616-5B40-4BF3-92B7-F1DF936AEFF5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ 0xA20701D1,0x8A70,0x4D77,{ 0x89,0xD4,0x17,0x30,0xA3,0xA5,0x8E,0xDF } }; // A20701D1-8A70-4D77-89D4-1730A3A58EDF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ 0x4748C07F,0x63E4,0x420D,{ 0x93,0x9A,0x6B,0x72,0x43,0xE9,0xD1,0x24 } }; // 4748C07F-63E4-420D-939A-6B7243E9D124
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ 0xB4A278FA,0xF5F0,0x4B1F,{ 0xBE,0xB0,0x0B,0x8A,0x29,0x90,0x5A,0x4A } }; // B4A278FA-F5F0-4B1F-BEB0-0B8A29905A4A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ 0xB2F90710,0xE5A1,0x4365,{ 0x9D,0x1A,0xE5,0xB7,0xAD,0x8B,0x96,0x68 } }; // B2F90710-E5A1-4365-9D1A-E5B7AD8B9668
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ 0x5C5AF41E,0xCCB7,0x4458,{ 0x80,0x64,0xA9,0x84,0x9D,0x31,0x56,0x1B } }; // 5C5AF41E-CCB7-4458-8064-A9849D31561B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ 0x6293BF4B,0x89FE,0x4ED0,{ 0xA1,0xA6,0x88,0xD3,0xEB,0xA9,0x17,0xB2 } }; // 6293BF4B-89FE-4ED0-A1A6-88D3EBA917B2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ 0x9E097D18,0xD136,0x4EF6,{ 0xB0,0xFD,0x1A,0x78,0xC2,0x88,0x4A,0x01 } }; // 9E097D18-D136-4EF6-B0FD-1A78C2884A01
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IInsertionPanel>{ 0x6B8DE08F,0x6527,0x4D39,{ 0xBC,0xBF,0x58,0xB0,0x1D,0xA9,0x23,0xD7 } }; // 6B8DE08F-6527-4D39-BCBF-58B01DA923D7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ 0x16F597CD,0xEBFF,0x4FB4,{ 0x87,0x14,0x26,0x14,0x74,0x18,0xB9,0x45 } }; // 16F597CD-EBFF-4FB4-8714-26147418B945
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs>{ 0x9C314242,0xF29A,0x494D,{ 0xA3,0xA5,0xD4,0xC7,0xB2,0xA4,0x68,0x52 } }; // 9C314242-F29A-494D-A3A5-D4C7B2A46852
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>{ 0x40765F00,0x83F0,0x4D7F,{ 0xB1,0xB8,0xF1,0x9D,0xE4,0xF1,0xD5,0xDA } }; // 40765F00-83F0-4D7F-B1B8-F19DE4F1D5DA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping>{ 0x53C9F23A,0xF25D,0x446A,{ 0x99,0xB8,0xC7,0xAE,0xB8,0x39,0x05,0x0F } }; // 53C9F23A-F25D-446A-99B8-C7AEB839050F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControl>{ 0xF4A91DD8,0xD979,0x4381,{ 0x86,0x52,0xBD,0xA0,0x34,0x2A,0x76,0x5E } }; // F4A91DD8-D979-4381-8652-BDA0342A765E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControl2>{ 0x754C3266,0x0529,0x45E3,{ 0x87,0x48,0xBF,0x74,0x7D,0x15,0x83,0x57 } }; // 754C3266-0529-45E3-8748-BF747D158357
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControl3>{ 0x502B7489,0xAEE4,0x4DE3,{ 0xA2,0xAB,0x19,0x5A,0xC2,0x0C,0x42,0x12 } }; // 502B7489-AEE4-4DE3-A2AB-195AC20C4212
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory>{ 0xF7BBC359,0xF8FD,0x471C,{ 0xBC,0xB2,0x2C,0x74,0xBE,0x8E,0xBF,0x8C } }; // F7BBC359-F8FD-471C-BCB2-2C74BE8EBF8C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides>{ 0xC79BB41B,0xA084,0x4301,{ 0xA4,0x96,0x72,0x97,0x1F,0x36,0x4E,0xD1 } }; // C79BB41B-A084-4301-A496-72971F364ED1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics>{ 0x37DABD89,0xDCFB,0x45B8,{ 0x9A,0xFE,0x87,0x4D,0xF0,0x97,0x90,0x5E } }; // 37DABD89-DCFB-45B8-9AFE-874DF097905E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ 0x14EAD768,0x34B2,0x4B97,{ 0xBF,0x3C,0xE8,0xD7,0x32,0x30,0xA2,0xAA } }; // 14EAD768-34B2-4B97-BF3C-E8D73230A2AA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ 0xF95B9AAC,0xA621,0x488E,{ 0x91,0x56,0x8E,0xE3,0x11,0x65,0xBE,0x04 } }; // F95B9AAC-A621-488E-9156-8EE31165BE04
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenter>{ 0xC271569B,0x6DCA,0x4E2B,{ 0x8E,0x14,0xC5,0x51,0x36,0xB0,0x2A,0x71 } }; // C271569B-6DCA-4E2B-8E14-C55136B02A71
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2>{ 0x5C04AA33,0x1DF3,0x4731,{ 0xA4,0xC9,0xDA,0x81,0x83,0x78,0xD6,0x3D } }; // 5C04AA33-1DF3-4731-A4C9-DA818378D63D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ 0x18DE66CD,0x4A6C,0x4B2E,{ 0xAA,0x86,0xCB,0x12,0x6C,0x9A,0x29,0x20 } }; // 18DE66CD-4A6C-4B2E-AA86-CB126C9A2920
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ 0x8971632E,0x7867,0x4D66,{ 0x96,0x30,0x29,0xF1,0xC5,0xF7,0x40,0x3F } }; // 8971632E-7867-4D66-9630-29F1C5F7403F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel>{ 0xDF7AB79D,0x7AD5,0x4B58,{ 0x93,0x63,0x91,0x9A,0xF9,0x02,0x26,0xE6 } }; // DF7AB79D-7AD5-4B58-9363-919AF90226E6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2>{ 0xEEEECDB0,0x00B4,0x4534,{ 0x93,0x7B,0x56,0x31,0x8B,0x29,0x3E,0x92 } }; // EEEECDB0-00B4-4534-937B-56318B293E92
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ 0xCA25D63F,0x044F,0x4B6B,{ 0xB3,0x15,0x0B,0x60,0xE0,0xB4,0xF8,0x7D } }; // CA25D63F-044F-4B6B-B315-0B60E0B4F87D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ 0x3972EB2C,0x384A,0x48BF,{ 0xAD,0xFD,0x77,0x2E,0x25,0x72,0xC5,0x04 } }; // 3972EB2C-384A-48BF-ADFD-772E2572C504
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid>{ 0xDDFE6B5F,0xBA88,0x4A7D,{ 0x8A,0x5B,0xE5,0x8C,0xAF,0x0F,0x4E,0x2D } }; // DDFE6B5F-BA88-4A7D-8A5B-E58CAF0F4E2D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ 0x80C21C0F,0x63EC,0x4258,{ 0xBD,0x61,0xD4,0xA6,0x95,0x6C,0x86,0x4A } }; // 80C21C0F-63EC-4258-BD61-D4A6956C864A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ 0x4EC5427D,0x24A0,0x449A,{ 0xB7,0x63,0x30,0x77,0xBA,0x0F,0x2D,0xD5 } }; // 4EC5427D-24A0-449A-B763-3077BA0F2DD5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ 0x2E27D3F7,0xFEAA,0x478D,{ 0xBF,0xD1,0x29,0x33,0x8A,0xDC,0x5A,0x03 } }; // 2E27D3F7-FEAA-478D-BFD1-29338ADC5A03
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBox>{ 0xE9F3B9FF,0x8E91,0x4ECF,{ 0xA7,0x07,0xC9,0x27,0xF6,0x94,0xF8,0x81 } }; // E9F3B9FF-8E91-4ECF-A707-C927F694F881
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBox2>{ 0x70572ABA,0x8AD1,0x4085,{ 0x93,0x50,0xDE,0xEE,0x35,0x92,0x94,0xE3 } }; // 70572ABA-8AD1-4085-9350-DEEE359294E3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBoxFactory>{ 0x60CDFDA2,0x2F44,0x444B,{ 0x9C,0x94,0xB8,0xC9,0xFD,0xA4,0x6F,0x59 } }; // 60CDFDA2-2F44-444B-9C94-B8C9FDA46F59
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBoxItem>{ 0x43C13323,0x6EDF,0x4E4B,{ 0xB6,0xB2,0x3A,0x93,0xEE,0xC4,0x1D,0x95 } }; // 43C13323-6EDF-4E4B-B6B2-3A93EEC41D95
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory>{ 0x4398B8D4,0xA3DE,0x402C,{ 0xB2,0x3D,0x19,0x03,0x84,0xB2,0x7C,0xA8 } }; // 4398B8D4-A3DE-402C-B23D-190384B27CA8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBoxStatics>{ 0x6D3F7F73,0x706A,0x4E53,{ 0xA9,0xAA,0xC9,0xA5,0x3C,0x9C,0xDD,0x70 } }; // 6D3F7F73-706A-4E53-A9AA-C9A53C9CDD70
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2>{ 0x0089ADEB,0xB709,0x4C8D,{ 0xB1,0xED,0x4A,0x7D,0x97,0xEE,0x77,0x16 } }; // 0089ADEB-B709-4C8D-B1ED-4A7D97EE7716
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>{ 0x0F0CB9D7,0xE5F3,0x45E6,{ 0x90,0x63,0xFF,0x7B,0xBB,0x19,0x3C,0x47 } }; // 0F0CB9D7-E5F3-45E6-9063-FF7BBB193C47
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ 0x68155FB3,0x883E,0x417A,{ 0x80,0xD0,0xE2,0xFD,0x88,0x41,0x00,0x84 } }; // 68155FB3-883E-417A-80D0-E2FD88410084
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ 0xFEE25B97,0x8B96,0x4602,{ 0x81,0xD2,0x82,0xFD,0x8E,0x0F,0x7E,0xA8 } }; // FEE25B97-8B96-4602-81D2-82FD8E0F7EA8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListView>{ 0xF6CE8C6D,0xFE96,0x41AD,{ 0xA6,0x4A,0xC2,0xB8,0x1C,0x4A,0xF7,0xF8 } }; // F6CE8C6D-FE96-41AD-A64A-C2B81C4AF7F8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase>{ 0x3D0813BA,0x6890,0x4537,{ 0xBF,0xE5,0x79,0x6D,0x94,0x58,0xED,0xD6 } }; // 3D0813BA-6890-4537-BFE5-796D9458EDD6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase2>{ 0xD1C2A4F7,0x78A3,0x4491,{ 0x86,0xE0,0x2D,0xDE,0xBC,0x00,0x7A,0xC5 } }; // D1C2A4F7-78A3-4491-86E0-2DDEBC007AC5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase3>{ 0xB364C035,0x0A13,0x406F,{ 0xA3,0xFB,0xF3,0x0E,0x7D,0xDC,0xA9,0x4C } }; // B364C035-0A13-406F-A3FB-F30E7DDCA94C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase4>{ 0x18B7792B,0x11DC,0x4EB6,{ 0xA7,0xBC,0x74,0x1A,0xDB,0x3E,0xEB,0x79 } }; // 18B7792B-11DC-4EB6-A7BC-741ADB3EEB79
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase5>{ 0x1A9C6E99,0x1719,0x4B80,{ 0xB3,0x35,0x62,0x83,0x31,0xA0,0x70,0x19 } }; // 1A9C6E99-1719-4B80-B335-628331A07019
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBase6>{ 0xF8A42637,0x965B,0x483B,{ 0x94,0xE5,0xE5,0xC9,0xFE,0xF0,0xE3,0x52 } }; // F8A42637-965B-483B-94E5-E5C9FEF0E352
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory>{ 0xE67E6C7F,0x150F,0x46D0,{ 0xA6,0xAC,0xC5,0x00,0x2B,0xD9,0xCA,0x53 } }; // E67E6C7F-150F-46D0-A6AC-C5002BD9CA53
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ 0x6D0DED27,0x0D19,0x4091,{ 0x89,0x17,0xCE,0x7C,0x85,0xC1,0xE6,0x30 } }; // 6D0DED27-0D19-4091-8917-CE7C85C1E630
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ 0x3872A6A1,0xEA19,0x455F,{ 0x9D,0xF7,0x14,0x7C,0xC4,0x1D,0x32,0x9C } }; // 3872A6A1-EA19-455F-9DF7-147CC41D329C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics>{ 0x8532B8F7,0x3E16,0x455B,{ 0x89,0xA8,0xC1,0x34,0x62,0x23,0xF6,0xD3 } }; // 8532B8F7-3E16-455B-89A8-C1346223F6D3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ 0x821C00C8,0x78CC,0x411F,{ 0x9F,0x2E,0xA5,0x57,0x58,0x22,0x7F,0x3E } }; // 821C00C8-78CC-411F-9F2E-A55758227F3E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ 0x3B539091,0x31C6,0x4D0C,{ 0x90,0xAF,0x5D,0xC1,0xD6,0xAE,0x9C,0x05 } }; // 3B539091-31C6-4D0C-90AF-5DC1D6AE9C05
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ 0xAD13258B,0xFBD0,0x4F18,{ 0x8B,0xF8,0x9B,0x86,0x13,0x95,0x1C,0x22 } }; // AD13258B-FBD0-4F18-8BF8-9B8613951C22
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ 0x40346FCF,0x0476,0x4259,{ 0x89,0x5F,0xA6,0x56,0x97,0x38,0x62,0x0F } }; // 40346FCF-0476-4259-895F-A6569738620F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewFactory>{ 0xBDFF696D,0x3F22,0x41F9,{ 0x97,0xA6,0x88,0x31,0x34,0xA7,0x61,0x13 } }; // BDFF696D-3F22-41F9-97A6-883134A76113
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem>{ 0x1B61BAEB,0xE196,0x4B3B,{ 0xA5,0xF9,0x1E,0xD6,0x36,0xF3,0xF7,0x9B } }; // 1B61BAEB-E196-4B3B-A5F9-1ED636F3F79B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ 0x68D2C96A,0x96B0,0x4F08,{ 0xA7,0xA5,0xF1,0x08,0x67,0x20,0xA0,0xFA } }; // 68D2C96A-96B0-4F08-A7A5-F1086720A0FA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewItem>{ 0xB7BB4305,0x3DD9,0x43DE,{ 0xA8,0xC0,0xC4,0x72,0xF0,0x85,0xBC,0x11 } }; // B7BB4305-3DD9-43DE-A8C0-C472F085BC11
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory>{ 0xF431073D,0x9CAC,0x42A2,{ 0x82,0xDF,0x0F,0x44,0x90,0xBC,0x4E,0x2E } }; // F431073D-9CAC-42A2-82DF-0F4490BC4E2E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ 0x05BDE8A6,0x2191,0x4B4B,{ 0x8C,0x22,0x9B,0x25,0x67,0x6E,0x80,0x6E } }; // 05BDE8A6-2191-4B4B-8C22-9B25676E806E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ 0x6D0C2B08,0xBB9B,0x44F9,{ 0x80,0x63,0x5C,0x3F,0x9C,0x21,0x88,0x4B } }; // 6D0C2B08-BB9B-44F9-8063-5C3F9C21884B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaElement>{ 0xA38ED2CF,0x13DE,0x4299,{ 0xAD,0xE2,0xAE,0x18,0xF7,0x4E,0xD3,0x53 } }; // A38ED2CF-13DE-4299-ADE2-AE18F74ED353
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaElement2>{ 0xFD53DA65,0xB186,0x4654,{ 0xBF,0xDB,0x18,0x0E,0xD2,0x6C,0xAD,0x07 } }; // FD53DA65-B186-4654-BFDB-180ED26CAD07
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaElement3>{ 0x479F6F13,0x0FDB,0x4ED8,{ 0x92,0x8A,0x4D,0x39,0x16,0x9C,0x3C,0xD2 } }; // 479F6F13-0FDB-4ED8-928A-4D39169C3CD2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics>{ 0xDCCD2CB9,0x7568,0x4682,{ 0xA7,0x2A,0x8D,0xDF,0x2A,0x26,0x65,0xCA } }; // DCCD2CB9-7568-4682-A72A-8DDF2A2665CA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2>{ 0x9EE7F826,0xF154,0x4DC6,{ 0x80,0x14,0xA6,0xEB,0xA9,0x87,0xF8,0x47 } }; // 9EE7F826-F154-4DC6-8014-A6EBA987F847
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement>{ 0x3B4CA526,0x2E25,0x4598,{ 0xBC,0x71,0xD4,0x91,0xF8,0xE8,0xDE,0x39 } }; // 3B4CA526-2E25-4598-BC71-D491F8E8DE39
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ 0x77E525C3,0xEB17,0x4B8D,{ 0x88,0x9D,0x1E,0xA8,0xAB,0xDB,0xD4,0xEF } }; // 77E525C3-EB17-4B8D-889D-1EA8ABDBD4EF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ 0x1E7C4020,0xAC57,0x42DD,{ 0xAD,0x1C,0x3E,0xBC,0x2D,0x7F,0x08,0xBA } }; // 1E7C4020-AC57-42DD-AD1C-3EBC2D7F08BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ 0x77A92326,0x0C5B,0x41FC,{ 0xBF,0x49,0x15,0xF6,0xC3,0x52,0x4B,0x6B } }; // 77A92326-0C5B-41FC-BF49-15F6C3524B6B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ 0xE6766FB7,0xD96F,0x4B95,{ 0xB3,0x3C,0x59,0xE8,0x1C,0xB1,0xE9,0xBA } }; // E6766FB7-D96F-4B95-B33C-59E81CB1E9BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ 0x84D774FE,0xEAD4,0x4957,{ 0xB4,0x2B,0x22,0x31,0x58,0xCA,0x0D,0xE7 } }; // 84D774FE-EAD4-4957-B42B-223158CA0DE7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls>{ 0xD6F69E7D,0x0825,0x49A9,{ 0x9F,0xCE,0x55,0x86,0xD8,0x69,0x4F,0x0C } }; // D6F69E7D-0825-49A9-9FCE-5586D8694F0C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>{ 0x2B89EFEC,0x1BEA,0x451E,{ 0x8B,0xCD,0xCF,0xE2,0xD9,0x42,0x32,0x62 } }; // 2B89EFEC-1BEA-451E-8BCD-CFE2D9423262
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls3>{ 0x5086430E,0x0940,0x11E7,{ 0x93,0xAE,0x92,0x36,0x1F,0x00,0x26,0x71 } }; // 5086430E-0940-11E7-93AE-92361F002671
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls4>{ 0x0FB17C58,0x9F23,0x11E7,{ 0xAB,0xC4,0xCE,0xC2,0x78,0xB6,0xB5,0x0A } }; // 0FB17C58-9F23-11E7-ABC4-CEC278B6B50A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ 0x1DA2015A,0xA8E4,0x4C1B,{ 0x88,0xC9,0x0B,0x18,0x3E,0xCC,0x62,0xE3 } }; // 1DA2015A-A8E4-4C1B-88C9-0B183ECC62E3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ 0x3D41D509,0xFF44,0x4420,{ 0x80,0x7E,0x8F,0x7A,0x2E,0x2C,0x42,0x51 } }; // 3D41D509-FF44-4420-807E-8F7A2E2C4251
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ 0x5A772047,0xA9A1,0x4625,{ 0x92,0x70,0x7F,0x49,0x87,0x5D,0x43,0x94 } }; // 5A772047-A9A1-4625-9270-7F49875D4394
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ 0x590EA907,0xD2EF,0x4C1A,{ 0x94,0x29,0xB4,0xB1,0x5D,0x64,0xFD,0x56 } }; // 590EA907-D2EF-4C1A-9429-B4B15D64FD56
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ 0x1728CFDC,0x561F,0x4386,{ 0xA7,0xF8,0x09,0x0D,0x95,0xF6,0x8D,0x96 } }; // 1728CFDC-561F-4386-A7F8-090D95F68D96
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ 0x5FE05542,0x0940,0x11E7,{ 0x93,0xAE,0x92,0x36,0x1F,0x00,0x26,0x71 } }; // 5FE05542-0940-11E7-93AE-92361F002671
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ 0x0FB18144,0x9F23,0x11E7,{ 0xAB,0xC4,0xCE,0xC2,0x78,0xB6,0xB5,0x0A } }; // 0FB18144-9F23-11E7-ABC4-CEC278B6B50A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBar>{ 0xC8F67B0C,0x0E76,0x5AF2,{ 0xBA,0xDE,0x78,0x50,0x49,0xC8,0x0A,0x41 } }; // C8F67B0C-0E76-5AF2-BADE-785049C80A41
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarFactory>{ 0xDC619E50,0x72BA,0x513F,{ 0x80,0xAA,0xDD,0xD0,0x93,0x82,0x5D,0xDE } }; // DC619E50-72BA-513F-80AA-DDD093825DDE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItem>{ 0xBF643B4C,0x8125,0x5B53,{ 0xA4,0x54,0x06,0xE8,0x96,0xA5,0xAC,0xEE } }; // BF643B4C-8125-5B53-A454-06E896A5ACEE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFactory>{ 0xECF86F62,0xC394,0x50E2,{ 0xA5,0x68,0x17,0xAF,0x8C,0xF2,0x68,0x74 } }; // ECF86F62-C394-50E2-A568-17AF8CF26874
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout>{ 0xED00D2D8,0xB686,0x55FE,{ 0x8D,0xBB,0xF0,0x4A,0x64,0x0E,0x42,0xEF } }; // ED00D2D8-B686-55FE-8DBB-F04A640E42EF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ 0x1D24F9BD,0xBD19,0x5D95,{ 0xB5,0x73,0x71,0x1F,0x64,0x9F,0xCB,0xE9 } }; // 1D24F9BD-BD19-5D95-B573-711F649FCBE9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarItemStatics>{ 0x60A9E3FB,0xB405,0x50D0,{ 0xBB,0x78,0xD3,0x96,0xA3,0x4D,0xA2,0x67 } }; // 60A9E3FB-B405-50D0-BB78-D396A34DA267
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuBarStatics>{ 0xBED31C25,0x7DB8,0x51CC,{ 0x97,0x06,0x1D,0x79,0x32,0x7D,0xAF,0x93 } }; // BED31C25-7DB8-51CC-9706-1D79327DAF93
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyout>{ 0xAD3210F1,0x985B,0x4171,{ 0xBB,0xBA,0x67,0xBC,0xC7,0x29,0x64,0x9B } }; // AD3210F1-985B-4171-BBBA-67BCC729649B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2>{ 0x507C7BAD,0xD9D1,0x4C05,{ 0x9D,0x4B,0xCD,0xA8,0xDE,0x9A,0xB2,0x42 } }; // 507C7BAD-D9D1-4C05-9D4B-CDA8DE9AB242
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ 0x644533AB,0xBBB9,0x499B,{ 0x9F,0xF3,0x30,0xD4,0x0E,0x2C,0x56,0xD8 } }; // 644533AB-BBB9-499B-9FF3-30D40E2C56D8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ 0x160775CF,0xB598,0x44AF,{ 0xA4,0x88,0xC3,0xCE,0x2A,0xF6,0xD3,0xF0 } }; // 160775CF-B598-44AF-A488-C3CE2AF6D3F0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ 0x0AE266EB,0x028C,0x4423,{ 0xA8,0xE3,0x98,0x9F,0xD9,0xDD,0x71,0x26 } }; // 0AE266EB-028C-4423-A8E3-989FD9DD7126
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ 0x9727B2E3,0xB2B6,0x49DC,{ 0x8C,0x22,0xE0,0x13,0x8B,0x94,0x15,0x59 } }; // 9727B2E3-B2B6-49DC-8C22-E0138B941559
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ 0xF9B56047,0x8DA6,0x4730,{ 0x92,0x08,0x14,0x41,0x25,0xC6,0xB3,0x96 } }; // F9B56047-8DA6-4730-9208-144125C6B396
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ 0x83E6DBAD,0xFC67,0x41D5,{ 0x87,0x97,0x60,0xAC,0xD1,0xCE,0xB1,0xD9 } }; // 83E6DBAD-FC67-41D5-8797-60ACD1CEB1D9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ 0xC5AA39E2,0x44F3,0x455E,{ 0x9C,0x5B,0x62,0xBB,0x6A,0xFC,0xE3,0xAD } }; // C5AA39E2-44F3-455E-9C5B-62BB6AFCE3AD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ 0x4950B424,0xA43A,0x41F7,{ 0xAA,0x3A,0x9C,0xE9,0x61,0x97,0x47,0xD5 } }; // 4950B424-A43A-41F7-AA3A-9CE9619747D5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ 0xACA4F564,0x1790,0x4601,{ 0x91,0x6E,0x5A,0xE1,0xF0,0x1F,0x4B,0xD6 } }; // ACA4F564-1790-4601-916E-5AE1F01F4BD6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ 0xD83FD7C3,0x0AEB,0x4EF3,{ 0x82,0x70,0x8B,0x9B,0x95,0xF2,0xB2,0x98 } }; // D83FD7C3-0AEB-4EF3-8270-8B9B95F2B298
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ 0x906E0304,0x254E,0x413F,{ 0xB2,0x19,0xC7,0xB9,0x7F,0x00,0x37,0x52 } }; // 906E0304-254E-413F-B219-C7B97F003752
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ 0x895894DF,0x5A9F,0x4A1F,{ 0x85,0xEC,0x6F,0x3C,0x1B,0x6D,0xCB,0x89 } }; // 895894DF-5A9F-4A1F-85EC-6F3C1B6DCB89
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter3>{ 0x6AFD4E16,0xAEE0,0x584A,{ 0x98,0x49,0xED,0xAA,0x32,0x3A,0x48,0x4F } }; // 6AFD4E16-AEE0-584A-9849-EDAA323A484F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ 0xB88B5091,0x101C,0x41F8,{ 0xAA,0xC1,0x1B,0x10,0x5C,0x14,0xFB,0x99 } }; // B88B5091-101C-41F8-AAC1-1B105C14FB99
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterStatics3>{ 0x3772A818,0x825A,0x520C,{ 0x80,0xAE,0x4D,0x39,0xA2,0xD5,0x9A,0xB5 } }; // 3772A818-825A-520C-80AE-4D39A2D59AB5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ 0x71FA2B7D,0x0B51,0x4950,{ 0xA1,0xA4,0xBB,0xC4,0x2E,0xAC,0x4C,0x12 } }; // 71FA2B7D-0B51-4950-A1A4-BBC42EAC4C12
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ 0xC159DCC8,0xB437,0x44E0,{ 0xB2,0x4B,0x57,0x20,0xAE,0xA1,0xDB,0xAC } }; // C159DCC8-B437-44E0-B24B-5720AEA1DBAC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ 0x3DBEFBA1,0x9522,0x4045,{ 0x9E,0x58,0xC9,0x9B,0x13,0xAA,0xB9,0xB9 } }; // 3DBEFBA1-9522-4045-9E58-C99B13AAB9B9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ 0xE5386550,0xFE2C,0x43E2,{ 0xA7,0x3F,0x62,0x16,0x8F,0x61,0x99,0x73 } }; // E5386550-FE2C-43E2-A73F-62168F619973
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ 0xAC935626,0x190A,0x4DE2,{ 0x8D,0x71,0x7C,0xC4,0x74,0x7D,0xA5,0x80 } }; // AC935626-190A-4DE2-8D71-7CC4747DA580
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ 0xDDB27A36,0x1874,0x4AEF,{ 0x83,0x7D,0x6F,0xEC,0x9D,0xA4,0xE6,0x81 } }; // DDB27A36-1874-4AEF-837D-6FEC9DA4E681
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ 0xAC14D09B,0x3E93,0x4785,{ 0x94,0xEF,0xFD,0xB2,0x3B,0xAB,0xA9,0x65 } }; // AC14D09B-3E93-4785-94EF-FDB23BABA965
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigate>{ 0xBF2195A9,0xF4EA,0x4336,{ 0x97,0x7C,0xF8,0xFC,0xF7,0x8B,0x0D,0x9E } }; // BF2195A9-F4EA-4336-977C-F8FCF78B0D9E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationView>{ 0xF209CE15,0x391A,0x42CA,{ 0x9F,0xC6,0xF7,0x9D,0xA6,0x5A,0xCA,0x32 } }; // F209CE15-391A-42CA-9FC6-F79DA65ACA32
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationView2>{ 0x2BE49737,0x7C13,0x4C44,{ 0x86,0xC3,0x8B,0x25,0xE6,0x97,0xA8,0x0E } }; // 2BE49737-7C13-4C44-86C3-8B25E697A80E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationView3>{ 0x8FDFAB66,0x9BBC,0x5FA3,{ 0x90,0x43,0xA0,0x2B,0xB4,0xF8,0xEF,0x37 } }; // 8FDFAB66-9BBC-5FA3-9043-A02BB4F8EF37
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ 0x446700E1,0x9A9D,0x4500,{ 0xA7,0x1D,0x25,0xC1,0x58,0x09,0xB8,0x79 } }; // 446700E1-9A9D-4500-A71D-25C15809B879
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ 0xB7C1AD35,0x5544,0x40C1,{ 0x9B,0x33,0xAC,0xFE,0x1D,0x6C,0x80,0x94 } }; // B7C1AD35-5544-40C1-9B33-ACFE1D6C8094
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewFactory>{ 0xE50687C1,0xB7C2,0x4975,{ 0xAD,0x7A,0x5F,0x4F,0xE6,0xA5,0x14,0xC9 } }; // E50687C1-B7C2-4975-AD7A-5F4FE6A514C9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItem>{ 0x8614BE0F,0xB7B6,0x4851,{ 0x96,0x0A,0xF5,0xE3,0xF6,0x9F,0x62,0x4A } }; // 8614BE0F-B7B6-4851-960A-F5E3F69F624A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItem2>{ 0xEE488EF9,0xEA9C,0x5E04,{ 0xB2,0x6C,0x83,0xBF,0x96,0x55,0x34,0x2F } }; // EE488EF9-EA9C-5E04-B26C-83BF9655342F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase>{ 0xEDF04EB1,0x37D1,0x471F,{ 0x85,0x70,0x38,0x29,0xEE,0x5B,0x2B,0xC6 } }; // EDF04EB1-37D1-471F-8570-3829EE5B2BC6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ 0xEB014CEF,0x7890,0x4EBB,{ 0x82,0x45,0x02,0xE8,0x51,0x0F,0x32,0x1D } }; // EB014CEF-7890-4EBB-8245-02E8510F321D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ 0x973BDB4A,0x7E08,0x4F76,{ 0x92,0x3C,0xF1,0x2B,0xD6,0x85,0xE8,0x6E } }; // 973BDB4A-7E08-4F76-923C-F12BD685E86E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ 0xE21DF22C,0xDA4A,0x4E74,{ 0x9F,0xFC,0xB1,0x63,0xBD,0x7A,0xDA,0xCD } }; // E21DF22C-DA4A-4E74-9FFC-B163BD7ADACD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ 0xF3105988,0x7768,0x45D3,{ 0x8B,0xB0,0x6D,0xED,0x9E,0x43,0xA9,0x8B } }; // F3105988-7768-45D3-8BB0-6DED9E43A98B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ 0x29496822,0x55D2,0x49FA,{ 0x96,0x4B,0xF1,0xDB,0xAF,0xEF,0x85,0xC4 } }; // 29496822-55D2-49FA-964B-F1DBAFEF85C4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>{ 0xB568F2DD,0x515E,0x5770,{ 0xA4,0x66,0xBD,0x5F,0x43,0xFB,0x64,0x42 } }; // B568F2DD-515E-5770-A466-BD5F43FB6442
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ 0xDE62C951,0xBB9B,0x471E,{ 0x83,0xE3,0xAF,0x47,0x91,0xE7,0x09,0x6A } }; // DE62C951-BB9B-471E-83E3-AF4791E7096A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ 0x71CF3A66,0xDB86,0x49E0,{ 0x81,0x54,0x5F,0xD3,0x56,0xAE,0xDE,0xC0 } }; // 71CF3A66-DB86-49E0-8154-5FD356AEDEC0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ 0x803C0081,0xFDA5,0x4B90,{ 0xAA,0xCE,0x3F,0x23,0x06,0xDB,0xE5,0xC4 } }; // 803C0081-FDA5-4B90-AACE-3F2306DBE5C4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics2>{ 0xF4F2F77C,0x54B4,0x541D,{ 0xB7,0x47,0x3A,0x96,0xE9,0xFF,0x3D,0x55 } }; // F4F2F77C-54B4-541D-B747-3A96E9FF3D55
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewList>{ 0x4F726F85,0x5CE0,0x48CD,{ 0x8E,0xF2,0x1A,0x29,0x45,0x8A,0x34,0x04 } }; // 4F726F85-5CE0-48CD-8EF2-1A29458A3404
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewListFactory>{ 0xFAEE9541,0xC3BF,0x47BF,{ 0xB9,0x04,0x61,0x55,0xF4,0xDF,0x6B,0x4F } }; // FAEE9541-C3BF-47BF-B904-6155F4DF6B4F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ 0x955575BA,0x75F5,0x432D,{ 0xB4,0x9B,0x60,0xE4,0x75,0x52,0xD5,0xEE } }; // 955575BA-75F5-432D-B49B-60E47552D5EE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ 0x5AA509A0,0x3A5E,0x4F54,{ 0x89,0x6C,0x98,0xB8,0x5F,0x81,0x95,0x08 } }; // 5AA509A0-3A5E-4F54-896C-98B85F819508
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>{ 0xFD5AF806,0xD10A,0x5E8B,{ 0x97,0x3F,0x3B,0x8F,0xDA,0x94,0x46,0x25 } }; // FD5AF806-D10A-5E8B-973F-3B8FDA944625
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics>{ 0x363A86C7,0x72DA,0x4420,{ 0xB8,0x71,0x15,0xD9,0xD0,0xD4,0x57,0x56 } }; // 363A86C7-72DA-4420-B871-15D9D0D45756
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics2>{ 0x8CC50D74,0x1A42,0x4852,{ 0xAB,0x5A,0x6D,0xC8,0x2F,0x28,0xA4,0xBA } }; // 8CC50D74-1A42-4852-AB5A-6DC82F28A4BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics3>{ 0x9B6B69B7,0xF746,0x5550,{ 0x91,0xE1,0xEE,0x0C,0x9A,0x85,0xC0,0x5E } }; // 9B6B69B7-F746-5550-91E1-EE0C9A85C05E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings>{ 0x2956CBC4,0x0528,0x55D5,{ 0xB2,0xD1,0xEA,0xE8,0x07,0xAE,0xA6,0xDA } }; // 2956CBC4-0528-55D5-B2D1-EAE807AEA6DA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ 0x28A6A351,0x64BC,0x5B60,{ 0x8F,0x74,0xE9,0xEE,0x90,0x8A,0x24,0x0E } }; // 28A6A351-64BC-5B60-8F74-E9EE908A240E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ 0x2C885E59,0xF7B9,0x5078,{ 0xAE,0xB6,0x8D,0x7A,0x03,0xC0,0x5D,0x02 } }; // 2C885E59-F7B9-5078-AEB6-8D7A03C05D02
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs>{ 0xAF0E05F7,0xC4B7,0x44C5,{ 0xB0,0x9D,0x5C,0xB7,0x05,0x2B,0x3A,0x97 } }; // AF0E05F7-C4B7-44C5-B09D-5CB7052B3A97
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2>{ 0x0D140F56,0x1DCE,0x4FCD,{ 0x85,0xBC,0x5A,0x55,0x72,0x27,0x3B,0x9C } }; // 0D140F56-1DCE-4FCD-85BC-5A5572273B9C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPage>{ 0xC4B27075,0xE641,0x453E,{ 0x82,0x4D,0x01,0x2F,0xC7,0xCF,0x95,0xCF } }; // C4B27075-E641-453E-824D-012FC7CF95CF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPageFactory>{ 0xDFA149AC,0x1849,0x445E,{ 0x93,0x7C,0x40,0xA9,0x59,0x0C,0xC0,0x76 } }; // DFA149AC-1849-445E-937C-40A9590CC076
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPageOverrides>{ 0x230B9CB8,0x3419,0x4306,{ 0xAA,0xBE,0x4A,0x8E,0x68,0x0D,0x36,0x27 } }; // 230B9CB8-3419-4306-AABE-4A8E680D3627
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPageStatics>{ 0x376DDE71,0xF725,0x46DD,{ 0x8D,0x80,0xEE,0xEA,0xF7,0xDA,0x74,0xE5 } }; // 376DDE71-F725-46DD-8D80-EEEAF7DA74E5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPanel>{ 0xA50A4BBD,0x8361,0x469C,{ 0x90,0xDA,0xE9,0xA4,0x0C,0x74,0x74,0xDF } }; // A50A4BBD-8361-469C-90DA-E9A40C7474DF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPanel2>{ 0x709133C7,0x38F3,0x5083,{ 0xA4,0xBB,0x06,0xA5,0x48,0xA1,0xD2,0x31 } }; // 709133C7-38F3-5083-A4BB-06A548A1D231
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPanelFactory>{ 0xEEE68111,0xC7CC,0x433F,{ 0x95,0xCD,0xD6,0x30,0xC3,0x43,0x02,0xDD } }; // EEE68111-C7CC-433F-95CD-D630C34302DD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPanelStatics>{ 0xF23D6B5D,0x8330,0x47A6,{ 0xA0,0x46,0x25,0xF5,0x09,0xB2,0x52,0x32 } }; // F23D6B5D-8330-47A6-A046-25F509B25232
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IParallaxView>{ 0x6B84FCD4,0x4083,0x5B4B,{ 0xBC,0x40,0xD9,0x20,0x4E,0x19,0xB4,0x1A } }; // 6B84FCD4-4083-5B4B-BC40-D9204E19B41A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IParallaxViewFactory>{ 0xE4EB9642,0x3E8E,0x5A26,{ 0x94,0xF2,0x91,0x21,0xD1,0x21,0xB9,0x16 } }; // E4EB9642-3E8E-5A26-94F2-9121D121B916
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IParallaxViewStatics>{ 0x8836E49C,0x0E0E,0x57D8,{ 0x93,0x95,0xF0,0xA9,0xA0,0xD1,0xBB,0x28 } }; // 8836E49C-0E0E-57D8-9395-F0A9A0D1BB28
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox>{ 0x02B9AA11,0x0B47,0x4E7D,{ 0xAD,0x91,0x3A,0x41,0x68,0xED,0x23,0x0D } }; // 02B9AA11-0B47-4E7D-AD91-3A4168ED230D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>{ 0x5ED738DF,0x212F,0x4AEB,{ 0xB5,0xB8,0x2C,0x21,0x9A,0xEC,0x3C,0x0C } }; // 5ED738DF-212F-4AEB-B5B8-2C219AEC3C0C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox3>{ 0x6024D9D1,0x56B7,0x41F0,{ 0x95,0x58,0x39,0x34,0xC1,0x42,0x44,0xD6 } }; // 6024D9D1-56B7-41F0-9558-3934C14244D6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox4>{ 0x569F4343,0x8E6C,0x44BF,{ 0x80,0x8D,0x0E,0x03,0x96,0x4E,0xD3,0x2F } }; // 569F4343-8E6C-44BF-808D-0E03964ED32F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBox5>{ 0xF96C2753,0xE1D4,0x5142,{ 0x86,0xC2,0x73,0x18,0xBF,0xBB,0xC7,0x05 } }; // F96C2753-E1D4-5142-86C2-7318BFBBC705
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ 0x142EDA22,0x3552,0x4AB8,{ 0x81,0xA6,0xA4,0x86,0x20,0xEE,0x9C,0x53 } }; // 142EDA22-3552-4AB8-81A6-A48620EE9C53
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ 0x5EE67563,0x2D74,0x4ACE,{ 0xBD,0x79,0xFC,0xAB,0x61,0xA7,0xD7,0x7B } }; // 5EE67563-2D74-4ACE-BD79-FCAB61A7D77B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ 0xFC57935F,0x98FA,0x4066,{ 0xB7,0x85,0xFA,0x72,0x5E,0xCD,0xE2,0x32 } }; // FC57935F-98FA-4066-B785-FA725ECDE232
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ 0xA2CDD319,0xAD6A,0x4352,{ 0xB5,0x90,0xF6,0x96,0xFF,0xCB,0x8E,0x3F } }; // A2CDD319-AD6A-4352-B590-F696FFCB8E3F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics5>{ 0x4BDAC1AC,0x6B42,0x55F3,{ 0xBF,0xA4,0x65,0xC7,0x23,0x50,0x78,0xD6 } }; // 4BDAC1AC-6B42-55F3-BFA4-65C7235078D6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIcon>{ 0x214C62DB,0xC366,0x4A0E,{ 0xB9,0xAD,0xDC,0xF1,0x68,0xD7,0xEC,0x0C } }; // 214C62DB-C366-4A0E-B9AD-DCF168D7EC0C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIconFactory>{ 0xAF9D9652,0x9C5D,0x4A37,{ 0x9E,0x1A,0x04,0x4A,0xBE,0xEF,0x79,0x2B } }; // AF9D9652-9C5D-4A37-9E1A-044ABEEF792B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIconSource>{ 0x1F47010E,0xB305,0x4863,{ 0x8B,0x7A,0x15,0xD0,0x8D,0x63,0x3C,0x7A } }; // 1F47010E-B305-4863-8B7A-15D08D633C7A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ 0x8F7F85B9,0x5247,0x4F3B,{ 0x83,0x3F,0xE3,0x84,0xBF,0x7E,0x9C,0x84 } }; // 8F7F85B9-5247-4F3B-833F-E384BF7E9C84
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ 0xDF7027D5,0x3682,0x43FF,{ 0x80,0xF0,0xAF,0xA2,0x56,0xB2,0xFD,0xC3 } }; // DF7027D5-3682-43FF-80F0-AFA256B2FDC3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPathIconStatics>{ 0x77B75DB8,0xFB15,0x491A,{ 0xB6,0xE3,0x7D,0xBB,0xA9,0x11,0xBA,0xFE } }; // 77B75DB8-FB15-491A-B6E3-7DBBA911BAFE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPersonPicture>{ 0x6C230B6D,0x0D75,0x4059,{ 0x91,0xBC,0x7B,0x17,0x4D,0x1D,0x73,0x15 } }; // 6C230B6D-0D75-4059-91BC-7B174D1D7315
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPersonPictureFactory>{ 0x4F18330D,0x0416,0x4B92,{ 0xBF,0xD3,0xBF,0x57,0x80,0xB4,0x6A,0xB2 } }; // 4F18330D-0416-4B92-BFD3-BF5780B46AB2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPersonPictureStatics>{ 0xDBEC0982,0x3C10,0x4639,{ 0x96,0x14,0xAA,0x5B,0x7C,0xDC,0x32,0xCA } }; // DBEC0982-3C10-4639-9614-AA5B7CDC32CA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ 0x447A9B51,0x1E23,0x4779,{ 0x99,0x2B,0x98,0x68,0x49,0x71,0x39,0x41 } }; // 447A9B51-1E23-4779-992B-986849713941
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>{ 0xA336FFDB,0x08D9,0x43E6,{ 0x94,0x4E,0xF2,0xE5,0xC7,0xCE,0xE6,0x30 } }; // A336FFDB-08D9-43E6-944E-F2E5C7CEE630
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ 0x5884C978,0x6B27,0x4B38,{ 0xA9,0xAE,0x67,0x7C,0x29,0x94,0x65,0x2E } }; // 5884C978-6B27-4B38-A9AE-677C2994652E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ 0xAF18A436,0xF38A,0x4ABD,{ 0xB9,0x33,0x62,0x86,0xC1,0x15,0xB0,0x7F } }; // AF18A436-F38A-4ABD-B933-6286C115B07F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivot>{ 0x103E9B13,0x3400,0x4A16,{ 0x90,0xB9,0x69,0x12,0xBF,0x06,0x97,0x4E } }; // 103E9B13-3400-4A16-90B9-6912BF06974E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivot2>{ 0x8B8A8660,0x1A55,0x411C,{ 0xA8,0x2D,0x18,0x99,0x1C,0x3F,0x0D,0x6F } }; // 8B8A8660-1A55-411C-A82D-18991C3F0D6F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivot3>{ 0x95BCBF96,0xF0DA,0x4089,{ 0x8C,0x65,0xE8,0xB8,0x13,0x54,0xC7,0x66 } }; // 95BCBF96-F0DA-4089-8C65-E8B81354C766
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotFactory>{ 0x1B0A818E,0x2529,0x4762,{ 0xBA,0x44,0x9A,0xBC,0x68,0xC3,0xCE,0xCA } }; // 1B0A818E-2529-4762-BA44-9ABC68C3CECA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotItem>{ 0xA4764371,0xA502,0x47A3,{ 0x91,0x5E,0x4A,0xA0,0x96,0xDA,0xF8,0x7F } }; // A4764371-A502-47A3-915E-4AA096DAF87F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ 0x1A6F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; // 1A6F7254-1ED5-4BC5-A060-655530BCA6BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory>{ 0x0DCED981,0x636E,0x4A34,{ 0x8A,0x3F,0x8E,0xE0,0x18,0x63,0x92,0x85 } }; // 0DCED981-636E-4A34-8A3F-8EE018639285
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics>{ 0xE147AD0C,0x488B,0x4A6E,{ 0xBE,0xCD,0xA5,0xDB,0xD9,0x94,0x17,0x54 } }; // E147AD0C-488B-4A6E-BECD-A5DBD9941754
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics>{ 0xEE22C7F4,0xC15D,0x4FF3,{ 0x8A,0x94,0xF5,0x0D,0xFD,0xFB,0xE8,0x99 } }; // EE22C7F4-C15D-4FF3-8A94-F50DFDFBE899
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics2>{ 0xD7518ADD,0xBE75,0x4023,{ 0x8D,0xEB,0xC6,0x51,0x3C,0x31,0x92,0xA3 } }; // D7518ADD-BE75-4023-8DEB-C6513C3192A3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IPivotStatics3>{ 0x78B6274E,0x6616,0x4600,{ 0xA0,0x39,0x92,0x2A,0x5D,0x09,0x33,0x0B } }; // 78B6274E-6616-4600-A039-922A5D09330B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IProgressBar>{ 0xAE752C89,0x0067,0x4963,{ 0xBF,0x4C,0x29,0xDB,0x0C,0x4A,0x50,0x7E } }; // AE752C89-0067-4963-BF4C-29DB0C4A507E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory>{ 0xDA9A8C11,0x1591,0x400B,{ 0xA9,0x93,0x0F,0x1C,0x5C,0xC1,0x2F,0x3B } }; // DA9A8C11-1591-400B-A993-0F1C5CC12F3B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics>{ 0x7A129FDA,0x5837,0x4E26,{ 0xB3,0xB4,0xE1,0xC0,0x92,0xCE,0xBB,0xEC } }; // 7A129FDA-5837-4E26-B3B4-E1C092CEBBEC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IProgressRing>{ 0x6DA5E49E,0x6E9D,0x425C,{ 0xBD,0x7C,0x02,0x17,0x3E,0x39,0x76,0x3F } }; // 6DA5E49E-6E9D-425C-BD7C-02173E39763F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics>{ 0xE8B62507,0x4E2C,0x47D5,{ 0xA5,0x4A,0xC6,0xC4,0x8A,0x5E,0x69,0x89 } }; // E8B62507-4E2C-47D5-A54A-C6C48A5E6989
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRadioButton>{ 0x325C44E0,0x9A03,0x4BF3,{ 0xAB,0xD6,0x6F,0xBB,0x46,0xC9,0xA4,0x86 } }; // 325C44E0-9A03-4BF3-ABD6-6FBB46C9A486
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory>{ 0xF1D04933,0x34E1,0x4A5C,{ 0xB2,0xAE,0xCA,0x3B,0x1C,0x0B,0x20,0xDE } }; // F1D04933-34E1-4A5C-B2AE-CA3B1C0B20DE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics>{ 0x6B149293,0xF50F,0x4BD8,{ 0xB0,0xAC,0x5C,0x16,0x2F,0x33,0xA2,0x08 } }; // 6B149293-F50F-4BD8-B0AC-5C162F33A208
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingControl>{ 0xA7D91CA7,0xE5CF,0x4963,{ 0xA2,0x4E,0x96,0x73,0xFE,0x5F,0xFD,0xD5 } }; // A7D91CA7-E5CF-4963-A24E-9673FE5FFDD5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingControlFactory>{ 0x18D81716,0xC542,0x4CCB,{ 0xB3,0x47,0x5E,0x62,0xC5,0xDB,0x78,0x2E } }; // 18D81716-C542-4CCB-B347-5E62C5DB782E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingControlStatics>{ 0xD062D399,0xAD85,0x4C1C,{ 0xB2,0xC4,0x35,0xDD,0x44,0x32,0x27,0x5E } }; // D062D399-AD85-4C1C-B2C4-35DD4432275E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ 0x054723E9,0x7989,0x4D5C,{ 0x9D,0x01,0xA7,0xEB,0x87,0x6F,0x10,0x71 } }; // 054723E9-7989-4D5C-9D01-A7EB876F1071
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ 0x9603FE56,0x9E9F,0x40B5,{ 0xBA,0xE1,0x44,0x81,0xBB,0x73,0xBC,0xD3 } }; // 9603FE56-9E9F-40B5-BAE1-4481BB73BCD3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ 0xFB214F01,0x6434,0x4EEB,{ 0x82,0xFF,0x7C,0xE5,0xD4,0x0B,0xF5,0x10 } }; // FB214F01-6434-4EEB-82FF-7CE5D40BF510
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ 0x25240E8C,0xE0D2,0x490E,{ 0xB8,0xF8,0x96,0xC8,0xEE,0x05,0x12,0xB9 } }; // 25240E8C-E0D2-490E-B8F8-96C8EE0512B9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ 0x269E03F2,0xDA79,0x4787,{ 0x9F,0x4A,0x24,0xA6,0xFA,0x56,0xCD,0xE2 } }; // 269E03F2-DA79-4787-9F4A-24A6FA56CDE2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ 0x8438486B,0x4B1C,0x4123,{ 0xBA,0x0B,0x73,0x48,0x4D,0x68,0xC3,0x38 } }; // 8438486B-4B1C-4123-BA0B-73484D68C338
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemInfo>{ 0x9CCBE6A2,0x591E,0x47A0,{ 0xA3,0x18,0x6A,0x1F,0x79,0x47,0xDA,0x2D } }; // 9CCBE6A2-591E-47A0-A318-6A1F7947DA2D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ 0xB0FD43D6,0xCFEC,0x43C8,{ 0x9A,0xC5,0x0B,0x0D,0x5E,0x25,0xD8,0x62 } }; // B0FD43D6-CFEC-43C8-9AC5-0B0D5E25D862
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainer>{ 0x535DC413,0xB1D5,0x43C1,{ 0xB0,0x57,0x86,0x58,0xCE,0x1E,0x0B,0xA2 } }; // 535DC413-B1D5-43C1-B057-8658CE1E0BA2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ 0x0A04777F,0x089E,0x4239,{ 0xBA,0xEB,0xC4,0x64,0x14,0x84,0xC3,0x7E } }; // 0A04777F-089E-4239-BAEB-C4641484C37E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ 0xA20AF5A5,0x7015,0x475D,{ 0x9D,0xE3,0x81,0xA0,0x47,0x9D,0xDA,0x38 } }; // A20AF5A5-7015-475D-9DE3-81A0479DDA38
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ 0xD7E47820,0xDC47,0x4B8E,{ 0xBB,0x27,0x7F,0x0A,0x83,0xF2,0x9A,0x07 } }; // D7E47820-DC47-4B8E-BB27-7F0A83F29A07
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ 0x1B089F43,0xCFCF,0x4AC6,{ 0xB3,0x1F,0x8D,0xAB,0x6E,0xEF,0xDD,0x93 } }; // 1B089F43-CFCF-4AC6-B31F-8DAB6EEFDD93
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ 0xBB6C901E,0x21FE,0x4109,{ 0xAF,0x80,0x73,0xEC,0x66,0x1B,0x67,0x8A } }; // BB6C901E-21FE-4109-AF80-73EC661B678A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>{ 0xC0E30122,0xF3EB,0x4BAA,{ 0xA1,0x1F,0xC3,0xF8,0x73,0x42,0xCB,0xF4 } }; // C0E30122-F3EB-4BAA-A11F-C3F87342CBF4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ 0x6F5C6132,0x6E09,0x4C10,{ 0x82,0x4A,0x12,0x7D,0x36,0x67,0x27,0x15 } }; // 6F5C6132-6E09-4C10-824A-127D36672715
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ 0xAFEA56AF,0x362A,0x4015,{ 0xB1,0x55,0x73,0x3A,0x1F,0x86,0x98,0x31 } }; // AFEA56AF-362A-4015-B155-733A1F869831
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRelativePanel>{ 0x2EABFAEB,0xB35A,0x4035,{ 0xAC,0xEA,0x3C,0x4A,0x37,0x30,0x68,0x3F } }; // 2EABFAEB-B35A-4035-ACEA-3C4A3730683F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRelativePanel2>{ 0xC09BD88C,0x1E82,0x53B3,{ 0x8C,0x01,0x7D,0x04,0x32,0xF5,0xF7,0xDB } }; // C09BD88C-1E82-53B3-8C01-7D0432F5F7DB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory>{ 0x8460193C,0x361B,0x44BA,{ 0xA1,0x7E,0xB8,0x4C,0x9D,0xCD,0xC7,0x72 } }; // 8460193C-361B-44BA-A17E-B84C9DCDC772
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics>{ 0x15903C27,0xF18C,0x4C35,{ 0x8E,0x19,0x6A,0x74,0x59,0xD9,0x07,0xB6 } }; // 15903C27-F18C-4C35-8E19-6A7459D907B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics2>{ 0x8D6B3444,0x5FBC,0x5D8B,{ 0x8B,0x46,0x22,0x17,0x6F,0x21,0xFA,0x8E } }; // 8D6B3444-5FBC-5D8B-8B46-22176F21FA8E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox>{ 0x90A57A40,0x80B6,0x4FCE,{ 0xB1,0xEC,0xE3,0xC6,0x16,0x28,0x4B,0x6A } }; // 90A57A40-80B6-4FCE-B1EC-E3C616284B6A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>{ 0xBBEA6EAD,0xE805,0x47A4,{ 0xBB,0xE7,0x47,0xE5,0x9B,0x8F,0x74,0xA7 } }; // BBEA6EAD-E805-47A4-BBE7-47E59B8F74A7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>{ 0x6B17A462,0xFBB6,0x4FFF,{ 0x99,0x91,0x93,0x99,0xCB,0x9C,0x0B,0x90 } }; // 6B17A462-FBB6-4FFF-9991-9399CB9C0B90
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox4>{ 0x5CAA8D35,0xC838,0x4BAD,{ 0xA0,0x7C,0x20,0x41,0x83,0xBB,0x75,0x1F } }; // 5CAA8D35-C838-4BAD-A07C-204183BB751F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox5>{ 0xA66D9CEA,0x6391,0x4F3B,{ 0x9F,0xD3,0x1F,0xD0,0x1F,0x49,0xF3,0x27 } }; // A66D9CEA-6391-4F3B-9FD3-1FD01F49F327
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>{ 0x0C89D500,0xE8D8,0x4EAE,{ 0x88,0x04,0x33,0x64,0x92,0x05,0xD7,0xD2 } }; // 0C89D500-E8D8-4EAE-8804-33649205D7D2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>{ 0x980C93EA,0x241F,0x4F6A,{ 0xA5,0x39,0x9D,0x18,0x5C,0x8C,0xF1,0x8A } }; // 980C93EA-241F-4F6A-A539-9D185C8CF18A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBox8>{ 0xA098E0B8,0x18E2,0x513E,{ 0x9D,0x8D,0x4E,0x97,0x03,0x41,0x0C,0x03 } }; // A098E0B8-18E2-513E-9D8D-4E9703410C03
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ 0x61A1DF62,0x2806,0x41ED,{ 0x88,0xED,0xAE,0x21,0xF4,0x7A,0xB4,0x22 } }; // 61A1DF62-2806-41ED-88ED-AE21F47AB422
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>{ 0x90E0035C,0xE8B8,0x5C33,{ 0x98,0x96,0x4E,0x98,0x9D,0x65,0x82,0x9C } }; // 90E0035C-E8B8-5C33-9896-4E989D65829C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ 0xF5E03A74,0x88EA,0x479B,{ 0x9A,0x05,0x37,0x08,0x9F,0xF3,0x0E,0xDE } }; // F5E03A74-88EA-479B-9A05-37089FF30EDE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ 0xE3EB26DE,0x2748,0x420B,{ 0xB1,0xFC,0xCE,0x95,0xB6,0xE8,0x5E,0xEC } }; // E3EB26DE-2748-420B-B1FC-CE95B6E85EEC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ 0x6D17EEC5,0x1FB3,0x4C8B,{ 0xAA,0x23,0xF5,0xE1,0x5D,0x6A,0xB6,0x4E } }; // 6D17EEC5-1FB3-4C8B-AA23-F5E15D6AB64E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ 0xF5D54FD7,0x7796,0x42A5,{ 0xA5,0xE5,0x2C,0xD2,0x11,0xEE,0x81,0x76 } }; // F5D54FD7-7796-42A5-A5E5-2CD211EE8176
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ 0x4B5C4568,0x43D5,0x43E6,{ 0xBB,0xB9,0xCB,0x4E,0x62,0x50,0xF4,0x5A } }; // 4B5C4568-43D5-43E6-BBB9-CB4E6250F45A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ 0xFE40E287,0x82ED,0x4F7E,{ 0x92,0xBA,0x66,0xF6,0x7B,0xC1,0xFF,0x44 } }; // FE40E287-82ED-4F7E-92BA-66F67BC1FF44
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ 0x59FA898F,0xF861,0x43DA,{ 0xA7,0xCE,0x4B,0x9C,0x21,0xD8,0x35,0xF9 } }; // 59FA898F-F861-43DA-A7CE-4B9C21D835F9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics8>{ 0x58045172,0x106B,0x56A9,{ 0xA8,0xE4,0x4B,0x74,0xBF,0x34,0x7D,0x4E } }; // 58045172-106B-56A9-A8E4-4B74BF347D4E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ 0x54065018,0x2813,0x4922,{ 0x9F,0x8E,0xB6,0xBB,0xAF,0xD9,0x95,0xD8 } }; // 54065018-2813-4922-9F8E-B6BBAFD995D8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ 0x395B0DB5,0x636E,0x413E,{ 0x9E,0xB4,0xFC,0x22,0xEB,0xFA,0x36,0x28 } }; // 395B0DB5-636E-413E-9EB4-FC22EBFA3628
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>{ 0xE5FFF9E2,0xB968,0x49E7,{ 0x97,0xD4,0x8C,0xCA,0x2A,0xC3,0xAE,0x7C } }; // E5FFF9E2-B968-49E7-97D4-8CCA2AC3AE7C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2>{ 0x3F209013,0x03E7,0x4508,{ 0x96,0x4A,0x91,0xAE,0xDA,0xB3,0xD1,0x1E } }; // 3F209013-03E7-4508-964A-91AEDAB3D11E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3>{ 0x7D39AE83,0x8918,0x4613,{ 0xB0,0x07,0x7C,0x89,0x8B,0xA2,0x95,0x0E } }; // 7D39AE83-8918-4613-B007-7C898BA2950E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock4>{ 0x3577C1EA,0x24FD,0x4F50,{ 0xBB,0xE4,0x3F,0xB6,0x54,0xEA,0x58,0xC5 } }; // 3577C1EA-24FD-4F50-BBE4-3FB654EA58C5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5>{ 0x9C7DC0C6,0x7A9F,0x45B6,{ 0x88,0x18,0x82,0x2C,0x54,0x9B,0xA0,0x94 } }; // 9C7DC0C6-7A9F-45B6-8818-822C549BA094
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlock6>{ 0xAE9010CD,0xE899,0x526E,{ 0x92,0x7E,0x88,0xE0,0xEE,0xD6,0x93,0xC8 } }; // AE9010CD-E899-526E-927E-88E0EED693C8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ 0x4F93749B,0xDAC3,0x4A42,{ 0x9C,0xBB,0x99,0xF0,0xDE,0x37,0xC0,0x71 } }; // 4F93749B-DAC3-4A42-9CBB-99F0DE37C071
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ 0x8742624E,0xA882,0x4826,{ 0xB9,0x29,0x4D,0x5C,0x39,0x05,0xB9,0xA1 } }; // 8742624E-A882-4826-B929-4D5C3905B9A1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ 0x7F69587B,0x5C7F,0x4B5F,{ 0xBD,0xBC,0xFB,0x95,0xC9,0x0E,0x10,0xDE } }; // 7F69587B-5C7F-4B5F-BDBC-FB95C90E10DE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ 0x041AC2F7,0x4F2B,0x43C3,{ 0xA1,0x22,0x3F,0xEA,0x9C,0xA9,0xDC,0x87 } }; // 041AC2F7-4F2B-43C3-A122-3FEA9CA9DC87
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ 0xB5EBED4C,0xF8C4,0x4A3A,{ 0x90,0x7F,0xE5,0x3E,0x78,0x27,0x9F,0xA3 } }; // B5EBED4C-F8C4-4A3A-907F-E53E78279FA3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ 0xD1D4A705,0xEB0B,0x4ECB,{ 0xB9,0xB7,0xE6,0x5D,0x03,0x08,0x7C,0x8E } }; // D1D4A705-EB0B-4ECB-B9B7-E65D03087C8E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ 0x492D883C,0xADEA,0x433C,{ 0xBE,0x1C,0x20,0x8A,0x16,0x42,0x62,0xBE } }; // 492D883C-ADEA-433C-BE1C-208A164262BE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ 0x0D6131E1,0xAF29,0x48CE,{ 0x8A,0xAF,0x74,0xEC,0xC2,0x8B,0xFB,0xB0 } }; // 0D6131E1-AF29-48CE-8AAF-74ECC28BFBB0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ 0x073F7EF4,0xCA2B,0x4B49,{ 0xA5,0x9A,0x31,0xD8,0xFA,0x74,0x33,0x32 } }; // 073F7EF4-CA2B-4B49-A59A-31D8FA743332
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ 0x80155BC4,0x6D96,0x4B08,{ 0xAD,0x57,0x13,0xDB,0x0F,0x04,0x64,0x12 } }; // 80155BC4-6D96-4B08-AD57-13DB0F046412
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ 0xAC9283A1,0x4F25,0x4280,{ 0x88,0x68,0x3E,0xEE,0xE8,0x28,0x21,0xE8 } }; // AC9283A1-4F25-4280-8868-3EEEE82821E8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics6>{ 0x073057E7,0x91C5,0x5857,{ 0xBE,0x7C,0xE7,0x26,0x21,0x23,0x97,0x86 } }; // 073057E7-91C5-5857-BE7C-E72621239786
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRowDefinition>{ 0x4ABAE829,0xD80C,0x4A5E,{ 0xA4,0x8C,0xF8,0xB3,0xD3,0xB6,0x53,0x3D } }; // 4ABAE829-D80C-4A5E-A48C-F8B3D3B6533D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ 0x5ADF3FE5,0x2056,0x4724,{ 0x94,0xD6,0xE4,0x81,0x2B,0x02,0x2E,0xC8 } }; // 5ADF3FE5-2056-4724-94D6-E4812B022EC8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollAnchorProvider>{ 0x6AE99A0F,0x478C,0x5440,{ 0xB2,0xC6,0xEA,0xD4,0x37,0x8E,0xF8,0xE4 } }; // 6AE99A0F-478C-5440-B2C6-EAD4378EF8E4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter>{ 0x5712EE2B,0x0EEB,0x46D3,{ 0xAA,0x31,0x5F,0x68,0x01,0xB8,0xDE,0x20 } }; // 5712EE2B-0EEB-46D3-AA31-5F6801B8DE20
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter2>{ 0x5F9F2737,0x2318,0x5999,{ 0x8A,0x62,0xC3,0xED,0x3C,0x0E,0x98,0xB6 } }; // 5F9F2737-2318-5999-8A62-C3ED3C0E98B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenterStatics2>{ 0xE172FF1A,0xC676,0x524B,{ 0x8F,0x20,0x96,0x15,0x21,0x49,0xD0,0x5E } }; // E172FF1A-C676-524B-8F20-96152149D05E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer>{ 0x64E9BE00,0x4DC1,0x493D,{ 0xAB,0xE7,0xCB,0xD3,0xC5,0x77,0x49,0x0D } }; // 64E9BE00-4DC1-493D-ABE7-CBD3C577490D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>{ 0x64E9BE10,0x4DD1,0x494D,{ 0xAB,0xF7,0xCB,0xD3,0xC5,0x77,0x49,0x1D } }; // 64E9BE10-4DD1-494D-ABF7-CBD3C577491D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>{ 0x74E9BE21,0x5DE2,0x595E,{ 0xBC,0x08,0xDB,0xD3,0xC5,0x77,0x49,0x2C } }; // 74E9BE21-5DE2-595E-BC08-DBD3C577492C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewer4>{ 0x786FB0C4,0x50A9,0x5A45,{ 0x8A,0x92,0x7B,0xF3,0x72,0xE1,0x90,0x98 } }; // 786FB0C4-50A9-5A45-8A92-7BF372E19098
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics>{ 0x33D1299D,0x8D6E,0x4290,{ 0xBF,0x22,0x90,0x5C,0xCC,0xD0,0x4D,0x31 } }; // 33D1299D-8D6E-4290-BF22-905CCCD04D31
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ 0x33D129AD,0x8D7E,0x42A0,{ 0xBF,0x32,0x90,0x5C,0xCC,0xD0,0x4D,0x41 } }; // 33D129AD-8D7E-42A0-BF32-905CCCD04D41
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics4>{ 0x220CF7CC,0x4F46,0x59F1,{ 0xAF,0x9B,0x67,0xFA,0x8E,0xB3,0x3D,0x01 } }; // 220CF7CC-4F46-59F1-AF9B-67FA8EB33D01
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerView>{ 0x64E9BE01,0x4DC2,0x493E,{ 0xAB,0xE8,0xCB,0xD3,0xC5,0x77,0x49,0x0E } }; // 64E9BE01-4DC2-493E-ABE8-CBD3C577490E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ 0x4DD04F7E,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; // 4DD04F7E-7A11-4B2E-9933-577DF39252B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ 0x4DD04F7F,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; // 4DD04F7F-7A11-4B2E-9933-577DF39252B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBox>{ 0xF89ECC5A,0x99BA,0x4BD4,{ 0x96,0x6C,0xF1,0x1F,0xA4,0x43,0xD1,0x3C } }; // F89ECC5A-99BA-4BD4-966C-F11FA443D13C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory>{ 0xCD743F6D,0x8685,0x46B4,{ 0x9D,0xDD,0x20,0x2F,0x69,0x41,0xB7,0x01 } }; // CD743F6D-8685-46B4-9DDD-202F6941B701
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ 0xA9A70F8F,0x0CB0,0x4BD2,{ 0x99,0x98,0x2F,0xB5,0x7A,0xD5,0xE7,0x31 } }; // A9A70F8F-0CB0-4BD2-9998-2FB57AD5E731
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ 0x126E90FD,0x3C4E,0x4CCB,{ 0x9A,0xEF,0x47,0x05,0xD1,0x9F,0xE5,0x48 } }; // 126E90FD-3C4E-4CCB-9AEF-4705D19FE548
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ 0x18918C23,0xE4C3,0x4662,{ 0xA0,0x3B,0xD0,0x54,0xFF,0xD0,0xF9,0x05 } }; // 18918C23-E4C3-4662-A03B-D054FFD0F905
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics>{ 0xB123634F,0x6871,0x48CD,{ 0x92,0xDF,0x4C,0xFF,0x22,0x45,0x90,0x82 } }; // B123634F-6871-48CD-92DF-4CFF22459082
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ 0xDA15170E,0xE566,0x48CB,{ 0xBD,0x11,0xFE,0x4B,0x0F,0x30,0xA4,0x4D } }; // DA15170E-E566-48CB-BD11-FE4B0F30A44D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ 0xDD49EE6B,0xD165,0x430F,{ 0xA3,0x7D,0xB8,0x07,0x06,0x4F,0x85,0xE1 } }; // DD49EE6B-D165-430F-A37D-B807064F85E1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ 0x557F5244,0x92F8,0x4150,{ 0xB7,0x30,0xE6,0x34,0x6E,0x8F,0x50,0xD1 } }; // 557F5244-92F8-4150-B730-E6346E8F50D1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ 0xC972D2DC,0xB609,0x4758,{ 0x85,0x1E,0xA7,0x99,0xC2,0x1D,0xE9,0x7D } }; // C972D2DC-B609-4758-851E-A799C21DE97D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ 0x11A8B6B5,0x2830,0x4517,{ 0x84,0xCD,0x55,0x24,0xC8,0xB8,0x8B,0x45 } }; // 11A8B6B5-2830-4517-84CD-5524C8B88B45
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>{ 0x019FFF21,0xECE6,0x4FBC,{ 0xBF,0x40,0x89,0x38,0xD4,0x81,0x3E,0x27 } }; // 019FFF21-ECE6-4FBC-BF40-8938D4813E27
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ 0xA76A3B63,0x229B,0x4DC5,{ 0xAA,0x11,0x9D,0x92,0x2F,0xBF,0x8A,0x98 } }; // A76A3B63-229B-4DC5-AA11-9D922FBF8A98
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ 0x42011736,0xE3C2,0x496B,{ 0xBC,0x4E,0xD7,0x50,0xD4,0x37,0x5B,0x9A } }; // 42011736-E3C2-496B-BC4E-D750D4375B9A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ 0x8EF17EF2,0x9898,0x4666,{ 0xB2,0x85,0x3E,0xD3,0x8A,0x07,0x91,0x0E } }; // 8EF17EF2-9898-4666-B285-3ED38A07910E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ 0x47DFC068,0xB569,0x4B19,{ 0x84,0x2D,0x8E,0x6C,0xF9,0x09,0x89,0xAF } }; // 47DFC068-B569-4B19-842D-8E6CF90989AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>{ 0x830BA82B,0xC55B,0x4E32,{ 0xA5,0x1C,0x57,0x91,0xE0,0x24,0xC8,0xAF } }; // 830BA82B-C55B-4E32-A51C-5791E024C8AF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ 0x480C7011,0x57AA,0x4DB6,{ 0xB6,0xFD,0xEC,0x67,0x6F,0x6D,0x41,0x4E } }; // 480C7011-57AA-4DB6-B6FD-EC676F6D414E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ 0xD0E3B535,0x9157,0x4BE4,{ 0xA4,0x2A,0xF5,0x91,0x69,0x88,0x46,0xAC } }; // D0E3B535-9157-4BE4-A42A-F591698846AC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISlider>{ 0x89572027,0x4C48,0x4700,{ 0x80,0x76,0x49,0x7B,0xA7,0x3D,0x9C,0x18 } }; // 89572027-4C48-4700-8076-497BA73D9C18
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISlider2>{ 0x40A3C50E,0x87D6,0x4D2F,{ 0xB1,0xCF,0xB2,0x79,0xCC,0x99,0x6F,0x26 } }; // 40A3C50E-87D6-4D2F-B1CF-B279CC996F26
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISliderFactory>{ 0x03A67B37,0xC7BF,0x437C,{ 0x84,0x8F,0x8C,0xB5,0xB7,0x53,0xEA,0xB4 } }; // 03A67B37-C7BF-437C-848F-8CB5B753EAB4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISliderStatics>{ 0x8A4363D7,0x7FDF,0x4D30,{ 0x98,0xFE,0xCE,0x78,0xC0,0x5B,0x31,0xCF } }; // 8A4363D7-7FDF-4D30-98FE-CE78C05B31CF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISliderStatics2>{ 0x00E7935D,0x79A5,0x4759,{ 0x96,0xA6,0x29,0xE0,0xA9,0x4A,0xDD,0x33 } }; // 00E7935D-79A5-4759-96A6-29E0A94ADD33
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButton>{ 0x58BBB066,0xC2EA,0x5499,{ 0x81,0x50,0x40,0xFA,0xA7,0x5F,0x6B,0xB5 } }; // 58BBB066-C2EA-5499-8150-40FAA75F6BB5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ 0xC46A58B8,0x3828,0x5C36,{ 0xAA,0x13,0xF7,0x9F,0x02,0xC1,0x2F,0x34 } }; // C46A58B8-3828-5C36-AA13-F79F02C12F34
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ 0xD63A2534,0x77DC,0x5361,{ 0x84,0x22,0x4A,0xD8,0x75,0x0F,0x45,0xF4 } }; // D63A2534-77DC-5361-8422-4AD8750F45F4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ 0xC227C2CA,0x26F4,0x5960,{ 0x98,0xD5,0x91,0x91,0x49,0xD1,0xB5,0x25 } }; // C227C2CA-26F4-5960-98D5-919149D1B525
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonFactory>{ 0x3201C32F,0x4D55,0x589D,{ 0x97,0xDD,0x61,0x7F,0xA3,0x64,0x21,0x37 } }; // 3201C32F-4D55-589D-97DD-617FA3642137
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitButtonStatics>{ 0x8DF07A81,0x0B1F,0x5EA9,{ 0xBE,0x42,0x15,0x2A,0xB9,0xA4,0xBC,0x5E } }; // 8DF07A81-0B1F-5EA9-BE42-152AB9A4BC5E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitView>{ 0x97222F31,0x3844,0x429E,{ 0x93,0x9C,0x16,0x73,0x15,0x53,0x22,0xA1 } }; // 97222F31-3844-429E-939C-1673155322A1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitView2>{ 0x5EA7DC10,0xCC83,0x409A,{ 0x82,0xF9,0x3E,0x91,0xD6,0xD7,0x08,0x4F } }; // 5EA7DC10-CC83-409A-82F9-3E91D6D7084F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitView3>{ 0x0EA12D8D,0x1171,0x407B,{ 0x96,0xD3,0x5E,0x1B,0x47,0x0C,0x3E,0xC5 } }; // 0EA12D8D-1171-407B-96D3-5E1B470C3EC5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory>{ 0xF101773A,0x084E,0x4FB9,{ 0x84,0x42,0x63,0x22,0x1B,0x44,0x53,0x3F } }; // F101773A-084E-4FB9-8442-63221B44533F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ 0x93CF494E,0x7A95,0x44D8,{ 0x95,0x62,0x1B,0x34,0x82,0x48,0xDA,0x9F } }; // 93CF494E-7A95-44D8-9562-1B348248DA9F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics>{ 0x859B4F6F,0x44AB,0x4E4B,{ 0x91,0xC1,0x17,0xB7,0x05,0x6D,0x9B,0x5F } }; // 859B4F6F-44AB-4E4B-91C1-17B7056D9B5F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2>{ 0x14B7CD7A,0xDFBC,0x422C,{ 0x80,0xA9,0x58,0x58,0x71,0x29,0x71,0x13 } }; // 14B7CD7A-DFBC-422C-80A9-585871297113
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanel>{ 0xB8AE8FE2,0xD641,0x4FD7,{ 0x80,0xB4,0x74,0x39,0x20,0x7D,0x27,0x98 } }; // B8AE8FE2-D641-4FD7-80B4-7439207D2798
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanel2>{ 0x36F23359,0x040E,0x48F7,{ 0x9A,0x98,0xF2,0x66,0x45,0x91,0x95,0x9C } }; // 36F23359-040E-48F7-9A98-F2664591959C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanel4>{ 0x43EBF7F6,0x3196,0x412E,{ 0x8A,0x95,0xAD,0xD0,0x02,0xFF,0x43,0xF0 } }; // 43EBF7F6-3196-412E-8A95-ADD002FF43F0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanel5>{ 0xF73E3117,0x61A8,0x5A01,{ 0x86,0x5E,0x88,0x51,0x1C,0x04,0xA9,0x92 } }; // F73E3117-61A8-5A01-865E-88511C04A992
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory>{ 0x63D8248A,0x8B34,0x445A,{ 0x80,0x8F,0xB6,0xEC,0xD6,0x2A,0x27,0xD9 } }; // 63D8248A-8B34-445A-808F-B6ECD62A27D9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics>{ 0xF0D0CD93,0x4DBC,0x48A7,{ 0x99,0x14,0x95,0x49,0x24,0x65,0x77,0x71 } }; // F0D0CD93-4DBC-48A7-9914-954924657771
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2>{ 0xD97E6257,0x080D,0x412E,{ 0xA9,0x1A,0xCE,0x6E,0x5D,0x02,0xAA,0xD3 } }; // D97E6257-080D-412E-A91A-CE6E5D02AAD3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics4>{ 0x279CDD71,0x067B,0x459F,{ 0x81,0x5F,0xEC,0xD8,0x5C,0x5E,0x48,0x43 } }; // 279CDD71-067B-459F-815F-ECD85C5E4843
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics5>{ 0x87287490,0xBFF2,0x5347,{ 0x87,0x87,0xFB,0x5A,0xEC,0x94,0x28,0x78 } }; // 87287490-BFF2-5347-8787-FB5AEC942878
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStyleSelector>{ 0xD1113F67,0xD8C1,0x4AE4,{ 0x98,0xF0,0xD8,0x50,0x45,0x02,0xF0,0x8B } }; // D1113F67-D8C1-4AE4-98F0-D8504502F08B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ 0x9E942AE7,0x3761,0x447F,{ 0x8F,0x97,0x29,0xE3,0x9D,0x5E,0xB3,0x10 } }; // 9E942AE7-3761-447F-8F97-29E39D5EB310
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ 0x08ADD66D,0x0E2E,0x43A0,{ 0xAE,0xCA,0x8F,0xAA,0x94,0xB9,0xD0,0x17 } }; // 08ADD66D-0E2E-43A0-AECA-8FAA94B9D017
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ 0x1C59DB48,0x8233,0x4C0C,{ 0xBC,0xF5,0x02,0xA5,0xFB,0x35,0xAE,0x00 } }; // 1C59DB48-8233-4C0C-BCF5-02A5FB35AE00
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ 0x21E672F2,0x2592,0x4C38,{ 0x87,0x0F,0x28,0xFB,0xCF,0x52,0xC0,0x95 } }; // 21E672F2-2592-4C38-870F-28FBCF52C095
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ 0x198289D4,0xC89B,0x49B2,{ 0x89,0x6C,0x59,0x17,0xBF,0x8A,0xDC,0xAE } }; // 198289D4-C89B-49B2-896C-5917BF8ADCAE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>{ 0xC589644F,0xEBA8,0x427A,{ 0xB7,0x5A,0x9F,0x1F,0x93,0xA1,0x1A,0xE9 } }; // C589644F-EBA8-427A-B75A-9F1F93A11AE9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ 0xF38F8D7F,0x1A48,0x49CB,{ 0x86,0xD2,0x10,0xEA,0xAA,0xF6,0xFD,0x70 } }; // F38F8D7F-1A48-49CB-86D2-10EAAAF6FD70
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ 0xF89C0297,0xEEA8,0x498C,{ 0x99,0xC4,0x25,0x7E,0x36,0x60,0xDF,0x7E } }; // F89C0297-EEA8-498C-99C4-257E3660DF7E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeControl>{ 0x9EE3D96F,0x6704,0x4823,{ 0xAA,0x15,0x1C,0x14,0x3B,0xC5,0x3C,0xF7 } }; // 9EE3D96F-6704-4823-AA15-1C143BC53CF7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeControlFactory>{ 0xC0AAA3AE,0xD141,0x4E12,{ 0xA7,0x28,0x5F,0x95,0xB5,0x07,0xE7,0xAB } }; // C0AAA3AE-D141-4E12-A728-5F95B507E7AB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeControlStatics>{ 0xE57AE83C,0x2216,0x4717,{ 0x9E,0xF6,0x46,0x62,0x33,0x4C,0x65,0x01 } }; // E57AE83C-2216-4717-9EF6-4662334C6501
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItem>{ 0x836EDADC,0x45C8,0x4A00,{ 0x90,0xA0,0x71,0x07,0xFA,0x89,0x4A,0x1B } }; // 836EDADC-45C8-4A00-90A0-7107FA894A1B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemFactory>{ 0x844BD61A,0x1716,0x4097,{ 0xBB,0xA2,0x75,0x26,0xDA,0x22,0xDE,0x39 } }; // 844BD61A-1716-4097-BBA2-7526DA22DE39
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ 0xC5B025F5,0xCB32,0x4733,{ 0x80,0x11,0x5D,0x0D,0x37,0xF4,0x55,0x0A } }; // C5B025F5-CB32-4733-8011-5D0D37F4550A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemStatics>{ 0xD0B44E96,0x2766,0x4D93,{ 0xB5,0xDB,0xF5,0xE1,0xBE,0x83,0x2C,0x2D } }; // D0B44E96-2766-4D93-B5DB-F5E1BE832C2D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItems>{ 0xB01726FF,0x969A,0x40D0,{ 0x9F,0x04,0x76,0x08,0x4C,0xE6,0xD7,0xB7 } }; // B01726FF-969A-40D0-9F04-76084CE6D7B7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ 0x47C460EE,0xD5AA,0x445F,{ 0xB3,0x1E,0x50,0xC0,0x76,0xC0,0x11,0xB9 } }; // 47C460EE-D5AA-445F-B31E-50C076C011B9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ 0x376250DF,0x48DB,0x43E3,{ 0xB0,0xE9,0x08,0x9E,0x5D,0xA9,0xA1,0x14 } }; // 376250DF-48DB-43E3-B0E9-089E5DA9A114
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIcon>{ 0x7A4774C9,0xA6A3,0x4B30,{ 0x8F,0xF1,0x90,0x81,0xD7,0x0E,0x9A,0x5C } }; // 7A4774C9-A6A3-4B30-8FF1-9081D70E9A5C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory>{ 0xC7252B88,0xE76C,0x4B44,{ 0x8A,0x05,0x04,0x6B,0x9D,0xC7,0x72,0xB8 } }; // C7252B88-E76C-4B44-8A05-046B9DC772B8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSource>{ 0x625D95A2,0xB6B1,0x408A,{ 0xB2,0x89,0xEA,0xB2,0xEC,0xBA,0x62,0xD8 } }; // 625D95A2-B6B1-408A-B289-EAB2ECBA62D8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ 0xA526AAB0,0x4130,0x4907,{ 0xB0,0x49,0x21,0xF9,0x24,0x0C,0x7A,0x40 } }; // A526AAB0-4130-4907-B049-21F9240C7A40
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ 0x8BC49738,0xD94E,0x4148,{ 0x8D,0x64,0x1A,0xDF,0x0F,0x23,0xF2,0x5F } }; // 8BC49738-D94E-4148-8D64-1ADF0F23F25F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics>{ 0x8624FBDF,0x952C,0x4F76,{ 0xB0,0x3F,0x30,0x83,0x3B,0xE9,0x95,0x72 } }; // 8624FBDF-952C-4F76-B03F-30833BE99572
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock>{ 0xAE2D9271,0x3B4A,0x45FC,{ 0x84,0x68,0xF7,0x94,0x95,0x48,0xF4,0xD5 } }; // AE2D9271-3B4A-45FC-8468-F7949548F4D5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock2>{ 0x45206A4C,0x0A4E,0x4FBF,{ 0xAE,0xE9,0x33,0x5D,0x5A,0x20,0x5F,0x6E } }; // 45206A4C-0A4E-4FBF-AEE9-335D5A205F6E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock3>{ 0xB651DD5A,0x424B,0x48C3,{ 0x9B,0x67,0x48,0x6F,0x4E,0x13,0x98,0x99 } }; // B651DD5A-424B-48C3-9B67-486F4E139899
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock4>{ 0xB014F270,0x9808,0x4ADC,{ 0xB4,0x52,0x60,0xCD,0xA5,0x41,0x00,0xC1 } }; // B014F270-9808-4ADC-B452-60CDA54100C1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock5>{ 0x624A2D38,0xEDBD,0x4A5A,{ 0xB6,0x78,0xE4,0x9F,0x1E,0x07,0xAF,0xBD } }; // 624A2D38-EDBD-4A5A-B678-E49F1E07AFBD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock6>{ 0x31816CD9,0x0404,0x410F,{ 0x91,0xEC,0x33,0xB0,0xA0,0xBB,0x92,0xB2 } }; // 31816CD9-0404-410F-91EC-33B0A0BB92B2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlock7>{ 0xDFE20A4E,0x8BE7,0x5E33,{ 0x9F,0x37,0x72,0x41,0x68,0x75,0xB1,0x21 } }; // DFE20A4E-8BE7-5E33-9F37-72416875B121
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics>{ 0x193EC042,0xA847,0x4552,{ 0xB4,0xE8,0xDB,0x36,0x65,0x5B,0x84,0x0A } }; // 193EC042-A847-4552-B4E8-DB36655B840A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2>{ 0x88100B1B,0xFF24,0x4B93,{ 0xA0,0xE6,0xF0,0x29,0xC9,0x48,0x71,0xF1 } }; // 88100B1B-FF24-4B93-A0E6-F029C94871F1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3>{ 0x8D16B9EB,0x20A1,0x4EAB,{ 0xBB,0xF2,0x1D,0x6B,0xDC,0xBC,0xD7,0x05 } }; // 8D16B9EB-20A1-4EAB-BBF2-1D6BDCBCD705
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics5>{ 0x8E4D9C70,0x0D4E,0x48DF,{ 0xAE,0x7F,0xBB,0x7A,0x9A,0xF6,0x85,0x2E } }; // 8E4D9C70-0D4E-48DF-AE7F-BB7A9AF6852E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics6>{ 0x3D1013A9,0xF9A6,0x43A2,{ 0x99,0xD3,0x57,0x3B,0x89,0xA8,0x3C,0xA3 } }; // 3D1013A9-F9A6-43A2-99D3-573B89A83CA3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics7>{ 0xCFD57E3B,0x0256,0x585D,{ 0x8B,0x3F,0xFE,0xAF,0xB6,0x9D,0x33,0x20 } }; // CFD57E3B-0256-585D-8B3F-FEAFB69D3320
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox>{ 0xE48F5A8B,0x1DFF,0x4352,{ 0xA1,0xF4,0xE5,0x16,0x51,0x4E,0xC8,0x82 } }; // E48F5A8B-1DFF-4352-A1F4-E516514EC882
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox2>{ 0xF7168C00,0x1432,0x462A,{ 0x94,0x05,0x38,0xF3,0x85,0xBF,0xC3,0x7C } }; // F7168C00-1432-462A-9405-38F385BFC37C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox3>{ 0x7DF18C3C,0x2826,0x425E,{ 0x9A,0x94,0x00,0xB7,0xF7,0x3F,0x37,0x56 } }; // 7DF18C3C-2826-425E-9A94-00B7F73F3756
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox4>{ 0xB5F1A675,0xCCE1,0x45AF,{ 0xAE,0xF9,0xC4,0x78,0x7B,0xBB,0x5E,0x30 } }; // B5F1A675-CCE1-45AF-AEF9-C4787BBB5E30
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox5>{ 0x35F9CFC1,0x4176,0x44F4,{ 0xB7,0x56,0xE9,0xCC,0xC4,0x39,0x98,0x05 } }; // 35F9CFC1-4176-44F4-B756-E9CCC4399805
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox6>{ 0x41FF2D07,0x5085,0x4E52,{ 0xA5,0x1C,0xF9,0x4B,0x06,0xCD,0x55,0x8B } }; // 41FF2D07-5085-4E52-A51C-F94B06CD558B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox7>{ 0xDA4911F9,0xFFE1,0x4C6A,{ 0xAC,0x6D,0x1B,0x4A,0x17,0x4C,0xCF,0x80 } }; // DA4911F9-FFE1-4C6A-AC6D-1B4A174CCF80
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBox8>{ 0x1EB6D027,0x0317,0x5C37,{ 0x8A,0xEA,0xF7,0x47,0xAE,0x7F,0x04,0x63 } }; // 1EB6D027-0317-5C37-8AEA-F747AE7F0463
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ 0xA5541DB3,0x7784,0x4258,{ 0xAA,0x83,0xE4,0xBE,0xDD,0x72,0x74,0x67 } }; // A5541DB3-7784-4258-AA83-E4BEDD727467
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory>{ 0x710E4278,0x8529,0x47D3,{ 0x8D,0x8E,0x30,0x7E,0x34,0xCF,0xF0,0x81 } }; // 710E4278-8529-47D3-8D8E-307E34CFF081
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>{ 0x847A24DD,0x9ABE,0x52DF,{ 0xA8,0x0A,0x0C,0xCE,0x4B,0x49,0x66,0x32 } }; // 847A24DD-9ABE-52DF-A80A-0CCE4B496632
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics>{ 0x7E37F4FB,0xA4BC,0x4625,{ 0x88,0x38,0x8E,0xB2,0xA9,0x09,0x12,0x83 } }; // 7E37F4FB-A4BC-4625-8838-8EB2A9091283
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2>{ 0x7592F37D,0x4E76,0x4EE4,{ 0x8E,0x0F,0x7D,0x6E,0x1A,0x23,0x32,0x6B } }; // 7592F37D-4E76-4EE4-8E0F-7D6E1A23326B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3>{ 0x0E1005C0,0x10B5,0x40F6,{ 0x92,0xC2,0xCE,0x13,0x4B,0x0D,0x34,0x57 } }; // 0E1005C0-10B5-40F6-92C2-CE134B0D3457
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics5>{ 0x07D04B45,0x1B2F,0x4627,{ 0x82,0xFD,0x68,0x3F,0x19,0x7E,0x5A,0x75 } }; // 07D04B45-1B2F-4627-82FD-683F197E5A75
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics6>{ 0xDC0D97E7,0x1CB7,0x433E,{ 0xAA,0x4F,0x9C,0x64,0xC9,0x8C,0xDE,0xE5 } }; // DC0D97E7-1CB7-433E-AA4F-9C64C98CDEE5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics7>{ 0xCD6C6F47,0x147E,0x46F8,{ 0xA4,0xE8,0x74,0x9C,0x49,0x84,0x7A,0x3E } }; // CD6C6F47-147E-46F8-A4E8-749C49847A3E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics8>{ 0x7F93D7C4,0x7D88,0x5F4D,{ 0x89,0x55,0xA5,0xAD,0x38,0x48,0xBC,0xB6 } }; // 7F93D7C4-7D88-5F4D-8955-A5AD3848BCB6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ 0x4E6A4B75,0x43DD,0x4E33,{ 0xAC,0xBE,0x2D,0x87,0x96,0xA1,0x79,0x27 } }; // 4E6A4B75-43DD-4E33-ACBE-2D8796A17927
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ 0xC0723D44,0x53A6,0x415F,{ 0xA9,0x81,0x50,0xDF,0xAF,0x1B,0xEC,0xBE } }; // C0723D44-53A6-415F-A981-50DFAF1BECBE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ 0x4DD04F7D,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; // 4DD04F7D-7A11-4B2E-9933-577DF39252B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout>{ 0x90384F66,0xCD3D,0x5325,{ 0x8F,0x40,0x59,0xB0,0x76,0x46,0x3C,0x40 } }; // 90384F66-CD3D-5325-8F40-59B076463C40
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ 0x1B5918D8,0xB006,0x5ECD,{ 0xAB,0x72,0x6F,0xDB,0x48,0xAB,0xC1,0xF4 } }; // 1B5918D8-B006-5ECD-AB72-6FDB48ABC1F4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ 0xB9C7E0F2,0x50B7,0x441D,{ 0x99,0x0C,0x68,0x55,0x3E,0x2E,0x05,0x6B } }; // B9C7E0F2-50B7-441D-990C-68553E2E056B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ 0x46E34DB2,0x77C0,0x4015,{ 0x8E,0xB4,0x92,0xEE,0xFD,0xFC,0x59,0x14 } }; // 46E34DB2-77C0-4015-8EB4-92EEFDFC5914
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ 0xDF22ABB2,0x10CF,0x491E,{ 0x91,0xE8,0xD3,0xCD,0x72,0xD8,0xA0,0xD3 } }; // DF22ABB2-10CF-491E-91E8-D3CD72D8A0D3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ 0xE405EF19,0xD0DF,0x43DA,{ 0xAC,0xE6,0x16,0xF9,0x11,0x38,0x68,0xC3 } }; // E405EF19-D0DF-43DA-ACE6-16F9113868C3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ 0x5F894995,0xA58D,0x4CF3,{ 0xB5,0x89,0xB5,0xE5,0x00,0xE0,0x64,0x75 } }; // 5F894995-A58D-4CF3-B589-B5E500E06475
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ 0x4BD1D625,0x221A,0x477E,{ 0xBB,0x2C,0xAD,0x0C,0x1E,0xD1,0x25,0xE7 } }; // 4BD1D625-221A-477E-BB2C-AD0C1ED125E7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ 0x8AD3FF21,0x5F66,0x4785,{ 0xB9,0x99,0x24,0xFE,0xF3,0x9F,0xB6,0xDB } }; // 8AD3FF21-5F66-4785-B999-24FEF39FB6DB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePicker>{ 0xE39099F2,0x3AFF,0x4792,{ 0x90,0x9E,0x2D,0x99,0x41,0xEC,0x03,0x57 } }; // E39099F2-3AFF-4792-909E-2D9941EC0357
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePicker2>{ 0x0FF0798C,0xF922,0x419F,{ 0x8B,0x3D,0x23,0xEE,0x75,0x86,0xD4,0x8E } }; // 0FF0798C-F922-419F-8B3D-23EE7586D48E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePicker3>{ 0xFA6E4F91,0xAC32,0x59A4,{ 0x94,0xDA,0x8B,0x3D,0x64,0x28,0x9E,0xD6 } }; // FA6E4F91-AC32-59A4-94DA-8B3D64289ED6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory>{ 0x553FE413,0x6CD7,0x46A9,{ 0xA9,0x7B,0xA1,0x8B,0xDC,0x4B,0x4C,0xA3 } }; // 553FE413-6CD7-46A9-A97B-A18BDC4B4CA3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>{ 0xBB739D75,0xE836,0x439E,{ 0x86,0xD5,0x50,0x6D,0x2D,0x18,0xE4,0x04 } }; // BB739D75-E836-439E-86D5-506D2D18E404
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ 0xC5320638,0x7A18,0x40ED,{ 0x9F,0xD0,0x4C,0x85,0x2C,0x09,0xB2,0x4E } }; // C5320638-7A18-40ED-9FD0-4C852C09B24E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter2>{ 0xA13B5B68,0x7EE9,0x59F7,{ 0xAA,0xD6,0x65,0x32,0xA8,0xA8,0xC3,0xBF } }; // A13B5B68-7EE9-59F7-AAD6-6532A8A8C3BF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics2>{ 0xAA5F0DDC,0xF2BB,0x53F2,{ 0xA5,0x4D,0xB3,0x4A,0xCC,0xCF,0x51,0xE4 } }; // AA5F0DDC-F2BB-53F2-A54D-B34ACCCF51E4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ 0x3F6728CE,0x2169,0x4003,{ 0xB4,0xA8,0x8D,0xE7,0x03,0x5A,0x0A,0xD6 } }; // 3F6728CE-2169-4003-B4A8-8DE7035A0AD6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>{ 0x6E20FB35,0x3B9B,0x5BB6,{ 0x98,0x88,0x26,0x65,0x24,0xDB,0x18,0x1E } }; // 6E20FB35-3B9B-5BB6-9888-266524DB181E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics>{ 0xFA71DFB1,0x233E,0x4F31,{ 0xB8,0xBE,0xA6,0xEA,0x67,0x0C,0x25,0xCD } }; // FA71DFB1-233E-4F31-B8BE-A6EA670C25CD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2>{ 0x36D8ABCD,0x4E10,0x451A,{ 0xB9,0x3B,0x1A,0x73,0x1E,0xA7,0xEE,0x3F } }; // 36D8ABCD-4E10-451A-B93B-1A731EA7EE3F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics3>{ 0xCFEF1763,0xBA87,0x54D8,{ 0x82,0xD4,0x7C,0x6B,0x97,0x34,0xDC,0x9D } }; // CFEF1763-BA87-54D8-82D4-7C6B9734DC9D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ 0x2F4EDB8D,0xB995,0x4E31,{ 0x8B,0xA9,0xC4,0xDC,0xDE,0xB2,0x1C,0xA3 } }; // 2F4EDB8D-B995-4E31-8BA9-C4DCDEB21CA3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ 0x49841EDD,0x88E9,0x4663,{ 0xA7,0x01,0xCD,0x4F,0xD2,0x5E,0x39,0x8F } }; // 49841EDD-88E9-4663-A701-CD4FD25E398F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ 0xA151966F,0x3BF7,0x46B6,{ 0xB6,0x1C,0x9B,0x2C,0x1B,0xA6,0x88,0x43 } }; // A151966F-3BF7-46B6-B61C-9B2C1BA68843
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ 0x16C724FB,0x6C1A,0x4852,{ 0x92,0x58,0x08,0xC0,0x38,0x36,0x79,0x07 } }; // 16C724FB-6C1A-4852-9258-08C038367907
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton>{ 0x28981B31,0x8E78,0x570C,{ 0xBE,0xBB,0x68,0x58,0x14,0x48,0x5A,0xE9 } }; // 28981B31-8E78-570C-BEBB-685814485AE9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ 0x538E61DE,0x7D46,0x5DA7,{ 0x94,0xAB,0xAC,0xED,0xE6,0xA1,0x2B,0x9E } }; // 538E61DE-7D46-5DA7-94AB-ACEDE6A12B9E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ 0x9829B0A0,0x5A30,0x5EED,{ 0xA3,0xA3,0x14,0x72,0xC5,0x3B,0x0A,0x66 } }; // 9829B0A0-5A30-5EED-A3A3-1472C53B0A66
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonFactory>{ 0x3FCF073B,0xE57C,0x573D,{ 0xAF,0x38,0xD1,0xB2,0xAD,0x38,0x79,0x51 } }; // 3FCF073B-E57C-573D-AF38-D1B2AD387951
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ 0x2138F0CF,0x5FCD,0x5DBB,{ 0x99,0xAE,0x35,0x94,0x83,0x07,0x0F,0x6B } }; // 2138F0CF-5FCD-5DBB-99AE-359483070F6B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>{ 0x331D8F00,0xC5F9,0x46A5,{ 0xB6,0xC8,0xED,0xE5,0x39,0x30,0x45,0x67 } }; // 331D8F00-C5F9-46A5-B6C8-EDE539304567
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ 0xBFD07F53,0xF8CA,0x4E47,{ 0x94,0x9E,0x9E,0x80,0x42,0x9B,0x3D,0x16 } }; // BFD07F53-F8CA-4E47-949E-9E80429B3D16
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ 0x1D37147F,0x97DF,0x4226,{ 0x92,0xCA,0xDD,0xF4,0x53,0xD7,0xFD,0x5A } }; // 1D37147F-97DF-4226-92CA-DDF453D7FD5A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTip>{ 0x7DE5D75F,0x4415,0x429F,{ 0xB5,0x23,0x69,0x9B,0xDB,0x8C,0x30,0xDB } }; // 7DE5D75F-4415-429F-B523-699BDB8C30DB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTip2>{ 0x2B1ADE26,0x299A,0x5D54,{ 0x80,0x0B,0x3B,0xEA,0x12,0x3B,0x4C,0x20 } }; // 2B1ADE26-299A-5D54-800B-3BEA123B4C20
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTipFactory>{ 0x89839403,0xB538,0x49E3,{ 0xA4,0x30,0x3A,0xC0,0x37,0xDC,0x6F,0xE0 } }; // 89839403-B538-49E3-A430-3AC037DC6FE0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTipService>{ 0x03A55F87,0xBFCC,0x4A1E,{ 0x8F,0xEA,0x98,0xF6,0x10,0x83,0x2C,0xEA } }; // 03A55F87-BFCC-4A1E-8FEA-98F610832CEA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ 0x86E649F8,0xE245,0x48AA,{ 0xA8,0xC8,0xD1,0x07,0x3E,0xD7,0x63,0x19 } }; // 86E649F8-E245-48AA-A8C8-D1073ED76319
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTipStatics>{ 0xF00285B8,0x4BA9,0x4F4F,{ 0x86,0xA7,0x86,0x00,0x38,0x13,0xCE,0xB3 } }; // F00285B8-4BA9-4F4F-86A7-86003813CEB3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IToolTipStatics2>{ 0x6845E646,0x9C7F,0x5011,{ 0x8A,0x78,0x7D,0xA9,0xD8,0x7E,0xB3,0xB6 } }; // 6845E646-9C7F-5011-8A78-7DA9D87EB3B6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeView>{ 0x9353CC5C,0xDD6E,0x453C,{ 0xAE,0xDD,0x0C,0x3A,0xC9,0x93,0x97,0x8B } }; // 9353CC5C-DD6E-453C-AEDD-0C3AC993978B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeView2>{ 0x4F33A2E6,0x2F29,0x55D3,{ 0xA1,0xAB,0x1F,0x4A,0x86,0x3B,0xF9,0x60 } }; // 4F33A2E6-2F29-55D3-A1AB-1F4A863BF960
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ 0x391DB3B0,0x1E58,0x4539,{ 0x9E,0x93,0x38,0x79,0x78,0xF4,0x6C,0xCE } }; // 391DB3B0-1E58-4539-9E93-387978F46CCE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>{ 0x747B2F4F,0x7B25,0x56AA,{ 0x83,0x00,0x78,0xD8,0x3B,0x7A,0xB2,0xDB } }; // 747B2F4F-7B25-56AA-8300-78D83B7AB2DB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ 0x3CA8632C,0x4311,0x574E,{ 0x8A,0xB4,0x3B,0x7A,0xA5,0xDE,0x7A,0x88 } }; // 3CA8632C-4311-574E-8AB4-3B7AA5DE7A88
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ 0x7BDB7EC4,0xE125,0x5773,{ 0x9A,0x3F,0x66,0x95,0x23,0x3D,0x62,0x50 } }; // 7BDB7EC4-E125-5773-9A3F-6695233D6250
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ 0xC5E1FA63,0x4154,0x49D2,{ 0xA2,0x1F,0xC3,0x41,0x76,0x60,0x5E,0x3A } }; // C5E1FA63-4154-49D2-A21F-C34176605E3A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>{ 0xA12F54C3,0x87B9,0x5623,{ 0x9C,0x74,0xE6,0xDD,0x44,0x3C,0xDE,0x18 } }; // A12F54C3-87B9-5623-9C74-E6DD443CDE18
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewFactory>{ 0xCC5267C3,0x6C69,0x49CE,{ 0xB4,0x45,0x75,0x3A,0xCE,0xE7,0x94,0x8B } }; // CC5267C3-6C69-49CE-B445-753ACEE7948B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItem>{ 0x4E05D3E6,0x6167,0x44E7,{ 0x9C,0x74,0x29,0x1D,0xDD,0x6D,0xF6,0xEB } }; // 4E05D3E6-6167-44E7-9C74-291DDD6DF6EB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItem2>{ 0x007BAF7F,0x0493,0x51B4,{ 0x87,0x9C,0x45,0x80,0x24,0xB3,0x41,0x49 } }; // 007BAF7F-0493-51B4-879C-458024B34149
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ 0x4EA32731,0x568D,0x4D0D,{ 0xAD,0xFD,0x3D,0x8D,0xC5,0xAA,0x5D,0x88 } }; // 4EA32731-568D-4D0D-ADFD-3D8DC5AA5D88
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ 0x472AB521,0x0242,0x4290,{ 0x93,0x63,0xAB,0x4F,0xE7,0x04,0x52,0x7F } }; // 472AB521-0242-4290-9363-AB4FE704527F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ 0x436795BE,0x7396,0x46DC,{ 0xA2,0x64,0x21,0xC5,0x65,0x81,0xC5,0xE5 } }; // 436795BE-7396-46DC-A264-21C56581C5E5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics2>{ 0xA8AF82F3,0xD803,0x5C25,{ 0xB4,0x8D,0xAE,0x0E,0x73,0xB1,0x6D,0x8E } }; // A8AF82F3-D803-5C25-B48D-AE0E73B16D8E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ 0xEC323744,0xDE31,0x4936,{ 0xBF,0xC2,0x1C,0xB3,0x7B,0xA1,0xDC,0x08 } }; // EC323744-DE31-4936-BFC2-1CB37BA1DC08
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ 0x11A1953B,0x31B7,0x4F40,{ 0x86,0x33,0x02,0xFC,0x61,0x4B,0x51,0x8C } }; // 11A1953B-31B7-4F40-8633-02FC614B518C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ 0x55C720A8,0x70ED,0x4C21,{ 0x93,0xF4,0x2D,0x79,0xC1,0xA4,0xA5,0xF7 } }; // 55C720A8-70ED-4C21-93F4-2D79C1A4A5F7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewList>{ 0x0F00A54E,0x099A,0x47A5,{ 0xA9,0x42,0x94,0x69,0x2B,0x01,0xF4,0x52 } }; // 0F00A54E-099A-47A5-A942-94692B01F452
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewListFactory>{ 0x288F6232,0x41D2,0x46F7,{ 0xB1,0xF5,0x69,0x1C,0x62,0x52,0x64,0xB7 } }; // 288F6232-41D2-46F7-B1F5-691C625264B7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNode>{ 0xC04C8ED3,0x9AF2,0x4E75,{ 0xA3,0x29,0x74,0x97,0xA1,0x10,0xE7,0xA8 } }; // C04C8ED3-9AF2-4E75-A329-7497A110E7A8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ 0x6EC62D90,0xAA19,0x414A,{ 0x8A,0x45,0x0A,0x55,0x89,0xA8,0x36,0xF7 } }; // 6EC62D90-AA19-414A-8A45-0A5589A836F7
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ 0x5D8276FE,0xE1D1,0x4B61,{ 0x9E,0x81,0xC7,0xFB,0x18,0x9A,0x29,0x80 } }; // 5D8276FE-E1D1-4B61-9E81-C7FB189A2980
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics>{ 0xEF913E08,0x83F2,0x4E16,{ 0xBF,0xB1,0x15,0x77,0xB9,0x83,0x55,0xF5 } }; // EF913E08-83F2-4E16-BFB1-1577B98355F5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics2>{ 0x16B1C8F9,0x7AA1,0x5E38,{ 0x82,0x18,0x7B,0xBA,0x3E,0xA4,0x17,0xC0 } }; // 16B1C8F9-7AA1-5E38-8218-7BBA3EA417C0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneView>{ 0x1B4D0DB5,0x14AD,0x5926,{ 0xBB,0x8A,0x5B,0x0A,0x5C,0x00,0x85,0xF0 } }; // 1B4D0DB5-14AD-5926-BB8A-5B0A5C0085F0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewFactory>{ 0x18FF792D,0x58B4,0x59ED,{ 0xA0,0x51,0x51,0xAC,0xEF,0xFB,0xCC,0xA9 } }; // 18FF792D-58B4-59ED-A051-51ACEFFBCCA9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewStatics>{ 0x5A35C389,0x85C4,0x55F4,{ 0xAB,0xB1,0x97,0x45,0x1B,0xC3,0x2D,0x71 } }; // 5A35C389-85C4-55F4-ABB1-97451BC32D71
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IUIElementCollection>{ 0xD6602D54,0x88F6,0x43F6,{ 0x85,0xD8,0xA9,0xD9,0x14,0xA6,0xDD,0x3B } }; // D6602D54-88F6-43F6-85D8-A9D914A6DD3B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IUserControl>{ 0xA7A69EC9,0xEA35,0x4679,{ 0xBF,0x29,0xF4,0xF0,0x92,0x86,0xD3,0x14 } }; // A7A69EC9-EA35-4679-BF29-F4F09286D314
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IUserControlFactory>{ 0x38B1ED92,0xA28A,0x4972,{ 0x93,0xDF,0xF4,0xF7,0x59,0xB8,0xAF,0xD2 } }; // 38B1ED92-A28A-4972-93DF-F4F759B8AFD2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IUserControlStatics>{ 0xE8887976,0x2C5C,0x41CF,{ 0xBE,0x6A,0x9E,0x44,0xBE,0xFD,0xF6,0x55 } }; // E8887976-2C5C-41CF-BE6A-9E44BEFDF655
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ 0x9CA507C7,0x23C9,0x4F01,{ 0xB8,0x0F,0xBE,0x5C,0x21,0xEE,0xF4,0x74 } }; // 9CA507C7-23C9-4F01-B80F-BE5C21EEF474
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ 0xFE9DB859,0x8127,0x4AEF,{ 0xB7,0xA2,0x94,0x98,0x47,0x48,0x6E,0x96 } }; // FE9DB859-8127-4AEF-B7A2-949847486E96
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IViewbox>{ 0x05252C58,0xBA9D,0x4809,{ 0x9E,0xC3,0xFA,0x0D,0x16,0x71,0x0B,0xA1 } }; // 05252C58-BA9D-4809-9EC3-FA0D16710BA1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IViewboxStatics>{ 0x5CD1E72D,0xE8D3,0x4865,{ 0x8F,0x08,0xB6,0xB2,0xD6,0x89,0xAD,0xF1 } }; // 5CD1E72D-E8D3-4865-8F08-B6B2D689ADF1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel>{ 0x38AAD50C,0x12CF,0x4D1E,{ 0xA8,0x84,0xC9,0xDF,0x85,0xF0,0x7C,0xD9 } }; // 38AAD50C-12CF-4D1E-A884-C9DF85F07CD9
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ 0xBE19F839,0xCBD0,0x43E9,{ 0xA5,0xD0,0x0B,0xDB,0xA0,0xFF,0xBD,0x38 } }; // BE19F839-CBD0-43E9-A5D0-0BDBA0FFBD38
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ 0x5EF6BD7D,0x677F,0x408D,{ 0xA9,0x6C,0xB1,0x95,0x07,0x75,0x04,0x66 } }; // 5EF6BD7D-677F-408D-A96C-B19507750466
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ 0xC9C9AB42,0xC232,0x479D,{ 0xA7,0xC9,0x5E,0x76,0x11,0x19,0x6A,0x45 } }; // C9C9AB42-C232-479D-A7C9-5E7611196A45
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ 0x7567CD9A,0xA3B4,0x4DEA,{ 0xBB,0x11,0x54,0x9E,0x2C,0x2F,0x91,0x9D } }; // 7567CD9A-A3B4-4DEA-BB11-549E2C2F919D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ 0xCBE6F72C,0x2892,0x46D1,{ 0x98,0x7F,0x58,0xCA,0x10,0x81,0xF0,0x40 } }; // CBE6F72C-2892-46D1-987F-58CA1081F040
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ 0x8314E778,0x91D3,0x4D56,{ 0xAC,0x09,0x22,0x3A,0xDC,0xD2,0xBD,0x3F } }; // 8314E778-91D3-4D56-AC09-223ADCD2BD3F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView>{ 0x5862CC46,0x1F7D,0x479B,{ 0x92,0xA6,0xDE,0x78,0x58,0xFE,0x8D,0x54 } }; // 5862CC46-1F7D-479B-92A6-DE7858FE8D54
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView2>{ 0xD481759E,0x3EFF,0x4462,{ 0x82,0x3D,0xFD,0x52,0xF9,0xBA,0x4C,0xC8 } }; // D481759E-3EFF-4462-823D-FD52F9BA4CC8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView3>{ 0xC497789B,0xB499,0x4D69,{ 0xB5,0xC2,0xAE,0x9D,0x5D,0x6D,0x59,0x4E } }; // C497789B-B499-4D69-B5C2-AE9D5D6D594E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView4>{ 0xE28243BC,0x67F3,0x462A,{ 0xB4,0xE0,0x3B,0xBF,0x6C,0x3D,0xAB,0x0B } }; // E28243BC-67F3-462A-B4E0-3BBF6C3DAB0B
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView5>{ 0x8C9884A6,0x2F3B,0x4A55,{ 0xA4,0x63,0x84,0x44,0xC2,0x09,0x5D,0x00 } }; // 8C9884A6-2F3B-4A55-A463-8444C2095D00
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView6>{ 0x38CCD942,0x2536,0x467C,{ 0xA2,0x11,0xAF,0x35,0x9C,0x3B,0x4F,0xDA } }; // 38CCD942-2536-467C-A211-AF359C3B4FDA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebView7>{ 0x27707C2B,0x042F,0x5353,{ 0x90,0x21,0x55,0xCD,0x06,0x58,0x5F,0xDF } }; // 27707C2B-042F-5353-9021-55CD06585FDF
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewBrush>{ 0x40E86F75,0x0CF4,0x4B72,{ 0xA4,0xD6,0xCF,0x5D,0x15,0x78,0x01,0x16 } }; // 40E86F75-0CF4-4B72-A4D6-CF5D15780116
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ 0xD74DAA24,0x1D05,0x463E,{ 0xB0,0x28,0x6B,0xAA,0x44,0x20,0xE7,0x62 } }; // D74DAA24-1D05-463E-B028-6BAA4420E762
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ 0x6E2980BB,0x98B8,0x413E,{ 0x81,0x29,0x97,0x1C,0x6F,0x7E,0x4C,0x8A } }; // 6E2980BB-98B8-413E-8129-971C6F7E4C8A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ 0xC47EBA15,0xDC6B,0x4B36,{ 0x9D,0x80,0x82,0xFB,0x88,0x17,0xB9,0x88 } }; // C47EBA15-DC6B-4B36-9D80-82FB8817B988
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ 0xA3DCC461,0x7350,0x4D3A,{ 0x8F,0xB9,0x40,0xEE,0xEC,0x27,0x46,0xC2 } }; // A3DCC461-7350-4D3A-8FB9-40EEEC2746C2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4>{ 0x82EDAC58,0xEE6A,0x4C9B,{ 0xA3,0xA0,0x93,0x47,0xA7,0xD0,0xEF,0x4C } }; // 82EDAC58-EE6A-4C9B-A3A0-9347A7D0EF4C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ 0xF3F020AB,0xA46C,0x42B0,{ 0x9E,0xFE,0x69,0x76,0x4D,0x5C,0xFF,0xA6 } }; // F3F020AB-A46C-42B0-9EFE-69764D5CFFA6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ 0x11E6F20B,0xEBA7,0x44C0,{ 0x88,0x9B,0xED,0xEB,0x6A,0x06,0x4D,0xDD } }; // 11E6F20B-EBA7-44C0-889B-EDEB6A064DDD
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ 0xAF09609A,0x129C,0x4170,{ 0x9E,0x9C,0xE2,0xCD,0xF0,0x25,0xDC,0xA4 } }; // AF09609A-129C-4170-9E9C-E2CDF025DCA4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ 0x94CB8668,0x8367,0x43D5,{ 0x91,0xBB,0x96,0xEB,0xA3,0x7E,0xC7,0x84 } }; // 94CB8668-8367-43D5-91BB-96EBA37EC784
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ 0x470FA818,0x6862,0x44D9,{ 0xB3,0xD1,0xC0,0x69,0x63,0x73,0xDE,0x35 } }; // 470FA818-6862-44D9-B3D1-C0696373DE35
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ 0x17B76332,0x66C4,0x4131,{ 0x99,0x9E,0xDF,0x7D,0xE2,0x0A,0x8C,0x9C } }; // 17B76332-66C4-4131-999E-DF7DE20A8C9C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ 0xDADECFD0,0x6E1E,0x473F,{ 0xB0,0xBE,0xB0,0x24,0x04,0xD6,0xA8,0x6D } }; // DADECFD0-6E1E-473F-B0BE-B02404D6A86D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ 0xA405700A,0xC482,0x40B5,{ 0xAA,0xEA,0xE1,0x0C,0xFA,0x9F,0x5A,0xBE } }; // A405700A-C482-40B5-AAEA-E10CFA9F5ABE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewSettings>{ 0x1D50AD4D,0xABF6,0x4785,{ 0x8D,0xF3,0xFD,0xEB,0xC1,0x27,0x03,0x01 } }; // 1D50AD4D-ABF6-4785-8DF3-FDEBC1270301
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics>{ 0xA0B561DE,0x5FDB,0x443B,{ 0xB9,0xF0,0x5C,0x30,0xF6,0xB7,0xA1,0xF4 } }; // A0B561DE-5FDB-443B-B9F0-5C30F6B7A1F4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2>{ 0x322F8780,0xE812,0x466B,{ 0x9E,0x50,0x8E,0x9F,0xEC,0x24,0x01,0x8A } }; // 322F8780-E812-466B-9E50-8E9FEC24018A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3>{ 0x129BEF8A,0x4509,0x4374,{ 0xB0,0xD1,0xA7,0x10,0x4D,0x0C,0x3A,0x2F } }; // 129BEF8A-4509-4374-B0D1-A7104D0C3A2F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4>{ 0x44B197B0,0xB746,0x40F3,{ 0x99,0x36,0x4E,0xBB,0xFF,0x6B,0x47,0xB8 } }; // 44B197B0-B746-40F3-9936-4EBBFF6B47B8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5>{ 0x08A0B8D1,0x508A,0x4DB8,{ 0x97,0xEF,0x0F,0xA5,0x05,0xE1,0x9E,0xC2 } }; // 08A0B8D1-508A-4DB8-97EF-0FA505E19EC2
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ 0xB9C9E1A7,0x620F,0x4895,{ 0x93,0x5D,0x10,0xFB,0xAC,0x6F,0xD2,0x9E } }; // B9C9E1A7-620F-4895-935D-10FBAC6FD29E
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ 0x37BC16E1,0x6062,0x4678,{ 0xB2,0x0B,0x6C,0x36,0xAC,0x9C,0x59,0xAC } }; // 37BC16E1-6062-4678-B20B-6C36AC9C59AC
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ 0x9ABE1154,0x36F0,0x4268,{ 0x8D,0x88,0x12,0x1E,0xED,0xF4,0x5E,0x6A } }; // 9ABE1154-36F0-4268-8D88-121EEDF45E6A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs>{ 0x378D21F6,0xC77F,0x5D8B,{ 0x8F,0x30,0x93,0xC9,0x9D,0xF7,0x94,0x35 } }; // 378D21F6-C77F-5D8B-8F30-93C99DF79435
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWrapGrid>{ 0x0552178B,0x7567,0x47C2,{ 0xBD,0x5C,0xAD,0x83,0x94,0xC8,0x28,0xBA } }; // 0552178B-7567-47C2-BD5C-AD8394C828BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics>{ 0xD04A6B97,0x13CB,0x479C,{ 0xA2,0x85,0xE4,0xE5,0x68,0x46,0xC4,0xCB } }; // D04A6B97-13CB-479C-A285-E4E56846C4CB
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::BackClickEventHandler>{ 0xFA9BC21F,0x9892,0x482E,{ 0xAB,0xF6,0xEB,0x2D,0x60,0x7D,0x32,0xDE } }; // FA9BC21F-9892-482E-ABF6-EB2D607D32DE
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ 0x8D745891,0x4DE3,0x49CB,{ 0x97,0x4B,0x08,0x38,0x71,0xA3,0xAF,0xE6 } }; // 8D745891-4DE3-49CB-974B-083871A3AFE6
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ 0xCACAD0D6,0x0F0D,0x4870,{ 0x88,0x4D,0xF2,0xDE,0xDF,0x67,0x42,0x88 } }; // CACAD0D6-0F0D-4870-884D-F2DEDF674288
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ 0xDF945151,0x745C,0x4446,{ 0xB2,0xFC,0x21,0x6D,0x76,0x58,0x47,0xA0 } }; // DF945151-745C-4446-B2FC-216D765847A0
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ 0x3AAEAB4C,0x14CB,0x4434,{ 0xBE,0xCC,0x88,0xA8,0x58,0x5C,0x2F,0x89 } }; // 3AAEAB4C-14CB-4434-BECC-88A8585C2F89
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ 0xAFE17B9B,0x9C63,0x4583,{ 0x88,0xE4,0xC5,0x90,0x19,0xB7,0xF4,0x9D } }; // AFE17B9B-9C63-4583-88E4-C59019B7F49D
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler>{ 0x3DF6D14E,0xE18A,0x4A75,{ 0x93,0x95,0x62,0x7C,0x5F,0x3C,0xD4,0x89 } }; // 3DF6D14E-E18A-4A75-9395-627C5F3CD489
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ 0x6AF5DA76,0x7E8B,0x4A91,{ 0x9A,0x56,0x46,0x0C,0xB4,0x7D,0x52,0x3F } }; // 6AF5DA76-7E8B-4A91-9A56-460CB47D523F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ 0x26FD5855,0xB530,0x4688,{ 0xB9,0xF0,0x42,0x82,0x49,0x17,0x8E,0xF8 } }; // 26FD5855-B530-4688-B9F0-428249178EF8
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::NotifyEventHandler>{ 0xC2FDD1F8,0x7105,0x4A74,{ 0xA1,0x09,0xDE,0x29,0xDF,0xF5,0x6B,0x98 } }; // C2FDD1F8-7105-4A74-A109-DE29DFF56B98
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ 0x6BECAA6A,0x63F8,0x47FF,{ 0xB6,0xAC,0x76,0xE7,0xDA,0x24,0x7D,0x67 } }; // 6BECAA6A-63F8-47FF-B6AC-76E7DA247D67
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ 0xE1A05352,0x5AA0,0x42CA,{ 0x9C,0xD9,0x06,0x8A,0x14,0xDB,0x6E,0x68 } }; // E1A05352-5AA0-42CA-9CD9-068A14DB6E68
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ 0x1FA9161D,0x5D73,0x44FB,{ 0x81,0xAC,0xD1,0xC9,0x38,0x49,0x19,0xD4 } }; // 1FA9161D-5D73-44FB-81AC-D1C9384919D4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler>{ 0x8EB35B97,0xAD87,0x40E8,{ 0x81,0x8B,0x77,0xDB,0x24,0x75,0x95,0x66 } }; // 8EB35B97-AD87-40E8-818B-77DB24759566
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ 0xD56DB359,0x6F77,0x4296,{ 0xAB,0x9C,0x79,0x49,0x39,0x44,0x43,0x65 } }; // D56DB359-6F77-4296-AB9C-794939444365
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ 0xA31EAFE1,0x41DC,0x47F8,{ 0xAE,0x22,0x97,0x06,0xC8,0xF1,0x43,0xD4 } }; // A31EAFE1-41DC-47F8-AE22-9706C8F143D4
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AnchorRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AppBar>{ using type = winrt::Windows::UI::Xaml::Controls::IAppBar; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AppBarButton>{ using type = winrt::Windows::UI::Xaml::Controls::IAppBarButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AppBarElementContainer>{ using type = winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AppBarSeparator>{ using type = winrt::Windows::UI::Xaml::Controls::IAppBarSeparator; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AppBarToggleButton>{ using type = winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox>{ using type = winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::BackClickEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::BitmapIcon>{ using type = winrt::Windows::UI::Xaml::Controls::IBitmapIcon; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::BitmapIconSource>{ using type = winrt::Windows::UI::Xaml::Controls::IBitmapIconSource; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Border>{ using type = winrt::Windows::UI::Xaml::Controls::IBorder; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Button>{ using type = winrt::Windows::UI::Xaml::Controls::IButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarView>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItem>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Canvas>{ using type = winrt::Windows::UI::Xaml::Controls::ICanvas; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CaptureElement>{ using type = winrt::Windows::UI::Xaml::Controls::ICaptureElement; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CheckBox>{ using type = winrt::Windows::UI::Xaml::Controls::ICheckBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ColorPicker>{ using type = winrt::Windows::UI::Xaml::Controls::IColorPicker; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ColumnDefinition>{ using type = winrt::Windows::UI::Xaml::Controls::IColumnDefinition; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Controls::ColumnDefinition>; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ComboBox>{ using type = winrt::Windows::UI::Xaml::Controls::IComboBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ComboBoxItem>{ using type = winrt::Windows::UI::Xaml::Controls::IComboBoxItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CommandBar>{ using type = winrt::Windows::UI::Xaml::Controls::ICommandBar; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CommandBarFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentControl>{ using type = winrt::Windows::UI::Xaml::Controls::IContentControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialog>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialog; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContentPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IContentPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Control>{ using type = winrt::Windows::UI::Xaml::Controls::IControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ControlTemplate>{ using type = winrt::Windows::UI::Xaml::Controls::IControlTemplate; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DataTemplateSelector>{ using type = winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePicker>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePicker; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DropDownButton>{ using type = winrt::Windows::UI::Xaml::Controls::IDropDownButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DropDownButtonAutomationPeer>{ using type = winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FlipView>{ using type = winrt::Windows::UI::Xaml::Controls::IFlipView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FlipViewItem>{ using type = winrt::Windows::UI::Xaml::Controls::IFlipViewItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Flyout>{ using type = winrt::Windows::UI::Xaml::Controls::IFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FontIcon>{ using type = winrt::Windows::UI::Xaml::Controls::IFontIcon; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::FontIconSource>{ using type = winrt::Windows::UI::Xaml::Controls::IFontIconSource; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Frame>{ using type = winrt::Windows::UI::Xaml::Controls::IFrame; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Grid>{ using type = winrt::Windows::UI::Xaml::Controls::IGrid; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GridView>{ using type = winrt::Windows::UI::Xaml::Controls::IGridView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GridViewHeaderItem>{ using type = winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GridViewItem>{ using type = winrt::Windows::UI::Xaml::Controls::IGridViewItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GroupItem>{ using type = winrt::Windows::UI::Xaml::Controls::IGroupItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GroupStyle>{ using type = winrt::Windows::UI::Xaml::Controls::IGroupStyle; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::GroupStyleSelector>{ using type = winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HandwritingView>{ using type = winrt::Windows::UI::Xaml::Controls::IHandwritingView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HandwritingViewCandidatesChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HandwritingViewTextSubmittedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Hub>{ using type = winrt::Windows::UI::Xaml::Controls::IHub; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HubSection>{ using type = winrt::Windows::UI::Xaml::Controls::IHubSection; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HubSectionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Controls::HubSection>; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::HyperlinkButton>{ using type = winrt::Windows::UI::Xaml::Controls::IHyperlinkButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::IconElement>{ using type = winrt::Windows::UI::Xaml::Controls::IIconElement; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::IconSource>{ using type = winrt::Windows::UI::Xaml::Controls::IIconSource; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::IconSourceElement>{ using type = winrt::Windows::UI::Xaml::Controls::IIconSourceElement; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Image>{ using type = winrt::Windows::UI::Xaml::Controls::IImage; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkCanvas>{ using type = winrt::Windows::UI::Xaml::Controls::IInkCanvas; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbar>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbar; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarEraserButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarMenuButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarPenButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarPencilButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarRulerButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarStencilButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarToggleButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton>{ using type = winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemCollection>{ using type = winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemContainerGenerator>{ using type = winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsControl>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsStackPanel>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsStackPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ItemsWrapGrid>{ using type = winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListBox>{ using type = winrt::Windows::UI::Xaml::Controls::IListBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListBoxItem>{ using type = winrt::Windows::UI::Xaml::Controls::IListBoxItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::IListPickerFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListView>{ using type = winrt::Windows::UI::Xaml::Controls::IListView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListViewBase>{ using type = winrt::Windows::UI::Xaml::Controls::IListViewBase; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListViewHeaderItem>{ using type = winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListViewItem>{ using type = winrt::Windows::UI::Xaml::Controls::IListViewItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MediaElement>{ using type = winrt::Windows::UI::Xaml::Controls::IMediaElement; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MediaPlayerElement>{ using type = winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MediaTransportControls>{ using type = winrt::Windows::UI::Xaml::Controls::IMediaTransportControls; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuBar>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuBar; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuBarItem>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuBarItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItem>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationView>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewItem>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewItemBase>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewList>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewList; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::NotifyEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::INotifyEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Page>{ using type = winrt::Windows::UI::Xaml::Controls::IPage; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Panel>{ using type = winrt::Windows::UI::Xaml::Controls::IPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ParallaxView>{ using type = winrt::Windows::UI::Xaml::Controls::IParallaxView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PasswordBox>{ using type = winrt::Windows::UI::Xaml::Controls::IPasswordBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PathIcon>{ using type = winrt::Windows::UI::Xaml::Controls::IPathIcon; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PathIconSource>{ using type = winrt::Windows::UI::Xaml::Controls::IPathIconSource; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PersonPicture>{ using type = winrt::Windows::UI::Xaml::Controls::IPersonPicture; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PickerFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::IPickerFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Pivot>{ using type = winrt::Windows::UI::Xaml::Controls::IPivot; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PivotItem>{ using type = winrt::Windows::UI::Xaml::Controls::IPivotItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ProgressBar>{ using type = winrt::Windows::UI::Xaml::Controls::IProgressBar; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ProgressRing>{ using type = winrt::Windows::UI::Xaml::Controls::IProgressRing; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RadioButton>{ using type = winrt::Windows::UI::Xaml::Controls::IRadioButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RatingControl>{ using type = winrt::Windows::UI::Xaml::Controls::IRatingControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RatingItemFontInfo>{ using type = winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RatingItemImageInfo>{ using type = winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RatingItemInfo>{ using type = winrt::Windows::UI::Xaml::Controls::IRatingItemInfo; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RefreshContainer>{ using type = winrt::Windows::UI::Xaml::Controls::IRefreshContainer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer>{ using type = winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RelativePanel>{ using type = winrt::Windows::UI::Xaml::Controls::IRelativePanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RichEditBox>{ using type = winrt::Windows::UI::Xaml::Controls::IRichEditBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RichTextBlock>{ using type = winrt::Windows::UI::Xaml::Controls::IRichTextBlock; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RowDefinition>{ using type = winrt::Windows::UI::Xaml::Controls::IRowDefinition; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::RowDefinitionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Controls::RowDefinition>; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ScrollContentPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ScrollViewer>{ using type = winrt::Windows::UI::Xaml::Controls::IScrollViewer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ScrollViewerView>{ using type = winrt::Windows::UI::Xaml::Controls::IScrollViewerView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SearchBox>{ using type = winrt::Windows::UI::Xaml::Controls::ISearchBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SemanticZoom>{ using type = winrt::Windows::UI::Xaml::Controls::ISemanticZoom; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation>{ using type = winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SettingsFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::ISettingsFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Slider>{ using type = winrt::Windows::UI::Xaml::Controls::ISlider; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SplitButton>{ using type = winrt::Windows::UI::Xaml::Controls::ISplitButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SplitButtonAutomationPeer>{ using type = winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SplitView>{ using type = winrt::Windows::UI::Xaml::Controls::ISplitView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::StackPanel>{ using type = winrt::Windows::UI::Xaml::Controls::IStackPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::StyleSelector>{ using type = winrt::Windows::UI::Xaml::Controls::IStyleSelector; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwapChainPanel>{ using type = winrt::Windows::UI::Xaml::Controls::ISwapChainPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwipeControl>{ using type = winrt::Windows::UI::Xaml::Controls::ISwipeControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwipeItem>{ using type = winrt::Windows::UI::Xaml::Controls::ISwipeItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SwipeItems>{ using type = winrt::Windows::UI::Xaml::Controls::ISwipeItems; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SymbolIcon>{ using type = winrt::Windows::UI::Xaml::Controls::ISymbolIcon; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::SymbolIconSource>{ using type = winrt::Windows::UI::Xaml::Controls::ISymbolIconSource; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextBlock>{ using type = winrt::Windows::UI::Xaml::Controls::ITextBlock; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextBox>{ using type = winrt::Windows::UI::Xaml::Controls::ITextBox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePicker>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePicker; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToggleSplitButton>{ using type = winrt::Windows::UI::Xaml::Controls::IToggleSplitButton; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer>{ using type = winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToggleSwitch>{ using type = winrt::Windows::UI::Xaml::Controls::IToggleSwitch; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToolTip>{ using type = winrt::Windows::UI::Xaml::Controls::IToolTip; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::ToolTipService>{ using type = winrt::Windows::UI::Xaml::Controls::IToolTipService; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeView>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewItem>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewItem; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewList>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewList; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TreeViewNode>{ using type = winrt::Windows::UI::Xaml::Controls::ITreeViewNode; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::TwoPaneView>{ using type = winrt::Windows::UI::Xaml::Controls::ITwoPaneView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::UIElementCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::UIElement>; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::UserControl>{ using type = winrt::Windows::UI::Xaml::Controls::IUserControl; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::Viewbox>{ using type = winrt::Windows::UI::Xaml::Controls::IViewbox; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::VirtualizingPanel>{ using type = winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebView>{ using type = winrt::Windows::UI::Xaml::Controls::IWebView; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewBrush>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewBrush; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequest>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewSettings>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewSettings; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WebViewWebResourceRequestedEventArgs>{ using type = winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs; };
    template <> struct default_interface<winrt::Windows::UI::Xaml::Controls::WrapGrid>{ using type = winrt::Windows::UI::Xaml::Controls::IWrapGrid; };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Anchor(void**) noexcept = 0;
            virtual int32_t __stdcall put_Anchor(void*) noexcept = 0;
            virtual int32_t __stdcall get_AnchorCandidates(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSticky(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSticky(bool) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBar2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClosedDisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ClosedDisplayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBar3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Opening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBar4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButton3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LabelPosition(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButton4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButton5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnClosed(void*) noexcept = 0;
            virtual int32_t __stdcall OnOpened(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnClosing(void*) noexcept = 0;
            virtual int32_t __stdcall OnOpening(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStickyProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClosedDisplayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LabelPosition(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxSuggestionListHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSuggestionListHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_IsSuggestionListOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSuggestionListOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_UpdateTextOnSelect(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UpdateTextOnSelect(bool) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_AutoMaximizeSuggestionArea(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoMaximizeSuggestionArea(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextBoxStyle(void*) noexcept = 0;
            virtual int32_t __stdcall add_SuggestionChosen(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SuggestionChosen(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryIcon(void**) noexcept = 0;
            virtual int32_t __stdcall put_QueryIcon(void*) noexcept = 0;
            virtual int32_t __stdcall add_QuerySubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_QuerySubmitted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChosenSuggestion(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxSuggestionListHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSuggestionListOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UpdateTextOnSelectProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoMaximizeSuggestionAreaProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryIconProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Reason(int32_t) noexcept = 0;
            virtual int32_t __stdcall CheckCurrent(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReasonProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIcon>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIcon2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowAsMonochrome(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAsMonochrome(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochrome(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAsMonochrome(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochromeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowAsMonochromeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBorder>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ChildTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBorder2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBorderStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IBorderStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Flyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Flyout(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Date(void**) noexcept = 0;
            virtual int32_t __stdcall put_Date(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsCalendarOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCalendarOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_DateFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DateFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarViewStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTodayHighlighted(bool) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeek(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstDayOfWeek(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayOfWeekFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOutOfScopeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroupLabelVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_CalendarViewDayItemChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CalendarViewDayItemChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetDisplayDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall SetYearDecadeDisplayDimensions(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewDate(void**) noexcept = 0;
            virtual int32_t __stdcall get_OldDate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCalendarOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlightedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeekProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayOfWeekFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroupLabelVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeek(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstDayOfWeek(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOutOfScopeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTodayHighlighted(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MinDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_NumberOfWeeksInView(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NumberOfWeeksInView(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDates(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_FocusBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedHoverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_HoverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_HoverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_PressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_PressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopeBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_PressedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PressedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_BlackoutForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopeForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalDayItemAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalDayItemAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalDayItemAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalDayItemAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalFirstOfMonthLabelAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalFirstOfMonthLabelAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalFirstOfMonthLabelAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalFirstOfMonthLabelAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewDayItemStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarViewDayItemStyle(void*) noexcept = 0;
            virtual int32_t __stdcall add_CalendarViewDayItemChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CalendarViewDayItemChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectedDatesChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedDatesChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetDisplayDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall SetYearDecadeDisplayDimensions(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBlackout(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBlackout(bool) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall SetDensityColors(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InRecycleQueue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Phase(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallback(void*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallbackWithPhase(uint32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBlackoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedDates(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedDates(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeekProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlightedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NumberOfWeeksInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDatesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HoverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PressedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalDayItemAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalDayItemAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalFirstOfMonthLabelAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalFirstOfMonthLabelAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewDayItemStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICanvas>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICanvasFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICanvasStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetLeft(void*, double*) noexcept = 0;
            virtual int32_t __stdcall SetLeft(void*, double) noexcept = 0;
            virtual int32_t __stdcall get_TopProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetTop(void*, double*) noexcept = 0;
            virtual int32_t __stdcall SetTop(void*, double) noexcept = 0;
            virtual int32_t __stdcall get_ZIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetZIndex(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetZIndex(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICaptureElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICheckBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupHeaderContainer(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderContainer(void*) noexcept = 0;
            virtual int32_t __stdcall get_GroupIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Group(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainer(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsContainerPrepared(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsContainerPrepared(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
            virtual int32_t __stdcall get_UIElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_NewColor(struct struct_Windows_UI_Color*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColorPicker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_PreviousColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSpectrumVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorPreviewVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMoreButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorChannelTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHexInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MinHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShape(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumShape(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponents(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumComponents(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ColorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ColorChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColorPickerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColorPickerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShapeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponentsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColumnDefinition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Width(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Width(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_MaxWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ActualWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_WidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDropDownOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDropDownOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsEditable(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsSelectionBoxHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MaxDropDownHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDropDownHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_SelectionBoxItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionBoxItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_DropDownClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DropDownClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DropDownOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DropDownOpened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSearchEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSearchEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionChangedTrigger(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionChangedTrigger(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlaceholderForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderForeground(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBox6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_IsEditable(bool) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextBoxStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_TextSubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextSubmitted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnDropDownClosed(void*) noexcept = 0;
            virtual int32_t __stdcall OnDropDownOpened(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDropDownOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDropDownHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSearchEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionChangedTriggerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlaceholderForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsEditableProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommands(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBar2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CommandBarOverflowPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandBarOverflowPresenterStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandBarTemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBar3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultLabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultLabelPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OverflowButtonVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsDynamicOverflowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDynamicOverflowEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_DynamicOverflowItemsChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DynamicOverflowItemsChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompact(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsInOverflow(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DynamicOverflowOrder(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommands(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommandsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommandsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CommandBarOverflowPresenterStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultLabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDynamicOverflowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_InRecycleQueue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ItemIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Phase(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallback(void*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallbackWithPhase(uint32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentControl2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentTemplateRoot(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialog>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TitleTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FullSizeDesired(bool*) noexcept = 0;
            virtual int32_t __stdcall put_FullSizeDesired(bool) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimaryButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPrimaryButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSecondaryButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSecondaryButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PrimaryButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PrimaryButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SecondaryButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SecondaryButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
            virtual int32_t __stdcall ShowAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialog2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CloseButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_DefaultButton(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultButton(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CloseButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseButtonClick(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialog3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall ShowAsyncWithPlacement(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Result(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Result(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FullSizeDesiredProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimaryButtonEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSecondaryButtonEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CloseButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultButtonProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChangeKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ContentLinkInfo(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextRange(struct struct_Windows_UI_Xaml_Documents_TextRange*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenter3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenter4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalContentAlignment(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenter5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnContentTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignmentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CursorLeft(double*) noexcept = 0;
            virtual int32_t __stdcall get_CursorTop(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsTabStop(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTabStop(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TabIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TabIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TabNavigation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TabNavigation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Template(void**) noexcept = 0;
            virtual int32_t __stdcall put_Template(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_IsEnabledChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsEnabledChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ApplyTemplate(bool*) noexcept = 0;
            virtual int32_t __stdcall Focus(int32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseSystemFocusVisuals(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseSystemFocusVisuals(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFocusEngagementEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFocusEngagementEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFocusEngaged(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFocusEngaged(bool) noexcept = 0;
            virtual int32_t __stdcall get_RequiresPointer(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RequiresPointer(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusLeft(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusLeft(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusRight(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusRight(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusUp(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusUp(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusDown(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusDown(void*) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ElementSoundMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_FocusEngaged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FocusEngaged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FocusDisengaged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FocusDisengaged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall RemoveFocusEngagement() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultStyleResourceUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultStyleResourceUri(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControl7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnPointerEntered(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerPressed(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerMoved(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerReleased(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerExited(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerCaptureLost(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerCanceled(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerWheelChanged(void*) noexcept = 0;
            virtual int32_t __stdcall OnTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnDoubleTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnHolding(void*) noexcept = 0;
            virtual int32_t __stdcall OnRightTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationStarting(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationInertiaStarting(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationStarted(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationDelta(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationCompleted(void*) noexcept = 0;
            virtual int32_t __stdcall OnKeyUp(void*) noexcept = 0;
            virtual int32_t __stdcall OnKeyDown(void*) noexcept = 0;
            virtual int32_t __stdcall OnGotFocus(void*) noexcept = 0;
            virtual int32_t __stdcall OnLostFocus(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragEnter(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragLeave(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragOver(void*) noexcept = 0;
            virtual int32_t __stdcall OnDrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlOverrides6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnPreviewKeyDown(void*) noexcept = 0;
            virtual int32_t __stdcall OnPreviewKeyUp(void*) noexcept = 0;
            virtual int32_t __stdcall OnCharacterReceived(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlProtected>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultStyleKey(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultStyleKey(void*) noexcept = 0;
            virtual int32_t __stdcall GetTemplateChild(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTabStopProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabNavigationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultStyleKeyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusStateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseSystemFocusVisualsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTemplateFocusTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTemplateFocusTarget(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsTemplateFocusTarget(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFocusEngagementEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFocusEngagedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RequiresPointerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusLeftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusRightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusUpProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusDownProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultStyleResourceUriProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTemplateKeyTipTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTemplateKeyTipTarget(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsTemplateKeyTipTarget(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlStatics7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IControlTemplate>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall put_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplate(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplateForItem(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplateCore(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplateForItemCore(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePicker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Date(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DayVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DayVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MonthVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_YearVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_YearVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_DayFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_YearFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_YearFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_DateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePicker2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePicker3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedDate(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDate(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectedDateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedDateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Date(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DayVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DayVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MonthVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_YearVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_YearVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MinYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall add_DatePicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DatePicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DayFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_YearFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_YearFormat(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryText(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryTextProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxYearProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DayFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearFormatProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedDateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDropDownButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Action(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseTouchAnimationsForAllNavigation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseTouchAnimationsForAllNavigation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseTouchAnimationsForAllNavigationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_FlyoutPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_FlyoutPresenterStyle(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FlyoutPresenterStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIcon>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIcon2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIcon3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrame>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CacheSize(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CacheSize(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBack(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForward(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentSourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall get_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall put_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName) noexcept = 0;
            virtual int32_t __stdcall get_BackStackDepth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_Navigated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Navigated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Navigating(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Navigating(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationStopped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationStopped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GoBack() noexcept = 0;
            virtual int32_t __stdcall GoForward() noexcept = 0;
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetNavigationState(void**) noexcept = 0;
            virtual int32_t __stdcall SetNavigationState(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrame2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackStack(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForwardStack(void**) noexcept = 0;
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrame3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GoBack(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrame4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SetNavigationStateWithNavigationControl(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrame5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsNavigationStackEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsNavigationStackEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall NavigateToType(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrameFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrameStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CacheSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForwardProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentSourcePageTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourcePageTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackStackDepthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrameStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackStackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForwardStackProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IFrameStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsNavigationStackEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGrid>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RowDefinitions(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnDefinitions(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGrid2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGrid3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_RowSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_ColumnSpacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGrid4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRow(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRow(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumn(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumn(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RowSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRowSpan(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumnSpan(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RowSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyle>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Panel(void**) noexcept = 0;
            virtual int32_t __stdcall put_Panel(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_HidesIfEmpty(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HidesIfEmpty(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyle2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderContainerStyle(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectGroupStyle(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectGroupStyleCore(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlacementAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PlacementAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreCandidatesEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreCandidatesEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall TryClose(bool*) noexcept = 0;
            virtual int32_t __stdcall TryOpen(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSwitchToKeyboardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSwitchToKeyboardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsCommandBarOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCommandBarOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputDeviceTypes(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InputDeviceTypes(uint32_t) noexcept = 0;
            virtual int32_t __stdcall add_CandidatesChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CandidatesChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextSubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextSubmitted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetCandidates(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall SelectCandidate(uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CandidatesSessionId(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreCandidatesEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSwitchToKeyboardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCommandBarOpenProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHub>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DefaultSectionIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultSectionIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Sections(void**) noexcept = 0;
            virtual int32_t __stdcall get_SectionsInView(void**) noexcept = 0;
            virtual int32_t __stdcall get_SectionHeaders(void**) noexcept = 0;
            virtual int32_t __stdcall add_SectionHeaderClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SectionHeaderClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SectionsInViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SectionsInViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollToSection(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubSection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderInteractive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHeaderInteractive(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Section(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderInteractiveProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHubStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultSectionIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SemanticZoomOwnerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NavigateUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_NavigateUri(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NavigateUriProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconElementFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconElementStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSourceElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSourceElementFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSourceElementStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IImage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_NineGrid(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_NineGrid(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_PlayToSource(void**) noexcept = 0;
            virtual int32_t __stdcall add_ImageFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ImageOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageOpened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IImage2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetAsCastingSource(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IImage3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetAlphaMask(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IImageStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NineGridProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlayToSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkCanvas>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InkPresenter(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InitialControls(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InitialControls(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActiveTool(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActiveTool(void*) noexcept = 0;
            virtual int32_t __stdcall get_InkDrawingAttributes(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRulerButtonChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRulerButtonChecked(bool) noexcept = 0;
            virtual int32_t __stdcall get_TargetInkCanvas(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetInkCanvas(void*) noexcept = 0;
            virtual int32_t __stdcall add_ActiveToolChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ActiveToolChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_InkDrawingAttributesChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_InkDrawingAttributesChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_EraseAllClicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_EraseAllClicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_IsRulerButtonCheckedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsRulerButtonCheckedChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetToolButton(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetToggleButton(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbar2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStencilButtonChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStencilButtonChecked(bool) noexcept = 0;
            virtual int32_t __stdcall get_ButtonFlyoutPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ButtonFlyoutPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_IsStencilButtonCheckedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsStencilButtonCheckedChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetMenuButton(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbar3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetInkPresenter(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetInkPresenter(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInkDrawingAttributes(void*, double, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CustomPen(void**) noexcept = 0;
            virtual int32_t __stdcall put_CustomPen(void*) noexcept = 0;
            virtual int32_t __stdcall get_ConfigurationContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_ConfigurationContent(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CustomPenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ConfigurationContentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInkDrawingAttributesCore(void*, double, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConfigurationContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_ConfigurationContent(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConfigurationContentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsClearAllVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClearAllVisible(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsClearAllVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Kind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Kind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall add_Checked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Checked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Unchecked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Unchecked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_StencilButton(void**) noexcept = 0;
            virtual int32_t __stdcall get_StencilKind(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MenuKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsExtensionGlyphShown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExtensionGlyphShown(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsExtensionGlyphShownProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Palette(void**) noexcept = 0;
            virtual int32_t __stdcall put_Palette(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinStrokeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinStrokeWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxStrokeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxStrokeWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBrushIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBrushIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedStrokeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedStrokeWidth(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PaletteProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinStrokeWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxStrokeWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBrushIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedStrokeWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PenButton(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PenButtonProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Ruler(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RulerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InitialControlsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActiveToolProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InkDrawingAttributesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRulerButtonCheckedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TargetInkCanvasProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStencilButtonCheckedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ButtonFlyoutPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetInkPresenterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Ruler(void**) noexcept = 0;
            virtual int32_t __stdcall get_Protractor(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedStencil(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedStencil(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsRulerItemVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRulerItemVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsProtractorItemVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsProtractorItemVisible(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RulerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProtractorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedStencilProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRulerItemVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsProtractorItemVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ToggleKind(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ToolKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsExtensionGlyphShown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExtensionGlyphShown(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsExtensionGlyphShownProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IInsertionPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetInsertionIndexes(winrt::Windows::Foundation::Point, int32_t*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClickedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_ItemsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromContainer(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetItemContainerGeneratorForPanel(void*, void**) noexcept = 0;
            virtual int32_t __stdcall StartAt(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t, bool) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall GenerateNext(bool*, void**) noexcept = 0;
            virtual int32_t __stdcall PrepareItemContainer(void*) noexcept = 0;
            virtual int32_t __stdcall RemoveAll() noexcept = 0;
            virtual int32_t __stdcall Remove(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t) noexcept = 0;
            virtual int32_t __stdcall GeneratorPositionFromIndex(int32_t, struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition*) noexcept = 0;
            virtual int32_t __stdcall IndexFromGeneratorPosition(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t*) noexcept = 0;
            virtual int32_t __stdcall Recycle(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromContainer(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsPanel(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsPanel(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerGenerator(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyle(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGrouping(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControl2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsPanelRoot(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControl3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GroupHeaderContainerFromItemContainer(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsItemItsOwnContainerOverride(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetContainerForItemOverride(void**) noexcept = 0;
            virtual int32_t __stdcall ClearContainerForItemOverride(void*, void*) noexcept = 0;
            virtual int32_t __stdcall PrepareContainerForItemOverride(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemsChanged(void*) noexcept = 0;
            virtual int32_t __stdcall OnItemContainerStyleChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemContainerStyleSelectorChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemTemplateSelectorChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnGroupStyleSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemsOwner(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ItemsControlFromItemContainer(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Footer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Footer(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPadding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_GroupPadding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FirstVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollingDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsUpdatingScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsUpdatingScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CacheLength(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreStickyGroupHeadersEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CacheLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPadding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_GroupPadding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FirstVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollingDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CacheLength(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreStickyGroupHeadersEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CacheLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SingleSelectionFollowsFocus(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBoxItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValue(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValue(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePath(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValuePath(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall add_ItemsPicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsPicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePathProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSwipeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSwipeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsItemClickEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsItemClickEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_DataFetchSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_DataFetchSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingThreshold(double*) noexcept = 0;
            virtual int32_t __stdcall put_IncrementalLoadingThreshold(double) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingTrigger(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IncrementalLoadingTrigger(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ItemClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall LoadMoreItemsAsync(void**) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoViewWithAlignment(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowsScrollingPlaceholders(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowsScrollingPlaceholders(bool) noexcept = 0;
            virtual int32_t __stdcall add_ContainerContentChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContainerContentChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetDesiredContainerUpdateDuration(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_Footer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Footer(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReorderMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ReorderMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedRanges(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMultiSelectCheckBoxEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMultiSelectCheckBoxEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ChoosingItemContainer(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ChoosingItemContainer(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ChoosingGroupHeaderContainer(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ChoosingGroupHeaderContainer(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectRange(void*) noexcept = 0;
            virtual int32_t __stdcall DeselectRange(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SingleSelectionFollowsFocus(bool) noexcept = 0;
            virtual int32_t __stdcall IsDragSource(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBase6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall TryStartConnectedAnimationAsync(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall PrepareConnectedAnimation(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSwipeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsItemClickEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DataFetchSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingThresholdProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingTriggerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SemanticZoomOwnerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowsScrollingPlaceholdersProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReorderModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsMultiSelectCheckBoxEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetRelativeScrollPosition(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetRelativeScrollPositionAsync(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PosterSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_PosterSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsMuted(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMuted(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAudioOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall get_Volume(double*) noexcept = 0;
            virtual int32_t __stdcall put_Volume(double) noexcept = 0;
            virtual int32_t __stdcall get_Balance(double*) noexcept = 0;
            virtual int32_t __stdcall put_Balance(double) noexcept = 0;
            virtual int32_t __stdcall get_NaturalVideoHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalVideoWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalDuration(struct struct_Windows_UI_Xaml_Duration*) noexcept = 0;
            virtual int32_t __stdcall get_Position(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Position(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DownloadProgress(double*) noexcept = 0;
            virtual int32_t __stdcall get_BufferingProgress(double*) noexcept = 0;
            virtual int32_t __stdcall get_DownloadProgressOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Markers(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanSeek(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanPause(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AudioStreamCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_AudioStreamIndex(void**) noexcept = 0;
            virtual int32_t __stdcall put_AudioStreamIndex(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRate(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaybackRate(double) noexcept = 0;
            virtual int32_t __stdcall get_IsLooping(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLooping(bool) noexcept = 0;
            virtual int32_t __stdcall get_PlayToSource(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultPlaybackRate(double*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultPlaybackRate(double) noexcept = 0;
            virtual int32_t __stdcall get_AspectRatioWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_AspectRatioHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_RealTimePlayback(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RealTimePlayback(bool) noexcept = 0;
            virtual int32_t __stdcall get_AudioCategory(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AudioCategory(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AudioDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AudioDeviceType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ProtectionManager(void**) noexcept = 0;
            virtual int32_t __stdcall put_ProtectionManager(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stereo3DVideoPackingMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stereo3DVideoPackingMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Stereo3DVideoRenderMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stereo3DVideoRenderMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsStereo3DVideo(bool*) noexcept = 0;
            virtual int32_t __stdcall add_MediaOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MediaOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_MediaEnded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MediaEnded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_MediaFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MediaFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DownloadProgressChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DownloadProgressChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BufferingProgressChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BufferingProgressChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CurrentStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CurrentStateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_MarkerReached(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MarkerReached(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_VolumeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_VolumeChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SeekCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SeekCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall Play() noexcept = 0;
            virtual int32_t __stdcall Pause() noexcept = 0;
            virtual int32_t __stdcall CanPlayType(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetSource(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetAudioStreamLanguage(void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddAudioEffect(void*, bool, void*) noexcept = 0;
            virtual int32_t __stdcall AddVideoEffect(void*, bool, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveAllEffects() noexcept = 0;
            virtual int32_t __stdcall get_ActualStereo3DVideoPackingMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaElement2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreTransportControlsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreTransportControlsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindow(bool) noexcept = 0;
            virtual int32_t __stdcall SetMediaStreamSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlayToPreferredSourceUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlayToPreferredSourceUri(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaElement3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TransportControls(void**) noexcept = 0;
            virtual int32_t __stdcall put_TransportControls(void*) noexcept = 0;
            virtual int32_t __stdcall add_PartialMediaFailureDetected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PartialMediaFailureDetected(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetPlaybackSource(void*) noexcept = 0;
            virtual int32_t __stdcall GetAsCastingSource(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PosterSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMutedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAudioOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VolumeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BalanceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NaturalVideoHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NaturalVideoWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NaturalDurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DownloadProgressProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BufferingProgressProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DownloadProgressOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentStateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanSeekProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanPauseProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AudioStreamCountProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AudioStreamIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLoopingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlayToSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultPlaybackRateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AspectRatioWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AspectRatioHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RealTimePlaybackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AudioCategoryProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AudioDeviceTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProtectionManagerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_Stereo3DVideoPackingModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_Stereo3DVideoRenderModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStereo3DVideoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActualStereo3DVideoPackingModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreTransportControlsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlayToPreferredSourceUriProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_TransportControls(void**) noexcept = 0;
            virtual int32_t __stdcall put_TransportControls(void*) noexcept = 0;
            virtual int32_t __stdcall get_AreTransportControlsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreTransportControlsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PosterSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_PosterSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindow(bool) noexcept = 0;
            virtual int32_t __stdcall get_MediaPlayer(void**) noexcept = 0;
            virtual int32_t __stdcall SetMediaPlayer(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreTransportControlsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PosterSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MediaPlayerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MediaPlayer(void**) noexcept = 0;
            virtual int32_t __stdcall put_MediaPlayer(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindow(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MediaPlayerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFullWindowButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindowButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindowEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastForwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastForwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastRewindButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastRewindEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsStopButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStopButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsStopEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStopEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVolumeButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVolumeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPlaybackRateButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPlaybackRateEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekBarVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSeekBarVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSeekEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsCompact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompact(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSkipForwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipForwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipForwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipBackwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipBackwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsNextTrackButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsNextTrackButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPreviousTrackButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPreviousTrackButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_FastPlayFallbackBehaviour(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FastPlayFallbackBehaviour(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ThumbnailRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ThumbnailRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowAndHideAutomatically(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAndHideAutomatically(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRepeatEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRepeatButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall Show() noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactOverlayButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompactOverlayButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactOverlayEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompactOverlayEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropoutOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropoutOrder(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetDropoutOrder(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFullWindowButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStopButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStopEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekBarVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSkipForwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsNextTrackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPreviousTrackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FastPlayFallbackBehaviourProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShowAndHideAutomaticallyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatButtonVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactOverlayButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactOverlayEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuFlyoutPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuFlyoutPresenterStyle(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall ShowAt(void*, winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MenuFlyoutPresenterStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigate>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooter(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneFooter(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSettingsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneToggleButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeader(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AlwaysShowHeader(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneToggleButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBox(void**) noexcept = 0;
            virtual int32_t __stdcall put_AutoSuggestBox(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall MenuItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromMenuItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DisplayModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DisplayModeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBackButtonVisible(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackButtonVisible(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneTitle(void*) noexcept = 0;
            virtual int32_t __stdcall add_BackRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BackRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpening(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationView3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PaneDisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PaneDisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneCustomContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlay(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentOverlay(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFollowsFocus(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabled(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ShoulderNavigationEnabled(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OverflowLabelMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItem2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectsOnInvoked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectsOnInvoked(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsInvoked(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectsOnInvokedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewList>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewListFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsSelected(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBoxProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelectorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PaneDisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPadding(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CallingUri(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Frame(void**) noexcept = 0;
            virtual int32_t __stdcall get_NavigationCacheMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NavigationCacheMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TopAppBar(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopAppBar(void*) noexcept = 0;
            virtual int32_t __stdcall get_BottomAppBar(void**) noexcept = 0;
            virtual int32_t __stdcall put_BottomAppBar(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPageFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPageOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnNavigatedFrom(void*) noexcept = 0;
            virtual int32_t __stdcall OnNavigatedTo(void*) noexcept = 0;
            virtual int32_t __stdcall OnNavigatingFrom(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPageStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FrameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopAppBarProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BottomAppBarProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsItemsHost(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ChildrenTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ChildrenTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPanel2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsItemsHostProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildrenTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IParallaxView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHorizontalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxVerticalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticHorizontalOffsets() noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticVerticalOffsets() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IParallaxViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IParallaxViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShiftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShiftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Password(void**) noexcept = 0;
            virtual int32_t __stdcall put_Password(void*) noexcept = 0;
            virtual int32_t __stdcall get_PasswordChar(void**) noexcept = 0;
            virtual int32_t __stdcall put_PasswordChar(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPasswordRevealButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPasswordRevealButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_PasswordChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PasswordChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBox3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PasswordRevealMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PasswordRevealMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBox4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_PasswordChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PasswordChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBox5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanPasteClipboardContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall PasteFromClipboard() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PasswordProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PasswordCharProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPasswordRevealButtonEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PasswordRevealModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanPasteClipboardContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIcon>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIconFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPathIconStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPersonPicture>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumber(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BadgeNumber(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeImageSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeText(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeText(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGroup(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroup(bool) noexcept = 0;
            virtual int32_t __stdcall get_Contact(void**) noexcept = 0;
            virtual int32_t __stdcall put_Contact(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayName(void*) noexcept = 0;
            virtual int32_t __stdcall get_Initials(void**) noexcept = 0;
            virtual int32_t __stdcall put_Initials(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImage(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreferSmallImage(bool) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePicture(void**) noexcept = 0;
            virtual int32_t __stdcall put_ProfilePicture(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPersonPictureFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPersonPictureStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumberProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePictureProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ConfirmationButtonsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ConfirmationButtonsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_Confirmed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Confirmed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ConfirmationButtonsVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivot>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TitleTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsLocked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLocked(bool) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemLoading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemLoading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemLoaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemLoaded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemUnloading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemUnloading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemUnloaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemUnloaded(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivot2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightHeaderTemplate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivot3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderFocusVisualPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HeaderFocusVisualPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderItemsCarouselEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHeaderItemsCarouselEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall put_Item(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLockedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SlideInAnimationGroupProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetSlideInAnimationGroup(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetSlideInAnimationGroup(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IPivotStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderFocusVisualPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderItemsCarouselEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IProgressBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminate(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIndeterminate(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowError(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowError(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowPaused(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowPaused(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowErrorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowPausedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IProgressRing>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActiveProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRadioButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupName(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Caption(void**) noexcept = 0;
            virtual int32_t __stdcall put_Caption(void*) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InitialSetValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClearEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxRating(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxRating(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValue(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderValue(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfo(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemInfo(void*) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CaptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxRatingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetGlyph(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyphProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_Image(void**) noexcept = 0;
            virtual int32_t __stdcall put_Image(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetImage(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImageProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshContainer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Visualizer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Visualizer(void*) noexcept = 0;
            virtual int32_t __stdcall get_PullDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PullDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_VisualizerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PullDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InteractionRatio(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewState(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RefreshStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshStateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoProviderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRelativePanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRelativePanel2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftOfProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetLeftOf(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetLeftOf(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AboveProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAbove(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAbove(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_RightOfProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRightOf(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetRightOf(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_BelowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetBelow(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetBelow(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignHorizontalCenterWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignHorizontalCenterWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignHorizontalCenterWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignVerticalCenterWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignVerticalCenterWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignVerticalCenterWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignLeftWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignLeftWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignLeftWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignTopWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignTopWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignTopWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignRightWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignRightWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignRightWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignBottomWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignBottomWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignBottomWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignLeftWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignLeftWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignLeftWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignTopWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignTopWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignTopWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignRightWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignRightWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignRightWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignBottomWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignBottomWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignBottomWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignHorizontalCenterWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignHorizontalCenterWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignHorizontalCenterWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignVerticalCenterWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignVerticalCenterWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignVerticalCenterWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsReturn(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSpellCheckEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextPredictionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Document(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_TextCompositionStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionEnded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionEnded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredCandidateWindowAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CandidateWindowBoundsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CandidateWindowBoundsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetLinguisticAlternativesAsync(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClipboardCopyFormat(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ClipboardCopyFormat(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocused(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColorWhenNotFocused(void*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterCasing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DisabledFormattingAccelerators(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisabledFormattingAccelerators(uint32_t) noexcept = 0;
            virtual int32_t __stdcall add_CopyingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CopyingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CuttingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CuttingToClipboard(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentLinkForegroundColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentLinkForegroundColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentLinkBackgroundColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentLinkBackgroundColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentLinkProviders(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentLinkProviders(void*) noexcept = 0;
            virtual int32_t __stdcall get_HandwritingView(void**) noexcept = 0;
            virtual int32_t __stdcall put_HandwritingView(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsHandwritingViewEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHandwritingViewEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_ContentLinkChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContentLinkChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContentLinkInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContentLinkInvoked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBox8>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextDocument(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClipboardCopyFormatProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledFormattingAcceleratorsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentLinkForegroundColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentLinkBackgroundColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentLinkProvidersProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HandwritingViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHandwritingViewEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics8>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimming(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextTrimming(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Blocks(void**) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OverflowContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSelectionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall Select(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetPositionFromPoint(winrt::Windows::Foundation::Point, void**) noexcept = 0;
            virtual int32_t __stdcall Focus(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall get_TextIndent(double*) noexcept = 0;
            virtual int32_t __stdcall put_TextIndent(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextDecorations(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextDecorations(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextHighlighters(void**) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlock6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OverflowContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OverflowContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ContentSource(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall GetPositionFromPoint(winrt::Windows::Foundation::Point, void**) noexcept = 0;
            virtual int32_t __stdcall Focus(int32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OverflowContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimmingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextIndentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextDecorationsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRowDefinition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Height(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Height(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_MaxHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_MinHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_ActualHeight(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollAnchorProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall RegisterAnchorCandidate(void*) noexcept = 0;
            virtual int32_t __stdcall UnregisterAnchorCandidate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanVerticallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanVerticallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanHorizontallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanHorizontallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollOwner(void*) noexcept = 0;
            virtual int32_t __stdcall LineUp() noexcept = 0;
            virtual int32_t __stdcall LineDown() noexcept = 0;
            virtual int32_t __stdcall LineLeft() noexcept = 0;
            virtual int32_t __stdcall LineRight() noexcept = 0;
            virtual int32_t __stdcall PageUp() noexcept = 0;
            virtual int32_t __stdcall PageDown() noexcept = 0;
            virtual int32_t __stdcall PageLeft() noexcept = 0;
            virtual int32_t __stdcall PageRight() noexcept = 0;
            virtual int32_t __stdcall MouseWheelUp() noexcept = 0;
            virtual int32_t __stdcall MouseWheelDown() noexcept = 0;
            virtual int32_t __stdcall MouseWheelLeft() noexcept = 0;
            virtual int32_t __stdcall MouseWheelRight() noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*, winrt::Windows::Foundation::Rect, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanContentRenderOutsideBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanContentRenderOutsideBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_SizesContentToTemplatedParent(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SizesContentToTemplatedParent(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanContentRenderOutsideBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SizesContentToTemplatedParentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalRailEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalRailEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalScrollChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalScrollChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalScrollChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalScrollChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsScrollInertiaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsScrollInertiaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomInertiaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomInertiaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSnapPointsAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSnapPointsAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinZoomFactor(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxZoomFactor(float) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollToHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall ScrollToVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall ZoomToFactor(float) noexcept = 0;
            virtual int32_t __stdcall InvalidateScrollInfo() noexcept = 0;
            virtual int32_t __stdcall get_IsDeferredScrollingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDeferredScrollingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_BringIntoViewOnFocusChange(bool*) noexcept = 0;
            virtual int32_t __stdcall put_BringIntoViewOnFocusChange(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopLeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopLeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopHeader(void*) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ChangeView(void*, void*, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall ChangeViewWithOptionalAnimation(void*, void*, void*, bool, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_DirectManipulationStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DirectManipulationStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DirectManipulationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DirectManipulationCompleted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewer4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReduceViewportForCoreInputViewOcclusions(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ReduceViewportForCoreInputViewOcclusions(bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_CanContentRenderOutsideBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanContentRenderOutsideBounds(bool) noexcept = 0;
            virtual int32_t __stdcall add_AnchorRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalSnapPointsAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalScrollBarVisibility(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalScrollBarVisibility(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalScrollBarVisibility(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVerticalScrollBarVisibility(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalRailEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsHorizontalRailEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsHorizontalRailEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalRailEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVerticalRailEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsVerticalRailEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalScrollChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsHorizontalScrollChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsHorizontalScrollChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalScrollChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVerticalScrollChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsVerticalScrollChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsZoomChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsZoomChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsScrollInertiaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsScrollInertiaEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsScrollInertiaEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomInertiaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsZoomInertiaEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsZoomInertiaEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalScrollMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalScrollMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalScrollMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVerticalScrollMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetZoomMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetZoomMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsDeferredScrollingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsDeferredScrollingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsDeferredScrollingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_BringIntoViewOnFocusChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetBringIntoViewOnFocusChange(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetBringIntoViewOnFocusChange(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopLeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopHeaderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReduceViewportForCoreInputViewOcclusionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanContentRenderOutsideBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanContentRenderOutsideBounds(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetCanContentRenderOutsideBounds(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIntermediate(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NextView(void**) noexcept = 0;
            virtual int32_t __stdcall get_FinalView(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SearchHistoryEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SearchHistoryEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SearchHistoryContext(void**) noexcept = 0;
            virtual int32_t __stdcall put_SearchHistoryContext(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall put_QueryText(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusOnKeyboardInput(bool*) noexcept = 0;
            virtual int32_t __stdcall put_FocusOnKeyboardInput(bool) noexcept = 0;
            virtual int32_t __stdcall get_ChooseSuggestionOnEnter(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ChooseSuggestionOnEnter(bool) noexcept = 0;
            virtual int32_t __stdcall add_QueryChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_QueryChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SuggestionsRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SuggestionsRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_QuerySubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_QuerySubmitted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ResultSuggestionChosen(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ResultSuggestionChosen(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PrepareForFocusOnKeyboardInput(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PrepareForFocusOnKeyboardInput(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetLocalContentSuggestionSettings(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall get_Language(void**) noexcept = 0;
            virtual int32_t __stdcall get_LinguisticDetails(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall get_Language(void**) noexcept = 0;
            virtual int32_t __stdcall get_LinguisticDetails(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyModifiers(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Tag(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyModifiers(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SearchHistoryEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SearchHistoryContextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_QueryTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusOnKeyboardInputProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChooseSuggestionOnEnterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall get_Language(void**) noexcept = 0;
            virtual int32_t __stdcall get_LinguisticDetails(void**) noexcept = 0;
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedSections(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedSections(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithRemovedItemsAndAddedItems(void*, void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ZoomedInView(void**) noexcept = 0;
            virtual int32_t __stdcall put_ZoomedInView(void*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomedOutView(void**) noexcept = 0;
            virtual int32_t __stdcall put_ZoomedOutView(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomedInViewActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanChangeViews(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanChangeViews(bool) noexcept = 0;
            virtual int32_t __stdcall add_ViewChangeStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChangeStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChangeCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChangeCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ToggleActiveView() noexcept = 0;
            virtual int32_t __stdcall get_IsZoomOutButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomOutButtonEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SemanticZoomOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_SemanticZoomOwner(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActiveView(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomedInView(bool) noexcept = 0;
            virtual int32_t __stdcall InitializeViewChange() noexcept = 0;
            virtual int32_t __stdcall CompleteViewChange() noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*) noexcept = 0;
            virtual int32_t __stdcall StartViewChangeFrom(void*, void*) noexcept = 0;
            virtual int32_t __stdcall StartViewChangeTo(void*, void*) noexcept = 0;
            virtual int32_t __stdcall CompleteViewChangeFrom(void*, void*) noexcept = 0;
            virtual int32_t __stdcall CompleteViewChangeTo(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall put_Item(void*) noexcept = 0;
            virtual int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_Bounds(winrt::Windows::Foundation::Rect) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ZoomedInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomedOutViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewActiveProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanChangeViewsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomOutButtonEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSourceZoomedInView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSourceZoomedInView(bool) noexcept = 0;
            virtual int32_t __stdcall get_SourceItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_DestinationItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_DestinationItem(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_BackClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BackClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Show() noexcept = 0;
            virtual int32_t __stdcall ShowIndependent() noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISlider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IntermediateValue(double*) noexcept = 0;
            virtual int32_t __stdcall put_IntermediateValue(double) noexcept = 0;
            virtual int32_t __stdcall get_StepFrequency(double*) noexcept = 0;
            virtual int32_t __stdcall put_StepFrequency(double) noexcept = 0;
            virtual int32_t __stdcall get_SnapsTo(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SnapsTo(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TickFrequency(double*) noexcept = 0;
            virtual int32_t __stdcall put_TickFrequency(double) noexcept = 0;
            virtual int32_t __stdcall get_TickPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TickPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsDirectionReversed(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDirectionReversed(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsThumbToolTipEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsThumbToolTipEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ThumbToolTipValueConverter(void**) noexcept = 0;
            virtual int32_t __stdcall put_ThumbToolTipValueConverter(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISlider2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISliderFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISliderStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IntermediateValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StepFrequencyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SnapsToProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TickFrequencyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TickPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDirectionReversedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsThumbToolTipEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ThumbToolTipValueConverterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISliderStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Flyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Flyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_PanePlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PanePlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneBackground(void*) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitView3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_PaneOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PanePlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneBackgroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreScrollSnapPointsRegular(bool) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanel2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanel4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Spacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_Spacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanel5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegularProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStyleSelector>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectStyle(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SelectStyleCore(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateCoreIndependentInputSource(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CompositionScaleX(float*) noexcept = 0;
            virtual int32_t __stdcall get_CompositionScaleY(float*) noexcept = 0;
            virtual int32_t __stdcall add_CompositionScaleChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CompositionScaleChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall CreateCoreIndependentInputSource(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CompositionScaleXProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompositionScaleYProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_BottomItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_BottomItems(void*) noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BottomItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvoked(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BehaviorOnInvoked(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Invoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Invoked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SwipeControl(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvokedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItems>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Mode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIcon>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Symbol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Symbol(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithSymbol(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Symbol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Symbol(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SymbolProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SymbolProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimming(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextTrimming(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Inlines(void**) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSelectionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall Select(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Focus(int32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetAlphaMask(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextDecorations(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextDecorations(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextHighlighters(void**) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlock7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimmingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTextProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextDecorationsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionStart(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsReturn(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSpellCheckEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextPredictionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Select(int32_t, int32_t) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall GetRectFromCharacterIndex(int32_t, bool, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_TextCompositionStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionEnded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionEnded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredCandidateWindowAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CandidateWindowBoundsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CandidateWindowBoundsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetLinguisticAlternativesAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocused(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColorWhenNotFocused(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterCasing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderForeground(void*) noexcept = 0;
            virtual int32_t __stdcall add_CopyingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CopyingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CuttingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CuttingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BeforeTextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BeforeTextChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HandwritingView(void**) noexcept = 0;
            virtual int32_t __stdcall put_HandwritingView(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsHandwritingViewEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHandwritingViewEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBox8>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanPasteClipboardContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanUndo(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanRedo(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Undo() noexcept = 0;
            virtual int32_t __stdcall Redo() noexcept = 0;
            virtual int32_t __stdcall PasteFromClipboard() noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
            virtual int32_t __stdcall CutSelectionToClipboard() noexcept = 0;
            virtual int32_t __stdcall ClearUndoRedoHistory() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewText(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HandwritingViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHandwritingViewEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics8>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanPasteClipboardContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanUndoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanRedoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePicker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClockIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClockIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinuteIncrement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Time(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Time(int64_t) noexcept = 0;
            virtual int32_t __stdcall add_TimeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TimeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePicker2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePicker3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedTime(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedTime(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectedTimeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedTimeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClockIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClockIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Time(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Time(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinuteIncrement(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_TimePicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TimePicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClockIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TimeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClockIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall add_IsCheckedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsCheckedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOn(bool) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_OnContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_OnContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_OnContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_OnContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_OffContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_OffContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_OffContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_OffContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Toggled(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Toggled(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnToggled() noexcept = 0;
            virtual int32_t __stdcall OnOnContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnOffContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnHeaderChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OnContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OnContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffContentTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTip>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_Placement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Placement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTip2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementRect(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementRect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTipFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTipService>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetPlacement(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetPlacement(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetPlacementTarget(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetPlacementTarget(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_ToolTipProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetToolTip(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetToolTip(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTipStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IToolTipStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementRectProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootNodes(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedNodes(void**) noexcept = 0;
            virtual int32_t __stdcall Expand(void*) noexcept = 0;
            virtual int32_t __stdcall Collapse(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall NodeFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromNode(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsCompleted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_GlyphBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_CollapsedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItem2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasUnrealizedChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Indentation(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IndentationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCountProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewList>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewListFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewNode>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Depth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DepthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasChildrenProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanDragItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITwoPaneView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane1(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane2(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane2(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane1Length(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane1Length(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Length(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane2Length(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_PanePriority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PanePriority(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_WideModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TallModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWideModeWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinTallModeHeight(double) noexcept = 0;
            virtual int32_t __stdcall add_ModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ModeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane1LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PanePriorityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IUIElementCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Move(uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IUserControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IUserControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IUserControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRowSpan(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumnSpan(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IViewbox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StretchDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StretchDirection(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IViewboxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemContainerGenerator(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnItemsChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnClearChildren() noexcept = 0;
            virtual int32_t __stdcall BringIndexIntoView(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall AddInternalChild(void*) noexcept = 0;
            virtual int32_t __stdcall InsertInternalChild(int32_t, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveInternalChildRange(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreScrollSnapPointsRegular(bool) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CleanUpVirtualizedItemEvent(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CleanUpVirtualizedItemEvent(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnCleanUpVirtualizedItem(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegularProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VirtualizationModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVirtualizationMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVirtualizationMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsVirtualizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVirtualizing(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_AllowedScriptNotifyUris(void**) noexcept = 0;
            virtual int32_t __stdcall put_AllowedScriptNotifyUris(void*) noexcept = 0;
            virtual int32_t __stdcall get_DataTransferPackage(void**) noexcept = 0;
            virtual int32_t __stdcall add_LoadCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LoadCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScriptNotify(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScriptNotify(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall InvokeScript(void*, uint32_t, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Navigate(void*) noexcept = 0;
            virtual int32_t __stdcall NavigateToString(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanGoBack(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForward(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DocumentTitle(void**) noexcept = 0;
            virtual int32_t __stdcall add_NavigationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContentLoading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContentLoading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DOMContentLoaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DOMContentLoaded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GoForward() noexcept = 0;
            virtual int32_t __stdcall GoBack() noexcept = 0;
            virtual int32_t __stdcall Refresh() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall CapturePreviewToStreamAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall InvokeScriptAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CaptureSelectedContentToDataPackageAsync(void**) noexcept = 0;
            virtual int32_t __stdcall NavigateToLocalStreamUri(void*, void*) noexcept = 0;
            virtual int32_t __stdcall BuildLocalStreamUri(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultBackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultBackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall add_NavigationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameNavigationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameNavigationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameContentLoading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameContentLoading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameDOMContentLoaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameDOMContentLoaded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameNavigationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameNavigationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LongRunningScriptDetected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LongRunningScriptDetected(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_UnsafeContentWarningDisplaying(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_UnsafeContentWarningDisplaying(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_UnviewableContentIdentified(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_UnviewableContentIdentified(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall NavigateWithHttpRequestMessage(void*) noexcept = 0;
            virtual int32_t __stdcall Focus(int32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContainsFullScreenElement(bool*) noexcept = 0;
            virtual int32_t __stdcall add_ContainsFullScreenElementChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContainsFullScreenElementChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExecutionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_DeferredPermissionRequests(void**) noexcept = 0;
            virtual int32_t __stdcall get_Settings(void**) noexcept = 0;
            virtual int32_t __stdcall add_UnsupportedUriSchemeIdentified(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_UnsupportedUriSchemeIdentified(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NewWindowRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NewWindowRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PermissionRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PermissionRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall AddWebAllowedObject(void*, void*) noexcept = 0;
            virtual int32_t __stdcall DeferredPermissionRequestById(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_XYFocusLeft(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusLeft(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusRight(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusRight(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusUp(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusUp(void*) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusDown(void**) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusDown(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView6>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_SeparateProcessLost(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SeparateProcessLost(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebView7>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_WebResourceRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WebResourceRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewBrush>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceName(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceName(void*) noexcept = 0;
            virtual int32_t __stdcall Redraw() noexcept = 0;
            virtual int32_t __stdcall SetSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_PermissionType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Id(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall Allow() noexcept = 0;
            virtual int32_t __stdcall Deny() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithExecutionMode(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExecutionTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_StopPageScriptExecution(bool*) noexcept = 0;
            virtual int32_t __stdcall put_StopPageScriptExecution(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSuccess(bool*) noexcept = 0;
            virtual int32_t __stdcall get_WebErrorStatus(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_WebErrorStatus(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Referrer(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_PermissionType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Id(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall Defer() noexcept = 0;
            virtual int32_t __stdcall Allow() noexcept = 0;
            virtual int32_t __stdcall Deny() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PermissionRequest(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsJavaScriptEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsJavaScriptEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsIndexedDBEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIndexedDBEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnyScriptNotifyUri(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowedScriptNotifyUrisProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DataTransferPackageProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanGoBackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForwardProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DocumentTitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultBackgroundColorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContainsFullScreenElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultExecutionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall ClearTemporaryWebDataAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_XYFocusLeftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusRightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusUpProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusDownProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Referrer(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MediaType(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
            virtual int32_t __stdcall get_Response(void**) noexcept = 0;
            virtual int32_t __stdcall put_Response(void*) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWrapGrid>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::BackClickEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::NotifyEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAnchorRequestedEventArgs
    {
        [[nodiscard]] auto Anchor() const;
        auto Anchor(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto AnchorCandidates() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAnchorRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAnchorRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBar
    {
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto IsSticky() const;
        auto IsSticky(bool value) const;
        auto Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAppBar>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAppBar>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBar>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBar2
    {
        [[nodiscard]] auto ClosedDisplayMode() const;
        auto ClosedDisplayMode(winrt::Windows::UI::Xaml::Controls::AppBarClosedDisplayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBar2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBar3
    {
        [[nodiscard]] auto TemplateSettings() const;
        auto Opening(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAppBar3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAppBar3>::remove_Opening>;
        [[nodiscard]] auto Opening(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opening(winrt::event_token const& token) const noexcept;
        auto Closing(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAppBar3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAppBar3>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBar3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBar4
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBar4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButton
    {
        [[nodiscard]] auto Label() const;
        auto Label(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButton3
    {
        [[nodiscard]] auto LabelPosition() const;
        auto LabelPosition(winrt::Windows::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButton3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButton4
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButton4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButton5
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButton5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics
    {
        [[nodiscard]] auto LabelProperty() const;
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics3
    {
        [[nodiscard]] auto LabelPositionProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics4
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarElementContainer
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarElementContainer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarElementContainerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarElementContainerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarElementContainerStatics
    {
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarElementContainerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarElementContainerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarOverrides
    {
        auto OnClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpened(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarOverrides3
    {
        auto OnClosing(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpening(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarOverrides3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarSeparator
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparator<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics
    {
        [[nodiscard]] auto IsCompactProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics3
    {
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarStatics
    {
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto IsStickyProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarStatics2
    {
        [[nodiscard]] auto ClosedDisplayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarStatics4
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton
    {
        [[nodiscard]] auto Label() const;
        auto Label(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton3
    {
        [[nodiscard]] auto LabelPosition() const;
        auto LabelPosition(winrt::Windows::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton4
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton5
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics
    {
        [[nodiscard]] auto LabelProperty() const;
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics3
    {
        [[nodiscard]] auto LabelPositionProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics4
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox
    {
        [[nodiscard]] auto MaxSuggestionListHeight() const;
        auto MaxSuggestionListHeight(double value) const;
        [[nodiscard]] auto IsSuggestionListOpen() const;
        auto IsSuggestionListOpen(bool value) const;
        [[nodiscard]] auto TextMemberPath() const;
        auto TextMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto UpdateTextOnSelect() const;
        auto UpdateTextOnSelect(bool value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AutoMaximizeSuggestionArea() const;
        auto AutoMaximizeSuggestionArea(bool value) const;
        [[nodiscard]] auto TextBoxStyle() const;
        auto TextBoxStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        auto SuggestionChosen(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& handler) const;
        using SuggestionChosen_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>::remove_SuggestionChosen>;
        [[nodiscard]] auto SuggestionChosen(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& handler) const;
        auto SuggestionChosen(winrt::event_token const& token) const noexcept;
        auto TextChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox2
    {
        [[nodiscard]] auto QueryIcon() const;
        auto QueryIcon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
        auto QuerySubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& handler) const;
        using QuerySubmitted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>::remove_QuerySubmitted>;
        [[nodiscard]] auto QuerySubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox, winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& handler) const;
        auto QuerySubmitted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox3
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox4
    {
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs
    {
        [[nodiscard]] auto QueryText() const;
        [[nodiscard]] auto ChosenSuggestion() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics
    {
        [[nodiscard]] auto MaxSuggestionListHeightProperty() const;
        [[nodiscard]] auto IsSuggestionListOpenProperty() const;
        [[nodiscard]] auto TextMemberPathProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto UpdateTextOnSelectProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto AutoMaximizeSuggestionAreaProperty() const;
        [[nodiscard]] auto TextBoxStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics2
    {
        [[nodiscard]] auto QueryIconProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics3
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics4
    {
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs
    {
        [[nodiscard]] auto SelectedItem() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs
    {
        [[nodiscard]] auto Reason() const;
        auto Reason(winrt::Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason const& value) const;
        auto CheckCurrent() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics
    {
        [[nodiscard]] auto ReasonProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBackClickEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBackClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIcon
    {
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIcon>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIcon<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIcon2
    {
        [[nodiscard]] auto ShowAsMonochrome() const;
        auto ShowAsMonochrome(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIcon2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIcon2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconSource
    {
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto ShowAsMonochrome() const;
        auto ShowAsMonochrome(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconSource>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSource<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconSourceStatics
    {
        [[nodiscard]] auto UriSourceProperty() const;
        [[nodiscard]] auto ShowAsMonochromeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconStatics
    {
        [[nodiscard]] auto UriSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBitmapIconStatics2
    {
        [[nodiscard]] auto ShowAsMonochromeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBorder
    {
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ChildTransitions() const;
        auto ChildTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBorder>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorder<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBorder2
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Windows::UI::Xaml::BrushTransition const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBorder2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorder2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBorderStatics
    {
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto ChildTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBorderStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorderStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IBorderStatics2
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IBorderStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorderStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IButtonStaticsWithFlyout
    {
        [[nodiscard]] auto FlyoutProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonStaticsWithFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IButtonWithFlyout
    {
        [[nodiscard]] auto Flyout() const;
        auto Flyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonWithFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePicker
    {
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const& value) const;
        [[nodiscard]] auto IsCalendarOpen() const;
        auto IsCalendarOpen(bool value) const;
        [[nodiscard]] auto DateFormat() const;
        auto DateFormat(param::hstring const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto CalendarViewStyle() const;
        auto CalendarViewStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto MinDate() const;
        auto MinDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxDate() const;
        auto MaxDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto IsTodayHighlighted() const;
        auto IsTodayHighlighted(bool value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Windows::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
        [[nodiscard]] auto FirstDayOfWeek() const;
        auto FirstDayOfWeek(winrt::Windows::Globalization::DayOfWeek const& value) const;
        [[nodiscard]] auto DayOfWeekFormat() const;
        auto DayOfWeekFormat(param::hstring const& value) const;
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto IsOutOfScopeEnabled() const;
        auto IsOutOfScopeEnabled(bool value) const;
        [[nodiscard]] auto IsGroupLabelVisible() const;
        auto IsGroupLabelVisible(bool value) const;
        auto CalendarViewDayItemChanging(winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& handler) const;
        using CalendarViewDayItemChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>::remove_CalendarViewDayItemChanging>;
        [[nodiscard]] auto CalendarViewDayItemChanging(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& handler) const;
        auto CalendarViewDayItemChanging(winrt::event_token const& token) const noexcept;
        auto DateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker, winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& handler) const;
        using DateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>::remove_DateChanged>;
        [[nodiscard]] auto DateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker, winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& handler) const;
        auto DateChanged(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto SetDisplayDate(winrt::Windows::Foundation::DateTime const& date) const;
        auto SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePicker<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePicker2
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePicker2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePicker3
    {
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePicker3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs
    {
        [[nodiscard]] auto NewDate() const;
        [[nodiscard]] auto OldDate() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics
    {
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto IsCalendarOpenProperty() const;
        [[nodiscard]] auto DateFormatProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto CalendarViewStyleProperty() const;
        [[nodiscard]] auto MinDateProperty() const;
        [[nodiscard]] auto MaxDateProperty() const;
        [[nodiscard]] auto IsTodayHighlightedProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto FirstDayOfWeekProperty() const;
        [[nodiscard]] auto DayOfWeekFormatProperty() const;
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto IsOutOfScopeEnabledProperty() const;
        [[nodiscard]] auto IsGroupLabelVisibleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics2
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics3
    {
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarView
    {
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto DayOfWeekFormat() const;
        auto DayOfWeekFormat(param::hstring const& value) const;
        [[nodiscard]] auto IsGroupLabelVisible() const;
        auto IsGroupLabelVisible(bool value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Windows::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
        [[nodiscard]] auto FirstDayOfWeek() const;
        auto FirstDayOfWeek(winrt::Windows::Globalization::DayOfWeek const& value) const;
        [[nodiscard]] auto IsOutOfScopeEnabled() const;
        auto IsOutOfScopeEnabled(bool value) const;
        [[nodiscard]] auto IsTodayHighlighted() const;
        auto IsTodayHighlighted(bool value) const;
        [[nodiscard]] auto MaxDate() const;
        auto MaxDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MinDate() const;
        auto MinDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto NumberOfWeeksInView() const;
        auto NumberOfWeeksInView(int32_t value) const;
        [[nodiscard]] auto SelectedDates() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Windows::UI::Xaml::Controls::CalendarViewSelectionMode const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto FocusBorderBrush() const;
        auto FocusBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedHoverBorderBrush() const;
        auto SelectedHoverBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedPressedBorderBrush() const;
        auto SelectedPressedBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedBorderBrush() const;
        auto SelectedBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto HoverBorderBrush() const;
        auto HoverBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto PressedBorderBrush() const;
        auto PressedBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemBorderBrush() const;
        auto CalendarItemBorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopeBackground() const;
        auto OutOfScopeBackground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemBackground() const;
        auto CalendarItemBackground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto PressedForeground() const;
        auto PressedForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayForeground() const;
        auto TodayForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BlackoutForeground() const;
        auto BlackoutForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedForeground() const;
        auto SelectedForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopeForeground() const;
        auto OutOfScopeForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemForeground() const;
        auto CalendarItemForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto DayItemFontFamily() const;
        auto DayItemFontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto DayItemFontSize() const;
        auto DayItemFontSize(double value) const;
        [[nodiscard]] auto DayItemFontStyle() const;
        auto DayItemFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto DayItemFontWeight() const;
        auto DayItemFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto TodayFontWeight() const;
        auto TodayFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontFamily() const;
        auto FirstOfMonthLabelFontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontSize() const;
        auto FirstOfMonthLabelFontSize(double value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontStyle() const;
        auto FirstOfMonthLabelFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontWeight() const;
        auto FirstOfMonthLabelFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto MonthYearItemFontFamily() const;
        auto MonthYearItemFontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto MonthYearItemFontSize() const;
        auto MonthYearItemFontSize(double value) const;
        [[nodiscard]] auto MonthYearItemFontStyle() const;
        auto MonthYearItemFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto MonthYearItemFontWeight() const;
        auto MonthYearItemFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontFamily() const;
        auto FirstOfYearDecadeLabelFontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontSize() const;
        auto FirstOfYearDecadeLabelFontSize(double value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontStyle() const;
        auto FirstOfYearDecadeLabelFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontWeight() const;
        auto FirstOfYearDecadeLabelFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto HorizontalDayItemAlignment() const;
        auto HorizontalDayItemAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalDayItemAlignment() const;
        auto VerticalDayItemAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto HorizontalFirstOfMonthLabelAlignment() const;
        auto HorizontalFirstOfMonthLabelAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalFirstOfMonthLabelAlignment() const;
        auto VerticalFirstOfMonthLabelAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto CalendarItemBorderThickness() const;
        auto CalendarItemBorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CalendarViewDayItemStyle() const;
        auto CalendarViewDayItemStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        auto CalendarViewDayItemChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& handler) const;
        using CalendarViewDayItemChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarView>::remove_CalendarViewDayItemChanging>;
        [[nodiscard]] auto CalendarViewDayItemChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& handler) const;
        auto CalendarViewDayItemChanging(winrt::event_token const& token) const noexcept;
        auto SelectedDatesChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& handler) const;
        using SelectedDatesChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICalendarView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICalendarView>::remove_SelectedDatesChanged>;
        [[nodiscard]] auto SelectedDatesChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& handler) const;
        auto SelectedDatesChanged(winrt::event_token const& token) const noexcept;
        auto SetDisplayDate(winrt::Windows::Foundation::DateTime const& date) const;
        auto SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItem
    {
        [[nodiscard]] auto IsBlackout() const;
        auto IsBlackout(bool value) const;
        [[nodiscard]] auto Date() const;
        auto SetDensityColors(param::iterable<winrt::Windows::UI::Color> const& colors) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs
    {
        [[nodiscard]] auto InRecycleQueue() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Phase() const;
        auto RegisterUpdateCallback(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
        auto RegisterUpdateCallback(uint32_t callbackPhase, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CalendarView, winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemStatics
    {
        [[nodiscard]] auto IsBlackoutProperty() const;
        [[nodiscard]] auto DateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs
    {
        [[nodiscard]] auto AddedDates() const;
        [[nodiscard]] auto RemovedDates() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICalendarViewStatics
    {
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DayOfWeekFormatProperty() const;
        [[nodiscard]] auto IsGroupLabelVisibleProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto FirstDayOfWeekProperty() const;
        [[nodiscard]] auto IsOutOfScopeEnabledProperty() const;
        [[nodiscard]] auto IsTodayHighlightedProperty() const;
        [[nodiscard]] auto MaxDateProperty() const;
        [[nodiscard]] auto MinDateProperty() const;
        [[nodiscard]] auto NumberOfWeeksInViewProperty() const;
        [[nodiscard]] auto SelectedDatesProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto FocusBorderBrushProperty() const;
        [[nodiscard]] auto SelectedHoverBorderBrushProperty() const;
        [[nodiscard]] auto SelectedPressedBorderBrushProperty() const;
        [[nodiscard]] auto SelectedBorderBrushProperty() const;
        [[nodiscard]] auto HoverBorderBrushProperty() const;
        [[nodiscard]] auto PressedBorderBrushProperty() const;
        [[nodiscard]] auto CalendarItemBorderBrushProperty() const;
        [[nodiscard]] auto OutOfScopeBackgroundProperty() const;
        [[nodiscard]] auto CalendarItemBackgroundProperty() const;
        [[nodiscard]] auto PressedForegroundProperty() const;
        [[nodiscard]] auto TodayForegroundProperty() const;
        [[nodiscard]] auto BlackoutForegroundProperty() const;
        [[nodiscard]] auto SelectedForegroundProperty() const;
        [[nodiscard]] auto OutOfScopeForegroundProperty() const;
        [[nodiscard]] auto CalendarItemForegroundProperty() const;
        [[nodiscard]] auto DayItemFontFamilyProperty() const;
        [[nodiscard]] auto DayItemFontSizeProperty() const;
        [[nodiscard]] auto DayItemFontStyleProperty() const;
        [[nodiscard]] auto DayItemFontWeightProperty() const;
        [[nodiscard]] auto TodayFontWeightProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontFamilyProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontSizeProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontStyleProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontWeightProperty() const;
        [[nodiscard]] auto MonthYearItemFontFamilyProperty() const;
        [[nodiscard]] auto MonthYearItemFontSizeProperty() const;
        [[nodiscard]] auto MonthYearItemFontStyleProperty() const;
        [[nodiscard]] auto MonthYearItemFontWeightProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontFamilyProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontSizeProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontStyleProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontWeightProperty() const;
        [[nodiscard]] auto HorizontalDayItemAlignmentProperty() const;
        [[nodiscard]] auto VerticalDayItemAlignmentProperty() const;
        [[nodiscard]] auto HorizontalFirstOfMonthLabelAlignmentProperty() const;
        [[nodiscard]] auto VerticalFirstOfMonthLabelAlignmentProperty() const;
        [[nodiscard]] auto CalendarItemBorderThicknessProperty() const;
        [[nodiscard]] auto CalendarViewDayItemStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs
    {
        [[nodiscard]] auto Bounds() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICanvas
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICanvas>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvas<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICanvasFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICanvasFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvasFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICanvasStatics
    {
        [[nodiscard]] auto LeftProperty() const;
        auto GetLeft(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetLeft(winrt::Windows::UI::Xaml::UIElement const& element, double length) const;
        [[nodiscard]] auto TopProperty() const;
        auto GetTop(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetTop(winrt::Windows::UI::Xaml::UIElement const& element, double length) const;
        [[nodiscard]] auto ZIndexProperty() const;
        auto GetZIndex(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetZIndex(winrt::Windows::UI::Xaml::UIElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICanvasStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvasStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICaptureElement
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Media::Capture::MediaCapture const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICaptureElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICaptureElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICaptureElementStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICaptureElementStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICheckBox
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICheckBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICheckBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICheckBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICheckBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs
    {
        [[nodiscard]] auto GroupHeaderContainer() const;
        auto GroupHeaderContainer(winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem const& value) const;
        [[nodiscard]] auto GroupIndex() const;
        [[nodiscard]] auto Group() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IChoosingItemContainerEventArgs
    {
        [[nodiscard]] auto ItemIndex() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto ItemContainer() const;
        auto ItemContainer(winrt::Windows::UI::Xaml::Controls::Primitives::SelectorItem const& value) const;
        [[nodiscard]] auto IsContainerPrepared() const;
        auto IsContainerPrepared(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IChoosingItemContainerEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs
    {
        [[nodiscard]] auto Value() const;
        [[nodiscard]] auto UIElement() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColorChangedEventArgs
    {
        [[nodiscard]] auto OldColor() const;
        [[nodiscard]] auto NewColor() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColorPicker
    {
        [[nodiscard]] auto Color() const;
        auto Color(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto PreviousColor() const;
        auto PreviousColor(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const;
        [[nodiscard]] auto IsAlphaEnabled() const;
        auto IsAlphaEnabled(bool value) const;
        [[nodiscard]] auto IsColorSpectrumVisible() const;
        auto IsColorSpectrumVisible(bool value) const;
        [[nodiscard]] auto IsColorPreviewVisible() const;
        auto IsColorPreviewVisible(bool value) const;
        [[nodiscard]] auto IsColorSliderVisible() const;
        auto IsColorSliderVisible(bool value) const;
        [[nodiscard]] auto IsAlphaSliderVisible() const;
        auto IsAlphaSliderVisible(bool value) const;
        [[nodiscard]] auto IsMoreButtonVisible() const;
        auto IsMoreButtonVisible(bool value) const;
        [[nodiscard]] auto IsColorChannelTextInputVisible() const;
        auto IsColorChannelTextInputVisible(bool value) const;
        [[nodiscard]] auto IsAlphaTextInputVisible() const;
        auto IsAlphaTextInputVisible(bool value) const;
        [[nodiscard]] auto IsHexInputVisible() const;
        auto IsHexInputVisible(bool value) const;
        [[nodiscard]] auto MinHue() const;
        auto MinHue(int32_t value) const;
        [[nodiscard]] auto MaxHue() const;
        auto MaxHue(int32_t value) const;
        [[nodiscard]] auto MinSaturation() const;
        auto MinSaturation(int32_t value) const;
        [[nodiscard]] auto MaxSaturation() const;
        auto MaxSaturation(int32_t value) const;
        [[nodiscard]] auto MinValue() const;
        auto MinValue(int32_t value) const;
        [[nodiscard]] auto MaxValue() const;
        auto MaxValue(int32_t value) const;
        [[nodiscard]] auto ColorSpectrumShape() const;
        auto ColorSpectrumShape(winrt::Windows::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
        [[nodiscard]] auto ColorSpectrumComponents() const;
        auto ColorSpectrumComponents(winrt::Windows::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
        auto ColorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ColorPicker, winrt::Windows::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        using ColorChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IColorPicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IColorPicker>::remove_ColorChanged>;
        [[nodiscard]] auto ColorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ColorPicker, winrt::Windows::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        auto ColorChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColorPicker>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPicker<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColorPickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColorPickerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPickerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColorPickerStatics
    {
        [[nodiscard]] auto ColorProperty() const;
        [[nodiscard]] auto PreviousColorProperty() const;
        [[nodiscard]] auto IsAlphaEnabledProperty() const;
        [[nodiscard]] auto IsColorSpectrumVisibleProperty() const;
        [[nodiscard]] auto IsColorPreviewVisibleProperty() const;
        [[nodiscard]] auto IsColorSliderVisibleProperty() const;
        [[nodiscard]] auto IsAlphaSliderVisibleProperty() const;
        [[nodiscard]] auto IsMoreButtonVisibleProperty() const;
        [[nodiscard]] auto IsColorChannelTextInputVisibleProperty() const;
        [[nodiscard]] auto IsAlphaTextInputVisibleProperty() const;
        [[nodiscard]] auto IsHexInputVisibleProperty() const;
        [[nodiscard]] auto MinHueProperty() const;
        [[nodiscard]] auto MaxHueProperty() const;
        [[nodiscard]] auto MinSaturationProperty() const;
        [[nodiscard]] auto MaxSaturationProperty() const;
        [[nodiscard]] auto MinValueProperty() const;
        [[nodiscard]] auto MaxValueProperty() const;
        [[nodiscard]] auto ColorSpectrumShapeProperty() const;
        [[nodiscard]] auto ColorSpectrumComponentsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColorPickerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPickerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColumnDefinition
    {
        [[nodiscard]] auto Width() const;
        auto Width(winrt::Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto MaxWidth() const;
        auto MaxWidth(double value) const;
        [[nodiscard]] auto MinWidth() const;
        auto MinWidth(double value) const;
        [[nodiscard]] auto ActualWidth() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColumnDefinition>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColumnDefinition<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IColumnDefinitionStatics
    {
        [[nodiscard]] auto WidthProperty() const;
        [[nodiscard]] auto MaxWidthProperty() const;
        [[nodiscard]] auto MinWidthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColumnDefinitionStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox
    {
        [[nodiscard]] auto IsDropDownOpen() const;
        auto IsDropDownOpen(bool value) const;
        [[nodiscard]] auto IsEditable() const;
        [[nodiscard]] auto IsSelectionBoxHighlighted() const;
        [[nodiscard]] auto MaxDropDownHeight() const;
        auto MaxDropDownHeight(double value) const;
        [[nodiscard]] auto SelectionBoxItem() const;
        [[nodiscard]] auto SelectionBoxItemTemplate() const;
        [[nodiscard]] auto TemplateSettings() const;
        auto DropDownClosed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DropDownClosed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IComboBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IComboBox>::remove_DropDownClosed>;
        [[nodiscard]] auto DropDownClosed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DropDownClosed(winrt::event_token const& token) const noexcept;
        auto DropDownOpened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DropDownOpened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IComboBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IComboBox>::remove_DropDownOpened>;
        [[nodiscard]] auto DropDownOpened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DropDownOpened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox2
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox3
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto IsTextSearchEnabled() const;
        auto IsTextSearchEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox4
    {
        [[nodiscard]] auto SelectionChangedTrigger() const;
        auto SelectionChangedTrigger(winrt::Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox5
    {
        [[nodiscard]] auto PlaceholderForeground() const;
        auto PlaceholderForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBox6
    {
        auto IsEditable(bool value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto TextBoxStyle() const;
        auto TextBoxStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto TextSubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ComboBox, winrt::Windows::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> const& handler) const;
        using TextSubmitted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IComboBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IComboBox6>::remove_TextSubmitted>;
        [[nodiscard]] auto TextSubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ComboBox, winrt::Windows::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> const& handler) const;
        auto TextSubmitted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBox6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxOverrides
    {
        auto OnDropDownClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnDropDownOpened(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics
    {
        [[nodiscard]] auto IsDropDownOpenProperty() const;
        [[nodiscard]] auto MaxDropDownHeightProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics2
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics3
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto IsTextSearchEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics4
    {
        [[nodiscard]] auto SelectionChangedTriggerProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics5
    {
        [[nodiscard]] auto PlaceholderForegroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics6
    {
        [[nodiscard]] auto IsEditableProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto TextBoxStyleProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IComboBoxTextSubmittedEventArgs
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxTextSubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBar
    {
        [[nodiscard]] auto PrimaryCommands() const;
        [[nodiscard]] auto SecondaryCommands() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBar>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBar2
    {
        [[nodiscard]] auto CommandBarOverflowPresenterStyle() const;
        auto CommandBarOverflowPresenterStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CommandBarTemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBar2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBar3
    {
        [[nodiscard]] auto DefaultLabelPosition() const;
        auto DefaultLabelPosition(winrt::Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition const& value) const;
        [[nodiscard]] auto OverflowButtonVisibility() const;
        auto OverflowButtonVisibility(winrt::Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility const& value) const;
        [[nodiscard]] auto IsDynamicOverflowEnabled() const;
        auto IsDynamicOverflowEnabled(bool value) const;
        auto DynamicOverflowItemsChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CommandBar, winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& handler) const;
        using DynamicOverflowItemsChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ICommandBar3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ICommandBar3>::remove_DynamicOverflowItemsChanging>;
        [[nodiscard]] auto DynamicOverflowItemsChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::CommandBar, winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& handler) const;
        auto DynamicOverflowItemsChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBar3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarElement
    {
        [[nodiscard]] auto IsCompact() const;
        auto IsCompact(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarElement2
    {
        [[nodiscard]] auto IsInOverflow() const;
        [[nodiscard]] auto DynamicOverflowOrder() const;
        auto DynamicOverflowOrder(int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarElement2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarFlyout
    {
        [[nodiscard]] auto PrimaryCommands() const;
        [[nodiscard]] auto SecondaryCommands() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics
    {
        [[nodiscard]] auto PrimaryCommandsProperty() const;
        [[nodiscard]] auto SecondaryCommandsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics2
    {
        [[nodiscard]] auto CommandBarOverflowPresenterStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics3
    {
        [[nodiscard]] auto DefaultLabelPositionProperty() const;
        [[nodiscard]] auto OverflowButtonVisibilityProperty() const;
        [[nodiscard]] auto IsDynamicOverflowEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContainerContentChangingEventArgs
    {
        [[nodiscard]] auto ItemContainer() const;
        [[nodiscard]] auto InRecycleQueue() const;
        [[nodiscard]] auto ItemIndex() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Phase() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto RegisterUpdateCallback(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
        auto RegisterUpdateCallback(uint32_t callbackPhase, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContainerContentChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentControl
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplateSelector() const;
        auto ContentTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ContentTransitions() const;
        auto ContentTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentControl2
    {
        [[nodiscard]] auto ContentTemplateRoot() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentControl2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControl2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentControlOverrides
    {
        auto OnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnContentTemplateChanged(winrt::Windows::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Windows::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentControlStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateSelectorProperty() const;
        [[nodiscard]] auto ContentTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialog
    {
        [[nodiscard]] auto Title() const;
        auto Title(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TitleTemplate() const;
        auto TitleTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FullSizeDesired() const;
        auto FullSizeDesired(bool value) const;
        [[nodiscard]] auto PrimaryButtonText() const;
        auto PrimaryButtonText(param::hstring const& value) const;
        [[nodiscard]] auto SecondaryButtonText() const;
        auto SecondaryButtonText(param::hstring const& value) const;
        [[nodiscard]] auto PrimaryButtonCommand() const;
        auto PrimaryButtonCommand(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto SecondaryButtonCommand() const;
        auto SecondaryButtonCommand(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto PrimaryButtonCommandParameter() const;
        auto PrimaryButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SecondaryButtonCommandParameter() const;
        auto SecondaryButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto IsPrimaryButtonEnabled() const;
        auto IsPrimaryButtonEnabled(bool value) const;
        [[nodiscard]] auto IsSecondaryButtonEnabled() const;
        auto IsSecondaryButtonEnabled(bool value) const;
        auto Closing(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto PrimaryButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using PrimaryButtonClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog>::remove_PrimaryButtonClick>;
        [[nodiscard]] auto PrimaryButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto PrimaryButtonClick(winrt::event_token const& token) const noexcept;
        auto SecondaryButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using SecondaryButtonClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog>::remove_SecondaryButtonClick>;
        [[nodiscard]] auto SecondaryButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto SecondaryButtonClick(winrt::event_token const& token) const noexcept;
        auto Hide() const;
        auto ShowAsync() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialog>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialog2
    {
        [[nodiscard]] auto CloseButtonText() const;
        auto CloseButtonText(param::hstring const& value) const;
        [[nodiscard]] auto CloseButtonCommand() const;
        auto CloseButtonCommand(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CloseButtonCommandParameter() const;
        auto CloseButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto PrimaryButtonStyle() const;
        auto PrimaryButtonStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto SecondaryButtonStyle() const;
        auto SecondaryButtonStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CloseButtonStyle() const;
        auto CloseButtonStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto DefaultButton() const;
        auto DefaultButton(winrt::Windows::UI::Xaml::Controls::ContentDialogButton const& value) const;
        auto CloseButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using CloseButtonClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IContentDialog2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IContentDialog2>::remove_CloseButtonClick>;
        [[nodiscard]] auto CloseButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ContentDialog, winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto CloseButtonClick(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialog2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialog3
    {
        auto ShowAsync(winrt::Windows::UI::Xaml::Controls::ContentDialogPlacement const& placement) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialog3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickDeferral
    {
        auto Complete() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickDeferral<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogClosedEventArgs
    {
        [[nodiscard]] auto Result() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogClosingDeferral
    {
        auto Complete() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosingDeferral<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogClosingEventArgs
    {
        [[nodiscard]] auto Result() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogOpenedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogOpenedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto TitleTemplateProperty() const;
        [[nodiscard]] auto FullSizeDesiredProperty() const;
        [[nodiscard]] auto PrimaryButtonTextProperty() const;
        [[nodiscard]] auto SecondaryButtonTextProperty() const;
        [[nodiscard]] auto PrimaryButtonCommandProperty() const;
        [[nodiscard]] auto SecondaryButtonCommandProperty() const;
        [[nodiscard]] auto PrimaryButtonCommandParameterProperty() const;
        [[nodiscard]] auto SecondaryButtonCommandParameterProperty() const;
        [[nodiscard]] auto IsPrimaryButtonEnabledProperty() const;
        [[nodiscard]] auto IsSecondaryButtonEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentDialogStatics2
    {
        [[nodiscard]] auto CloseButtonTextProperty() const;
        [[nodiscard]] auto CloseButtonCommandProperty() const;
        [[nodiscard]] auto CloseButtonCommandParameterProperty() const;
        [[nodiscard]] auto PrimaryButtonStyleProperty() const;
        [[nodiscard]] auto SecondaryButtonStyleProperty() const;
        [[nodiscard]] auto CloseButtonStyleProperty() const;
        [[nodiscard]] auto DefaultButtonProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentLinkChangedEventArgs
    {
        [[nodiscard]] auto ChangeKind() const;
        [[nodiscard]] auto ContentLinkInfo() const;
        [[nodiscard]] auto TextRange() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentLinkChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenter
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplateSelector() const;
        auto ContentTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ContentTransitions() const;
        auto ContentTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenter2
    {
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Windows::UI::Xaml::TextLineBounds const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenter3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenter3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenter4
    {
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Windows::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Windows::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto HorizontalContentAlignment() const;
        auto HorizontalContentAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalContentAlignment() const;
        auto VerticalContentAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenter4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenter5
    {
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Windows::UI::Xaml::BrushTransition const& value) const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenter5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterOverrides
    {
        auto OnContentTemplateChanged(winrt::Windows::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Windows::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateSelectorProperty() const;
        [[nodiscard]] auto ContentTransitionsProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics2
    {
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics4
    {
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto HorizontalContentAlignmentProperty() const;
        [[nodiscard]] auto VerticalContentAlignmentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics5
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IContextMenuEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto CursorLeft() const;
        [[nodiscard]] auto CursorTop() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContextMenuEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl
    {
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto IsTabStop() const;
        auto IsTabStop(bool value) const;
        [[nodiscard]] auto IsEnabled() const;
        auto IsEnabled(bool value) const;
        [[nodiscard]] auto TabIndex() const;
        auto TabIndex(int32_t value) const;
        [[nodiscard]] auto TabNavigation() const;
        auto TabNavigation(winrt::Windows::UI::Xaml::Input::KeyboardNavigationMode const& value) const;
        [[nodiscard]] auto Template() const;
        auto Template(winrt::Windows::UI::Xaml::Controls::ControlTemplate const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto HorizontalContentAlignment() const;
        auto HorizontalContentAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalContentAlignment() const;
        auto VerticalContentAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto FocusState() const;
        auto IsEnabledChanged(winrt::Windows::UI::Xaml::DependencyPropertyChangedEventHandler const& handler) const;
        using IsEnabledChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IControl, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IControl>::remove_IsEnabledChanged>;
        [[nodiscard]] auto IsEnabledChanged(auto_revoke_t, winrt::Windows::UI::Xaml::DependencyPropertyChangedEventHandler const& handler) const;
        auto IsEnabledChanged(winrt::event_token const& token) const noexcept;
        auto ApplyTemplate() const;
        auto Focus(winrt::Windows::UI::Xaml::FocusState const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl2
    {
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl3
    {
        [[nodiscard]] auto UseSystemFocusVisuals() const;
        auto UseSystemFocusVisuals(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl4
    {
        [[nodiscard]] auto IsFocusEngagementEnabled() const;
        auto IsFocusEngagementEnabled(bool value) const;
        [[nodiscard]] auto IsFocusEngaged() const;
        auto IsFocusEngaged(bool value) const;
        [[nodiscard]] auto RequiresPointer() const;
        auto RequiresPointer(winrt::Windows::UI::Xaml::Controls::RequiresPointer const& value) const;
        [[nodiscard]] auto XYFocusLeft() const;
        auto XYFocusLeft(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusRight() const;
        auto XYFocusRight(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusUp() const;
        auto XYFocusUp(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusDown() const;
        auto XYFocusDown(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ElementSoundMode() const;
        auto ElementSoundMode(winrt::Windows::UI::Xaml::ElementSoundMode const& value) const;
        auto FocusEngaged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Control, winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs> const& handler) const;
        using FocusEngaged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IControl4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IControl4>::remove_FocusEngaged>;
        [[nodiscard]] auto FocusEngaged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Control, winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs> const& handler) const;
        auto FocusEngaged(winrt::event_token const& token) const noexcept;
        auto FocusDisengaged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Control, winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> const& handler) const;
        using FocusDisengaged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IControl4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IControl4>::remove_FocusDisengaged>;
        [[nodiscard]] auto FocusDisengaged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Control, winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> const& handler) const;
        auto FocusDisengaged(winrt::event_token const& token) const noexcept;
        auto RemoveFocusEngagement() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl5
    {
        [[nodiscard]] auto DefaultStyleResourceUri() const;
        auto DefaultStyleResourceUri(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControl7
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControl7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlOverrides
    {
        auto OnPointerEntered(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerPressed(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerMoved(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerReleased(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerExited(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCaptureLost(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCanceled(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerWheelChanged(winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnTapped(winrt::Windows::UI::Xaml::Input::TappedRoutedEventArgs const& e) const;
        auto OnDoubleTapped(winrt::Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs const& e) const;
        auto OnHolding(winrt::Windows::UI::Xaml::Input::HoldingRoutedEventArgs const& e) const;
        auto OnRightTapped(winrt::Windows::UI::Xaml::Input::RightTappedRoutedEventArgs const& e) const;
        auto OnManipulationStarting(winrt::Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const& e) const;
        auto OnManipulationInertiaStarting(winrt::Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const& e) const;
        auto OnManipulationStarted(winrt::Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const& e) const;
        auto OnManipulationDelta(winrt::Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const& e) const;
        auto OnManipulationCompleted(winrt::Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const& e) const;
        auto OnKeyUp(winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnKeyDown(winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnGotFocus(winrt::Windows::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnLostFocus(winrt::Windows::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnDragEnter(winrt::Windows::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragLeave(winrt::Windows::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragOver(winrt::Windows::UI::Xaml::DragEventArgs const& e) const;
        auto OnDrop(winrt::Windows::UI::Xaml::DragEventArgs const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlOverrides6
    {
        auto OnPreviewKeyDown(winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnPreviewKeyUp(winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnCharacterReceived(winrt::Windows::UI::Xaml::Input::CharacterReceivedRoutedEventArgs const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlOverrides6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlOverrides6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlProtected
    {
        [[nodiscard]] auto DefaultStyleKey() const;
        auto DefaultStyleKey(winrt::Windows::Foundation::IInspectable const& value) const;
        auto GetTemplateChild(param::hstring const& childName) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlProtected>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlProtected<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics
    {
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto IsTabStopProperty() const;
        [[nodiscard]] auto IsEnabledProperty() const;
        [[nodiscard]] auto TabIndexProperty() const;
        [[nodiscard]] auto TabNavigationProperty() const;
        [[nodiscard]] auto TemplateProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto HorizontalContentAlignmentProperty() const;
        [[nodiscard]] auto VerticalContentAlignmentProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto DefaultStyleKeyProperty() const;
        [[nodiscard]] auto FocusStateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics2
    {
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics3
    {
        [[nodiscard]] auto UseSystemFocusVisualsProperty() const;
        [[nodiscard]] auto IsTemplateFocusTargetProperty() const;
        auto GetIsTemplateFocusTarget(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetIsTemplateFocusTarget(winrt::Windows::UI::Xaml::FrameworkElement const& element, bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics4
    {
        [[nodiscard]] auto IsFocusEngagementEnabledProperty() const;
        [[nodiscard]] auto IsFocusEngagedProperty() const;
        [[nodiscard]] auto RequiresPointerProperty() const;
        [[nodiscard]] auto XYFocusLeftProperty() const;
        [[nodiscard]] auto XYFocusRightProperty() const;
        [[nodiscard]] auto XYFocusUpProperty() const;
        [[nodiscard]] auto XYFocusDownProperty() const;
        [[nodiscard]] auto ElementSoundModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics5
    {
        [[nodiscard]] auto DefaultStyleResourceUriProperty() const;
        [[nodiscard]] auto IsTemplateKeyTipTargetProperty() const;
        auto GetIsTemplateKeyTipTarget(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsTemplateKeyTipTarget(winrt::Windows::UI::Xaml::DependencyObject const& element, bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlStatics7
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlStatics7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IControlTemplate
    {
        [[nodiscard]] auto TargetType() const;
        auto TargetType(winrt::Windows::UI::Xaml::Interop::TypeName const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IControlTemplate>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlTemplate<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelector
    {
        auto SelectTemplate(winrt::Windows::Foundation::IInspectable const& item, winrt::Windows::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelector<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelector2
    {
        auto SelectTemplate(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelector2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides
    {
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Windows::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides2
    {
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePicker
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto DayVisible() const;
        auto DayVisible(bool value) const;
        [[nodiscard]] auto MonthVisible() const;
        auto MonthVisible(bool value) const;
        [[nodiscard]] auto YearVisible() const;
        auto YearVisible(bool value) const;
        [[nodiscard]] auto DayFormat() const;
        auto DayFormat(param::hstring const& value) const;
        [[nodiscard]] auto MonthFormat() const;
        auto MonthFormat(param::hstring const& value) const;
        [[nodiscard]] auto YearFormat() const;
        auto YearFormat(param::hstring const& value) const;
        [[nodiscard]] auto MinYear() const;
        auto MinYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxYear() const;
        auto MaxYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        auto DateChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& handler) const;
        using DateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IDatePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IDatePicker>::remove_DateChanged>;
        [[nodiscard]] auto DateChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& handler) const;
        auto DateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePicker>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePicker<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePicker2
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePicker2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePicker2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePicker3
    {
        [[nodiscard]] auto SelectedDate() const;
        auto SelectedDate(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const& value) const;
        auto SelectedDateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::DatePicker, winrt::Windows::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> const& handler) const;
        using SelectedDateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IDatePicker3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IDatePicker3>::remove_SelectedDateChanged>;
        [[nodiscard]] auto SelectedDateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::DatePicker, winrt::Windows::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> const& handler) const;
        auto SelectedDateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePicker3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePicker3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyout
    {
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto DayVisible() const;
        auto DayVisible(bool value) const;
        [[nodiscard]] auto MonthVisible() const;
        auto MonthVisible(bool value) const;
        [[nodiscard]] auto YearVisible() const;
        auto YearVisible(bool value) const;
        [[nodiscard]] auto MinYear() const;
        auto MinYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxYear() const;
        auto MaxYear(winrt::Windows::Foundation::DateTime const& value) const;
        auto DatePicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout, winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs> const& handler) const;
        using DatePicked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>::remove_DatePicked>;
        [[nodiscard]] auto DatePicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout, winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs> const& handler) const;
        auto DatePicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Windows::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyout2
    {
        [[nodiscard]] auto DayFormat() const;
        auto DayFormat(param::hstring const& value) const;
        [[nodiscard]] auto MonthFormat() const;
        auto MonthFormat(param::hstring const& value) const;
        [[nodiscard]] auto YearFormat() const;
        auto YearFormat(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyout2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItem
    {
        [[nodiscard]] auto PrimaryText() const;
        auto PrimaryText(param::hstring const& value) const;
        [[nodiscard]] auto SecondaryText() const;
        auto SecondaryText(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItemStatics
    {
        [[nodiscard]] auto PrimaryTextProperty() const;
        [[nodiscard]] auto SecondaryTextProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter2
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenterStatics2
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics
    {
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto DayVisibleProperty() const;
        [[nodiscard]] auto MonthVisibleProperty() const;
        [[nodiscard]] auto YearVisibleProperty() const;
        [[nodiscard]] auto MinYearProperty() const;
        [[nodiscard]] auto MaxYearProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics2
    {
        [[nodiscard]] auto DayFormatProperty() const;
        [[nodiscard]] auto MonthFormatProperty() const;
        [[nodiscard]] auto YearFormatProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerSelectedValueChangedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerSelectedValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto DayVisibleProperty() const;
        [[nodiscard]] auto MonthVisibleProperty() const;
        [[nodiscard]] auto YearVisibleProperty() const;
        [[nodiscard]] auto DayFormatProperty() const;
        [[nodiscard]] auto MonthFormatProperty() const;
        [[nodiscard]] auto YearFormatProperty() const;
        [[nodiscard]] auto MinYearProperty() const;
        [[nodiscard]] auto MaxYearProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerStatics2
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerStatics3
    {
        [[nodiscard]] auto SelectedDateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDatePickerValueChangedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDragItemsCompletedEventArgs
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto DropResult() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDragItemsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDragItemsStartingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto Data() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDragItemsStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDropDownButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDropDownButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDropDownButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDropDownButtonAutomationPeer
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDropDownButtonAutomationPeer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDropDownButtonAutomationPeerFactory
    {
        auto CreateInstance(winrt::Windows::UI::Xaml::Controls::DropDownButton const& owner, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDropDownButtonAutomationPeerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDropDownButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDropDownButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs
    {
        [[nodiscard]] auto Action() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipView
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipView2
    {
        [[nodiscard]] auto UseTouchAnimationsForAllNavigation() const;
        auto UseTouchAnimationsForAllNavigation(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipViewItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipViewItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlipViewStatics2
    {
        [[nodiscard]] auto UseTouchAnimationsForAllNavigationProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyout
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto FlyoutPresenterStyle() const;
        auto FlyoutPresenterStyle(winrt::Windows::UI::Xaml::Style const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenter2
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenterStatics2
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFlyoutStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto FlyoutPresenterStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFocusDisengagedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusDisengagedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs2
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIcon
    {
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIcon>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIcon2
    {
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIcon2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIcon3
    {
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIcon3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconSource
    {
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconSource>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSource<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconSourceStatics
    {
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconStatics
    {
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconStatics2
    {
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFontIconStatics3
    {
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrame
    {
        [[nodiscard]] auto CacheSize() const;
        auto CacheSize(int32_t value) const;
        [[nodiscard]] auto CanGoBack() const;
        [[nodiscard]] auto CanGoForward() const;
        [[nodiscard]] auto CurrentSourcePageType() const;
        [[nodiscard]] auto SourcePageType() const;
        auto SourcePageType(winrt::Windows::UI::Xaml::Interop::TypeName const& value) const;
        [[nodiscard]] auto BackStackDepth() const;
        auto Navigated(winrt::Windows::UI::Xaml::Navigation::NavigatedEventHandler const& handler) const;
        using Navigated_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IFrame>::remove_Navigated>;
        [[nodiscard]] auto Navigated(auto_revoke_t, winrt::Windows::UI::Xaml::Navigation::NavigatedEventHandler const& handler) const;
        auto Navigated(winrt::event_token const& token) const noexcept;
        auto Navigating(winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler const& handler) const;
        using Navigating_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IFrame>::remove_Navigating>;
        [[nodiscard]] auto Navigating(auto_revoke_t, winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler const& handler) const;
        auto Navigating(winrt::event_token const& token) const noexcept;
        auto NavigationFailed(winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventHandler const& handler) const;
        using NavigationFailed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IFrame>::remove_NavigationFailed>;
        [[nodiscard]] auto NavigationFailed(auto_revoke_t, winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventHandler const& handler) const;
        auto NavigationFailed(winrt::event_token const& token) const noexcept;
        auto NavigationStopped(winrt::Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler const& handler) const;
        using NavigationStopped_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IFrame>::remove_NavigationStopped>;
        [[nodiscard]] auto NavigationStopped(auto_revoke_t, winrt::Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler const& handler) const;
        auto NavigationStopped(winrt::event_token const& token) const noexcept;
        auto GoBack() const;
        auto GoForward() const;
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter) const;
        auto GetNavigationState() const;
        auto SetNavigationState(param::hstring const& navigationState) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrame>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrame2
    {
        [[nodiscard]] auto BackStack() const;
        [[nodiscard]] auto ForwardStack() const;
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const& infoOverride) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrame2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrame3
    {
        auto GoBack(winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const& transitionInfoOverride) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrame3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrame4
    {
        auto SetNavigationState(param::hstring const& navigationState, bool suppressNavigate) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrame4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrame5
    {
        [[nodiscard]] auto IsNavigationStackEnabled() const;
        auto IsNavigationStackEnabled(bool value) const;
        auto NavigateToType(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter, winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions const& navigationOptions) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrame5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrameFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrameStatics
    {
        [[nodiscard]] auto CacheSizeProperty() const;
        [[nodiscard]] auto CanGoBackProperty() const;
        [[nodiscard]] auto CanGoForwardProperty() const;
        [[nodiscard]] auto CurrentSourcePageTypeProperty() const;
        [[nodiscard]] auto SourcePageTypeProperty() const;
        [[nodiscard]] auto BackStackDepthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrameStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrameStatics2
    {
        [[nodiscard]] auto BackStackProperty() const;
        [[nodiscard]] auto ForwardStackProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrameStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IFrameStatics5
    {
        [[nodiscard]] auto IsNavigationStackEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IFrameStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGrid
    {
        [[nodiscard]] auto RowDefinitions() const;
        [[nodiscard]] auto ColumnDefinitions() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGrid>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGrid2
    {
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGrid2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGrid3
    {
        [[nodiscard]] auto RowSpacing() const;
        auto RowSpacing(double value) const;
        [[nodiscard]] auto ColumnSpacing() const;
        auto ColumnSpacing(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGrid3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGrid4
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGrid4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridStatics
    {
        [[nodiscard]] auto RowProperty() const;
        auto GetRow(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetRow(winrt::Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnProperty() const;
        auto GetColumn(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetColumn(winrt::Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto RowSpanProperty() const;
        auto GetRowSpan(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetRowSpan(winrt::Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnSpanProperty() const;
        auto GetColumnSpan(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetColumnSpan(winrt::Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridStatics2
    {
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridStatics3
    {
        [[nodiscard]] auto RowSpacingProperty() const;
        [[nodiscard]] auto ColumnSpacingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridStatics4
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridView
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridViewHeaderItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewHeaderItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridViewHeaderItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridViewItem
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridViewItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGridViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyle
    {
        [[nodiscard]] auto Panel() const;
        auto Panel(winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
        [[nodiscard]] auto ContainerStyle() const;
        auto ContainerStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ContainerStyleSelector() const;
        auto ContainerStyleSelector(winrt::Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTemplateSelector() const;
        auto HeaderTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto HidesIfEmpty() const;
        auto HidesIfEmpty(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyle>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyle<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyle2
    {
        [[nodiscard]] auto HeaderContainerStyle() const;
        auto HeaderContainerStyle(winrt::Windows::UI::Xaml::Style const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyle2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyle2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyleFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelector
    {
        auto SelectGroupStyle(winrt::Windows::Foundation::IInspectable const& group, uint32_t level) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelector<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorOverrides
    {
        auto SelectGroupStyleCore(winrt::Windows::Foundation::IInspectable const& group, uint32_t level) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingPanelClosedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingPanelClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingPanelOpenedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingPanelOpenedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingView
    {
        [[nodiscard]] auto PlacementTarget() const;
        auto PlacementTarget(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto PlacementAlignment() const;
        auto PlacementAlignment(winrt::Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment const& value) const;
        [[nodiscard]] auto IsOpen() const;
        [[nodiscard]] auto AreCandidatesEnabled() const;
        auto AreCandidatesEnabled(bool value) const;
        auto Opened(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHandwritingView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHandwritingView>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHandwritingView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHandwritingView>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto TryClose() const;
        auto TryOpen() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingView2
    {
        [[nodiscard]] auto IsSwitchToKeyboardEnabled() const;
        auto IsSwitchToKeyboardEnabled(bool value) const;
        [[nodiscard]] auto IsCommandBarOpen() const;
        auto IsCommandBarOpen(bool value) const;
        [[nodiscard]] auto InputDeviceTypes() const;
        auto InputDeviceTypes(winrt::Windows::UI::Core::CoreInputDeviceTypes const& value) const;
        auto CandidatesChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingViewCandidatesChangedEventArgs> const& handler) const;
        using CandidatesChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHandwritingView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>::remove_CandidatesChanged>;
        [[nodiscard]] auto CandidatesChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingViewCandidatesChangedEventArgs> const& handler) const;
        auto CandidatesChanged(winrt::event_token const& token) const noexcept;
        auto TextSubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingViewTextSubmittedEventArgs> const& handler) const;
        using TextSubmitted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHandwritingView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>::remove_TextSubmitted>;
        [[nodiscard]] auto TextSubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::HandwritingView, winrt::Windows::UI::Xaml::Controls::HandwritingViewTextSubmittedEventArgs> const& handler) const;
        auto TextSubmitted(winrt::event_token const& token) const noexcept;
        auto GetCandidates(uint32_t candidatesSessionId) const;
        auto SelectCandidate(uint32_t candidatesSessionId, uint32_t selectedCandidateIndex) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingViewCandidatesChangedEventArgs
    {
        [[nodiscard]] auto CandidatesSessionId() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingViewCandidatesChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewCandidatesChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics
    {
        [[nodiscard]] auto PlacementTargetProperty() const;
        [[nodiscard]] auto PlacementAlignmentProperty() const;
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto AreCandidatesEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics2
    {
        [[nodiscard]] auto IsSwitchToKeyboardEnabledProperty() const;
        [[nodiscard]] auto IsCommandBarOpenProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHandwritingViewTextSubmittedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHandwritingViewTextSubmittedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewTextSubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHub
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto DefaultSectionIndex() const;
        auto DefaultSectionIndex(int32_t value) const;
        [[nodiscard]] auto Sections() const;
        [[nodiscard]] auto SectionsInView() const;
        [[nodiscard]] auto SectionHeaders() const;
        auto SectionHeaderClick(winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& handler) const;
        using SectionHeaderClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHub, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHub>::remove_SectionHeaderClick>;
        [[nodiscard]] auto SectionHeaderClick(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& handler) const;
        auto SectionHeaderClick(winrt::event_token const& token) const noexcept;
        auto SectionsInViewChanged(winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& handler) const;
        using SectionsInViewChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IHub, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IHub>::remove_SectionsInViewChanged>;
        [[nodiscard]] auto SectionsInViewChanged(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& handler) const;
        auto SectionsInViewChanged(winrt::event_token const& token) const noexcept;
        auto ScrollToSection(winrt::Windows::UI::Xaml::Controls::HubSection const& section) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHub>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHub<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubSection
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto IsHeaderInteractive() const;
        auto IsHeaderInteractive(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubSection>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubSectionFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs
    {
        [[nodiscard]] auto Section() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubSectionStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto IsHeaderInteractiveProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHubStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto DefaultSectionIndexProperty() const;
        [[nodiscard]] auto SemanticZoomOwnerProperty() const;
        [[nodiscard]] auto IsActiveViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHubStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHyperlinkButton
    {
        [[nodiscard]] auto NavigateUri() const;
        auto NavigateUri(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHyperlinkButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IHyperlinkButtonStatics
    {
        [[nodiscard]] auto NavigateUriProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconElement
    {
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconElementFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconElementFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElementFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconElementStatics
    {
        [[nodiscard]] auto ForegroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconElementStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElementStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSource
    {
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSource>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSource<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSourceElement
    {
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Windows::UI::Xaml::Controls::IconSource const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSourceElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSourceElementFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSourceElementFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceElementFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSourceElementStatics
    {
        [[nodiscard]] auto IconSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSourceElementStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceElementStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSourceFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSourceFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIconSourceStatics
    {
        [[nodiscard]] auto ForegroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIconSourceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IImage
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto NineGrid() const;
        auto NineGrid(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto PlayToSource() const;
        auto ImageFailed(winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        using ImageFailed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IImage, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IImage>::remove_ImageFailed>;
        [[nodiscard]] auto ImageFailed(auto_revoke_t, winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        auto ImageFailed(winrt::event_token const& token) const noexcept;
        auto ImageOpened(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using ImageOpened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IImage, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IImage>::remove_ImageOpened>;
        [[nodiscard]] auto ImageOpened(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto ImageOpened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IImage>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IImage2
    {
        auto GetAsCastingSource() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IImage2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IImage3
    {
        auto GetAlphaMask() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IImage3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IImageStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto NineGridProperty() const;
        [[nodiscard]] auto PlayToSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IImageStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImageStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkCanvas
    {
        [[nodiscard]] auto InkPresenter() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkCanvas>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkCanvas<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkCanvasFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkCanvasFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbar
    {
        [[nodiscard]] auto InitialControls() const;
        auto InitialControls(winrt::Windows::UI::Xaml::Controls::InkToolbarInitialControls const& value) const;
        [[nodiscard]] auto Children() const;
        [[nodiscard]] auto ActiveTool() const;
        auto ActiveTool(winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton const& value) const;
        [[nodiscard]] auto InkDrawingAttributes() const;
        [[nodiscard]] auto IsRulerButtonChecked() const;
        auto IsRulerButtonChecked(bool value) const;
        [[nodiscard]] auto TargetInkCanvas() const;
        auto TargetInkCanvas(winrt::Windows::UI::Xaml::Controls::InkCanvas const& value) const;
        auto ActiveToolChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ActiveToolChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbar>::remove_ActiveToolChanged>;
        [[nodiscard]] auto ActiveToolChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ActiveToolChanged(winrt::event_token const& token) const noexcept;
        auto InkDrawingAttributesChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using InkDrawingAttributesChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbar>::remove_InkDrawingAttributesChanged>;
        [[nodiscard]] auto InkDrawingAttributesChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto InkDrawingAttributesChanged(winrt::event_token const& token) const noexcept;
        auto EraseAllClicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using EraseAllClicked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbar>::remove_EraseAllClicked>;
        [[nodiscard]] auto EraseAllClicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto EraseAllClicked(winrt::event_token const& token) const noexcept;
        auto IsRulerButtonCheckedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using IsRulerButtonCheckedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbar, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbar>::remove_IsRulerButtonCheckedChanged>;
        [[nodiscard]] auto IsRulerButtonCheckedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto IsRulerButtonCheckedChanged(winrt::event_token const& token) const noexcept;
        auto GetToolButton(winrt::Windows::UI::Xaml::Controls::InkToolbarTool const& tool) const;
        auto GetToggleButton(winrt::Windows::UI::Xaml::Controls::InkToolbarToggle const& tool) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbar>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbar<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbar2
    {
        [[nodiscard]] auto IsStencilButtonChecked() const;
        auto IsStencilButtonChecked(bool value) const;
        [[nodiscard]] auto ButtonFlyoutPlacement() const;
        auto ButtonFlyoutPlacement(winrt::Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        auto IsStencilButtonCheckedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs> const& handler) const;
        using IsStencilButtonCheckedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbar2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbar2>::remove_IsStencilButtonCheckedChanged>;
        [[nodiscard]] auto IsStencilButtonCheckedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbar, winrt::Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs> const& handler) const;
        auto IsStencilButtonCheckedChanged(winrt::event_token const& token) const noexcept;
        auto GetMenuButton(winrt::Windows::UI::Xaml::Controls::InkToolbarMenuKind const& menu) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbar2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbar2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbar3
    {
        [[nodiscard]] auto TargetInkPresenter() const;
        auto TargetInkPresenter(winrt::Windows::UI::Input::Inking::InkPresenter const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbar3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbar3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPen
    {
        auto CreateInkDrawingAttributes(winrt::Windows::UI::Xaml::Media::Brush const& brush, double strokeWidth) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPen<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButton
    {
        [[nodiscard]] auto CustomPen() const;
        auto CustomPen(winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen const& value) const;
        [[nodiscard]] auto ConfigurationContent() const;
        auto ConfigurationContent(winrt::Windows::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonStatics
    {
        [[nodiscard]] auto CustomPenProperty() const;
        [[nodiscard]] auto ConfigurationContentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenOverrides
    {
        auto CreateInkDrawingAttributesCore(winrt::Windows::UI::Xaml::Media::Brush const& brush, double strokeWidth) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButton
    {
        [[nodiscard]] auto ConfigurationContent() const;
        auto ConfigurationContent(winrt::Windows::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonStatics
    {
        [[nodiscard]] auto ConfigurationContentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton2
    {
        [[nodiscard]] auto IsClearAllVisible() const;
        auto IsClearAllVisible(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonStatics2
    {
        [[nodiscard]] auto IsClearAllVisibleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItem
    {
        [[nodiscard]] auto Kind() const;
        auto Kind(winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind const& value) const;
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
        auto Checked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Checked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>::remove_Checked>;
        [[nodiscard]] auto Checked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Checked(winrt::event_token const& token) const noexcept;
        auto Unchecked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Unchecked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>::remove_Unchecked>;
        [[nodiscard]] auto Unchecked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Unchecked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemStatics
    {
        [[nodiscard]] auto KindProperty() const;
        [[nodiscard]] auto IsCheckedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarIsStencilButtonCheckedChangedEventArgs
    {
        [[nodiscard]] auto StencilButton() const;
        [[nodiscard]] auto StencilKind() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarIsStencilButtonCheckedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButton
    {
        [[nodiscard]] auto MenuKind() const;
        [[nodiscard]] auto IsExtensionGlyphShown() const;
        auto IsExtensionGlyphShown(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonStatics
    {
        [[nodiscard]] auto IsExtensionGlyphShownProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButton
    {
        [[nodiscard]] auto Palette() const;
        auto Palette(param::vector<winrt::Windows::UI::Xaml::Media::Brush> const& value) const;
        [[nodiscard]] auto MinStrokeWidth() const;
        auto MinStrokeWidth(double value) const;
        [[nodiscard]] auto MaxStrokeWidth() const;
        auto MaxStrokeWidth(double value) const;
        [[nodiscard]] auto SelectedBrush() const;
        [[nodiscard]] auto SelectedBrushIndex() const;
        auto SelectedBrushIndex(int32_t value) const;
        [[nodiscard]] auto SelectedStrokeWidth() const;
        auto SelectedStrokeWidth(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonStatics
    {
        [[nodiscard]] auto PaletteProperty() const;
        [[nodiscard]] auto MinStrokeWidthProperty() const;
        [[nodiscard]] auto MaxStrokeWidthProperty() const;
        [[nodiscard]] auto SelectedBrushProperty() const;
        [[nodiscard]] auto SelectedBrushIndexProperty() const;
        [[nodiscard]] auto SelectedStrokeWidthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControl
    {
        [[nodiscard]] auto PenButton() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlStatics
    {
        [[nodiscard]] auto PenButtonProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButton
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButton
    {
        [[nodiscard]] auto Ruler() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonStatics
    {
        [[nodiscard]] auto RulerProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStatics
    {
        [[nodiscard]] auto InitialControlsProperty() const;
        [[nodiscard]] auto ChildrenProperty() const;
        [[nodiscard]] auto ActiveToolProperty() const;
        [[nodiscard]] auto InkDrawingAttributesProperty() const;
        [[nodiscard]] auto IsRulerButtonCheckedProperty() const;
        [[nodiscard]] auto TargetInkCanvasProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStatics2
    {
        [[nodiscard]] auto IsStencilButtonCheckedProperty() const;
        [[nodiscard]] auto ButtonFlyoutPlacementProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStatics3
    {
        [[nodiscard]] auto TargetInkPresenterProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButton
    {
        [[nodiscard]] auto Ruler() const;
        [[nodiscard]] auto Protractor() const;
        [[nodiscard]] auto SelectedStencil() const;
        auto SelectedStencil(winrt::Windows::UI::Xaml::Controls::InkToolbarStencilKind const& value) const;
        [[nodiscard]] auto IsRulerItemVisible() const;
        auto IsRulerItemVisible(bool value) const;
        [[nodiscard]] auto IsProtractorItemVisible() const;
        auto IsProtractorItemVisible(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonStatics
    {
        [[nodiscard]] auto RulerProperty() const;
        [[nodiscard]] auto ProtractorProperty() const;
        [[nodiscard]] auto SelectedStencilProperty() const;
        [[nodiscard]] auto IsRulerItemVisibleProperty() const;
        [[nodiscard]] auto IsProtractorItemVisibleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButton
    {
        [[nodiscard]] auto ToggleKind() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButtonFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButton
    {
        [[nodiscard]] auto ToolKind() const;
        [[nodiscard]] auto IsExtensionGlyphShown() const;
        auto IsExtensionGlyphShown(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonStatics
    {
        [[nodiscard]] auto IsExtensionGlyphShownProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IInsertionPanel
    {
        auto GetInsertionIndexes(winrt::Windows::Foundation::Point const& position, int32_t& first, int32_t& second) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IInsertionPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInsertionPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemClickEventArgs
    {
        [[nodiscard]] auto ClickedItem() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemContainerGenerator
    {
        auto ItemsChanged(winrt::Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& handler) const;
        using ItemsChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>::remove_ItemsChanged>;
        [[nodiscard]] auto ItemsChanged(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& handler) const;
        auto ItemsChanged(winrt::event_token const& token) const noexcept;
        auto ItemFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto IndexFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromIndex(int32_t index) const;
        auto GetItemContainerGeneratorForPanel(winrt::Windows::UI::Xaml::Controls::Panel const& panel) const;
        auto StartAt(winrt::Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, winrt::Windows::UI::Xaml::Controls::Primitives::GeneratorDirection const& direction, bool allowStartAtRealizedItem) const;
        auto Stop() const;
        auto GenerateNext(bool& isNewlyRealized) const;
        auto PrepareItemContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto RemoveAll() const;
        auto Remove(winrt::Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
        auto GeneratorPositionFromIndex(int32_t itemIndex) const;
        auto IndexFromGeneratorPosition(winrt::Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position) const;
        auto Recycle(winrt::Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemContainerGenerator<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemContainerMapping
    {
        auto ItemFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto IndexFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromIndex(int32_t index) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemContainerMapping<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControl
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ItemTemplateSelector() const;
        auto ItemTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ItemsPanel() const;
        auto ItemsPanel(winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
        [[nodiscard]] auto DisplayMemberPath() const;
        auto DisplayMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto ItemContainerStyle() const;
        auto ItemContainerStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ItemContainerStyleSelector() const;
        auto ItemContainerStyleSelector(winrt::Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto ItemContainerGenerator() const;
        [[nodiscard]] auto ItemContainerTransitions() const;
        auto ItemContainerTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto GroupStyle() const;
        [[nodiscard]] auto GroupStyleSelector() const;
        auto GroupStyleSelector(winrt::Windows::UI::Xaml::Controls::GroupStyleSelector const& value) const;
        [[nodiscard]] auto IsGrouping() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControl2
    {
        [[nodiscard]] auto ItemsPanelRoot() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControl2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControl3
    {
        auto GroupHeaderContainerFromItemContainer(winrt::Windows::UI::Xaml::DependencyObject const& itemContainer) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControl3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControlOverrides
    {
        auto IsItemItsOwnContainerOverride(winrt::Windows::Foundation::IInspectable const& item) const;
        auto GetContainerForItemOverride() const;
        auto ClearContainerForItemOverride(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto PrepareContainerForItemOverride(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnItemContainerStyleChanged(winrt::Windows::UI::Xaml::Style const& oldItemContainerStyle, winrt::Windows::UI::Xaml::Style const& newItemContainerStyle) const;
        auto OnItemContainerStyleSelectorChanged(winrt::Windows::UI::Xaml::Controls::StyleSelector const& oldItemContainerStyleSelector, winrt::Windows::UI::Xaml::Controls::StyleSelector const& newItemContainerStyleSelector) const;
        auto OnItemTemplateChanged(winrt::Windows::UI::Xaml::DataTemplate const& oldItemTemplate, winrt::Windows::UI::Xaml::DataTemplate const& newItemTemplate) const;
        auto OnItemTemplateSelectorChanged(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& oldItemTemplateSelector, winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& newItemTemplateSelector) const;
        auto OnGroupStyleSelectorChanged(winrt::Windows::UI::Xaml::Controls::GroupStyleSelector const& oldGroupStyleSelector, winrt::Windows::UI::Xaml::Controls::GroupStyleSelector const& newGroupStyleSelector) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsControlStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto ItemTemplateSelectorProperty() const;
        [[nodiscard]] auto ItemsPanelProperty() const;
        [[nodiscard]] auto DisplayMemberPathProperty() const;
        [[nodiscard]] auto ItemContainerStyleProperty() const;
        [[nodiscard]] auto ItemContainerStyleSelectorProperty() const;
        [[nodiscard]] auto ItemContainerTransitionsProperty() const;
        [[nodiscard]] auto GroupStyleSelectorProperty() const;
        [[nodiscard]] auto IsGroupingProperty() const;
        auto GetItemsOwner(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto ItemsControlFromItemContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPanelTemplate
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPanelTemplate<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPickedEventArgs
    {
        [[nodiscard]] auto AddedItems() const;
        [[nodiscard]] auto RemovedItems() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPresenter
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTransitions() const;
        auto HeaderTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPresenter2
    {
        [[nodiscard]] auto Footer() const;
        auto Footer(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto FooterTemplate() const;
        auto FooterTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FooterTransitions() const;
        auto FooterTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTransitionsProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics2
    {
        [[nodiscard]] auto FooterProperty() const;
        [[nodiscard]] auto FooterTemplateProperty() const;
        [[nodiscard]] auto FooterTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsStackPanel
    {
        [[nodiscard]] auto GroupPadding() const;
        auto GroupPadding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto FirstCacheIndex() const;
        [[nodiscard]] auto FirstVisibleIndex() const;
        [[nodiscard]] auto LastVisibleIndex() const;
        [[nodiscard]] auto LastCacheIndex() const;
        [[nodiscard]] auto ScrollingDirection() const;
        [[nodiscard]] auto GroupHeaderPlacement() const;
        auto GroupHeaderPlacement(winrt::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
        [[nodiscard]] auto ItemsUpdatingScrollMode() const;
        auto ItemsUpdatingScrollMode(winrt::Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode const& value) const;
        [[nodiscard]] auto CacheLength() const;
        auto CacheLength(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsStackPanel2
    {
        [[nodiscard]] auto AreStickyGroupHeadersEnabled() const;
        auto AreStickyGroupHeadersEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanel2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics
    {
        [[nodiscard]] auto GroupPaddingProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto GroupHeaderPlacementProperty() const;
        [[nodiscard]] auto CacheLengthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics2
    {
        [[nodiscard]] auto AreStickyGroupHeadersEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsWrapGrid
    {
        [[nodiscard]] auto GroupPadding() const;
        auto GroupPadding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto FirstCacheIndex() const;
        [[nodiscard]] auto FirstVisibleIndex() const;
        [[nodiscard]] auto LastVisibleIndex() const;
        [[nodiscard]] auto LastCacheIndex() const;
        [[nodiscard]] auto ScrollingDirection() const;
        [[nodiscard]] auto GroupHeaderPlacement() const;
        auto GroupHeaderPlacement(winrt::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
        [[nodiscard]] auto CacheLength() const;
        auto CacheLength(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGrid<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsWrapGrid2
    {
        [[nodiscard]] auto AreStickyGroupHeadersEnabled() const;
        auto AreStickyGroupHeadersEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGrid2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics
    {
        [[nodiscard]] auto GroupPaddingProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto GroupHeaderPlacementProperty() const;
        [[nodiscard]] auto CacheLengthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics2
    {
        [[nodiscard]] auto AreStickyGroupHeadersEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBox
    {
        [[nodiscard]] auto SelectedItems() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Windows::UI::Xaml::Controls::SelectionMode const& value) const;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectAll() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBox2
    {
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
        auto SingleSelectionFollowsFocus(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBoxItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBoxItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBoxItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBoxStatics
    {
        [[nodiscard]] auto SelectionModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListBoxStatics2
    {
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListPickerFlyout
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto DisplayMemberPath() const;
        auto DisplayMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode const& value) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SelectedValue() const;
        auto SelectedValue(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SelectedValuePath() const;
        auto SelectedValuePath(param::hstring const& value) const;
        [[nodiscard]] auto SelectedItems() const;
        auto ItemsPicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout, winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs> const& handler) const;
        using ItemsPicked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>::remove_ItemsPicked>;
        [[nodiscard]] auto ItemsPicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout, winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs> const& handler) const;
        auto ItemsPicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Windows::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListPickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListPickerFlyoutStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto DisplayMemberPathProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto SelectedValueProperty() const;
        [[nodiscard]] auto SelectedValuePathProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListView
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase
    {
        [[nodiscard]] auto SelectedItems() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Windows::UI::Xaml::Controls::ListViewSelectionMode const& value) const;
        [[nodiscard]] auto IsSwipeEnabled() const;
        auto IsSwipeEnabled(bool value) const;
        [[nodiscard]] auto CanDragItems() const;
        auto CanDragItems(bool value) const;
        [[nodiscard]] auto CanReorderItems() const;
        auto CanReorderItems(bool value) const;
        [[nodiscard]] auto IsItemClickEnabled() const;
        auto IsItemClickEnabled(bool value) const;
        [[nodiscard]] auto DataFetchSize() const;
        auto DataFetchSize(double value) const;
        [[nodiscard]] auto IncrementalLoadingThreshold() const;
        auto IncrementalLoadingThreshold(double value) const;
        [[nodiscard]] auto IncrementalLoadingTrigger() const;
        auto IncrementalLoadingTrigger(winrt::Windows::UI::Xaml::Controls::IncrementalLoadingTrigger const& value) const;
        auto ItemClick(winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler const& handler) const;
        using ItemClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase>::remove_ItemClick>;
        [[nodiscard]] auto ItemClick(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ItemClickEventHandler const& handler) const;
        auto ItemClick(winrt::event_token const& token) const noexcept;
        auto DragItemsStarting(winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler const& handler) const;
        using DragItemsStarting_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase>::remove_DragItemsStarting>;
        [[nodiscard]] auto DragItemsStarting(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventHandler const& handler) const;
        auto DragItemsStarting(winrt::event_token const& token) const noexcept;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectAll() const;
        auto LoadMoreItemsAsync() const;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item, winrt::Windows::UI::Xaml::Controls::ScrollIntoViewAlignment const& alignment) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTransitions() const;
        auto HeaderTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase2
    {
        [[nodiscard]] auto ShowsScrollingPlaceholders() const;
        auto ShowsScrollingPlaceholders(bool value) const;
        auto ContainerContentChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& handler) const;
        using ContainerContentChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase2>::remove_ContainerContentChanging>;
        [[nodiscard]] auto ContainerContentChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& handler) const;
        auto ContainerContentChanging(winrt::event_token const& token) const noexcept;
        auto SetDesiredContainerUpdateDuration(winrt::Windows::Foundation::TimeSpan const& duration) const;
        [[nodiscard]] auto Footer() const;
        auto Footer(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto FooterTemplate() const;
        auto FooterTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FooterTransitions() const;
        auto FooterTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase3
    {
        [[nodiscard]] auto ReorderMode() const;
        auto ReorderMode(winrt::Windows::UI::Xaml::Controls::ListViewReorderMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase4
    {
        [[nodiscard]] auto SelectedRanges() const;
        [[nodiscard]] auto IsMultiSelectCheckBoxEnabled() const;
        auto IsMultiSelectCheckBoxEnabled(bool value) const;
        auto DragItemsCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& handler) const;
        using DragItemsCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase4>::remove_DragItemsCompleted>;
        [[nodiscard]] auto DragItemsCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& handler) const;
        auto DragItemsCompleted(winrt::event_token const& token) const noexcept;
        auto ChoosingItemContainer(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& handler) const;
        using ChoosingItemContainer_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase4>::remove_ChoosingItemContainer>;
        [[nodiscard]] auto ChoosingItemContainer(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& handler) const;
        auto ChoosingItemContainer(winrt::event_token const& token) const noexcept;
        auto ChoosingGroupHeaderContainer(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& handler) const;
        using ChoosingGroupHeaderContainer_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IListViewBase4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IListViewBase4>::remove_ChoosingGroupHeaderContainer>;
        [[nodiscard]] auto ChoosingGroupHeaderContainer(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ListViewBase, winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& handler) const;
        auto ChoosingGroupHeaderContainer(winrt::event_token const& token) const noexcept;
        auto SelectRange(winrt::Windows::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
        auto DeselectRange(winrt::Windows::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase5
    {
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
        auto SingleSelectionFollowsFocus(bool value) const;
        auto IsDragSource() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBase6
    {
        auto TryStartConnectedAnimationAsync(winrt::Windows::UI::Xaml::Media::Animation::ConnectedAnimation const& animation, winrt::Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
        auto PrepareConnectedAnimation(param::hstring const& key, winrt::Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBase6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItemFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics
    {
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto IsSwipeEnabledProperty() const;
        [[nodiscard]] auto CanDragItemsProperty() const;
        [[nodiscard]] auto CanReorderItemsProperty() const;
        [[nodiscard]] auto IsItemClickEnabledProperty() const;
        [[nodiscard]] auto DataFetchSizeProperty() const;
        [[nodiscard]] auto IncrementalLoadingThresholdProperty() const;
        [[nodiscard]] auto IncrementalLoadingTriggerProperty() const;
        [[nodiscard]] auto SemanticZoomOwnerProperty() const;
        [[nodiscard]] auto IsActiveViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics2
    {
        [[nodiscard]] auto ShowsScrollingPlaceholdersProperty() const;
        [[nodiscard]] auto FooterProperty() const;
        [[nodiscard]] auto FooterTemplateProperty() const;
        [[nodiscard]] auto FooterTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics3
    {
        [[nodiscard]] auto ReorderModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics4
    {
        [[nodiscard]] auto IsMultiSelectCheckBoxEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics5
    {
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewHeaderItem
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewHeaderItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewHeaderItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewItem
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelper
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelper<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelperStatics
    {
        auto GetRelativeScrollPosition(winrt::Windows::UI::Xaml::Controls::ListViewBase const& listViewBase, winrt::Windows::UI::Xaml::Controls::ListViewItemToKeyHandler const& itemToKeyHandler) const;
        auto SetRelativeScrollPositionAsync(winrt::Windows::UI::Xaml::Controls::ListViewBase const& listViewBase, param::hstring const& relativeScrollPosition, winrt::Windows::UI::Xaml::Controls::ListViewKeyToItemHandler const& keyToItemHandler) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelperStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaElement
    {
        [[nodiscard]] auto PosterSource() const;
        auto PosterSource(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto IsMuted() const;
        auto IsMuted(bool value) const;
        [[nodiscard]] auto IsAudioOnly() const;
        [[nodiscard]] auto AutoPlay() const;
        auto AutoPlay(bool value) const;
        [[nodiscard]] auto Volume() const;
        auto Volume(double value) const;
        [[nodiscard]] auto Balance() const;
        auto Balance(double value) const;
        [[nodiscard]] auto NaturalVideoHeight() const;
        [[nodiscard]] auto NaturalVideoWidth() const;
        [[nodiscard]] auto NaturalDuration() const;
        [[nodiscard]] auto Position() const;
        auto Position(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto DownloadProgress() const;
        [[nodiscard]] auto BufferingProgress() const;
        [[nodiscard]] auto DownloadProgressOffset() const;
        [[nodiscard]] auto CurrentState() const;
        [[nodiscard]] auto Markers() const;
        [[nodiscard]] auto CanSeek() const;
        [[nodiscard]] auto CanPause() const;
        [[nodiscard]] auto AudioStreamCount() const;
        [[nodiscard]] auto AudioStreamIndex() const;
        auto AudioStreamIndex(winrt::Windows::Foundation::IReference<int32_t> const& value) const;
        [[nodiscard]] auto PlaybackRate() const;
        auto PlaybackRate(double value) const;
        [[nodiscard]] auto IsLooping() const;
        auto IsLooping(bool value) const;
        [[nodiscard]] auto PlayToSource() const;
        [[nodiscard]] auto DefaultPlaybackRate() const;
        auto DefaultPlaybackRate(double value) const;
        [[nodiscard]] auto AspectRatioWidth() const;
        [[nodiscard]] auto AspectRatioHeight() const;
        [[nodiscard]] auto RealTimePlayback() const;
        auto RealTimePlayback(bool value) const;
        [[nodiscard]] auto AudioCategory() const;
        auto AudioCategory(winrt::Windows::UI::Xaml::Media::AudioCategory const& value) const;
        [[nodiscard]] auto AudioDeviceType() const;
        auto AudioDeviceType(winrt::Windows::UI::Xaml::Media::AudioDeviceType const& value) const;
        [[nodiscard]] auto ProtectionManager() const;
        auto ProtectionManager(winrt::Windows::Media::Protection::MediaProtectionManager const& value) const;
        [[nodiscard]] auto Stereo3DVideoPackingMode() const;
        auto Stereo3DVideoPackingMode(winrt::Windows::UI::Xaml::Media::Stereo3DVideoPackingMode const& value) const;
        [[nodiscard]] auto Stereo3DVideoRenderMode() const;
        auto Stereo3DVideoRenderMode(winrt::Windows::UI::Xaml::Media::Stereo3DVideoRenderMode const& value) const;
        [[nodiscard]] auto IsStereo3DVideo() const;
        auto MediaOpened(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using MediaOpened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_MediaOpened>;
        [[nodiscard]] auto MediaOpened(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto MediaOpened(winrt::event_token const& token) const noexcept;
        auto MediaEnded(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using MediaEnded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_MediaEnded>;
        [[nodiscard]] auto MediaEnded(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto MediaEnded(winrt::event_token const& token) const noexcept;
        auto MediaFailed(winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        using MediaFailed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_MediaFailed>;
        [[nodiscard]] auto MediaFailed(auto_revoke_t, winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        auto MediaFailed(winrt::event_token const& token) const noexcept;
        auto DownloadProgressChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using DownloadProgressChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_DownloadProgressChanged>;
        [[nodiscard]] auto DownloadProgressChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto DownloadProgressChanged(winrt::event_token const& token) const noexcept;
        auto BufferingProgressChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using BufferingProgressChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_BufferingProgressChanged>;
        [[nodiscard]] auto BufferingProgressChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto BufferingProgressChanged(winrt::event_token const& token) const noexcept;
        auto CurrentStateChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using CurrentStateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_CurrentStateChanged>;
        [[nodiscard]] auto CurrentStateChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto CurrentStateChanged(winrt::event_token const& token) const noexcept;
        auto MarkerReached(winrt::Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler const& handler) const;
        using MarkerReached_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_MarkerReached>;
        [[nodiscard]] auto MarkerReached(auto_revoke_t, winrt::Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler const& handler) const;
        auto MarkerReached(winrt::event_token const& token) const noexcept;
        auto RateChanged(winrt::Windows::UI::Xaml::Media::RateChangedRoutedEventHandler const& handler) const;
        using RateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_RateChanged>;
        [[nodiscard]] auto RateChanged(auto_revoke_t, winrt::Windows::UI::Xaml::Media::RateChangedRoutedEventHandler const& handler) const;
        auto RateChanged(winrt::event_token const& token) const noexcept;
        auto VolumeChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using VolumeChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_VolumeChanged>;
        [[nodiscard]] auto VolumeChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto VolumeChanged(winrt::event_token const& token) const noexcept;
        auto SeekCompleted(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using SeekCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement>::remove_SeekCompleted>;
        [[nodiscard]] auto SeekCompleted(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SeekCompleted(winrt::event_token const& token) const noexcept;
        auto Stop() const;
        auto Play() const;
        auto Pause() const;
        auto CanPlayType(param::hstring const& type) const;
        auto SetSource(winrt::Windows::Storage::Streams::IRandomAccessStream const& stream, param::hstring const& mimeType) const;
        auto GetAudioStreamLanguage(winrt::Windows::Foundation::IReference<int32_t> const& index) const;
        auto AddAudioEffect(param::hstring const& effectID, bool effectOptional, winrt::Windows::Foundation::Collections::IPropertySet const& effectConfiguration) const;
        auto AddVideoEffect(param::hstring const& effectID, bool effectOptional, winrt::Windows::Foundation::Collections::IPropertySet const& effectConfiguration) const;
        auto RemoveAllEffects() const;
        [[nodiscard]] auto ActualStereo3DVideoPackingMode() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaElement2
    {
        [[nodiscard]] auto AreTransportControlsEnabled() const;
        auto AreTransportControlsEnabled(bool value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto IsFullWindow() const;
        auto IsFullWindow(bool value) const;
        auto SetMediaStreamSource(winrt::Windows::Media::Core::IMediaSource const& source) const;
        [[nodiscard]] auto PlayToPreferredSourceUri() const;
        auto PlayToPreferredSourceUri(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaElement2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaElement3
    {
        [[nodiscard]] auto TransportControls() const;
        auto TransportControls(winrt::Windows::UI::Xaml::Controls::MediaTransportControls const& value) const;
        auto PartialMediaFailureDetected(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::MediaElement, winrt::Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> const& handler) const;
        using PartialMediaFailureDetected_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaElement3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaElement3>::remove_PartialMediaFailureDetected>;
        [[nodiscard]] auto PartialMediaFailureDetected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::MediaElement, winrt::Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> const& handler) const;
        auto PartialMediaFailureDetected(winrt::event_token const& token) const noexcept;
        auto SetPlaybackSource(winrt::Windows::Media::Playback::IMediaPlaybackSource const& source) const;
        auto GetAsCastingSource() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaElement3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaElementStatics
    {
        [[nodiscard]] auto PosterSourceProperty() const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto IsMutedProperty() const;
        [[nodiscard]] auto IsAudioOnlyProperty() const;
        [[nodiscard]] auto AutoPlayProperty() const;
        [[nodiscard]] auto VolumeProperty() const;
        [[nodiscard]] auto BalanceProperty() const;
        [[nodiscard]] auto NaturalVideoHeightProperty() const;
        [[nodiscard]] auto NaturalVideoWidthProperty() const;
        [[nodiscard]] auto NaturalDurationProperty() const;
        [[nodiscard]] auto PositionProperty() const;
        [[nodiscard]] auto DownloadProgressProperty() const;
        [[nodiscard]] auto BufferingProgressProperty() const;
        [[nodiscard]] auto DownloadProgressOffsetProperty() const;
        [[nodiscard]] auto CurrentStateProperty() const;
        [[nodiscard]] auto CanSeekProperty() const;
        [[nodiscard]] auto CanPauseProperty() const;
        [[nodiscard]] auto AudioStreamCountProperty() const;
        [[nodiscard]] auto AudioStreamIndexProperty() const;
        [[nodiscard]] auto PlaybackRateProperty() const;
        [[nodiscard]] auto IsLoopingProperty() const;
        [[nodiscard]] auto PlayToSourceProperty() const;
        [[nodiscard]] auto DefaultPlaybackRateProperty() const;
        [[nodiscard]] auto AspectRatioWidthProperty() const;
        [[nodiscard]] auto AspectRatioHeightProperty() const;
        [[nodiscard]] auto RealTimePlaybackProperty() const;
        [[nodiscard]] auto AudioCategoryProperty() const;
        [[nodiscard]] auto AudioDeviceTypeProperty() const;
        [[nodiscard]] auto ProtectionManagerProperty() const;
        [[nodiscard]] auto Stereo3DVideoPackingModeProperty() const;
        [[nodiscard]] auto Stereo3DVideoRenderModeProperty() const;
        [[nodiscard]] auto IsStereo3DVideoProperty() const;
        [[nodiscard]] auto ActualStereo3DVideoPackingModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElementStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaElementStatics2
    {
        [[nodiscard]] auto AreTransportControlsEnabledProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto IsFullWindowProperty() const;
        [[nodiscard]] auto PlayToPreferredSourceUriProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElementStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElement
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Media::Playback::IMediaPlaybackSource const& value) const;
        [[nodiscard]] auto TransportControls() const;
        auto TransportControls(winrt::Windows::UI::Xaml::Controls::MediaTransportControls const& value) const;
        [[nodiscard]] auto AreTransportControlsEnabled() const;
        auto AreTransportControlsEnabled(bool value) const;
        [[nodiscard]] auto PosterSource() const;
        auto PosterSource(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto AutoPlay() const;
        auto AutoPlay(bool value) const;
        [[nodiscard]] auto IsFullWindow() const;
        auto IsFullWindow(bool value) const;
        [[nodiscard]] auto MediaPlayer() const;
        auto SetMediaPlayer(winrt::Windows::Media::Playback::MediaPlayer const& mediaPlayer) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElement<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElementFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElementFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElementStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto AreTransportControlsEnabledProperty() const;
        [[nodiscard]] auto PosterSourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto AutoPlayProperty() const;
        [[nodiscard]] auto IsFullWindowProperty() const;
        [[nodiscard]] auto MediaPlayerProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElementStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenter
    {
        [[nodiscard]] auto MediaPlayer() const;
        auto MediaPlayer(winrt::Windows::Media::Playback::MediaPlayer const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto IsFullWindow() const;
        auto IsFullWindow(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterStatics
    {
        [[nodiscard]] auto MediaPlayerProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto IsFullWindowProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls
    {
        [[nodiscard]] auto IsFullWindowButtonVisible() const;
        auto IsFullWindowButtonVisible(bool value) const;
        [[nodiscard]] auto IsFullWindowEnabled() const;
        auto IsFullWindowEnabled(bool value) const;
        [[nodiscard]] auto IsZoomButtonVisible() const;
        auto IsZoomButtonVisible(bool value) const;
        [[nodiscard]] auto IsZoomEnabled() const;
        auto IsZoomEnabled(bool value) const;
        [[nodiscard]] auto IsFastForwardButtonVisible() const;
        auto IsFastForwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsFastForwardEnabled() const;
        auto IsFastForwardEnabled(bool value) const;
        [[nodiscard]] auto IsFastRewindButtonVisible() const;
        auto IsFastRewindButtonVisible(bool value) const;
        [[nodiscard]] auto IsFastRewindEnabled() const;
        auto IsFastRewindEnabled(bool value) const;
        [[nodiscard]] auto IsStopButtonVisible() const;
        auto IsStopButtonVisible(bool value) const;
        [[nodiscard]] auto IsStopEnabled() const;
        auto IsStopEnabled(bool value) const;
        [[nodiscard]] auto IsVolumeButtonVisible() const;
        auto IsVolumeButtonVisible(bool value) const;
        [[nodiscard]] auto IsVolumeEnabled() const;
        auto IsVolumeEnabled(bool value) const;
        [[nodiscard]] auto IsPlaybackRateButtonVisible() const;
        auto IsPlaybackRateButtonVisible(bool value) const;
        [[nodiscard]] auto IsPlaybackRateEnabled() const;
        auto IsPlaybackRateEnabled(bool value) const;
        [[nodiscard]] auto IsSeekBarVisible() const;
        auto IsSeekBarVisible(bool value) const;
        [[nodiscard]] auto IsSeekEnabled() const;
        auto IsSeekEnabled(bool value) const;
        [[nodiscard]] auto IsCompact() const;
        auto IsCompact(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls2
    {
        [[nodiscard]] auto IsSkipForwardButtonVisible() const;
        auto IsSkipForwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsSkipForwardEnabled() const;
        auto IsSkipForwardEnabled(bool value) const;
        [[nodiscard]] auto IsSkipBackwardButtonVisible() const;
        auto IsSkipBackwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsSkipBackwardEnabled() const;
        auto IsSkipBackwardEnabled(bool value) const;
        [[nodiscard]] auto IsNextTrackButtonVisible() const;
        auto IsNextTrackButtonVisible(bool value) const;
        [[nodiscard]] auto IsPreviousTrackButtonVisible() const;
        auto IsPreviousTrackButtonVisible(bool value) const;
        [[nodiscard]] auto FastPlayFallbackBehaviour() const;
        auto FastPlayFallbackBehaviour(winrt::Windows::UI::Xaml::Media::FastPlayFallbackBehaviour const& value) const;
        auto ThumbnailRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::MediaTransportControls, winrt::Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& handler) const;
        using ThumbnailRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>::remove_ThumbnailRequested>;
        [[nodiscard]] auto ThumbnailRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::MediaTransportControls, winrt::Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& handler) const;
        auto ThumbnailRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls3
    {
        [[nodiscard]] auto ShowAndHideAutomatically() const;
        auto ShowAndHideAutomatically(bool value) const;
        [[nodiscard]] auto IsRepeatEnabled() const;
        auto IsRepeatEnabled(bool value) const;
        [[nodiscard]] auto IsRepeatButtonVisible() const;
        auto IsRepeatButtonVisible(bool value) const;
        auto Show() const;
        auto Hide() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls4
    {
        [[nodiscard]] auto IsCompactOverlayButtonVisible() const;
        auto IsCompactOverlayButtonVisible(bool value) const;
        [[nodiscard]] auto IsCompactOverlayEnabled() const;
        auto IsCompactOverlayEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelper
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelper<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelperStatics
    {
        [[nodiscard]] auto DropoutOrderProperty() const;
        auto GetDropoutOrder(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetDropoutOrder(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IReference<int32_t> const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelperStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics
    {
        [[nodiscard]] auto IsFullWindowButtonVisibleProperty() const;
        [[nodiscard]] auto IsFullWindowEnabledProperty() const;
        [[nodiscard]] auto IsZoomButtonVisibleProperty() const;
        [[nodiscard]] auto IsZoomEnabledProperty() const;
        [[nodiscard]] auto IsFastForwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsFastForwardEnabledProperty() const;
        [[nodiscard]] auto IsFastRewindButtonVisibleProperty() const;
        [[nodiscard]] auto IsFastRewindEnabledProperty() const;
        [[nodiscard]] auto IsStopButtonVisibleProperty() const;
        [[nodiscard]] auto IsStopEnabledProperty() const;
        [[nodiscard]] auto IsVolumeButtonVisibleProperty() const;
        [[nodiscard]] auto IsVolumeEnabledProperty() const;
        [[nodiscard]] auto IsPlaybackRateButtonVisibleProperty() const;
        [[nodiscard]] auto IsPlaybackRateEnabledProperty() const;
        [[nodiscard]] auto IsSeekBarVisibleProperty() const;
        [[nodiscard]] auto IsSeekEnabledProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics2
    {
        [[nodiscard]] auto IsSkipForwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsSkipForwardEnabledProperty() const;
        [[nodiscard]] auto IsSkipBackwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsSkipBackwardEnabledProperty() const;
        [[nodiscard]] auto IsNextTrackButtonVisibleProperty() const;
        [[nodiscard]] auto IsPreviousTrackButtonVisibleProperty() const;
        [[nodiscard]] auto FastPlayFallbackBehaviourProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics3
    {
        [[nodiscard]] auto ShowAndHideAutomaticallyProperty() const;
        [[nodiscard]] auto IsRepeatEnabledProperty() const;
        [[nodiscard]] auto IsRepeatButtonVisibleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics4
    {
        [[nodiscard]] auto IsCompactOverlayButtonVisibleProperty() const;
        [[nodiscard]] auto IsCompactOverlayEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBar
    {
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBar>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBar<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarItem
    {
        [[nodiscard]] auto Title() const;
        auto Title(param::hstring const& value) const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarItemFlyout
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarItemFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarItemFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarItemFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarItemStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto ItemsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuBarStatics
    {
        [[nodiscard]] auto ItemsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuBarStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuBarStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyout
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto MenuFlyoutPresenterStyle() const;
        auto MenuFlyoutPresenterStyle(winrt::Windows::UI::Xaml::Style const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyout2
    {
        auto ShowAt(winrt::Windows::UI::Xaml::UIElement const& targetElement, winrt::Windows::Foundation::Point const& point) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyout2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        auto Click(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using Click_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>::remove_Click>;
        [[nodiscard]] auto Click(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem2
    {
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem3
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBase
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBase<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics2
    {
        [[nodiscard]] auto IconProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics3
    {
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter2
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter3
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterStatics3
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparator
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparator<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutStatics
    {
        [[nodiscard]] auto MenuFlyoutPresenterStyleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem2
    {
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics
    {
        [[nodiscard]] auto TextProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics2
    {
        [[nodiscard]] auto IconProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigate
    {
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigate>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigate<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationView
    {
        [[nodiscard]] auto IsPaneOpen() const;
        auto IsPaneOpen(bool value) const;
        [[nodiscard]] auto CompactModeThresholdWidth() const;
        auto CompactModeThresholdWidth(double value) const;
        [[nodiscard]] auto ExpandedModeThresholdWidth() const;
        auto ExpandedModeThresholdWidth(double value) const;
        [[nodiscard]] auto PaneFooter() const;
        auto PaneFooter(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto DisplayMode() const;
        [[nodiscard]] auto IsSettingsVisible() const;
        auto IsSettingsVisible(bool value) const;
        [[nodiscard]] auto IsPaneToggleButtonVisible() const;
        auto IsPaneToggleButtonVisible(bool value) const;
        [[nodiscard]] auto AlwaysShowHeader() const;
        auto AlwaysShowHeader(bool value) const;
        [[nodiscard]] auto CompactPaneLength() const;
        auto CompactPaneLength(double value) const;
        [[nodiscard]] auto OpenPaneLength() const;
        auto OpenPaneLength(double value) const;
        [[nodiscard]] auto PaneToggleButtonStyle() const;
        auto PaneToggleButtonStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto MenuItems() const;
        [[nodiscard]] auto MenuItemsSource() const;
        auto MenuItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SettingsItem() const;
        [[nodiscard]] auto AutoSuggestBox() const;
        auto AutoSuggestBox(winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& value) const;
        [[nodiscard]] auto MenuItemTemplate() const;
        auto MenuItemTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto MenuItemTemplateSelector() const;
        auto MenuItemTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto MenuItemContainerStyle() const;
        auto MenuItemContainerStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto MenuItemContainerStyleSelector() const;
        auto MenuItemContainerStyleSelector(winrt::Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        auto MenuItemFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromMenuItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ItemInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView>::remove_ItemInvoked>;
        [[nodiscard]] auto ItemInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        auto ItemInvoked(winrt::event_token const& token) const noexcept;
        auto DisplayModeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        using DisplayModeChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView>::remove_DisplayModeChanged>;
        [[nodiscard]] auto DisplayModeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        auto DisplayModeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationView2
    {
        [[nodiscard]] auto IsBackButtonVisible() const;
        auto IsBackButtonVisible(winrt::Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const;
        [[nodiscard]] auto IsBackEnabled() const;
        auto IsBackEnabled(bool value) const;
        [[nodiscard]] auto PaneTitle() const;
        auto PaneTitle(param::hstring const& value) const;
        auto BackRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        using BackRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView2>::remove_BackRequested>;
        [[nodiscard]] auto BackRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        auto BackRequested(winrt::event_token const& token) const noexcept;
        auto PaneClosed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneClosed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView2>::remove_PaneClosed>;
        [[nodiscard]] auto PaneClosed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneClosed(winrt::event_token const& token) const noexcept;
        auto PaneClosing(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        using PaneClosing_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView2>::remove_PaneClosing>;
        [[nodiscard]] auto PaneClosing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        auto PaneClosing(winrt::event_token const& token) const noexcept;
        auto PaneOpened(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView2>::remove_PaneOpened>;
        [[nodiscard]] auto PaneOpened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpened(winrt::event_token const& token) const noexcept;
        auto PaneOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::INavigationView2>::remove_PaneOpening>;
        [[nodiscard]] auto PaneOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpening(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationView3
    {
        [[nodiscard]] auto PaneDisplayMode() const;
        auto PaneDisplayMode(winrt::Windows::UI::Xaml::Controls::NavigationViewPaneDisplayMode const& value) const;
        [[nodiscard]] auto PaneHeader() const;
        auto PaneHeader(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto PaneCustomContent() const;
        auto PaneCustomContent(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ContentOverlay() const;
        auto ContentOverlay(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IsPaneVisible() const;
        auto IsPaneVisible(bool value) const;
        [[nodiscard]] auto SelectionFollowsFocus() const;
        auto SelectionFollowsFocus(winrt::Windows::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto ShoulderNavigationEnabled() const;
        auto ShoulderNavigationEnabled(winrt::Windows::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const& value) const;
        [[nodiscard]] auto OverflowLabelMode() const;
        auto OverflowLabelMode(winrt::Windows::UI::Xaml::Controls::NavigationViewOverflowLabelMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationView3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationView3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs
    {
        [[nodiscard]] auto DisplayMode() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItem
    {
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto CompactPaneLength() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItem2
    {
        [[nodiscard]] auto SelectsOnInvoked() const;
        auto SelectsOnInvoked(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItem2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItem2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemBase
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBase>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemBase<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemBaseFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemBaseFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemHeader
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemHeader<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemHeaderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs
    {
        [[nodiscard]] auto InvokedItem() const;
        [[nodiscard]] auto IsSettingsInvoked() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs2
    {
        [[nodiscard]] auto InvokedItemContainer() const;
        [[nodiscard]] auto RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparator
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparator<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics
    {
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics2
    {
        [[nodiscard]] auto SelectsOnInvokedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewItemStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewList
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewList>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewList<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewListFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewListFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewListFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs
    {
        [[nodiscard]] auto SelectedItem() const;
        [[nodiscard]] auto IsSettingsSelected() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs2
    {
        [[nodiscard]] auto SelectedItemContainer() const;
        [[nodiscard]] auto RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewStatics
    {
        [[nodiscard]] auto IsPaneOpenProperty() const;
        [[nodiscard]] auto CompactModeThresholdWidthProperty() const;
        [[nodiscard]] auto ExpandedModeThresholdWidthProperty() const;
        [[nodiscard]] auto PaneFooterProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto IsSettingsVisibleProperty() const;
        [[nodiscard]] auto IsPaneToggleButtonVisibleProperty() const;
        [[nodiscard]] auto AlwaysShowHeaderProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
        [[nodiscard]] auto OpenPaneLengthProperty() const;
        [[nodiscard]] auto PaneToggleButtonStyleProperty() const;
        [[nodiscard]] auto MenuItemsProperty() const;
        [[nodiscard]] auto MenuItemsSourceProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto SettingsItemProperty() const;
        [[nodiscard]] auto AutoSuggestBoxProperty() const;
        [[nodiscard]] auto MenuItemTemplateProperty() const;
        [[nodiscard]] auto MenuItemTemplateSelectorProperty() const;
        [[nodiscard]] auto MenuItemContainerStyleProperty() const;
        [[nodiscard]] auto MenuItemContainerStyleSelectorProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewStatics2
    {
        [[nodiscard]] auto IsBackButtonVisibleProperty() const;
        [[nodiscard]] auto IsBackEnabledProperty() const;
        [[nodiscard]] auto PaneTitleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewStatics3
    {
        [[nodiscard]] auto PaneDisplayModeProperty() const;
        [[nodiscard]] auto PaneHeaderProperty() const;
        [[nodiscard]] auto PaneCustomContentProperty() const;
        [[nodiscard]] auto ContentOverlayProperty() const;
        [[nodiscard]] auto IsPaneVisibleProperty() const;
        [[nodiscard]] auto SelectionFollowsFocusProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto ShoulderNavigationEnabledProperty() const;
        [[nodiscard]] auto OverflowLabelModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettings
    {
        [[nodiscard]] auto TopPadding() const;
        [[nodiscard]] auto OverflowButtonVisibility() const;
        [[nodiscard]] auto PaneToggleButtonVisibility() const;
        [[nodiscard]] auto BackButtonVisibility() const;
        [[nodiscard]] auto TopPaneVisibility() const;
        [[nodiscard]] auto LeftPaneVisibility() const;
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics
    {
        [[nodiscard]] auto TopPaddingProperty() const;
        [[nodiscard]] auto OverflowButtonVisibilityProperty() const;
        [[nodiscard]] auto PaneToggleButtonVisibilityProperty() const;
        [[nodiscard]] auto BackButtonVisibilityProperty() const;
        [[nodiscard]] auto TopPaneVisibilityProperty() const;
        [[nodiscard]] auto LeftPaneVisibilityProperty() const;
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INotifyEventArgs
    {
        [[nodiscard]] auto Value() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INotifyEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_INotifyEventArgs2
    {
        [[nodiscard]] auto CallingUri() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_INotifyEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPage
    {
        [[nodiscard]] auto Frame() const;
        [[nodiscard]] auto NavigationCacheMode() const;
        auto NavigationCacheMode(winrt::Windows::UI::Xaml::Navigation::NavigationCacheMode const& value) const;
        [[nodiscard]] auto TopAppBar() const;
        auto TopAppBar(winrt::Windows::UI::Xaml::Controls::AppBar const& value) const;
        [[nodiscard]] auto BottomAppBar() const;
        auto BottomAppBar(winrt::Windows::UI::Xaml::Controls::AppBar const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPage>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPage<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPageFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPageFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPageOverrides
    {
        auto OnNavigatedFrom(winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatedTo(winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatingFrom(winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPageOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPageStatics
    {
        [[nodiscard]] auto FrameProperty() const;
        [[nodiscard]] auto TopAppBarProperty() const;
        [[nodiscard]] auto BottomAppBarProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPageStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPanel
    {
        [[nodiscard]] auto Children() const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto IsItemsHost() const;
        [[nodiscard]] auto ChildrenTransitions() const;
        auto ChildrenTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPanel2
    {
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Windows::UI::Xaml::BrushTransition const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPanel2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanel2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPanelStatics
    {
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto IsItemsHostProperty() const;
        [[nodiscard]] auto ChildrenTransitionsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IParallaxView
    {
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto HorizontalShift() const;
        auto HorizontalShift(double value) const;
        [[nodiscard]] auto HorizontalSourceEndOffset() const;
        auto HorizontalSourceEndOffset(double value) const;
        [[nodiscard]] auto HorizontalSourceOffsetKind() const;
        auto HorizontalSourceOffsetKind(winrt::Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] auto HorizontalSourceStartOffset() const;
        auto HorizontalSourceStartOffset(double value) const;
        [[nodiscard]] auto IsHorizontalShiftClamped() const;
        auto IsHorizontalShiftClamped(bool value) const;
        [[nodiscard]] auto IsVerticalShiftClamped() const;
        auto IsVerticalShiftClamped(bool value) const;
        [[nodiscard]] auto MaxHorizontalShiftRatio() const;
        auto MaxHorizontalShiftRatio(double value) const;
        [[nodiscard]] auto MaxVerticalShiftRatio() const;
        auto MaxVerticalShiftRatio(double value) const;
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto VerticalShift() const;
        auto VerticalShift(double value) const;
        [[nodiscard]] auto VerticalSourceEndOffset() const;
        auto VerticalSourceEndOffset(double value) const;
        [[nodiscard]] auto VerticalSourceOffsetKind() const;
        auto VerticalSourceOffsetKind(winrt::Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] auto VerticalSourceStartOffset() const;
        auto VerticalSourceStartOffset(double value) const;
        auto RefreshAutomaticHorizontalOffsets() const;
        auto RefreshAutomaticVerticalOffsets() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IParallaxView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IParallaxViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IParallaxViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IParallaxViewStatics
    {
        [[nodiscard]] auto ChildProperty() const;
        [[nodiscard]] auto HorizontalSourceEndOffsetProperty() const;
        [[nodiscard]] auto HorizontalSourceOffsetKindProperty() const;
        [[nodiscard]] auto HorizontalSourceStartOffsetProperty() const;
        [[nodiscard]] auto MaxHorizontalShiftRatioProperty() const;
        [[nodiscard]] auto HorizontalShiftProperty() const;
        [[nodiscard]] auto IsHorizontalShiftClampedProperty() const;
        [[nodiscard]] auto IsVerticalShiftClampedProperty() const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto VerticalSourceEndOffsetProperty() const;
        [[nodiscard]] auto VerticalSourceOffsetKindProperty() const;
        [[nodiscard]] auto VerticalSourceStartOffsetProperty() const;
        [[nodiscard]] auto MaxVerticalShiftRatioProperty() const;
        [[nodiscard]] auto VerticalShiftProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IParallaxViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBox
    {
        [[nodiscard]] auto Password() const;
        auto Password(param::hstring const& value) const;
        [[nodiscard]] auto PasswordChar() const;
        auto PasswordChar(param::hstring const& value) const;
        [[nodiscard]] auto IsPasswordRevealButtonEnabled() const;
        auto IsPasswordRevealButtonEnabled(bool value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
        auto PasswordChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using PasswordChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPasswordBox>::remove_PasswordChanged>;
        [[nodiscard]] auto PasswordChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto PasswordChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPasswordBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBox2
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        auto Paste(winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPasswordBox2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBox3
    {
        [[nodiscard]] auto PasswordRevealMode() const;
        auto PasswordRevealMode(winrt::Windows::UI::Xaml::Controls::PasswordRevealMode const& value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Windows::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Windows::UI::Xaml::Input::InputScope const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBox3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBox4
    {
        auto PasswordChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::PasswordBox, winrt::Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& handler) const;
        using PasswordChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPasswordBox4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPasswordBox4>::remove_PasswordChanging>;
        [[nodiscard]] auto PasswordChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::PasswordBox, winrt::Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& handler) const;
        auto PasswordChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBox4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBox5
    {
        [[nodiscard]] auto CanPasteClipboardContent() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto PasteFromClipboard() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBox5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics
    {
        [[nodiscard]] auto PasswordProperty() const;
        [[nodiscard]] auto PasswordCharProperty() const;
        [[nodiscard]] auto IsPasswordRevealButtonEnabledProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics2
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics3
    {
        [[nodiscard]] auto PasswordRevealModeProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics5
    {
        [[nodiscard]] auto CanPasteClipboardContentProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIcon
    {
        [[nodiscard]] auto Data() const;
        auto Data(winrt::Windows::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIcon>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIcon<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIconFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIconSource
    {
        [[nodiscard]] auto Data() const;
        auto Data(winrt::Windows::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIconSource>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSource<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIconSourceStatics
    {
        [[nodiscard]] auto DataProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPathIconStatics
    {
        [[nodiscard]] auto DataProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPathIconStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPersonPicture
    {
        [[nodiscard]] auto BadgeNumber() const;
        auto BadgeNumber(int32_t value) const;
        [[nodiscard]] auto BadgeGlyph() const;
        auto BadgeGlyph(param::hstring const& value) const;
        [[nodiscard]] auto BadgeImageSource() const;
        auto BadgeImageSource(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto BadgeText() const;
        auto BadgeText(param::hstring const& value) const;
        [[nodiscard]] auto IsGroup() const;
        auto IsGroup(bool value) const;
        [[nodiscard]] auto Contact() const;
        auto Contact(winrt::Windows::ApplicationModel::Contacts::Contact const& value) const;
        [[nodiscard]] auto DisplayName() const;
        auto DisplayName(param::hstring const& value) const;
        [[nodiscard]] auto Initials() const;
        auto Initials(param::hstring const& value) const;
        [[nodiscard]] auto PreferSmallImage() const;
        auto PreferSmallImage(bool value) const;
        [[nodiscard]] auto ProfilePicture() const;
        auto ProfilePicture(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPersonPicture>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPicture<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPersonPictureFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPersonPictureFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPictureFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPersonPictureStatics
    {
        [[nodiscard]] auto BadgeNumberProperty() const;
        [[nodiscard]] auto BadgeGlyphProperty() const;
        [[nodiscard]] auto BadgeImageSourceProperty() const;
        [[nodiscard]] auto BadgeTextProperty() const;
        [[nodiscard]] auto IsGroupProperty() const;
        [[nodiscard]] auto ContactProperty() const;
        [[nodiscard]] auto DisplayNameProperty() const;
        [[nodiscard]] auto InitialsProperty() const;
        [[nodiscard]] auto PreferSmallImageProperty() const;
        [[nodiscard]] auto ProfilePictureProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPersonPictureStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPictureStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPickerConfirmedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerConfirmedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPickerFlyout
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ConfirmationButtonsVisible() const;
        auto ConfirmationButtonsVisible(bool value) const;
        auto Confirmed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::PickerFlyout, winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> const& handler) const;
        using Confirmed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPickerFlyout, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>::remove_Confirmed>;
        [[nodiscard]] auto Confirmed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::PickerFlyout, winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> const& handler) const;
        auto Confirmed(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Windows::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPickerFlyoutStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ConfirmationButtonsVisibleProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivot
    {
        [[nodiscard]] auto Title() const;
        auto Title(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TitleTemplate() const;
        auto TitleTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto IsLocked() const;
        auto IsLocked(bool value) const;
        auto SelectionChanged(winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPivot>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto PivotItemLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemLoading_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPivot>::remove_PivotItemLoading>;
        [[nodiscard]] auto PivotItemLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemLoading(winrt::event_token const& token) const noexcept;
        auto PivotItemLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemLoaded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPivot>::remove_PivotItemLoaded>;
        [[nodiscard]] auto PivotItemLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemLoaded(winrt::event_token const& token) const noexcept;
        auto PivotItemUnloading(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemUnloading_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPivot>::remove_PivotItemUnloading>;
        [[nodiscard]] auto PivotItemUnloading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemUnloading(winrt::event_token const& token) const noexcept;
        auto PivotItemUnloaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemUnloaded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IPivot>::remove_PivotItemUnloaded>;
        [[nodiscard]] auto PivotItemUnloaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::Pivot, winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemUnloaded(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivot>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivot2
    {
        [[nodiscard]] auto LeftHeader() const;
        auto LeftHeader(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto LeftHeaderTemplate() const;
        auto LeftHeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto RightHeader() const;
        auto RightHeader(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto RightHeaderTemplate() const;
        auto RightHeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivot2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivot3
    {
        [[nodiscard]] auto HeaderFocusVisualPlacement() const;
        auto HeaderFocusVisualPlacement(winrt::Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement const& value) const;
        [[nodiscard]] auto IsHeaderItemsCarouselEnabled() const;
        auto IsHeaderItemsCarouselEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivot3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotItem
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotItemEventArgs
    {
        [[nodiscard]] auto Item() const;
        auto Item(winrt::Windows::UI::Xaml::Controls::PivotItem const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotItemStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto TitleTemplateProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto IsLockedProperty() const;
        [[nodiscard]] auto SlideInAnimationGroupProperty() const;
        auto GetSlideInAnimationGroup(winrt::Windows::UI::Xaml::FrameworkElement const& element) const;
        auto SetSlideInAnimationGroup(winrt::Windows::UI::Xaml::FrameworkElement const& element, winrt::Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotStatics2
    {
        [[nodiscard]] auto LeftHeaderProperty() const;
        [[nodiscard]] auto LeftHeaderTemplateProperty() const;
        [[nodiscard]] auto RightHeaderProperty() const;
        [[nodiscard]] auto RightHeaderTemplateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IPivotStatics3
    {
        [[nodiscard]] auto HeaderFocusVisualPlacementProperty() const;
        [[nodiscard]] auto IsHeaderItemsCarouselEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IPivotStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IProgressBar
    {
        [[nodiscard]] auto IsIndeterminate() const;
        auto IsIndeterminate(bool value) const;
        [[nodiscard]] auto ShowError() const;
        auto ShowError(bool value) const;
        [[nodiscard]] auto ShowPaused() const;
        auto ShowPaused(bool value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IProgressBar>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBar<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IProgressBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBarFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IProgressBarStatics
    {
        [[nodiscard]] auto IsIndeterminateProperty() const;
        [[nodiscard]] auto ShowErrorProperty() const;
        [[nodiscard]] auto ShowPausedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBarStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IProgressRing
    {
        [[nodiscard]] auto IsActive() const;
        auto IsActive(bool value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IProgressRing>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressRing<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IProgressRingStatics
    {
        [[nodiscard]] auto IsActiveProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressRingStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRadioButton
    {
        [[nodiscard]] auto GroupName() const;
        auto GroupName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRadioButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRadioButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRadioButtonStatics
    {
        [[nodiscard]] auto GroupNameProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingControl
    {
        [[nodiscard]] auto Caption() const;
        auto Caption(param::hstring const& value) const;
        [[nodiscard]] auto InitialSetValue() const;
        auto InitialSetValue(int32_t value) const;
        [[nodiscard]] auto IsClearEnabled() const;
        auto IsClearEnabled(bool value) const;
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto MaxRating() const;
        auto MaxRating(int32_t value) const;
        [[nodiscard]] auto PlaceholderValue() const;
        auto PlaceholderValue(double value) const;
        [[nodiscard]] auto ItemInfo() const;
        auto ItemInfo(winrt::Windows::UI::Xaml::Controls::RatingItemInfo const& value) const;
        [[nodiscard]] auto Value() const;
        auto Value(double value) const;
        auto ValueChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RatingControl, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRatingControl, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRatingControl>::remove_ValueChanged>;
        [[nodiscard]] auto ValueChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RatingControl, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingControlStatics
    {
        [[nodiscard]] auto CaptionProperty() const;
        [[nodiscard]] auto InitialSetValueProperty() const;
        [[nodiscard]] auto IsClearEnabledProperty() const;
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto MaxRatingProperty() const;
        [[nodiscard]] auto PlaceholderValueProperty() const;
        [[nodiscard]] auto ItemInfoProperty() const;
        [[nodiscard]] auto ValueProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfo
    {
        [[nodiscard]] auto DisabledGlyph() const;
        auto DisabledGlyph(param::hstring const& value) const;
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto PointerOverGlyph() const;
        auto PointerOverGlyph(param::hstring const& value) const;
        [[nodiscard]] auto PointerOverPlaceholderGlyph() const;
        auto PointerOverPlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] auto PlaceholderGlyph() const;
        auto PlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] auto UnsetGlyph() const;
        auto UnsetGlyph(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfo<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoStatics
    {
        [[nodiscard]] auto DisabledGlyphProperty() const;
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto PlaceholderGlyphProperty() const;
        [[nodiscard]] auto PointerOverGlyphProperty() const;
        [[nodiscard]] auto PointerOverPlaceholderGlyphProperty() const;
        [[nodiscard]] auto UnsetGlyphProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfo
    {
        [[nodiscard]] auto DisabledImage() const;
        auto DisabledImage(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Image() const;
        auto Image(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PlaceholderImage() const;
        auto PlaceholderImage(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PointerOverImage() const;
        auto PointerOverImage(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PointerOverPlaceholderImage() const;
        auto PointerOverPlaceholderImage(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto UnsetImage() const;
        auto UnsetImage(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfo<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoStatics
    {
        [[nodiscard]] auto DisabledImageProperty() const;
        [[nodiscard]] auto ImageProperty() const;
        [[nodiscard]] auto PlaceholderImageProperty() const;
        [[nodiscard]] auto PointerOverImageProperty() const;
        [[nodiscard]] auto PointerOverPlaceholderImageProperty() const;
        [[nodiscard]] auto UnsetImageProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemInfo
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemInfo>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemInfo<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRatingItemInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemInfoFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshContainer
    {
        [[nodiscard]] auto Visualizer() const;
        auto Visualizer(winrt::Windows::UI::Xaml::Controls::RefreshVisualizer const& value) const;
        [[nodiscard]] auto PullDirection() const;
        auto PullDirection(winrt::Windows::UI::Xaml::Controls::RefreshPullDirection const& value) const;
        auto RefreshRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshContainer, winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRefreshContainer, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRefreshContainer>::remove_RefreshRequested>;
        [[nodiscard]] auto RefreshRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshContainer, winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        auto RefreshRequested(winrt::event_token const& token) const noexcept;
        auto RequestRefresh() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshContainer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshContainerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshContainerStatics
    {
        [[nodiscard]] auto VisualizerProperty() const;
        [[nodiscard]] auto PullDirectionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs
    {
        [[nodiscard]] auto InteractionRatio() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshRequestedEventArgs
    {
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshStateChangedEventArgs
    {
        [[nodiscard]] auto OldState() const;
        [[nodiscard]] auto NewState() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizer
    {
        auto RequestRefresh() const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const;
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto State() const;
        auto RefreshRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer, winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshRequested>;
        [[nodiscard]] auto RefreshRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer, winrt::Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        auto RefreshRequested(winrt::event_token const& token) const noexcept;
        auto RefreshStateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer, winrt::Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        using RefreshStateChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshStateChanged>;
        [[nodiscard]] auto RefreshStateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RefreshVisualizer, winrt::Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        auto RefreshStateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizerStatics
    {
        [[nodiscard]] auto InfoProviderProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto StateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRelativePanel
    {
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRelativePanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRelativePanel2
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRelativePanel2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanel2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRelativePanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRelativePanelStatics
    {
        [[nodiscard]] auto LeftOfProperty() const;
        auto GetLeftOf(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetLeftOf(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AboveProperty() const;
        auto GetAbove(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAbove(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto RightOfProperty() const;
        auto GetRightOf(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetRightOf(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto BelowProperty() const;
        auto GetBelow(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetBelow(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignHorizontalCenterWithProperty() const;
        auto GetAlignHorizontalCenterWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignHorizontalCenterWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignVerticalCenterWithProperty() const;
        auto GetAlignVerticalCenterWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignVerticalCenterWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignLeftWithProperty() const;
        auto GetAlignLeftWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignLeftWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignTopWithProperty() const;
        auto GetAlignTopWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignTopWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignRightWithProperty() const;
        auto GetAlignRightWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignRightWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignBottomWithProperty() const;
        auto GetAlignBottomWith(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignBottomWith(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignLeftWithPanelProperty() const;
        auto GetAlignLeftWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignLeftWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignTopWithPanelProperty() const;
        auto GetAlignTopWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignTopWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignRightWithPanelProperty() const;
        auto GetAlignRightWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignRightWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignBottomWithPanelProperty() const;
        auto GetAlignBottomWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignBottomWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignHorizontalCenterWithPanelProperty() const;
        auto GetAlignHorizontalCenterWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignHorizontalCenterWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignVerticalCenterWithPanelProperty() const;
        auto GetAlignVerticalCenterWithPanel(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetAlignVerticalCenterWithPanel(winrt::Windows::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRelativePanelStatics2
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanelStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox
    {
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto AcceptsReturn() const;
        auto AcceptsReturn(bool value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Windows::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto IsSpellCheckEnabled() const;
        auto IsSpellCheckEnabled(bool value) const;
        [[nodiscard]] auto IsTextPredictionEnabled() const;
        auto IsTextPredictionEnabled(bool value) const;
        [[nodiscard]] auto Document() const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Windows::UI::Xaml::Input::InputScope const& value) const;
        auto TextChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
        auto SelectionChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox2
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        auto Paste(winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox3
    {
        auto TextCompositionStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        using TextCompositionStarted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>::remove_TextCompositionStarted>;
        [[nodiscard]] auto TextCompositionStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        auto TextCompositionStarted(winrt::event_token const& token) const noexcept;
        auto TextCompositionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        using TextCompositionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>::remove_TextCompositionChanged>;
        [[nodiscard]] auto TextCompositionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        auto TextCompositionChanged(winrt::event_token const& token) const noexcept;
        auto TextCompositionEnded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        using TextCompositionEnded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>::remove_TextCompositionEnded>;
        [[nodiscard]] auto TextCompositionEnded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        auto TextCompositionEnded(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Windows::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto DesiredCandidateWindowAlignment() const;
        auto DesiredCandidateWindowAlignment(winrt::Windows::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
        auto CandidateWindowBoundsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        using CandidateWindowBoundsChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>::remove_CandidateWindowBoundsChanged>;
        [[nodiscard]] auto CandidateWindowBoundsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        auto CandidateWindowBoundsChanged(winrt::event_token const& token) const noexcept;
        auto TextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& handler) const;
        using TextChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>::remove_TextChanging>;
        [[nodiscard]] auto TextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& handler) const;
        auto TextChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox4
    {
        auto GetLinguisticAlternativesAsync() const;
        [[nodiscard]] auto ClipboardCopyFormat() const;
        auto ClipboardCopyFormat(winrt::Windows::UI::Xaml::Controls::RichEditClipboardFormat const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox5
    {
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocused() const;
        auto SelectionHighlightColorWhenNotFocused(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox6
    {
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto CharacterCasing() const;
        auto CharacterCasing(winrt::Windows::UI::Xaml::Controls::CharacterCasing const& value) const;
        [[nodiscard]] auto DisabledFormattingAccelerators() const;
        auto DisabledFormattingAccelerators(winrt::Windows::UI::Xaml::Controls::DisabledFormattingAccelerators const& value) const;
        auto CopyingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        using CopyingToClipboard_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>::remove_CopyingToClipboard>;
        [[nodiscard]] auto CopyingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        auto CopyingToClipboard(winrt::event_token const& token) const noexcept;
        auto CuttingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        using CuttingToClipboard_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>::remove_CuttingToClipboard>;
        [[nodiscard]] auto CuttingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        auto CuttingToClipboard(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox7
    {
        [[nodiscard]] auto ContentLinkForegroundColor() const;
        auto ContentLinkForegroundColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto ContentLinkBackgroundColor() const;
        auto ContentLinkBackgroundColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto ContentLinkProviders() const;
        auto ContentLinkProviders(winrt::Windows::UI::Xaml::Documents::ContentLinkProviderCollection const& value) const;
        [[nodiscard]] auto HandwritingView() const;
        auto HandwritingView(winrt::Windows::UI::Xaml::Controls::HandwritingView const& value) const;
        [[nodiscard]] auto IsHandwritingViewEnabled() const;
        auto IsHandwritingViewEnabled(bool value) const;
        auto ContentLinkChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs> const& handler) const;
        using ContentLinkChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox7, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>::remove_ContentLinkChanged>;
        [[nodiscard]] auto ContentLinkChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs> const& handler) const;
        auto ContentLinkChanged(winrt::event_token const& token) const noexcept;
        auto ContentLinkInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Documents::ContentLinkInvokedEventArgs> const& handler) const;
        using ContentLinkInvoked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox7, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>::remove_ContentLinkInvoked>;
        [[nodiscard]] auto ContentLinkInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Documents::ContentLinkInvokedEventArgs> const& handler) const;
        auto ContentLinkInvoked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBox8
    {
        [[nodiscard]] auto TextDocument() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto ProofingMenuFlyout() const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto SelectionChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> const& handler) const;
        using SelectionChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichEditBox8, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichEditBox8>::remove_SelectionChanging>;
        [[nodiscard]] auto SelectionChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichEditBox, winrt::Windows::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> const& handler) const;
        auto SelectionChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBox8>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox8<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxSelectionChangingEventArgs
    {
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionLength() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxSelectionChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics
    {
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto AcceptsReturnProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto IsSpellCheckEnabledProperty() const;
        [[nodiscard]] auto IsTextPredictionEnabledProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics2
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics3
    {
        [[nodiscard]] auto DesiredCandidateWindowAlignmentProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics4
    {
        [[nodiscard]] auto ClipboardCopyFormatProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics5
    {
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocusedProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics6
    {
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto CharacterCasingProperty() const;
        [[nodiscard]] auto DisabledFormattingAcceleratorsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics7
    {
        [[nodiscard]] auto ContentLinkForegroundColorProperty() const;
        [[nodiscard]] auto ContentLinkBackgroundColorProperty() const;
        [[nodiscard]] auto ContentLinkProvidersProperty() const;
        [[nodiscard]] auto HandwritingViewProperty() const;
        [[nodiscard]] auto IsHandwritingViewEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics8
    {
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto ProofingMenuFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics8>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics8<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs2
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock
    {
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Windows::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto TextTrimming() const;
        auto TextTrimming(winrt::Windows::UI::Xaml::TextTrimming const& value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto Blocks() const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Windows::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto OverflowContentTarget() const;
        auto OverflowContentTarget(winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
        [[nodiscard]] auto IsTextSelectionEnabled() const;
        auto IsTextSelectionEnabled(bool value) const;
        [[nodiscard]] auto HasOverflowContent() const;
        [[nodiscard]] auto SelectedText() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        auto SelectionChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichTextBlock, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichTextBlock, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
        auto Select(winrt::Windows::UI::Xaml::Documents::TextPointer const& start, winrt::Windows::UI::Xaml::Documents::TextPointer const& end) const;
        auto GetPositionFromPoint(winrt::Windows::Foundation::Point const& point) const;
        auto Focus(winrt::Windows::UI::Xaml::FocusState const& value) const;
        [[nodiscard]] auto TextIndent() const;
        auto TextIndent(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock2
    {
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Windows::UI::Xaml::TextLineBounds const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Windows::UI::Xaml::TextReadingOrder const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock4
    {
        [[nodiscard]] auto TextDecorations() const;
        auto TextDecorations(winrt::Windows::UI::Text::TextDecorations const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock5
    {
        [[nodiscard]] auto IsTextTrimmed() const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextHighlighters() const;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichTextBlock, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichTextBlock, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlock6
    {
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        auto CopySelectionToClipboard() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlock6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow
    {
        [[nodiscard]] auto OverflowContentTarget() const;
        auto OverflowContentTarget(winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto ContentSource() const;
        [[nodiscard]] auto HasOverflowContent() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        auto GetPositionFromPoint(winrt::Windows::Foundation::Point const& point) const;
        auto Focus(winrt::Windows::UI::Xaml::FocusState const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow2
    {
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow3
    {
        [[nodiscard]] auto IsTextTrimmed() const;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics
    {
        [[nodiscard]] auto OverflowContentTargetProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto HasOverflowContentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics2
    {
        [[nodiscard]] auto MaxLinesProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics3
    {
        [[nodiscard]] auto IsTextTrimmedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics
    {
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto TextTrimmingProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto OverflowContentTargetProperty() const;
        [[nodiscard]] auto IsTextSelectionEnabledProperty() const;
        [[nodiscard]] auto HasOverflowContentProperty() const;
        [[nodiscard]] auto SelectedTextProperty() const;
        [[nodiscard]] auto TextIndentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics2
    {
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics4
    {
        [[nodiscard]] auto TextDecorationsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics5
    {
        [[nodiscard]] auto IsTextTrimmedProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics6
    {
        [[nodiscard]] auto SelectionFlyoutProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRowDefinition
    {
        [[nodiscard]] auto Height() const;
        auto Height(winrt::Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto MaxHeight() const;
        auto MaxHeight(double value) const;
        [[nodiscard]] auto MinHeight() const;
        auto MinHeight(double value) const;
        [[nodiscard]] auto ActualHeight() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRowDefinition>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRowDefinition<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IRowDefinitionStatics
    {
        [[nodiscard]] auto HeightProperty() const;
        [[nodiscard]] auto MaxHeightProperty() const;
        [[nodiscard]] auto MinHeightProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRowDefinitionStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollAnchorProvider
    {
        [[nodiscard]] auto CurrentAnchor() const;
        auto RegisterAnchorCandidate(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto UnregisterAnchorCandidate(winrt::Windows::UI::Xaml::UIElement const& element) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollAnchorProvider>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollAnchorProvider<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollContentPresenter
    {
        [[nodiscard]] auto CanVerticallyScroll() const;
        auto CanVerticallyScroll(bool value) const;
        [[nodiscard]] auto CanHorizontallyScroll() const;
        auto CanHorizontallyScroll(bool value) const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ScrollOwner() const;
        auto ScrollOwner(winrt::Windows::Foundation::IInspectable const& value) const;
        auto LineUp() const;
        auto LineDown() const;
        auto LineLeft() const;
        auto LineRight() const;
        auto PageUp() const;
        auto PageDown() const;
        auto PageLeft() const;
        auto PageRight() const;
        auto MouseWheelUp() const;
        auto MouseWheelDown() const;
        auto MouseWheelLeft() const;
        auto MouseWheelRight() const;
        auto SetHorizontalOffset(double offset) const;
        auto SetVerticalOffset(double offset) const;
        auto MakeVisible(winrt::Windows::UI::Xaml::UIElement const& visual, winrt::Windows::Foundation::Rect const& rectangle) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollContentPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollContentPresenter2
    {
        [[nodiscard]] auto CanContentRenderOutsideBounds() const;
        auto CanContentRenderOutsideBounds(bool value) const;
        [[nodiscard]] auto SizesContentToTemplatedParent() const;
        auto SizesContentToTemplatedParent(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollContentPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollContentPresenterStatics2
    {
        [[nodiscard]] auto CanContentRenderOutsideBoundsProperty() const;
        [[nodiscard]] auto SizesContentToTemplatedParentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollContentPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewer
    {
        [[nodiscard]] auto HorizontalScrollBarVisibility() const;
        auto HorizontalScrollBarVisibility(winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
        [[nodiscard]] auto VerticalScrollBarVisibility() const;
        auto VerticalScrollBarVisibility(winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
        [[nodiscard]] auto IsHorizontalRailEnabled() const;
        auto IsHorizontalRailEnabled(bool value) const;
        [[nodiscard]] auto IsVerticalRailEnabled() const;
        auto IsVerticalRailEnabled(bool value) const;
        [[nodiscard]] auto IsHorizontalScrollChainingEnabled() const;
        auto IsHorizontalScrollChainingEnabled(bool value) const;
        [[nodiscard]] auto IsVerticalScrollChainingEnabled() const;
        auto IsVerticalScrollChainingEnabled(bool value) const;
        [[nodiscard]] auto IsZoomChainingEnabled() const;
        auto IsZoomChainingEnabled(bool value) const;
        [[nodiscard]] auto IsScrollInertiaEnabled() const;
        auto IsScrollInertiaEnabled(bool value) const;
        [[nodiscard]] auto IsZoomInertiaEnabled() const;
        auto IsZoomInertiaEnabled(bool value) const;
        [[nodiscard]] auto HorizontalScrollMode() const;
        auto HorizontalScrollMode(winrt::Windows::UI::Xaml::Controls::ScrollMode const& value) const;
        [[nodiscard]] auto VerticalScrollMode() const;
        auto VerticalScrollMode(winrt::Windows::UI::Xaml::Controls::ScrollMode const& value) const;
        [[nodiscard]] auto ZoomMode() const;
        auto ZoomMode(winrt::Windows::UI::Xaml::Controls::ZoomMode const& value) const;
        [[nodiscard]] auto HorizontalSnapPointsAlignment() const;
        auto HorizontalSnapPointsAlignment(winrt::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
        [[nodiscard]] auto VerticalSnapPointsAlignment() const;
        auto VerticalSnapPointsAlignment(winrt::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
        [[nodiscard]] auto HorizontalSnapPointsType() const;
        auto HorizontalSnapPointsType(winrt::Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto VerticalSnapPointsType() const;
        auto VerticalSnapPointsType(winrt::Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto ZoomSnapPointsType() const;
        auto ZoomSnapPointsType(winrt::Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ScrollableWidth() const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibility() const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto ScrollableHeight() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibility() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto MinZoomFactor() const;
        auto MinZoomFactor(float value) const;
        [[nodiscard]] auto MaxZoomFactor() const;
        auto MaxZoomFactor(float value) const;
        [[nodiscard]] auto ZoomFactor() const;
        [[nodiscard]] auto ZoomSnapPoints() const;
        auto ViewChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& handler) const;
        using ViewChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IScrollViewer>::remove_ViewChanged>;
        [[nodiscard]] auto ViewChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& handler) const;
        auto ViewChanged(winrt::event_token const& token) const noexcept;
        auto ScrollToHorizontalOffset(double offset) const;
        auto ScrollToVerticalOffset(double offset) const;
        auto ZoomToFactor(float factor) const;
        auto InvalidateScrollInfo() const;
        [[nodiscard]] auto IsDeferredScrollingEnabled() const;
        auto IsDeferredScrollingEnabled(bool value) const;
        [[nodiscard]] auto BringIntoViewOnFocusChange() const;
        auto BringIntoViewOnFocusChange(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewer2
    {
        [[nodiscard]] auto TopLeftHeader() const;
        auto TopLeftHeader(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto LeftHeader() const;
        auto LeftHeader(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto TopHeader() const;
        auto TopHeader(winrt::Windows::UI::Xaml::UIElement const& value) const;
        auto ViewChanging(winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& handler) const;
        using ViewChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IScrollViewer2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>::remove_ViewChanging>;
        [[nodiscard]] auto ViewChanging(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& handler) const;
        auto ViewChanging(winrt::event_token const& token) const noexcept;
        auto ChangeView(winrt::Windows::Foundation::IReference<double> const& horizontalOffset, winrt::Windows::Foundation::IReference<double> const& verticalOffset, winrt::Windows::Foundation::IReference<float> const& zoomFactor) const;
        auto ChangeView(winrt::Windows::Foundation::IReference<double> const& horizontalOffset, winrt::Windows::Foundation::IReference<double> const& verticalOffset, winrt::Windows::Foundation::IReference<float> const& zoomFactor, bool disableAnimation) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewer3
    {
        auto DirectManipulationStarted(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DirectManipulationStarted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IScrollViewer3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>::remove_DirectManipulationStarted>;
        [[nodiscard]] auto DirectManipulationStarted(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DirectManipulationStarted(winrt::event_token const& token) const noexcept;
        auto DirectManipulationCompleted(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DirectManipulationCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IScrollViewer3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>::remove_DirectManipulationCompleted>;
        [[nodiscard]] auto DirectManipulationCompleted(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DirectManipulationCompleted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewer4
    {
        [[nodiscard]] auto ReduceViewportForCoreInputViewOcclusions() const;
        auto ReduceViewportForCoreInputViewOcclusions(bool value) const;
        [[nodiscard]] auto HorizontalAnchorRatio() const;
        auto HorizontalAnchorRatio(double value) const;
        [[nodiscard]] auto VerticalAnchorRatio() const;
        auto VerticalAnchorRatio(double value) const;
        [[nodiscard]] auto CanContentRenderOutsideBounds() const;
        auto CanContentRenderOutsideBounds(bool value) const;
        auto AnchorRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewer, winrt::Windows::UI::Xaml::Controls::AnchorRequestedEventArgs> const& handler) const;
        using AnchorRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IScrollViewer4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IScrollViewer4>::remove_AnchorRequested>;
        [[nodiscard]] auto AnchorRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ScrollViewer, winrt::Windows::UI::Xaml::Controls::AnchorRequestedEventArgs> const& handler) const;
        auto AnchorRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewer4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerStatics
    {
        [[nodiscard]] auto HorizontalSnapPointsAlignmentProperty() const;
        [[nodiscard]] auto VerticalSnapPointsAlignmentProperty() const;
        [[nodiscard]] auto HorizontalSnapPointsTypeProperty() const;
        [[nodiscard]] auto VerticalSnapPointsTypeProperty() const;
        [[nodiscard]] auto ZoomSnapPointsTypeProperty() const;
        [[nodiscard]] auto HorizontalOffsetProperty() const;
        [[nodiscard]] auto ViewportWidthProperty() const;
        [[nodiscard]] auto ScrollableWidthProperty() const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ExtentWidthProperty() const;
        [[nodiscard]] auto VerticalOffsetProperty() const;
        [[nodiscard]] auto ViewportHeightProperty() const;
        [[nodiscard]] auto ScrollableHeightProperty() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ExtentHeightProperty() const;
        [[nodiscard]] auto MinZoomFactorProperty() const;
        [[nodiscard]] auto MaxZoomFactorProperty() const;
        [[nodiscard]] auto ZoomFactorProperty() const;
        [[nodiscard]] auto ZoomSnapPointsProperty() const;
        [[nodiscard]] auto HorizontalScrollBarVisibilityProperty() const;
        auto GetHorizontalScrollBarVisibility(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetHorizontalScrollBarVisibility(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility const& horizontalScrollBarVisibility) const;
        [[nodiscard]] auto VerticalScrollBarVisibilityProperty() const;
        auto GetVerticalScrollBarVisibility(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetVerticalScrollBarVisibility(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::ScrollBarVisibility const& verticalScrollBarVisibility) const;
        [[nodiscard]] auto IsHorizontalRailEnabledProperty() const;
        auto GetIsHorizontalRailEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsHorizontalRailEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isHorizontalRailEnabled) const;
        [[nodiscard]] auto IsVerticalRailEnabledProperty() const;
        auto GetIsVerticalRailEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsVerticalRailEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isVerticalRailEnabled) const;
        [[nodiscard]] auto IsHorizontalScrollChainingEnabledProperty() const;
        auto GetIsHorizontalScrollChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsHorizontalScrollChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isHorizontalScrollChainingEnabled) const;
        [[nodiscard]] auto IsVerticalScrollChainingEnabledProperty() const;
        auto GetIsVerticalScrollChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsVerticalScrollChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isVerticalScrollChainingEnabled) const;
        [[nodiscard]] auto IsZoomChainingEnabledProperty() const;
        auto GetIsZoomChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsZoomChainingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isZoomChainingEnabled) const;
        [[nodiscard]] auto IsScrollInertiaEnabledProperty() const;
        auto GetIsScrollInertiaEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsScrollInertiaEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isScrollInertiaEnabled) const;
        [[nodiscard]] auto IsZoomInertiaEnabledProperty() const;
        auto GetIsZoomInertiaEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsZoomInertiaEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isZoomInertiaEnabled) const;
        [[nodiscard]] auto HorizontalScrollModeProperty() const;
        auto GetHorizontalScrollMode(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetHorizontalScrollMode(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::ScrollMode const& horizontalScrollMode) const;
        [[nodiscard]] auto VerticalScrollModeProperty() const;
        auto GetVerticalScrollMode(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetVerticalScrollMode(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::ScrollMode const& verticalScrollMode) const;
        [[nodiscard]] auto ZoomModeProperty() const;
        auto GetZoomMode(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetZoomMode(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::ZoomMode const& zoomMode) const;
        [[nodiscard]] auto IsDeferredScrollingEnabledProperty() const;
        auto GetIsDeferredScrollingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetIsDeferredScrollingEnabled(winrt::Windows::UI::Xaml::DependencyObject const& element, bool isDeferredScrollingEnabled) const;
        [[nodiscard]] auto BringIntoViewOnFocusChangeProperty() const;
        auto GetBringIntoViewOnFocusChange(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetBringIntoViewOnFocusChange(winrt::Windows::UI::Xaml::DependencyObject const& element, bool bringIntoViewOnFocusChange) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerStatics2
    {
        [[nodiscard]] auto TopLeftHeaderProperty() const;
        [[nodiscard]] auto LeftHeaderProperty() const;
        [[nodiscard]] auto TopHeaderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerStatics4
    {
        [[nodiscard]] auto ReduceViewportForCoreInputViewOcclusionsProperty() const;
        [[nodiscard]] auto HorizontalAnchorRatioProperty() const;
        [[nodiscard]] auto VerticalAnchorRatioProperty() const;
        [[nodiscard]] auto CanContentRenderOutsideBoundsProperty() const;
        auto GetCanContentRenderOutsideBounds(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetCanContentRenderOutsideBounds(winrt::Windows::UI::Xaml::DependencyObject const& element, bool canContentRenderOutsideBounds) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerView
    {
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ZoomFactor() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs
    {
        [[nodiscard]] auto IsIntermediate() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs
    {
        [[nodiscard]] auto NextView() const;
        [[nodiscard]] auto FinalView() const;
        [[nodiscard]] auto IsInertial() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBox
    {
        [[nodiscard]] auto SearchHistoryEnabled() const;
        auto SearchHistoryEnabled(bool value) const;
        [[nodiscard]] auto SearchHistoryContext() const;
        auto SearchHistoryContext(param::hstring const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto QueryText() const;
        auto QueryText(param::hstring const& value) const;
        [[nodiscard]] auto FocusOnKeyboardInput() const;
        auto FocusOnKeyboardInput(bool value) const;
        [[nodiscard]] auto ChooseSuggestionOnEnter() const;
        auto ChooseSuggestionOnEnter(bool value) const;
        auto QueryChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> const& handler) const;
        using QueryChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISearchBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISearchBox>::remove_QueryChanged>;
        [[nodiscard]] auto QueryChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> const& handler) const;
        auto QueryChanged(winrt::event_token const& token) const noexcept;
        auto SuggestionsRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> const& handler) const;
        using SuggestionsRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISearchBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISearchBox>::remove_SuggestionsRequested>;
        [[nodiscard]] auto SuggestionsRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> const& handler) const;
        auto SuggestionsRequested(winrt::event_token const& token) const noexcept;
        auto QuerySubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> const& handler) const;
        using QuerySubmitted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISearchBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISearchBox>::remove_QuerySubmitted>;
        [[nodiscard]] auto QuerySubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> const& handler) const;
        auto QuerySubmitted(winrt::event_token const& token) const noexcept;
        auto ResultSuggestionChosen(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> const& handler) const;
        using ResultSuggestionChosen_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISearchBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISearchBox>::remove_ResultSuggestionChosen>;
        [[nodiscard]] auto ResultSuggestionChosen(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> const& handler) const;
        auto ResultSuggestionChosen(winrt::event_token const& token) const noexcept;
        auto PrepareForFocusOnKeyboardInput(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::RoutedEventArgs> const& handler) const;
        using PrepareForFocusOnKeyboardInput_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISearchBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISearchBox>::remove_PrepareForFocusOnKeyboardInput>;
        [[nodiscard]] auto PrepareForFocusOnKeyboardInput(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SearchBox, winrt::Windows::UI::Xaml::RoutedEventArgs> const& handler) const;
        auto PrepareForFocusOnKeyboardInput(winrt::event_token const& token) const noexcept;
        auto SetLocalContentSuggestionSettings(winrt::Windows::ApplicationModel::Search::LocalContentSuggestionSettings const& settings) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxQueryChangedEventArgs
    {
        [[nodiscard]] auto QueryText() const;
        [[nodiscard]] auto Language() const;
        [[nodiscard]] auto LinguisticDetails() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxQueryChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxQuerySubmittedEventArgs
    {
        [[nodiscard]] auto QueryText() const;
        [[nodiscard]] auto Language() const;
        [[nodiscard]] auto LinguisticDetails() const;
        [[nodiscard]] auto KeyModifiers() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxQuerySubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxResultSuggestionChosenEventArgs
    {
        [[nodiscard]] auto Tag() const;
        [[nodiscard]] auto KeyModifiers() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxResultSuggestionChosenEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxStatics
    {
        [[nodiscard]] auto SearchHistoryEnabledProperty() const;
        [[nodiscard]] auto SearchHistoryContextProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto QueryTextProperty() const;
        [[nodiscard]] auto FocusOnKeyboardInputProperty() const;
        [[nodiscard]] auto ChooseSuggestionOnEnterProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISearchBoxSuggestionsRequestedEventArgs
    {
        [[nodiscard]] auto QueryText() const;
        [[nodiscard]] auto Language() const;
        [[nodiscard]] auto LinguisticDetails() const;
        [[nodiscard]] auto Request() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxSuggestionsRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgs
    {
        [[nodiscard]] auto AddedSections() const;
        [[nodiscard]] auto RemovedSections() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgs
    {
        [[nodiscard]] auto AddedItems() const;
        [[nodiscard]] auto RemovedItems() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgsFactory
    {
        auto CreateInstanceWithRemovedItemsAndAddedItems(param::vector<winrt::Windows::Foundation::IInspectable> const& removedItems, param::vector<winrt::Windows::Foundation::IInspectable> const& addedItems, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISemanticZoom
    {
        [[nodiscard]] auto ZoomedInView() const;
        auto ZoomedInView(winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
        [[nodiscard]] auto ZoomedOutView() const;
        auto ZoomedOutView(winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
        [[nodiscard]] auto IsZoomedInViewActive() const;
        auto IsZoomedInViewActive(bool value) const;
        [[nodiscard]] auto CanChangeViews() const;
        auto CanChangeViews(bool value) const;
        auto ViewChangeStarted(winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        using ViewChangeStarted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISemanticZoom, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>::remove_ViewChangeStarted>;
        [[nodiscard]] auto ViewChangeStarted(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        auto ViewChangeStarted(winrt::event_token const& token) const noexcept;
        auto ViewChangeCompleted(winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        using ViewChangeCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISemanticZoom, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>::remove_ViewChangeCompleted>;
        [[nodiscard]] auto ViewChangeCompleted(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        auto ViewChangeCompleted(winrt::event_token const& token) const noexcept;
        auto ToggleActiveView() const;
        [[nodiscard]] auto IsZoomOutButtonEnabled() const;
        auto IsZoomOutButtonEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoom<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISemanticZoomInformation
    {
        [[nodiscard]] auto SemanticZoomOwner() const;
        auto SemanticZoomOwner(winrt::Windows::UI::Xaml::Controls::SemanticZoom const& value) const;
        [[nodiscard]] auto IsActiveView() const;
        auto IsActiveView(bool value) const;
        [[nodiscard]] auto IsZoomedInView() const;
        auto IsZoomedInView(bool value) const;
        auto InitializeViewChange() const;
        auto CompleteViewChange() const;
        auto MakeVisible(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& item) const;
        auto StartViewChangeFrom(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto StartViewChangeTo(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto CompleteViewChangeFrom(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto CompleteViewChangeTo(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomInformation<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISemanticZoomLocation
    {
        [[nodiscard]] auto Item() const;
        auto Item(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Bounds() const;
        auto Bounds(winrt::Windows::Foundation::Rect const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomLocation<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISemanticZoomStatics
    {
        [[nodiscard]] auto ZoomedInViewProperty() const;
        [[nodiscard]] auto ZoomedOutViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewActiveProperty() const;
        [[nodiscard]] auto CanChangeViewsProperty() const;
        [[nodiscard]] auto IsZoomOutButtonEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs
    {
        [[nodiscard]] auto IsSourceZoomedInView() const;
        auto IsSourceZoomedInView(bool value) const;
        [[nodiscard]] auto SourceItem() const;
        auto SourceItem(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
        [[nodiscard]] auto DestinationItem() const;
        auto DestinationItem(winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISettingsFlyout
    {
        [[nodiscard]] auto Title() const;
        auto Title(param::hstring const& value) const;
        [[nodiscard]] auto HeaderBackground() const;
        auto HeaderBackground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto HeaderForeground() const;
        auto HeaderForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto BackClick(winrt::Windows::UI::Xaml::Controls::BackClickEventHandler const& handler) const;
        using BackClick_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>::remove_BackClick>;
        [[nodiscard]] auto BackClick(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::BackClickEventHandler const& handler) const;
        auto BackClick(winrt::event_token const& token) const noexcept;
        auto Show() const;
        auto ShowIndependent() const;
        auto Hide() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISettingsFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISettingsFlyoutStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto HeaderBackgroundProperty() const;
        [[nodiscard]] auto HeaderForegroundProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISlider
    {
        [[nodiscard]] auto IntermediateValue() const;
        auto IntermediateValue(double value) const;
        [[nodiscard]] auto StepFrequency() const;
        auto StepFrequency(double value) const;
        [[nodiscard]] auto SnapsTo() const;
        auto SnapsTo(winrt::Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo const& value) const;
        [[nodiscard]] auto TickFrequency() const;
        auto TickFrequency(double value) const;
        [[nodiscard]] auto TickPlacement() const;
        auto TickPlacement(winrt::Windows::UI::Xaml::Controls::Primitives::TickPlacement const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto IsDirectionReversed() const;
        auto IsDirectionReversed(bool value) const;
        [[nodiscard]] auto IsThumbToolTipEnabled() const;
        auto IsThumbToolTipEnabled(bool value) const;
        [[nodiscard]] auto ThumbToolTipValueConverter() const;
        auto ThumbToolTipValueConverter(winrt::Windows::UI::Xaml::Data::IValueConverter const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISlider>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISlider<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISlider2
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISlider2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISlider2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISliderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISliderFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISliderStatics
    {
        [[nodiscard]] auto IntermediateValueProperty() const;
        [[nodiscard]] auto StepFrequencyProperty() const;
        [[nodiscard]] auto SnapsToProperty() const;
        [[nodiscard]] auto TickFrequencyProperty() const;
        [[nodiscard]] auto TickPlacementProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto IsDirectionReversedProperty() const;
        [[nodiscard]] auto IsThumbToolTipEnabledProperty() const;
        [[nodiscard]] auto ThumbToolTipValueConverterProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISliderStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISliderStatics2
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISliderStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButton
    {
        [[nodiscard]] auto Flyout() const;
        auto Flyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        auto Click(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitButton, winrt::Windows::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        using Click_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISplitButton, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISplitButton>::remove_Click>;
        [[nodiscard]] auto Click(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitButton, winrt::Windows::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        auto Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButtonAutomationPeer
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButtonAutomationPeer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButtonAutomationPeerFactory
    {
        auto CreateInstance(winrt::Windows::UI::Xaml::Controls::SplitButton const& owner, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButtonAutomationPeerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButtonClickEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButtonClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitButtonStatics
    {
        [[nodiscard]] auto FlyoutProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitButtonStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitButtonStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitView
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane() const;
        auto Pane(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IsPaneOpen() const;
        auto IsPaneOpen(bool value) const;
        [[nodiscard]] auto OpenPaneLength() const;
        auto OpenPaneLength(double value) const;
        [[nodiscard]] auto CompactPaneLength() const;
        auto CompactPaneLength(double value) const;
        [[nodiscard]] auto PanePlacement() const;
        auto PanePlacement(winrt::Windows::UI::Xaml::Controls::SplitViewPanePlacement const& value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Windows::UI::Xaml::Controls::SplitViewDisplayMode const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto PaneBackground() const;
        auto PaneBackground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        auto PaneClosing(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& handler) const;
        using PaneClosing_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISplitView>::remove_PaneClosing>;
        [[nodiscard]] auto PaneClosing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& handler) const;
        auto PaneClosing(winrt::event_token const& token) const noexcept;
        auto PaneClosed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneClosed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISplitView>::remove_PaneClosed>;
        [[nodiscard]] auto PaneClosed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneClosed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitView2
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitView3
    {
        auto PaneOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISplitView3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISplitView3>::remove_PaneOpening>;
        [[nodiscard]] auto PaneOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpening(winrt::event_token const& token) const noexcept;
        auto PaneOpened(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISplitView3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISplitView3>::remove_PaneOpened>;
        [[nodiscard]] auto PaneOpened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitView3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitViewStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto PaneProperty() const;
        [[nodiscard]] auto IsPaneOpenProperty() const;
        [[nodiscard]] auto OpenPaneLengthProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
        [[nodiscard]] auto PanePlacementProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto PaneBackgroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISplitViewStatics2
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanel
    {
        [[nodiscard]] auto AreScrollSnapPointsRegular() const;
        auto AreScrollSnapPointsRegular(bool value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanel2
    {
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Windows::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanel2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanel4
    {
        [[nodiscard]] auto Spacing() const;
        auto Spacing(double value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanel4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanel5
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Windows::UI::Xaml::Controls::BackgroundSizing const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanel5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics
    {
        [[nodiscard]] auto AreScrollSnapPointsRegularProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics2
    {
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics4
    {
        [[nodiscard]] auto SpacingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics5
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStyleSelector
    {
        auto SelectStyle(winrt::Windows::Foundation::IInspectable const& item, winrt::Windows::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStyleSelector>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelector<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStyleSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IStyleSelectorOverrides
    {
        auto SelectStyleCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Windows::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel2
    {
        auto CreateCoreIndependentInputSource(winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainPanel
    {
        [[nodiscard]] auto CompositionScaleX() const;
        [[nodiscard]] auto CompositionScaleY() const;
        auto CompositionScaleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SwapChainPanel, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CompositionScaleChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>::remove_CompositionScaleChanged>;
        [[nodiscard]] auto CompositionScaleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SwapChainPanel, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto CompositionScaleChanged(winrt::event_token const& token) const noexcept;
        auto CreateCoreIndependentInputSource(winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwapChainPanelStatics
    {
        [[nodiscard]] auto CompositionScaleXProperty() const;
        [[nodiscard]] auto CompositionScaleYProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeControl
    {
        [[nodiscard]] auto LeftItems() const;
        auto LeftItems(winrt::Windows::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto RightItems() const;
        auto RightItems(winrt::Windows::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto TopItems() const;
        auto TopItems(winrt::Windows::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto BottomItems() const;
        auto BottomItems(winrt::Windows::UI::Xaml::Controls::SwipeItems const& value) const;
        auto Close() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeControlStatics
    {
        [[nodiscard]] auto LeftItemsProperty() const;
        [[nodiscard]] auto RightItemsProperty() const;
        [[nodiscard]] auto TopItemsProperty() const;
        [[nodiscard]] auto BottomItemsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItem
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Windows::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto BehaviorOnInvoked() const;
        auto BehaviorOnInvoked(winrt::Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const;
        auto Invoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SwipeItem, winrt::Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        using Invoked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ISwipeItem, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ISwipeItem>::remove_Invoked>;
        [[nodiscard]] auto Invoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::SwipeItem, winrt::Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        auto Invoked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItemInvokedEventArgs
    {
        [[nodiscard]] auto SwipeControl() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItemStatics
    {
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
        [[nodiscard]] auto BehaviorOnInvokedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItems
    {
        [[nodiscard]] auto Mode() const;
        auto Mode(winrt::Windows::UI::Xaml::Controls::SwipeMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItems>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItems<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItemsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISwipeItemsStatics
    {
        [[nodiscard]] auto ModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemsStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIcon
    {
        [[nodiscard]] auto Symbol() const;
        auto Symbol(winrt::Windows::UI::Xaml::Controls::Symbol const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIcon>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIcon<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIconFactory
    {
        auto CreateInstanceWithSymbol(winrt::Windows::UI::Xaml::Controls::Symbol const& symbol) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIconSource
    {
        [[nodiscard]] auto Symbol() const;
        auto Symbol(winrt::Windows::UI::Xaml::Controls::Symbol const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIconSource>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSource<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIconSourceStatics
    {
        [[nodiscard]] auto SymbolProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ISymbolIconStatics
    {
        [[nodiscard]] auto SymbolProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock
    {
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Windows::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto TextTrimming() const;
        auto TextTrimming(winrt::Windows::UI::Xaml::TextTrimming const& value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Inlines() const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Windows::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto IsTextSelectionEnabled() const;
        auto IsTextSelectionEnabled(bool value) const;
        [[nodiscard]] auto SelectedText() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        auto SelectionChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBlock, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBlock>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBlock, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBlock>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
        auto Select(winrt::Windows::UI::Xaml::Documents::TextPointer const& start, winrt::Windows::UI::Xaml::Documents::TextPointer const& end) const;
        auto Focus(winrt::Windows::UI::Xaml::FocusState const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock2
    {
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Windows::UI::Xaml::TextLineBounds const& value) const;
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Windows::UI::Xaml::TextReadingOrder const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock4
    {
        auto GetAlphaMask() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock5
    {
        [[nodiscard]] auto TextDecorations() const;
        auto TextDecorations(winrt::Windows::UI::Text::TextDecorations const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock6
    {
        [[nodiscard]] auto IsTextTrimmed() const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextHighlighters() const;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBlock, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBlock6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBlock6>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBlock, winrt::Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlock7
    {
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        auto CopySelectionToClipboard() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlock7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics
    {
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto TextTrimmingProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto IsTextSelectionEnabledProperty() const;
        [[nodiscard]] auto SelectedTextProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics2
    {
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics3
    {
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics5
    {
        [[nodiscard]] auto TextDecorationsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics6
    {
        [[nodiscard]] auto IsTextTrimmedProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics7
    {
        [[nodiscard]] auto SelectionFlyoutProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto SelectedText() const;
        auto SelectedText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionLength() const;
        auto SelectionLength(int32_t value) const;
        [[nodiscard]] auto SelectionStart() const;
        auto SelectionStart(int32_t value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto AcceptsReturn() const;
        auto AcceptsReturn(bool value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Windows::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto IsSpellCheckEnabled() const;
        auto IsSpellCheckEnabled(bool value) const;
        [[nodiscard]] auto IsTextPredictionEnabled() const;
        auto IsTextPredictionEnabled(bool value) const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Windows::UI::Xaml::Input::InputScope const& value) const;
        auto TextChanged(winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::TextChangedEventHandler const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
        auto SelectionChanged(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto Select(int32_t start, int32_t length) const;
        auto SelectAll() const;
        auto GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox2
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        auto Paste(winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox2>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox3
    {
        auto TextCompositionStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        using TextCompositionStarted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox3>::remove_TextCompositionStarted>;
        [[nodiscard]] auto TextCompositionStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        auto TextCompositionStarted(winrt::event_token const& token) const noexcept;
        auto TextCompositionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        using TextCompositionChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox3>::remove_TextCompositionChanged>;
        [[nodiscard]] auto TextCompositionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        auto TextCompositionChanged(winrt::event_token const& token) const noexcept;
        auto TextCompositionEnded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        using TextCompositionEnded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox3>::remove_TextCompositionEnded>;
        [[nodiscard]] auto TextCompositionEnded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        auto TextCompositionEnded(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Windows::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto DesiredCandidateWindowAlignment() const;
        auto DesiredCandidateWindowAlignment(winrt::Windows::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
        auto CandidateWindowBoundsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        using CandidateWindowBoundsChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox3>::remove_CandidateWindowBoundsChanged>;
        [[nodiscard]] auto CandidateWindowBoundsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        auto CandidateWindowBoundsChanged(winrt::event_token const& token) const noexcept;
        auto TextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& handler) const;
        using TextChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox3>::remove_TextChanging>;
        [[nodiscard]] auto TextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& handler) const;
        auto TextChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox4
    {
        auto GetLinguisticAlternativesAsync() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox5
    {
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocused() const;
        auto SelectionHighlightColorWhenNotFocused(winrt::Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox6
    {
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Windows::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto CharacterCasing() const;
        auto CharacterCasing(winrt::Windows::UI::Xaml::Controls::CharacterCasing const& value) const;
        [[nodiscard]] auto PlaceholderForeground() const;
        auto PlaceholderForeground(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        auto CopyingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        using CopyingToClipboard_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox6>::remove_CopyingToClipboard>;
        [[nodiscard]] auto CopyingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        auto CopyingToClipboard(winrt::event_token const& token) const noexcept;
        auto CuttingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        using CuttingToClipboard_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox6>::remove_CuttingToClipboard>;
        [[nodiscard]] auto CuttingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        auto CuttingToClipboard(winrt::event_token const& token) const noexcept;
        auto BeforeTextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& handler) const;
        using BeforeTextChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox6>::remove_BeforeTextChanging>;
        [[nodiscard]] auto BeforeTextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& handler) const;
        auto BeforeTextChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox7
    {
        [[nodiscard]] auto HandwritingView() const;
        auto HandwritingView(winrt::Windows::UI::Xaml::Controls::HandwritingView const& value) const;
        [[nodiscard]] auto IsHandwritingViewEnabled() const;
        auto IsHandwritingViewEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBox8
    {
        [[nodiscard]] auto CanPasteClipboardContent() const;
        [[nodiscard]] auto CanUndo() const;
        [[nodiscard]] auto CanRedo() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto ProofingMenuFlyout() const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto SelectionChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> const& handler) const;
        using SelectionChanging_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITextBox8, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITextBox8>::remove_SelectionChanging>;
        [[nodiscard]] auto SelectionChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TextBox, winrt::Windows::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> const& handler) const;
        auto SelectionChanging(winrt::event_token const& token) const noexcept;
        auto Undo() const;
        auto Redo() const;
        auto PasteFromClipboard() const;
        auto CopySelectionToClipboard() const;
        auto CutSelectionToClipboard() const;
        auto ClearUndoRedoHistory() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBox8>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox8<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs
    {
        [[nodiscard]] auto NewText() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxSelectionChangingEventArgs
    {
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionLength() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxSelectionChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto AcceptsReturnProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto IsSpellCheckEnabledProperty() const;
        [[nodiscard]] auto IsTextPredictionEnabledProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics2
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics3
    {
        [[nodiscard]] auto DesiredCandidateWindowAlignmentProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics5
    {
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocusedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics6
    {
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto CharacterCasingProperty() const;
        [[nodiscard]] auto PlaceholderForegroundProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics7
    {
        [[nodiscard]] auto HandwritingViewProperty() const;
        [[nodiscard]] auto IsHandwritingViewEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics8
    {
        [[nodiscard]] auto CanPasteClipboardContentProperty() const;
        [[nodiscard]] auto CanUndoProperty() const;
        [[nodiscard]] auto CanRedoProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto ProofingMenuFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics8>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics8<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs2
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextChangedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextCommandBarFlyout
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextCommandBarFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextCompositionChangedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextCompositionEndedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionEndedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextCompositionStartedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionStartedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITextControlPasteEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlPasteEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePicker
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ClockIdentifier() const;
        auto ClockIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto MinuteIncrement() const;
        auto MinuteIncrement(int32_t value) const;
        [[nodiscard]] auto Time() const;
        auto Time(winrt::Windows::Foundation::TimeSpan const& value) const;
        auto TimeChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& handler) const;
        using TimeChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITimePicker, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITimePicker>::remove_TimeChanged>;
        [[nodiscard]] auto TimeChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& handler) const;
        auto TimeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePicker>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePicker<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePicker2
    {
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePicker2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePicker2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePicker3
    {
        [[nodiscard]] auto SelectedTime() const;
        auto SelectedTime(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const& value) const;
        auto SelectedTimeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TimePicker, winrt::Windows::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> const& handler) const;
        using SelectedTimeChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITimePicker3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITimePicker3>::remove_SelectedTimeChanged>;
        [[nodiscard]] auto SelectedTimeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TimePicker, winrt::Windows::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> const& handler) const;
        auto SelectedTimeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePicker3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePicker3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyout
    {
        [[nodiscard]] auto ClockIdentifier() const;
        auto ClockIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Time() const;
        auto Time(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto MinuteIncrement() const;
        auto MinuteIncrement(int32_t value) const;
        auto TimePicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout, winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs> const& handler) const;
        using TimePicked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>::remove_TimePicked>;
        [[nodiscard]] auto TimePicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout, winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs> const& handler) const;
        auto TimePicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Windows::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyout<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter2
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenterStatics2
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutStatics
    {
        [[nodiscard]] auto ClockIdentifierProperty() const;
        [[nodiscard]] auto TimeProperty() const;
        [[nodiscard]] auto MinuteIncrementProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerSelectedValueChangedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerSelectedValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto ClockIdentifierProperty() const;
        [[nodiscard]] auto MinuteIncrementProperty() const;
        [[nodiscard]] auto TimeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerStatics2
    {
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerStatics3
    {
        [[nodiscard]] auto SelectedTimeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITimePickerValueChangedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItem
    {
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics
    {
        [[nodiscard]] auto IsCheckedProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSplitButton
    {
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
        auto IsCheckedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ToggleSplitButton, winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        using IsCheckedChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton>::remove_IsCheckedChanged>;
        [[nodiscard]] auto IsCheckedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::ToggleSplitButton, winrt::Windows::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        auto IsCheckedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSplitButton>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSplitButton<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSplitButtonAutomationPeer
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSplitButtonAutomationPeer<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSplitButtonAutomationPeerFactory
    {
        auto CreateInstance(winrt::Windows::UI::Xaml::Controls::ToggleSplitButton const& owner, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSplitButtonAutomationPeerFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSplitButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSwitch
    {
        [[nodiscard]] auto IsOn() const;
        auto IsOn(bool value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto OnContent() const;
        auto OnContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto OnContentTemplate() const;
        auto OnContentTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto OffContent() const;
        auto OffContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto OffContentTemplate() const;
        auto OffContentTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto Toggled(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using Toggled_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IToggleSwitch, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>::remove_Toggled>;
        [[nodiscard]] auto Toggled(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Toggled(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitch<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSwitchOverrides
    {
        auto OnToggled() const;
        auto OnOnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnOffContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnHeaderChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitchOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToggleSwitchStatics
    {
        [[nodiscard]] auto IsOnProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto OnContentProperty() const;
        [[nodiscard]] auto OnContentTemplateProperty() const;
        [[nodiscard]] auto OffContentProperty() const;
        [[nodiscard]] auto OffContentTemplateProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitchStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTip
    {
        [[nodiscard]] auto HorizontalOffset() const;
        auto HorizontalOffset(double value) const;
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto Placement() const;
        auto Placement(winrt::Windows::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
        [[nodiscard]] auto PlacementTarget() const;
        auto PlacementTarget(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto VerticalOffset() const;
        auto VerticalOffset(double value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto Closed(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IToolTip, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IToolTip>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IToolTip, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IToolTip>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTip>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTip<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTip2
    {
        [[nodiscard]] auto PlacementRect() const;
        auto PlacementRect(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTip2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTip2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTipFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTipFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTipService
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTipService>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipService<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTipServiceStatics
    {
        [[nodiscard]] auto PlacementProperty() const;
        auto GetPlacement(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetPlacement(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
        [[nodiscard]] auto PlacementTargetProperty() const;
        auto GetPlacementTarget(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetPlacementTarget(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ToolTipProperty() const;
        auto GetToolTip(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetToolTip(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipServiceStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTipStatics
    {
        [[nodiscard]] auto HorizontalOffsetProperty() const;
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto PlacementProperty() const;
        [[nodiscard]] auto PlacementTargetProperty() const;
        [[nodiscard]] auto VerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTipStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IToolTipStatics2
    {
        [[nodiscard]] auto PlacementRectProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IToolTipStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeView
    {
        [[nodiscard]] auto RootNodes() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Windows::UI::Xaml::Controls::TreeViewSelectionMode const& value) const;
        [[nodiscard]] auto SelectedNodes() const;
        auto Expand(winrt::Windows::UI::Xaml::Controls::TreeViewNode const& value) const;
        auto Collapse(winrt::Windows::UI::Xaml::Controls::TreeViewNode const& value) const;
        auto SelectAll() const;
        auto ItemInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITreeView>::remove_ItemInvoked>;
        [[nodiscard]] auto ItemInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        auto ItemInvoked(winrt::event_token const& token) const noexcept;
        auto Expanding(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITreeView>::remove_Expanding>;
        [[nodiscard]] auto Expanding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        auto Expanding(winrt::event_token const& token) const noexcept;
        auto Collapsed(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITreeView>::remove_Collapsed>;
        [[nodiscard]] auto Collapsed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        auto Collapsed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeView2
    {
        auto NodeFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromNode(winrt::Windows::UI::Xaml::Controls::TreeViewNode const& node) const;
        auto ItemFromContainer(winrt::Windows::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        [[nodiscard]] auto CanDragItems() const;
        auto CanDragItems(bool value) const;
        [[nodiscard]] auto CanReorderItems() const;
        auto CanReorderItems(bool value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ItemTemplateSelector() const;
        auto ItemTemplateSelector(winrt::Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ItemContainerStyle() const;
        auto ItemContainerStyle(winrt::Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ItemContainerStyleSelector() const;
        auto ItemContainerStyleSelector(winrt::Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto ItemContainerTransitions() const;
        auto ItemContainerTransitions(winrt::Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        auto DragItemsStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        using DragItemsStarting_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITreeView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITreeView2>::remove_DragItemsStarting>;
        [[nodiscard]] auto DragItemsStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        auto DragItemsStarting(winrt::event_token const& token) const noexcept;
        auto DragItemsCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        using DragItemsCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITreeView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITreeView2>::remove_DragItemsCompleted>;
        [[nodiscard]] auto DragItemsCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TreeView, winrt::Windows::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        auto DragItemsCompleted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs
    {
        [[nodiscard]] auto Node() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs2
    {
        [[nodiscard]] auto Item() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs
    {
        [[nodiscard]] auto DropResult() const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto Data() const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs
    {
        [[nodiscard]] auto Node() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs2
    {
        [[nodiscard]] auto Item() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItem
    {
        [[nodiscard]] auto GlyphOpacity() const;
        auto GlyphOpacity(double value) const;
        [[nodiscard]] auto GlyphBrush() const;
        auto GlyphBrush(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto ExpandedGlyph() const;
        auto ExpandedGlyph(param::hstring const& value) const;
        [[nodiscard]] auto CollapsedGlyph() const;
        auto CollapsedGlyph(param::hstring const& value) const;
        [[nodiscard]] auto GlyphSize() const;
        auto GlyphSize(double value) const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto TreeViewItemTemplateSettings() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItem>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItem<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItem2
    {
        [[nodiscard]] auto HasUnrealizedChildren() const;
        auto HasUnrealizedChildren(bool value) const;
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItem2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItem2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs
    {
        [[nodiscard]] auto InvokedItem() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto Handled() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics
    {
        [[nodiscard]] auto GlyphOpacityProperty() const;
        [[nodiscard]] auto GlyphBrushProperty() const;
        [[nodiscard]] auto ExpandedGlyphProperty() const;
        [[nodiscard]] auto CollapsedGlyphProperty() const;
        [[nodiscard]] auto GlyphSizeProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto TreeViewItemTemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics2
    {
        [[nodiscard]] auto HasUnrealizedChildrenProperty() const;
        [[nodiscard]] auto ItemsSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettings
    {
        [[nodiscard]] auto ExpandedGlyphVisibility() const;
        [[nodiscard]] auto CollapsedGlyphVisibility() const;
        [[nodiscard]] auto Indentation() const;
        [[nodiscard]] auto DragItemsCount() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics
    {
        [[nodiscard]] auto ExpandedGlyphVisibilityProperty() const;
        [[nodiscard]] auto CollapsedGlyphVisibilityProperty() const;
        [[nodiscard]] auto IndentationProperty() const;
        [[nodiscard]] auto DragItemsCountProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewList
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewList>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewList<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewListFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewListFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewListFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewNode
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Parent() const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto HasChildren() const;
        [[nodiscard]] auto Depth() const;
        [[nodiscard]] auto HasUnrealizedChildren() const;
        auto HasUnrealizedChildren(bool value) const;
        [[nodiscard]] auto Children() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewNode>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNode<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewNodeFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNodeFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewNodeStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto DepthProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto HasChildrenProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNodeStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewStatics
    {
        [[nodiscard]] auto SelectionModeProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITreeViewStatics2
    {
        [[nodiscard]] auto CanDragItemsProperty() const;
        [[nodiscard]] auto CanReorderItemsProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto ItemTemplateSelectorProperty() const;
        [[nodiscard]] auto ItemContainerStyleProperty() const;
        [[nodiscard]] auto ItemContainerStyleSelectorProperty() const;
        [[nodiscard]] auto ItemContainerTransitionsProperty() const;
        [[nodiscard]] auto ItemsSourceProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITreeViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITwoPaneView
    {
        [[nodiscard]] auto Pane1() const;
        auto Pane1(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane2() const;
        auto Pane2(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane1Length() const;
        auto Pane1Length(winrt::Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto Pane2Length() const;
        auto Pane2Length(winrt::Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto PanePriority() const;
        auto PanePriority(winrt::Windows::UI::Xaml::Controls::TwoPaneViewPriority const& value) const;
        [[nodiscard]] auto Mode() const;
        [[nodiscard]] auto WideModeConfiguration() const;
        auto WideModeConfiguration(winrt::Windows::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const& value) const;
        [[nodiscard]] auto TallModeConfiguration() const;
        auto TallModeConfiguration(winrt::Windows::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const& value) const;
        [[nodiscard]] auto MinWideModeWidth() const;
        auto MinWideModeWidth(double value) const;
        [[nodiscard]] auto MinTallModeHeight() const;
        auto MinTallModeHeight(double value) const;
        auto ModeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TwoPaneView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ModeChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::ITwoPaneView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::ITwoPaneView>::remove_ModeChanged>;
        [[nodiscard]] auto ModeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::TwoPaneView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ModeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITwoPaneView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITwoPaneView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITwoPaneViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITwoPaneViewFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_ITwoPaneViewStatics
    {
        [[nodiscard]] auto Pane1Property() const;
        [[nodiscard]] auto Pane2Property() const;
        [[nodiscard]] auto Pane1LengthProperty() const;
        [[nodiscard]] auto Pane2LengthProperty() const;
        [[nodiscard]] auto PanePriorityProperty() const;
        [[nodiscard]] auto ModeProperty() const;
        [[nodiscard]] auto WideModeConfigurationProperty() const;
        [[nodiscard]] auto TallModeConfigurationProperty() const;
        [[nodiscard]] auto MinWideModeWidthProperty() const;
        [[nodiscard]] auto MinTallModeHeightProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITwoPaneViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IUIElementCollection
    {
        auto Move(uint32_t oldIndex, uint32_t newIndex) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IUIElementCollection>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUIElementCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IUserControl
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IUserControl>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControl<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IUserControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IUserControlFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControlFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IUserControlStatics
    {
        [[nodiscard]] auto ContentProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IUserControlStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControlStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGrid
    {
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto HorizontalChildrenAlignment() const;
        auto HorizontalChildrenAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalChildrenAlignment() const;
        auto VerticalChildrenAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGrid<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGridStatics
    {
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto HorizontalChildrenAlignmentProperty() const;
        [[nodiscard]] auto VerticalChildrenAlignmentProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
        [[nodiscard]] auto RowSpanProperty() const;
        auto GetRowSpan(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetRowSpan(winrt::Windows::UI::Xaml::UIElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnSpanProperty() const;
        auto GetColumnSpan(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetColumnSpan(winrt::Windows::UI::Xaml::UIElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGridStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IViewbox
    {
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Windows::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto StretchDirection() const;
        auto StretchDirection(winrt::Windows::UI::Xaml::Controls::StretchDirection const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IViewbox>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IViewbox<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IViewboxStatics
    {
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto StretchDirectionProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IViewboxStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IViewboxStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanel
    {
        [[nodiscard]] auto ItemContainerGenerator() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelOverrides
    {
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& sender, winrt::Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const& args) const;
        auto OnClearChildren() const;
        auto BringIndexIntoView(int32_t index) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelProtected
    {
        auto AddInternalChild(winrt::Windows::UI::Xaml::UIElement const& child) const;
        auto InsertInternalChild(int32_t index, winrt::Windows::UI::Xaml::UIElement const& child) const;
        auto RemoveInternalChildRange(int32_t index, int32_t range) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelProtected<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanel
    {
        [[nodiscard]] auto AreScrollSnapPointsRegular() const;
        auto AreScrollSnapPointsRegular(bool value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        auto CleanUpVirtualizedItemEvent(winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& handler) const;
        using CleanUpVirtualizedItemEvent_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>::remove_CleanUpVirtualizedItemEvent>;
        [[nodiscard]] auto CleanUpVirtualizedItemEvent(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& handler) const;
        auto CleanUpVirtualizedItemEvent(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanel<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelOverrides
    {
        auto OnCleanUpVirtualizedItem(winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const& e) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelOverrides<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelStatics
    {
        [[nodiscard]] auto AreScrollSnapPointsRegularProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto VirtualizationModeProperty() const;
        auto GetVirtualizationMode(winrt::Windows::UI::Xaml::DependencyObject const& element) const;
        auto SetVirtualizationMode(winrt::Windows::UI::Xaml::DependencyObject const& element, winrt::Windows::UI::Xaml::Controls::VirtualizationMode const& value) const;
        [[nodiscard]] auto IsVirtualizingProperty() const;
        auto GetIsVirtualizing(winrt::Windows::UI::Xaml::DependencyObject const& o) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto AllowedScriptNotifyUris() const;
        auto AllowedScriptNotifyUris(param::vector<winrt::Windows::Foundation::Uri> const& value) const;
        [[nodiscard]] auto DataTransferPackage() const;
        auto LoadCompleted(winrt::Windows::UI::Xaml::Navigation::LoadCompletedEventHandler const& handler) const;
        using LoadCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView>::remove_LoadCompleted>;
        [[nodiscard]] auto LoadCompleted(auto_revoke_t, winrt::Windows::UI::Xaml::Navigation::LoadCompletedEventHandler const& handler) const;
        auto LoadCompleted(winrt::event_token const& token) const noexcept;
        auto ScriptNotify(winrt::Windows::UI::Xaml::Controls::NotifyEventHandler const& handler) const;
        using ScriptNotify_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView>::remove_ScriptNotify>;
        [[nodiscard]] auto ScriptNotify(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::NotifyEventHandler const& handler) const;
        auto ScriptNotify(winrt::event_token const& token) const noexcept;
        auto NavigationFailed(winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler const& handler) const;
        using NavigationFailed_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView>::remove_NavigationFailed>;
        [[nodiscard]] auto NavigationFailed(auto_revoke_t, winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler const& handler) const;
        auto NavigationFailed(winrt::event_token const& token) const noexcept;
        auto InvokeScript(param::hstring const& scriptName, array_view<hstring const> arguments) const;
        auto Navigate(winrt::Windows::Foundation::Uri const& source) const;
        auto NavigateToString(param::hstring const& text) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView2
    {
        [[nodiscard]] auto CanGoBack() const;
        [[nodiscard]] auto CanGoForward() const;
        [[nodiscard]] auto DocumentTitle() const;
        auto NavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& handler) const;
        using NavigationStarting_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_NavigationStarting>;
        [[nodiscard]] auto NavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& handler) const;
        auto NavigationStarting(winrt::event_token const& token) const noexcept;
        auto ContentLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& handler) const;
        using ContentLoading_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_ContentLoading>;
        [[nodiscard]] auto ContentLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& handler) const;
        auto ContentLoading(winrt::event_token const& token) const noexcept;
        auto DOMContentLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& handler) const;
        using DOMContentLoaded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_DOMContentLoaded>;
        [[nodiscard]] auto DOMContentLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& handler) const;
        auto DOMContentLoaded(winrt::event_token const& token) const noexcept;
        auto GoForward() const;
        auto GoBack() const;
        auto Refresh() const;
        auto Stop() const;
        auto CapturePreviewToStreamAsync(winrt::Windows::Storage::Streams::IRandomAccessStream const& stream) const;
        auto InvokeScriptAsync(param::hstring const& scriptName, param::async_iterable<hstring> const& arguments) const;
        auto CaptureSelectedContentToDataPackageAsync() const;
        auto NavigateToLocalStreamUri(winrt::Windows::Foundation::Uri const& source, winrt::Windows::Web::IUriToStreamResolver const& streamResolver) const;
        auto BuildLocalStreamUri(param::hstring const& contentIdentifier, param::hstring const& relativePath) const;
        [[nodiscard]] auto DefaultBackgroundColor() const;
        auto DefaultBackgroundColor(winrt::Windows::UI::Color const& value) const;
        auto NavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& handler) const;
        using NavigationCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_NavigationCompleted>;
        [[nodiscard]] auto NavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& handler) const;
        auto NavigationCompleted(winrt::event_token const& token) const noexcept;
        auto FrameNavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& handler) const;
        using FrameNavigationStarting_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_FrameNavigationStarting>;
        [[nodiscard]] auto FrameNavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& handler) const;
        auto FrameNavigationStarting(winrt::event_token const& token) const noexcept;
        auto FrameContentLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& handler) const;
        using FrameContentLoading_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_FrameContentLoading>;
        [[nodiscard]] auto FrameContentLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& handler) const;
        auto FrameContentLoading(winrt::event_token const& token) const noexcept;
        auto FrameDOMContentLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& handler) const;
        using FrameDOMContentLoaded_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_FrameDOMContentLoaded>;
        [[nodiscard]] auto FrameDOMContentLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& handler) const;
        auto FrameDOMContentLoaded(winrt::event_token const& token) const noexcept;
        auto FrameNavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& handler) const;
        using FrameNavigationCompleted_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_FrameNavigationCompleted>;
        [[nodiscard]] auto FrameNavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& handler) const;
        auto FrameNavigationCompleted(winrt::event_token const& token) const noexcept;
        auto LongRunningScriptDetected(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> const& handler) const;
        using LongRunningScriptDetected_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_LongRunningScriptDetected>;
        [[nodiscard]] auto LongRunningScriptDetected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> const& handler) const;
        auto LongRunningScriptDetected(winrt::event_token const& token) const noexcept;
        auto UnsafeContentWarningDisplaying(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using UnsafeContentWarningDisplaying_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_UnsafeContentWarningDisplaying>;
        [[nodiscard]] auto UnsafeContentWarningDisplaying(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto UnsafeContentWarningDisplaying(winrt::event_token const& token) const noexcept;
        auto UnviewableContentIdentified(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> const& handler) const;
        using UnviewableContentIdentified_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView2>::remove_UnviewableContentIdentified>;
        [[nodiscard]] auto UnviewableContentIdentified(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> const& handler) const;
        auto UnviewableContentIdentified(winrt::event_token const& token) const noexcept;
        auto NavigateWithHttpRequestMessage(winrt::Windows::Web::Http::HttpRequestMessage const& requestMessage) const;
        auto Focus(winrt::Windows::UI::Xaml::FocusState const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView3
    {
        [[nodiscard]] auto ContainsFullScreenElement() const;
        auto ContainsFullScreenElementChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ContainsFullScreenElementChanged_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView3, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView3>::remove_ContainsFullScreenElementChanged>;
        [[nodiscard]] auto ContainsFullScreenElementChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ContainsFullScreenElementChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView4
    {
        [[nodiscard]] auto ExecutionMode() const;
        [[nodiscard]] auto DeferredPermissionRequests() const;
        [[nodiscard]] auto Settings() const;
        auto UnsupportedUriSchemeIdentified(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> const& handler) const;
        using UnsupportedUriSchemeIdentified_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView4>::remove_UnsupportedUriSchemeIdentified>;
        [[nodiscard]] auto UnsupportedUriSchemeIdentified(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> const& handler) const;
        auto UnsupportedUriSchemeIdentified(winrt::event_token const& token) const noexcept;
        auto NewWindowRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> const& handler) const;
        using NewWindowRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView4>::remove_NewWindowRequested>;
        [[nodiscard]] auto NewWindowRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> const& handler) const;
        auto NewWindowRequested(winrt::event_token const& token) const noexcept;
        auto PermissionRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> const& handler) const;
        using PermissionRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView4, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView4>::remove_PermissionRequested>;
        [[nodiscard]] auto PermissionRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> const& handler) const;
        auto PermissionRequested(winrt::event_token const& token) const noexcept;
        auto AddWebAllowedObject(param::hstring const& name, winrt::Windows::Foundation::IInspectable const& pObject) const;
        auto DeferredPermissionRequestById(uint32_t id) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView5
    {
        [[nodiscard]] auto XYFocusLeft() const;
        auto XYFocusLeft(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusRight() const;
        auto XYFocusRight(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusUp() const;
        auto XYFocusUp(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto XYFocusDown() const;
        auto XYFocusDown(winrt::Windows::UI::Xaml::DependencyObject const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView6
    {
        auto SeparateProcessLost(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs> const& handler) const;
        using SeparateProcessLost_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView6, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView6>::remove_SeparateProcessLost>;
        [[nodiscard]] auto SeparateProcessLost(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs> const& handler) const;
        auto SeparateProcessLost(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView6>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView6<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebView7
    {
        auto WebResourceRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewWebResourceRequestedEventArgs> const& handler) const;
        using WebResourceRequested_revoker = impl::event_revoker<winrt::Windows::UI::Xaml::Controls::IWebView7, &impl::abi_t<winrt::Windows::UI::Xaml::Controls::IWebView7>::remove_WebResourceRequested>;
        [[nodiscard]] auto WebResourceRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Xaml::Controls::WebView, winrt::Windows::UI::Xaml::Controls::WebViewWebResourceRequestedEventArgs> const& handler) const;
        auto WebResourceRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebView7>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView7<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewBrush
    {
        [[nodiscard]] auto SourceName() const;
        auto SourceName(param::hstring const& value) const;
        auto Redraw() const;
        auto SetSource(winrt::Windows::UI::Xaml::Controls::WebView const& source) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewBrush>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewBrush<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewBrushStatics
    {
        [[nodiscard]] auto SourceNameProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewBrushStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewContentLoadingEventArgs
    {
        [[nodiscard]] auto Uri() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewContentLoadingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewDOMContentLoadedEventArgs
    {
        [[nodiscard]] auto Uri() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewDOMContentLoadedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewDeferredPermissionRequest
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto PermissionType() const;
        [[nodiscard]] auto Id() const;
        auto Allow() const;
        auto Deny() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewDeferredPermissionRequest<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewFactory4
    {
        auto CreateInstanceWithExecutionMode(winrt::Windows::UI::Xaml::Controls::WebViewExecutionMode const& executionMode) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewFactory4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewLongRunningScriptDetectedEventArgs
    {
        [[nodiscard]] auto ExecutionTime() const;
        [[nodiscard]] auto StopPageScriptExecution() const;
        auto StopPageScriptExecution(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewLongRunningScriptDetectedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationCompletedEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto IsSuccess() const;
        [[nodiscard]] auto WebErrorStatus() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationFailedEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto WebErrorStatus() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationFailedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationStartingEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewNewWindowRequestedEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto Referrer() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNewWindowRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequest
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto PermissionType() const;
        [[nodiscard]] auto Id() const;
        [[nodiscard]] auto State() const;
        auto Defer() const;
        auto Allow() const;
        auto Deny() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequest<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequestedEventArgs
    {
        [[nodiscard]] auto PermissionRequest() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewSeparateProcessLostEventArgs
    {
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewSeparateProcessLostEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewSettings
    {
        [[nodiscard]] auto IsJavaScriptEnabled() const;
        auto IsJavaScriptEnabled(bool value) const;
        [[nodiscard]] auto IsIndexedDBEnabled() const;
        auto IsIndexedDBEnabled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewSettings>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewSettings<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewStatics
    {
        [[nodiscard]] auto AnyScriptNotifyUri() const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto AllowedScriptNotifyUrisProperty() const;
        [[nodiscard]] auto DataTransferPackageProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewStatics2
    {
        [[nodiscard]] auto CanGoBackProperty() const;
        [[nodiscard]] auto CanGoForwardProperty() const;
        [[nodiscard]] auto DocumentTitleProperty() const;
        [[nodiscard]] auto DefaultBackgroundColorProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewStatics3
    {
        [[nodiscard]] auto ContainsFullScreenElementProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics3<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewStatics4
    {
        [[nodiscard]] auto DefaultExecutionMode() const;
        auto ClearTemporaryWebDataAsync() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics4<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewStatics5
    {
        [[nodiscard]] auto XYFocusLeftProperty() const;
        [[nodiscard]] auto XYFocusRightProperty() const;
        [[nodiscard]] auto XYFocusUpProperty() const;
        [[nodiscard]] auto XYFocusDownProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics5<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewUnsupportedUriSchemeIdentifiedEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs
    {
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto Referrer() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs2
    {
        [[nodiscard]] auto MediaType() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWebViewWebResourceRequestedEventArgs
    {
        [[nodiscard]] auto Request() const;
        [[nodiscard]] auto Response() const;
        auto Response(winrt::Windows::Web::Http::HttpResponseMessage const& value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWebViewWebResourceRequestedEventArgs>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewWebResourceRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWrapGrid
    {
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto HorizontalChildrenAlignment() const;
        auto HorizontalChildrenAlignment(winrt::Windows::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalChildrenAlignment() const;
        auto VerticalChildrenAlignment(winrt::Windows::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWrapGrid>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWrapGrid<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Xaml_Controls_IWrapGridStatics
    {
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto HorizontalChildrenAlignmentProperty() const;
        [[nodiscard]] auto VerticalChildrenAlignmentProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
    };
    template <> struct consume<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics>
    {
        template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWrapGridStatics<D>;
    };
}
#endif
