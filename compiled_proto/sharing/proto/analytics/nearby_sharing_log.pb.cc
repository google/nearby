// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/analytics/nearby_sharing_log.proto

#include "sharing/proto/analytics/nearby_sharing_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace nearby {
namespace sharing {
namespace analytics {
namespace proto {
constexpr SharingLog_AppInfo::SharingLog_AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_track_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SharingLog_AppInfoDefaultTypeInternal {
  constexpr SharingLog_AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AppInfoDefaultTypeInternal() {}
  union {
    SharingLog_AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AppInfoDefaultTypeInternal _SharingLog_AppInfo_default_instance_;
constexpr SharingLog_DeviceSettings::SharingLog_DeviceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visibility_(0)

  , data_usage_(0)

  , device_name_size_(0)
  , is_show_notification_enabled_(false)
  , is_bt_enabled_(false)
  , is_location_enabled_(false)
  , is_wifi_enabled_(false){}
struct SharingLog_DeviceSettingsDefaultTypeInternal {
  constexpr SharingLog_DeviceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DeviceSettingsDefaultTypeInternal() {}
  union {
    SharingLog_DeviceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DeviceSettingsDefaultTypeInternal _SharingLog_DeviceSettings_default_instance_;
constexpr SharingLog_PreferencesUsage::SharingLog_PreferencesUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(0)

  , action_status_(0)

  , prev_sub_action_(0)

  , next_sub_action_(0)
{}
struct SharingLog_PreferencesUsageDefaultTypeInternal {
  constexpr SharingLog_PreferencesUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_PreferencesUsageDefaultTypeInternal() {}
  union {
    SharingLog_PreferencesUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_PreferencesUsageDefaultTypeInternal _SharingLog_PreferencesUsage_default_instance_;
constexpr SharingLog_UnknownEvent::SharingLog_UnknownEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_UnknownEventDefaultTypeInternal {
  constexpr SharingLog_UnknownEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_UnknownEventDefaultTypeInternal() {}
  union {
    SharingLog_UnknownEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_UnknownEventDefaultTypeInternal _SharingLog_UnknownEvent_default_instance_;
constexpr SharingLog_EstablishConnection::SharingLog_EstablishConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share_target_info_(nullptr)
  , session_id_(int64_t{0})
  , status_(0)

  , transfer_position_(0)
  , duration_millis_(int64_t{0})
  , concurrent_connections_(0)
  , qr_code_flow_(false)
  , is_incoming_connection_(false){}
struct SharingLog_EstablishConnectionDefaultTypeInternal {
  constexpr SharingLog_EstablishConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_EstablishConnectionDefaultTypeInternal() {}
  union {
    SharingLog_EstablishConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_EstablishConnectionDefaultTypeInternal _SharingLog_EstablishConnection_default_instance_;
constexpr SharingLog_AcceptAgreements::SharingLog_AcceptAgreements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_AcceptAgreementsDefaultTypeInternal {
  constexpr SharingLog_AcceptAgreementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AcceptAgreementsDefaultTypeInternal() {}
  union {
    SharingLog_AcceptAgreements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AcceptAgreementsDefaultTypeInternal _SharingLog_AcceptAgreements_default_instance_;
constexpr SharingLog_DeclineAgreements::SharingLog_DeclineAgreements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DeclineAgreementsDefaultTypeInternal {
  constexpr SharingLog_DeclineAgreementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DeclineAgreementsDefaultTypeInternal() {}
  union {
    SharingLog_DeclineAgreements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DeclineAgreementsDefaultTypeInternal _SharingLog_DeclineAgreements_default_instance_;
constexpr SharingLog_EnableNearbySharing::SharingLog_EnableNearbySharing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , has_opted_in_(false){}
struct SharingLog_EnableNearbySharingDefaultTypeInternal {
  constexpr SharingLog_EnableNearbySharingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_EnableNearbySharingDefaultTypeInternal() {}
  union {
    SharingLog_EnableNearbySharing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_EnableNearbySharingDefaultTypeInternal _SharingLog_EnableNearbySharing_default_instance_;
constexpr SharingLog_SetAccount::SharingLog_SetAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_name_(0)
{}
struct SharingLog_SetAccountDefaultTypeInternal {
  constexpr SharingLog_SetAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SetAccountDefaultTypeInternal() {}
  union {
    SharingLog_SetAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SetAccountDefaultTypeInternal _SharingLog_SetAccount_default_instance_;
constexpr SharingLog_SetVisibility::SharingLog_SetVisibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visibility_(0)

  , source_visibility_(0)

  , duration_millis_(int64_t{0})
  , source_activity_name_(0)
{}
struct SharingLog_SetVisibilityDefaultTypeInternal {
  constexpr SharingLog_SetVisibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SetVisibilityDefaultTypeInternal() {}
  union {
    SharingLog_SetVisibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SetVisibilityDefaultTypeInternal _SharingLog_SetVisibility_default_instance_;
constexpr SharingLog_SetDataUsage::SharingLog_SetDataUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_preference_(0)

  , preference_(0)
{}
struct SharingLog_SetDataUsageDefaultTypeInternal {
  constexpr SharingLog_SetDataUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SetDataUsageDefaultTypeInternal() {}
  union {
    SharingLog_SetDataUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SetDataUsageDefaultTypeInternal _SharingLog_SetDataUsage_default_instance_;
constexpr SharingLog_ScanForShareTargetsStart::SharingLog_ScanForShareTargetsStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(int64_t{0})
  , status_(0)

  , scan_type_(0)

  , flow_id_(int64_t{0}){}
struct SharingLog_ScanForShareTargetsStartDefaultTypeInternal {
  constexpr SharingLog_ScanForShareTargetsStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ScanForShareTargetsStartDefaultTypeInternal() {}
  union {
    SharingLog_ScanForShareTargetsStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ScanForShareTargetsStartDefaultTypeInternal _SharingLog_ScanForShareTargetsStart_default_instance_;
constexpr SharingLog_ScanForShareTargetsEnd::SharingLog_ScanForShareTargetsEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(int64_t{0}){}
struct SharingLog_ScanForShareTargetsEndDefaultTypeInternal {
  constexpr SharingLog_ScanForShareTargetsEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ScanForShareTargetsEndDefaultTypeInternal() {}
  union {
    SharingLog_ScanForShareTargetsEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ScanForShareTargetsEndDefaultTypeInternal _SharingLog_ScanForShareTargetsEnd_default_instance_;
constexpr SharingLog_AdvertiseDevicePresenceStart::SharingLog_AdvertiseDevicePresenceStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(int64_t{0})
  , visibility_(0)

  , status_(0)

  , data_usage_(0)

  , device_name_size_(0)
  , advertising_mode_(0)

  , qr_code_flow_(false){}
struct SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal {
  constexpr SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal() {}
  union {
    SharingLog_AdvertiseDevicePresenceStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal _SharingLog_AdvertiseDevicePresenceStart_default_instance_;
constexpr SharingLog_AdvertiseDevicePresenceEnd::SharingLog_AdvertiseDevicePresenceEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(int64_t{0}){}
struct SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal {
  constexpr SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal() {}
  union {
    SharingLog_AdvertiseDevicePresenceEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal _SharingLog_AdvertiseDevicePresenceEnd_default_instance_;
constexpr SharingLog_SendFastInitialization::SharingLog_SendFastInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_SendFastInitializationDefaultTypeInternal {
  constexpr SharingLog_SendFastInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendFastInitializationDefaultTypeInternal() {}
  union {
    SharingLog_SendFastInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendFastInitializationDefaultTypeInternal _SharingLog_SendFastInitialization_default_instance_;
constexpr SharingLog_ReceiveFastInitialization::SharingLog_ReceiveFastInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_elapse_since_screen_unlock_millis_(int64_t{0})
  , notifications_enabled_(false)
  , notifications_filtered_(false){}
struct SharingLog_ReceiveFastInitializationDefaultTypeInternal {
  constexpr SharingLog_ReceiveFastInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ReceiveFastInitializationDefaultTypeInternal() {}
  union {
    SharingLog_ReceiveFastInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ReceiveFastInitializationDefaultTypeInternal _SharingLog_ReceiveFastInitialization_default_instance_;
constexpr SharingLog_DismissFastInitialization::SharingLog_DismissFastInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DismissFastInitializationDefaultTypeInternal {
  constexpr SharingLog_DismissFastInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DismissFastInitializationDefaultTypeInternal() {}
  union {
    SharingLog_DismissFastInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DismissFastInitializationDefaultTypeInternal _SharingLog_DismissFastInitialization_default_instance_;
constexpr SharingLog_AutoDismissFastInitialization::SharingLog_AutoDismissFastInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_AutoDismissFastInitializationDefaultTypeInternal {
  constexpr SharingLog_AutoDismissFastInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AutoDismissFastInitializationDefaultTypeInternal() {}
  union {
    SharingLog_AutoDismissFastInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AutoDismissFastInitializationDefaultTypeInternal _SharingLog_AutoDismissFastInitialization_default_instance_;
constexpr SharingLog_EventMetadata::SharingLog_EventMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : use_case_(0)

  , initial_opt_in_(false)
  , opt_in_(false)
  , initial_enable_status_(false)
  , flow_id_(int64_t{0})
  , session_id_(int64_t{0})
  , vendor_id_(0){}
struct SharingLog_EventMetadataDefaultTypeInternal {
  constexpr SharingLog_EventMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_EventMetadataDefaultTypeInternal() {}
  union {
    SharingLog_EventMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_EventMetadataDefaultTypeInternal _SharingLog_EventMetadata_default_instance_;
constexpr SharingLog_DiscoverShareTarget::SharingLog_DiscoverShareTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share_target_info_(nullptr)
  , duration_since_scanning_(nullptr)
  , session_id_(int64_t{0})
  , flow_id_(int64_t{0})
  , scan_type_(0)

  , latency_since_activity_start_millis_(int64_t{-1}){}
struct SharingLog_DiscoverShareTargetDefaultTypeInternal {
  constexpr SharingLog_DiscoverShareTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DiscoverShareTargetDefaultTypeInternal() {}
  union {
    SharingLog_DiscoverShareTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DiscoverShareTargetDefaultTypeInternal _SharingLog_DiscoverShareTarget_default_instance_;
constexpr SharingLog_ParsingFailedEndpointId::SharingLog_ParsingFailedEndpointId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : endpoint_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_since_scanning_(nullptr)
  , duration_since_last_sync_(nullptr)
  , session_id_(int64_t{0})
  , flow_id_(int64_t{0})
  , scan_type_(0)

  , parsing_failed_type_(0)

  , discovery_mode_(0)

  , latency_since_activity_start_millis_(int64_t{-1}){}
struct SharingLog_ParsingFailedEndpointIdDefaultTypeInternal {
  constexpr SharingLog_ParsingFailedEndpointIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ParsingFailedEndpointIdDefaultTypeInternal() {}
  union {
    SharingLog_ParsingFailedEndpointId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ParsingFailedEndpointIdDefaultTypeInternal _SharingLog_ParsingFailedEndpointId_default_instance_;
constexpr SharingLog_DescribeAttachments::SharingLog_DescribeAttachments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_info_(nullptr){}
struct SharingLog_DescribeAttachmentsDefaultTypeInternal {
  constexpr SharingLog_DescribeAttachmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DescribeAttachmentsDefaultTypeInternal() {}
  union {
    SharingLog_DescribeAttachments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DescribeAttachmentsDefaultTypeInternal _SharingLog_DescribeAttachments_default_instance_;
constexpr SharingLog_SendIntroduction::SharingLog_SendIntroduction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : share_target_info_(nullptr)
  , session_id_(int64_t{0})
  , transfer_position_(0)
  , concurrent_connections_(0){}
struct SharingLog_SendIntroductionDefaultTypeInternal {
  constexpr SharingLog_SendIntroductionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendIntroductionDefaultTypeInternal() {}
  union {
    SharingLog_SendIntroduction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendIntroductionDefaultTypeInternal _SharingLog_SendIntroduction_default_instance_;
constexpr SharingLog_ReceiveIntroduction::SharingLog_ReceiveIntroduction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share_target_info_(nullptr)
  , session_id_(int64_t{0}){}
struct SharingLog_ReceiveIntroductionDefaultTypeInternal {
  constexpr SharingLog_ReceiveIntroductionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ReceiveIntroductionDefaultTypeInternal() {}
  union {
    SharingLog_ReceiveIntroduction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ReceiveIntroductionDefaultTypeInternal _SharingLog_ReceiveIntroduction_default_instance_;
constexpr SharingLog_RespondToIntroduction::SharingLog_RespondToIntroduction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(int64_t{0})
  , action_(0)

  , qr_code_flow_(false){}
struct SharingLog_RespondToIntroductionDefaultTypeInternal {
  constexpr SharingLog_RespondToIntroductionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_RespondToIntroductionDefaultTypeInternal() {}
  union {
    SharingLog_RespondToIntroduction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_RespondToIntroductionDefaultTypeInternal _SharingLog_RespondToIntroduction_default_instance_;
constexpr SharingLog_SendAttachmentsStart::SharingLog_SendAttachmentsStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_info_(nullptr)
  , session_id_(int64_t{0})
  , transfer_position_(0)
  , concurrent_connections_(0)
  , qr_code_flow_(false){}
struct SharingLog_SendAttachmentsStartDefaultTypeInternal {
  constexpr SharingLog_SendAttachmentsStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendAttachmentsStartDefaultTypeInternal() {}
  union {
    SharingLog_SendAttachmentsStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendAttachmentsStartDefaultTypeInternal _SharingLog_SendAttachmentsStart_default_instance_;
constexpr SharingLog_SendAttachmentsEnd::SharingLog_SendAttachmentsEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attachments_info_(nullptr)
  , share_target_info_(nullptr)
  , session_id_(int64_t{0})
  , sent_bytes_(int64_t{0})
  , status_(0)

  , transfer_position_(0)
  , duration_millis_(int64_t{0})
  , concurrent_connections_(0)
  , connection_layer_status_(0)
{}
struct SharingLog_SendAttachmentsEndDefaultTypeInternal {
  constexpr SharingLog_SendAttachmentsEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendAttachmentsEndDefaultTypeInternal() {}
  union {
    SharingLog_SendAttachmentsEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendAttachmentsEndDefaultTypeInternal _SharingLog_SendAttachmentsEnd_default_instance_;
constexpr SharingLog_ReceiveAttachmentsStart::SharingLog_ReceiveAttachmentsStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_info_(nullptr)
  , share_target_info_(nullptr)
  , session_id_(int64_t{0}){}
struct SharingLog_ReceiveAttachmentsStartDefaultTypeInternal {
  constexpr SharingLog_ReceiveAttachmentsStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ReceiveAttachmentsStartDefaultTypeInternal() {}
  union {
    SharingLog_ReceiveAttachmentsStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ReceiveAttachmentsStartDefaultTypeInternal _SharingLog_ReceiveAttachmentsStart_default_instance_;
constexpr SharingLog_ReceiveAttachmentsEnd::SharingLog_ReceiveAttachmentsEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share_target_info_(nullptr)
  , session_id_(int64_t{0})
  , received_bytes_(int64_t{0})
  , status_(0)
{}
struct SharingLog_ReceiveAttachmentsEndDefaultTypeInternal {
  constexpr SharingLog_ReceiveAttachmentsEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ReceiveAttachmentsEndDefaultTypeInternal() {}
  union {
    SharingLog_ReceiveAttachmentsEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ReceiveAttachmentsEndDefaultTypeInternal _SharingLog_ReceiveAttachmentsEnd_default_instance_;
constexpr SharingLog_CancelConnection::SharingLog_CancelConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(int64_t{0})
  , transfer_position_(0)
  , concurrent_connections_(0){}
struct SharingLog_CancelConnectionDefaultTypeInternal {
  constexpr SharingLog_CancelConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_CancelConnectionDefaultTypeInternal() {}
  union {
    SharingLog_CancelConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_CancelConnectionDefaultTypeInternal _SharingLog_CancelConnection_default_instance_;
constexpr SharingLog_CancelSendingAttachments::SharingLog_CancelSendingAttachments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_CancelSendingAttachmentsDefaultTypeInternal {
  constexpr SharingLog_CancelSendingAttachmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_CancelSendingAttachmentsDefaultTypeInternal() {}
  union {
    SharingLog_CancelSendingAttachments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_CancelSendingAttachmentsDefaultTypeInternal _SharingLog_CancelSendingAttachments_default_instance_;
constexpr SharingLog_CancelReceivingAttachments::SharingLog_CancelReceivingAttachments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_CancelReceivingAttachmentsDefaultTypeInternal {
  constexpr SharingLog_CancelReceivingAttachmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_CancelReceivingAttachmentsDefaultTypeInternal() {}
  union {
    SharingLog_CancelReceivingAttachments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_CancelReceivingAttachmentsDefaultTypeInternal _SharingLog_CancelReceivingAttachments_default_instance_;
constexpr SharingLog_ProcessReceivedAttachmentsEnd::SharingLog_ProcessReceivedAttachmentsEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(int64_t{0})
  , status_(0)
{}
struct SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal {
  constexpr SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal() {}
  union {
    SharingLog_ProcessReceivedAttachmentsEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal _SharingLog_ProcessReceivedAttachmentsEnd_default_instance_;
constexpr SharingLog_OpenReceivedAttachments::SharingLog_OpenReceivedAttachments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_info_(nullptr)
  , session_id_(int64_t{0}){}
struct SharingLog_OpenReceivedAttachmentsDefaultTypeInternal {
  constexpr SharingLog_OpenReceivedAttachmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_OpenReceivedAttachmentsDefaultTypeInternal() {}
  union {
    SharingLog_OpenReceivedAttachments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_OpenReceivedAttachmentsDefaultTypeInternal _SharingLog_OpenReceivedAttachments_default_instance_;
constexpr SharingLog_LaunchSetupActivity::SharingLog_LaunchSetupActivity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_LaunchSetupActivityDefaultTypeInternal {
  constexpr SharingLog_LaunchSetupActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_LaunchSetupActivityDefaultTypeInternal() {}
  union {
    SharingLog_LaunchSetupActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_LaunchSetupActivityDefaultTypeInternal _SharingLog_LaunchSetupActivity_default_instance_;
constexpr SharingLog_AddContact::SharingLog_AddContact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : was_phone_added_(false)
  , was_email_added_(false){}
struct SharingLog_AddContactDefaultTypeInternal {
  constexpr SharingLog_AddContactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AddContactDefaultTypeInternal() {}
  union {
    SharingLog_AddContact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AddContactDefaultTypeInternal _SharingLog_AddContact_default_instance_;
constexpr SharingLog_RemoveContact::SharingLog_RemoveContact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : was_phone_removed_(false)
  , was_email_removed_(false){}
struct SharingLog_RemoveContactDefaultTypeInternal {
  constexpr SharingLog_RemoveContactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_RemoveContactDefaultTypeInternal() {}
  union {
    SharingLog_RemoveContact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_RemoveContactDefaultTypeInternal _SharingLog_RemoveContact_default_instance_;
constexpr SharingLog_FastShareServerResponse::SharingLog_FastShareServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , name_(0)

  , latency_millis_(int64_t{0})
  , purpose_(0)

  , requester_(0)

  , device_type_(0)
{}
struct SharingLog_FastShareServerResponseDefaultTypeInternal {
  constexpr SharingLog_FastShareServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_FastShareServerResponseDefaultTypeInternal() {}
  union {
    SharingLog_FastShareServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_FastShareServerResponseDefaultTypeInternal _SharingLog_FastShareServerResponse_default_instance_;
constexpr SharingLog_SendStart::SharingLog_SendStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : share_target_info_(nullptr)
  , session_id_(int64_t{0})
  , transfer_position_(0)
  , concurrent_connections_(0){}
struct SharingLog_SendStartDefaultTypeInternal {
  constexpr SharingLog_SendStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendStartDefaultTypeInternal() {}
  union {
    SharingLog_SendStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendStartDefaultTypeInternal _SharingLog_SendStart_default_instance_;
constexpr SharingLog_AcceptFastInitialization::SharingLog_AcceptFastInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_AcceptFastInitializationDefaultTypeInternal {
  constexpr SharingLog_AcceptFastInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AcceptFastInitializationDefaultTypeInternal() {}
  union {
    SharingLog_AcceptFastInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AcceptFastInitializationDefaultTypeInternal _SharingLog_AcceptFastInitialization_default_instance_;
constexpr SharingLog_LaunchActivity::SharingLog_LaunchActivity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referrer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_millis_(int64_t{0})
  , activity_name_(0)

  , previous_transfer_in_progress_(false)
  , has_opted_in_(false)
  , is_finishing_(false)
  , source_activity_name_(0)
{}
struct SharingLog_LaunchActivityDefaultTypeInternal {
  constexpr SharingLog_LaunchActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_LaunchActivityDefaultTypeInternal() {}
  union {
    SharingLog_LaunchActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_LaunchActivityDefaultTypeInternal _SharingLog_LaunchActivity_default_instance_;
constexpr SharingLog_DismissPrivacyNotification::SharingLog_DismissPrivacyNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DismissPrivacyNotificationDefaultTypeInternal {
  constexpr SharingLog_DismissPrivacyNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DismissPrivacyNotificationDefaultTypeInternal() {}
  union {
    SharingLog_DismissPrivacyNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DismissPrivacyNotificationDefaultTypeInternal _SharingLog_DismissPrivacyNotification_default_instance_;
constexpr SharingLog_TapPrivacyNotification::SharingLog_TapPrivacyNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapPrivacyNotificationDefaultTypeInternal {
  constexpr SharingLog_TapPrivacyNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapPrivacyNotificationDefaultTypeInternal() {}
  union {
    SharingLog_TapPrivacyNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapPrivacyNotificationDefaultTypeInternal _SharingLog_TapPrivacyNotification_default_instance_;
constexpr SharingLog_TapHelp::SharingLog_TapHelp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapHelpDefaultTypeInternal {
  constexpr SharingLog_TapHelpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapHelpDefaultTypeInternal() {}
  union {
    SharingLog_TapHelp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapHelpDefaultTypeInternal _SharingLog_TapHelp_default_instance_;
constexpr SharingLog_TapFeedback::SharingLog_TapFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapFeedbackDefaultTypeInternal {
  constexpr SharingLog_TapFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapFeedbackDefaultTypeInternal() {}
  union {
    SharingLog_TapFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapFeedbackDefaultTypeInternal _SharingLog_TapFeedback_default_instance_;
constexpr SharingLog_AddQuickSettingsTile::SharingLog_AddQuickSettingsTile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_AddQuickSettingsTileDefaultTypeInternal {
  constexpr SharingLog_AddQuickSettingsTileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AddQuickSettingsTileDefaultTypeInternal() {}
  union {
    SharingLog_AddQuickSettingsTile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AddQuickSettingsTileDefaultTypeInternal _SharingLog_AddQuickSettingsTile_default_instance_;
constexpr SharingLog_RemoveQuickSettingsTile::SharingLog_RemoveQuickSettingsTile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_RemoveQuickSettingsTileDefaultTypeInternal {
  constexpr SharingLog_RemoveQuickSettingsTileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_RemoveQuickSettingsTileDefaultTypeInternal() {}
  union {
    SharingLog_RemoveQuickSettingsTile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_RemoveQuickSettingsTileDefaultTypeInternal _SharingLog_RemoveQuickSettingsTile_default_instance_;
constexpr SharingLog_LaunchPhoneConsent::SharingLog_LaunchPhoneConsent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_LaunchPhoneConsentDefaultTypeInternal {
  constexpr SharingLog_LaunchPhoneConsentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_LaunchPhoneConsentDefaultTypeInternal() {}
  union {
    SharingLog_LaunchPhoneConsent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_LaunchPhoneConsentDefaultTypeInternal _SharingLog_LaunchPhoneConsent_default_instance_;
constexpr SharingLog_DisplayPhoneConsent::SharingLog_DisplayPhoneConsent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DisplayPhoneConsentDefaultTypeInternal {
  constexpr SharingLog_DisplayPhoneConsentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DisplayPhoneConsentDefaultTypeInternal() {}
  union {
    SharingLog_DisplayPhoneConsent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DisplayPhoneConsentDefaultTypeInternal _SharingLog_DisplayPhoneConsent_default_instance_;
constexpr SharingLog_TapQuickSettingsTile::SharingLog_TapQuickSettingsTile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapQuickSettingsTileDefaultTypeInternal {
  constexpr SharingLog_TapQuickSettingsTileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapQuickSettingsTileDefaultTypeInternal() {}
  union {
    SharingLog_TapQuickSettingsTile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapQuickSettingsTileDefaultTypeInternal _SharingLog_TapQuickSettingsTile_default_instance_;
constexpr SharingLog_TapQuickSettingsFileShare::SharingLog_TapQuickSettingsFileShare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapQuickSettingsFileShareDefaultTypeInternal {
  constexpr SharingLog_TapQuickSettingsFileShareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapQuickSettingsFileShareDefaultTypeInternal() {}
  union {
    SharingLog_TapQuickSettingsFileShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapQuickSettingsFileShareDefaultTypeInternal _SharingLog_TapQuickSettingsFileShare_default_instance_;
constexpr SharingLog_DisplayPrivacyNotification::SharingLog_DisplayPrivacyNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DisplayPrivacyNotificationDefaultTypeInternal {
  constexpr SharingLog_DisplayPrivacyNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DisplayPrivacyNotificationDefaultTypeInternal() {}
  union {
    SharingLog_DisplayPrivacyNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DisplayPrivacyNotificationDefaultTypeInternal _SharingLog_DisplayPrivacyNotification_default_instance_;
constexpr SharingLog_DefaultOptIn::SharingLog_DefaultOptIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_DefaultOptInDefaultTypeInternal {
  constexpr SharingLog_DefaultOptInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DefaultOptInDefaultTypeInternal() {}
  union {
    SharingLog_DefaultOptIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DefaultOptInDefaultTypeInternal _SharingLog_DefaultOptIn_default_instance_;
constexpr SharingLog_SetDeviceName::SharingLog_SetDeviceName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_name_size_(0){}
struct SharingLog_SetDeviceNameDefaultTypeInternal {
  constexpr SharingLog_SetDeviceNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SetDeviceNameDefaultTypeInternal() {}
  union {
    SharingLog_SetDeviceName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SetDeviceNameDefaultTypeInternal _SharingLog_SetDeviceName_default_instance_;
constexpr SharingLog_RequestSettingPermissions::SharingLog_RequestSettingPermissions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_type_(0)

  , permission_request_result_(0)
{}
struct SharingLog_RequestSettingPermissionsDefaultTypeInternal {
  constexpr SharingLog_RequestSettingPermissionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_RequestSettingPermissionsDefaultTypeInternal() {}
  union {
    SharingLog_RequestSettingPermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_RequestSettingPermissionsDefaultTypeInternal _SharingLog_RequestSettingPermissions_default_instance_;
constexpr SharingLog_LaunchConsent::SharingLog_LaunchConsent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consent_type_(0)

  , status_(0)
{}
struct SharingLog_LaunchConsentDefaultTypeInternal {
  constexpr SharingLog_LaunchConsentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_LaunchConsentDefaultTypeInternal() {}
  union {
    SharingLog_LaunchConsent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_LaunchConsentDefaultTypeInternal _SharingLog_LaunchConsent_default_instance_;
constexpr SharingLog_InstallAPKStatus::SharingLog_InstallAPKStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_()
  , _status_cached_byte_size_(0)
  , source_()
  , _source_cached_byte_size_(0){}
struct SharingLog_InstallAPKStatusDefaultTypeInternal {
  constexpr SharingLog_InstallAPKStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_InstallAPKStatusDefaultTypeInternal() {}
  union {
    SharingLog_InstallAPKStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_InstallAPKStatusDefaultTypeInternal _SharingLog_InstallAPKStatus_default_instance_;
constexpr SharingLog_VerifyAPKStatus::SharingLog_VerifyAPKStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_()
  , _status_cached_byte_size_(0)
  , source_()
  , _source_cached_byte_size_(0){}
struct SharingLog_VerifyAPKStatusDefaultTypeInternal {
  constexpr SharingLog_VerifyAPKStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_VerifyAPKStatusDefaultTypeInternal() {}
  union {
    SharingLog_VerifyAPKStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_VerifyAPKStatusDefaultTypeInternal _SharingLog_VerifyAPKStatus_default_instance_;
constexpr SharingLog_ToggleShowNotification::SharingLog_ToggleShowNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previous_status_(0)

  , current_status_(0)
{}
struct SharingLog_ToggleShowNotificationDefaultTypeInternal {
  constexpr SharingLog_ToggleShowNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ToggleShowNotificationDefaultTypeInternal() {}
  union {
    SharingLog_ToggleShowNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ToggleShowNotificationDefaultTypeInternal _SharingLog_ToggleShowNotification_default_instance_;
constexpr SharingLog_DecryptCertificateFailure::SharingLog_DecryptCertificateFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SharingLog_DecryptCertificateFailureDefaultTypeInternal {
  constexpr SharingLog_DecryptCertificateFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_DecryptCertificateFailureDefaultTypeInternal() {}
  union {
    SharingLog_DecryptCertificateFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_DecryptCertificateFailureDefaultTypeInternal _SharingLog_DecryptCertificateFailure_default_instance_;
constexpr SharingLog_ShowAllowPermissionAutoAccess::SharingLog_ShowAllowPermissionAutoAccess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_name_(0)

  , allowed_auto_access_(false)
  , is_wifi_missing_(false)
  , is_bt_missing_(false){}
struct SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal {
  constexpr SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal() {}
  union {
    SharingLog_ShowAllowPermissionAutoAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal _SharingLog_ShowAllowPermissionAutoAccess_default_instance_;
constexpr SharingLog_TapQrCode::SharingLog_TapQrCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_TapQrCodeDefaultTypeInternal {
  constexpr SharingLog_TapQrCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TapQrCodeDefaultTypeInternal() {}
  union {
    SharingLog_TapQrCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TapQrCodeDefaultTypeInternal _SharingLog_TapQrCode_default_instance_;
constexpr SharingLog_QrCodeLinkShown::SharingLog_QrCodeLinkShown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SharingLog_QrCodeLinkShownDefaultTypeInternal {
  constexpr SharingLog_QrCodeLinkShownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_QrCodeLinkShownDefaultTypeInternal() {}
  union {
    SharingLog_QrCodeLinkShown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_QrCodeLinkShownDefaultTypeInternal _SharingLog_QrCodeLinkShown_default_instance_;
constexpr SharingLog_FastInitDiscoverDevice::SharingLog_FastInitDiscoverDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fast_init_type_(0)

  , fast_init_state_(0)
{}
struct SharingLog_FastInitDiscoverDeviceDefaultTypeInternal {
  constexpr SharingLog_FastInitDiscoverDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_FastInitDiscoverDeviceDefaultTypeInternal() {}
  union {
    SharingLog_FastInitDiscoverDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_FastInitDiscoverDeviceDefaultTypeInternal _SharingLog_FastInitDiscoverDevice_default_instance_;
constexpr SharingLog_ShareTargetInfo::SharingLog_ShareTargetInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_type_(0)

  , os_type_(0)

  , device_relationship_(0)
{}
struct SharingLog_ShareTargetInfoDefaultTypeInternal {
  constexpr SharingLog_ShareTargetInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_ShareTargetInfoDefaultTypeInternal() {}
  union {
    SharingLog_ShareTargetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_ShareTargetInfoDefaultTypeInternal _SharingLog_ShareTargetInfo_default_instance_;
constexpr SharingLog_AttachmentsInfo::SharingLog_AttachmentsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_attachment_()
  , file_attachment_()
  , wifi_credentials_attachment_()
  , app_attachment_()
  , stream_attachment_()
  , required_app_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SharingLog_AttachmentsInfoDefaultTypeInternal {
  constexpr SharingLog_AttachmentsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AttachmentsInfoDefaultTypeInternal() {}
  union {
    SharingLog_AttachmentsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AttachmentsInfoDefaultTypeInternal _SharingLog_AttachmentsInfo_default_instance_;
constexpr SharingLog_TextAttachment::SharingLog_TextAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_bytes_(int64_t{0})
  , type_(0)

  , source_type_(0)

  , batch_id_(int64_t{0}){}
struct SharingLog_TextAttachmentDefaultTypeInternal {
  constexpr SharingLog_TextAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_TextAttachmentDefaultTypeInternal() {}
  union {
    SharingLog_TextAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_TextAttachmentDefaultTypeInternal _SharingLog_TextAttachment_default_instance_;
constexpr SharingLog_FileAttachment::SharingLog_FileAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_bytes_(int64_t{0})
  , type_(0)

  , source_type_(0)

  , offset_bytes_(int64_t{0})
  , batch_id_(int64_t{0}){}
struct SharingLog_FileAttachmentDefaultTypeInternal {
  constexpr SharingLog_FileAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_FileAttachmentDefaultTypeInternal() {}
  union {
    SharingLog_FileAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_FileAttachmentDefaultTypeInternal _SharingLog_FileAttachment_default_instance_;
constexpr SharingLog_WifiCredentialsAttachment::SharingLog_WifiCredentialsAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_id_(int64_t{0})
  , security_type_(0)
  , source_type_(0)
{}
struct SharingLog_WifiCredentialsAttachmentDefaultTypeInternal {
  constexpr SharingLog_WifiCredentialsAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_WifiCredentialsAttachmentDefaultTypeInternal() {}
  union {
    SharingLog_WifiCredentialsAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_WifiCredentialsAttachmentDefaultTypeInternal _SharingLog_WifiCredentialsAttachment_default_instance_;
constexpr SharingLog_AppAttachment::SharingLog_AppAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(int64_t{0})
  , batch_id_(int64_t{0})
  , source_type_(0)
{}
struct SharingLog_AppAttachmentDefaultTypeInternal {
  constexpr SharingLog_AppAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AppAttachmentDefaultTypeInternal() {}
  union {
    SharingLog_AppAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AppAttachmentDefaultTypeInternal _SharingLog_AppAttachment_default_instance_;
constexpr SharingLog_StreamAttachment::SharingLog_StreamAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_id_(int64_t{0})
  , source_type_(0)
{}
struct SharingLog_StreamAttachmentDefaultTypeInternal {
  constexpr SharingLog_StreamAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_StreamAttachmentDefaultTypeInternal() {}
  union {
    SharingLog_StreamAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_StreamAttachmentDefaultTypeInternal _SharingLog_StreamAttachment_default_instance_;
constexpr SharingLog_AppCrash::SharingLog_AppCrash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crash_reason_(0)
{}
struct SharingLog_AppCrashDefaultTypeInternal {
  constexpr SharingLog_AppCrashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_AppCrashDefaultTypeInternal() {}
  union {
    SharingLog_AppCrash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_AppCrashDefaultTypeInternal _SharingLog_AppCrash_default_instance_;
constexpr SharingLog_SetupWizard::SharingLog_SetupWizard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visibility_(0)
{}
struct SharingLog_SetupWizardDefaultTypeInternal {
  constexpr SharingLog_SetupWizardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SetupWizardDefaultTypeInternal() {}
  union {
    SharingLog_SetupWizard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SetupWizardDefaultTypeInternal _SharingLog_SetupWizard_default_instance_;
constexpr SharingLog_SendDesktopNotification::SharingLog_SendDesktopNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(0)
{}
struct SharingLog_SendDesktopNotificationDefaultTypeInternal {
  constexpr SharingLog_SendDesktopNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendDesktopNotificationDefaultTypeInternal() {}
  union {
    SharingLog_SendDesktopNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendDesktopNotificationDefaultTypeInternal _SharingLog_SendDesktopNotification_default_instance_;
constexpr SharingLog_SendDesktopTransferEvent::SharingLog_SendDesktopTransferEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(0)
{}
struct SharingLog_SendDesktopTransferEventDefaultTypeInternal {
  constexpr SharingLog_SendDesktopTransferEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLog_SendDesktopTransferEventDefaultTypeInternal() {}
  union {
    SharingLog_SendDesktopTransferEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLog_SendDesktopTransferEventDefaultTypeInternal _SharingLog_SendDesktopTransferEvent_default_instance_;
constexpr SharingLog::SharingLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , files_migration_phase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unknown_event_(nullptr)
  , accept_agreements_(nullptr)
  , enable_nearby_sharing_(nullptr)
  , set_visibility_(nullptr)
  , describe_attachments_(nullptr)
  , scan_for_share_targets_start_(nullptr)
  , scan_for_share_targets_end_(nullptr)
  , advertise_device_presence_start_(nullptr)
  , advertise_device_presence_end_(nullptr)
  , send_initialization_(nullptr)
  , receive_initialization_(nullptr)
  , discover_share_target_(nullptr)
  , send_introduction_(nullptr)
  , receive_introduction_(nullptr)
  , respond_introduction_(nullptr)
  , send_attachments_start_(nullptr)
  , send_attachments_end_(nullptr)
  , receive_attachments_start_(nullptr)
  , receive_attachments_end_(nullptr)
  , cancel_sending_attachments_(nullptr)
  , cancel_receiving_attachments_(nullptr)
  , open_received_attachments_(nullptr)
  , launch_activity_(nullptr)
  , add_contact_(nullptr)
  , remove_contact_(nullptr)
  , fast_share_server_response_(nullptr)
  , send_start_(nullptr)
  , accept_fast_initialization_(nullptr)
  , set_data_usage_(nullptr)
  , dismiss_fast_initialization_(nullptr)
  , cancel_connection_(nullptr)
  , dismiss_privacy_notification_(nullptr)
  , tap_privacy_notification_(nullptr)
  , tap_help_(nullptr)
  , tap_feedback_(nullptr)
  , add_quick_settings_tile_(nullptr)
  , remove_quick_settings_tile_(nullptr)
  , launch_phone_consent_(nullptr)
  , tap_quick_settings_tile_(nullptr)
  , install_apk_status_(nullptr)
  , verify_apk_status_(nullptr)
  , launch_consent_(nullptr)
  , process_received_attachments_end_(nullptr)
  , toggle_show_notification_(nullptr)
  , set_device_name_(nullptr)
  , decline_agreements_(nullptr)
  , request_setting_permissions_(nullptr)
  , device_settings_(nullptr)
  , establish_connection_(nullptr)
  , auto_dismiss_fast_initialization_(nullptr)
  , event_metadata_(nullptr)
  , app_crash_(nullptr)
  , tap_quick_settings_file_share_(nullptr)
  , app_info_(nullptr)
  , display_privacy_notification_(nullptr)
  , display_phone_consent_(nullptr)
  , preferences_usage_(nullptr)
  , default_opt_in_(nullptr)
  , setup_wizard_(nullptr)
  , tap_qr_code_(nullptr)
  , qr_code_link_shown_(nullptr)
  , parsing_failed_endpoint_id_(nullptr)
  , fast_init_discover_device_(nullptr)
  , send_desktop_notification_(nullptr)
  , send_desktop_transfer_event_(nullptr)
  , set_account_(nullptr)
  , decrypt_certificate_failure_(nullptr)
  , show_allow_permission_auto_access_(nullptr)
  , event_type_(0)

  , log_source_(0)

  , event_category_(0)
{}
struct SharingLogDefaultTypeInternal {
  constexpr SharingLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharingLogDefaultTypeInternal() {}
  union {
    SharingLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharingLogDefaultTypeInternal _SharingLog_default_instance_;
}  // namespace proto
}  // namespace analytics
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace analytics {
namespace proto {
bool SharingLog_TextAttachment_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharingLog_TextAttachment_Type_strings[4] = {};

static const char SharingLog_TextAttachment_Type_names[] =
  "ADDRESS"
  "PHONE_NUMBER"
  "UNKNOWN_TEXT_TYPE"
  "URL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharingLog_TextAttachment_Type_entries[] = {
  { {SharingLog_TextAttachment_Type_names + 0, 7}, 2 },
  { {SharingLog_TextAttachment_Type_names + 7, 12}, 3 },
  { {SharingLog_TextAttachment_Type_names + 19, 17}, 0 },
  { {SharingLog_TextAttachment_Type_names + 36, 3}, 1 },
};

static const int SharingLog_TextAttachment_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN_TEXT_TYPE
  3, // 1 -> URL
  0, // 2 -> ADDRESS
  1, // 3 -> PHONE_NUMBER
};

const std::string& SharingLog_TextAttachment_Type_Name(
    SharingLog_TextAttachment_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharingLog_TextAttachment_Type_entries,
          SharingLog_TextAttachment_Type_entries_by_number,
          4, SharingLog_TextAttachment_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharingLog_TextAttachment_Type_entries,
      SharingLog_TextAttachment_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharingLog_TextAttachment_Type_strings[idx].get();
}
bool SharingLog_TextAttachment_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingLog_TextAttachment_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharingLog_TextAttachment_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SharingLog_TextAttachment_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::UNKNOWN_TEXT_TYPE;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::URL;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::ADDRESS;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::PHONE_NUMBER;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::Type_MIN;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment::Type_MAX;
constexpr int SharingLog_TextAttachment::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SharingLog_FileAttachment_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharingLog_FileAttachment_Type_strings[6] = {};

static const char SharingLog_FileAttachment_Type_names[] =
  "ANDROID_APP"
  "AUDIO"
  "DOCUMENT"
  "IMAGE"
  "UNKNOWN_FILE_TYPE"
  "VIDEO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharingLog_FileAttachment_Type_entries[] = {
  { {SharingLog_FileAttachment_Type_names + 0, 11}, 3 },
  { {SharingLog_FileAttachment_Type_names + 11, 5}, 4 },
  { {SharingLog_FileAttachment_Type_names + 16, 8}, 5 },
  { {SharingLog_FileAttachment_Type_names + 24, 5}, 1 },
  { {SharingLog_FileAttachment_Type_names + 29, 17}, 0 },
  { {SharingLog_FileAttachment_Type_names + 46, 5}, 2 },
};

static const int SharingLog_FileAttachment_Type_entries_by_number[] = {
  4, // 0 -> UNKNOWN_FILE_TYPE
  3, // 1 -> IMAGE
  5, // 2 -> VIDEO
  0, // 3 -> ANDROID_APP
  1, // 4 -> AUDIO
  2, // 5 -> DOCUMENT
};

const std::string& SharingLog_FileAttachment_Type_Name(
    SharingLog_FileAttachment_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharingLog_FileAttachment_Type_entries,
          SharingLog_FileAttachment_Type_entries_by_number,
          6, SharingLog_FileAttachment_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharingLog_FileAttachment_Type_entries,
      SharingLog_FileAttachment_Type_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharingLog_FileAttachment_Type_strings[idx].get();
}
bool SharingLog_FileAttachment_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingLog_FileAttachment_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharingLog_FileAttachment_Type_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<SharingLog_FileAttachment_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::UNKNOWN_FILE_TYPE;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::IMAGE;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::VIDEO;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::ANDROID_APP;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::AUDIO;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::DOCUMENT;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::Type_MIN;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment::Type_MAX;
constexpr int SharingLog_FileAttachment::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SharingLog_AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AppInfo>()._has_bits_);
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_track(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_AppInfo::SharingLog_AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AppInfo)
}
SharingLog_AppInfo::SharingLog_AppInfo(const SharingLog_AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_version()) {
    app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_version(), 
      GetArenaForAllocation());
  }
  app_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_language()) {
    app_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_language(), 
      GetArenaForAllocation());
  }
  update_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update_track()) {
    update_track_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_track(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AppInfo)
}

inline void SharingLog_AppInfo::SharedCtor() {
app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SharingLog_AppInfo::~SharingLog_AppInfo() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_track_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_AppInfo::ArenaDtor(void* object) {
  SharingLog_AppInfo* _this = reinterpret_cast< SharingLog_AppInfo* >(object);
  (void)_this;
}
void SharingLog_AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      app_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      update_track_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string update_track = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_update_track();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_version(), target);
  }

  // optional string app_language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_language(), target);
  }

  // optional string update_track = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_track(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  return target;
}

size_t SharingLog_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string app_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_version());
    }

    // optional string app_language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_language());
    }

    // optional string update_track = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_track());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AppInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AppInfo*>(
      &from));
}

void SharingLog_AppInfo::MergeFrom(const SharingLog_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_version(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_app_language(from._internal_app_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_update_track(from._internal_update_track());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AppInfo::CopyFrom(const SharingLog_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AppInfo::IsInitialized() const {
  return true;
}

void SharingLog_AppInfo::InternalSwap(SharingLog_AppInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_version_, lhs_arena,
      &other->app_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_language_, lhs_arena,
      &other->app_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_track_, lhs_arena,
      &other->update_track_, rhs_arena
  );
}

std::string SharingLog_AppInfo::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AppInfo";
}


// ===================================================================

class SharingLog_DeviceSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_DeviceSettings>()._has_bits_);
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_show_notification_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_bt_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_location_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_wifi_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SharingLog_DeviceSettings::SharingLog_DeviceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
}
SharingLog_DeviceSettings::SharingLog_DeviceSettings(const SharingLog_DeviceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&visibility_, &from.visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_wifi_enabled_) -
    reinterpret_cast<char*>(&visibility_)) + sizeof(is_wifi_enabled_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
}

inline void SharingLog_DeviceSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visibility_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_wifi_enabled_) -
    reinterpret_cast<char*>(&visibility_)) + sizeof(is_wifi_enabled_));
}

SharingLog_DeviceSettings::~SharingLog_DeviceSettings() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DeviceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DeviceSettings::ArenaDtor(void* object) {
  SharingLog_DeviceSettings* _this = reinterpret_cast< SharingLog_DeviceSettings* >(object);
  (void)_this;
}
void SharingLog_DeviceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DeviceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DeviceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&visibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_wifi_enabled_) -
        reinterpret_cast<char*>(&visibility_)) + sizeof(is_wifi_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DeviceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.Visibility visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::Visibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::location::nearby::proto::sharing::Visibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DataUsage data_usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DataUsage_IsValid(val))) {
            _internal_set_data_usage(static_cast<::location::nearby::proto::sharing::DataUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_name_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_device_name_size(&has_bits);
          device_name_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_show_notification_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_show_notification_enabled(&has_bits);
          is_show_notification_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bt_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_bt_enabled(&has_bits);
          is_bt_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_location_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_location_enabled(&has_bits);
          is_location_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wifi_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_wifi_enabled(&has_bits);
          is_wifi_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DeviceSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_visibility(), target);
  }

  // optional .location.nearby.proto.sharing.DataUsage data_usage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_usage(), target);
  }

  // optional int32 device_name_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_device_name_size(), target);
  }

  // optional bool is_show_notification_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_show_notification_enabled(), target);
  }

  // optional bool is_bt_enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_bt_enabled(), target);
  }

  // optional bool is_location_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_location_enabled(), target);
  }

  // optional bool is_wifi_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wifi_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  return target;
}

size_t SharingLog_DeviceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .location.nearby.proto.sharing.Visibility visibility = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional .location.nearby.proto.sharing.DataUsage data_usage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_usage());
    }

    // optional int32 device_name_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_device_name_size());
    }

    // optional bool is_show_notification_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_bt_enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_location_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DeviceSettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DeviceSettings*>(
      &from));
}

void SharingLog_DeviceSettings::MergeFrom(const SharingLog_DeviceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_usage_ = from.data_usage_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_size_ = from.device_name_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_show_notification_enabled_ = from.is_show_notification_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_bt_enabled_ = from.is_bt_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_location_enabled_ = from.is_location_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wifi_enabled_ = from.is_wifi_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DeviceSettings::CopyFrom(const SharingLog_DeviceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DeviceSettings::IsInitialized() const {
  return true;
}

void SharingLog_DeviceSettings::InternalSwap(SharingLog_DeviceSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_DeviceSettings, is_wifi_enabled_)
      + sizeof(SharingLog_DeviceSettings::is_wifi_enabled_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_DeviceSettings, visibility_)>(
          reinterpret_cast<char*>(&visibility_),
          reinterpret_cast<char*>(&other->visibility_));
}

std::string SharingLog_DeviceSettings::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DeviceSettings";
}


// ===================================================================

class SharingLog_PreferencesUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_PreferencesUsage>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_sub_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_sub_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SharingLog_PreferencesUsage::SharingLog_PreferencesUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
}
SharingLog_PreferencesUsage::SharingLog_PreferencesUsage(const SharingLog_PreferencesUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_sub_action_) -
    reinterpret_cast<char*>(&action_)) + sizeof(next_sub_action_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
}

inline void SharingLog_PreferencesUsage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_sub_action_) -
    reinterpret_cast<char*>(&action_)) + sizeof(next_sub_action_));
}

SharingLog_PreferencesUsage::~SharingLog_PreferencesUsage() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_PreferencesUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_PreferencesUsage::ArenaDtor(void* object) {
  SharingLog_PreferencesUsage* _this = reinterpret_cast< SharingLog_PreferencesUsage* >(object);
  (void)_this;
}
void SharingLog_PreferencesUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_PreferencesUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_PreferencesUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_sub_action_) -
        reinterpret_cast<char*>(&action_)) + sizeof(next_sub_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_PreferencesUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.PreferencesAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PreferencesAction_IsValid(val))) {
            _internal_set_action(static_cast<::location::nearby::proto::sharing::PreferencesAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.PreferencesActionStatus action_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PreferencesActionStatus_IsValid(val))) {
            _internal_set_action_status(static_cast<::location::nearby::proto::sharing::PreferencesActionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.PreferencesAction prev_sub_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PreferencesAction_IsValid(val))) {
            _internal_set_prev_sub_action(static_cast<::location::nearby::proto::sharing::PreferencesAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.PreferencesAction next_sub_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PreferencesAction_IsValid(val))) {
            _internal_set_next_sub_action(static_cast<::location::nearby::proto::sharing::PreferencesAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_PreferencesUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.PreferencesAction action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // optional .location.nearby.proto.sharing.PreferencesActionStatus action_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action_status(), target);
  }

  // optional .location.nearby.proto.sharing.PreferencesAction prev_sub_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_prev_sub_action(), target);
  }

  // optional .location.nearby.proto.sharing.PreferencesAction next_sub_action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_next_sub_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  return target;
}

size_t SharingLog_PreferencesUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .location.nearby.proto.sharing.PreferencesAction action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional .location.nearby.proto.sharing.PreferencesActionStatus action_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_status());
    }

    // optional .location.nearby.proto.sharing.PreferencesAction prev_sub_action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prev_sub_action());
    }

    // optional .location.nearby.proto.sharing.PreferencesAction next_sub_action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_sub_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_PreferencesUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_PreferencesUsage*>(
      &from));
}

void SharingLog_PreferencesUsage::MergeFrom(const SharingLog_PreferencesUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_status_ = from.action_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_sub_action_ = from.prev_sub_action_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_sub_action_ = from.next_sub_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_PreferencesUsage::CopyFrom(const SharingLog_PreferencesUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_PreferencesUsage::IsInitialized() const {
  return true;
}

void SharingLog_PreferencesUsage::InternalSwap(SharingLog_PreferencesUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_PreferencesUsage, next_sub_action_)
      + sizeof(SharingLog_PreferencesUsage::next_sub_action_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_PreferencesUsage, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

std::string SharingLog_PreferencesUsage::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.PreferencesUsage";
}


// ===================================================================

class SharingLog_UnknownEvent::_Internal {
 public:
};

SharingLog_UnknownEvent::SharingLog_UnknownEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
}
SharingLog_UnknownEvent::SharingLog_UnknownEvent(const SharingLog_UnknownEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
}

inline void SharingLog_UnknownEvent::SharedCtor() {
}

SharingLog_UnknownEvent::~SharingLog_UnknownEvent() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_UnknownEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_UnknownEvent::ArenaDtor(void* object) {
  SharingLog_UnknownEvent* _this = reinterpret_cast< SharingLog_UnknownEvent* >(object);
  (void)_this;
}
void SharingLog_UnknownEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_UnknownEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_UnknownEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_UnknownEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_UnknownEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  return target;
}

size_t SharingLog_UnknownEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_UnknownEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_UnknownEvent*>(
      &from));
}

void SharingLog_UnknownEvent::MergeFrom(const SharingLog_UnknownEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_UnknownEvent::CopyFrom(const SharingLog_UnknownEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_UnknownEvent::IsInitialized() const {
  return true;
}

void SharingLog_UnknownEvent::InternalSwap(SharingLog_UnknownEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_UnknownEvent::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.UnknownEvent";
}


// ===================================================================

class SharingLog_EstablishConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_EstablishConnection>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_EstablishConnection* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qr_code_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_incoming_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_EstablishConnection::_Internal::share_target_info(const SharingLog_EstablishConnection* msg) {
  return *msg->share_target_info_;
}
SharingLog_EstablishConnection::SharingLog_EstablishConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
}
SharingLog_EstablishConnection::SharingLog_EstablishConnection(const SharingLog_EstablishConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_incoming_connection_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(is_incoming_connection_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
}

inline void SharingLog_EstablishConnection::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_incoming_connection_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(is_incoming_connection_));
}

SharingLog_EstablishConnection::~SharingLog_EstablishConnection() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_EstablishConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_EstablishConnection::ArenaDtor(void* object) {
  SharingLog_EstablishConnection* _this = reinterpret_cast< SharingLog_EstablishConnection* >(object);
  (void)_this;
}
void SharingLog_EstablishConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_EstablishConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_EstablishConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qr_code_flow_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  }
  is_incoming_connection_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_EstablishConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.EstablishConnectionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::EstablishConnectionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::EstablishConnectionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_duration_millis(&has_bits);
          duration_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool qr_code_flow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_qr_code_flow(&has_bits);
          qr_code_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_incoming_connection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_incoming_connection(&has_bits);
          is_incoming_connection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_EstablishConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.EstablishConnectionStatus status = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional int64 session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_session_id(), target);
  }

  // optional int32 transfer_position = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_concurrent_connections(), target);
  }

  // optional int64 duration_millis = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_duration_millis(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::share_target_info(this), target, stream);
  }

  // optional string referrer_name = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_referrer_name(), target);
  }

  // optional bool qr_code_flow = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_qr_code_flow(), target);
  }

  // optional bool is_incoming_connection = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_incoming_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  return target;
}

size_t SharingLog_EstablishConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string referrer_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional .location.nearby.proto.sharing.EstablishConnectionStatus status = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional int32 transfer_position = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int64 duration_millis = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_millis());
    }

    // optional int32 concurrent_connections = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

    // optional bool qr_code_flow = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_incoming_connection = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_EstablishConnection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_EstablishConnection*>(
      &from));
}

void SharingLog_EstablishConnection::MergeFrom(const SharingLog_EstablishConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_millis_ = from.duration_millis_;
    }
    if (cached_has_bits & 0x00000040u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    if (cached_has_bits & 0x00000080u) {
      qr_code_flow_ = from.qr_code_flow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_incoming_connection(from._internal_is_incoming_connection());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_EstablishConnection::CopyFrom(const SharingLog_EstablishConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_EstablishConnection::IsInitialized() const {
  return true;
}

void SharingLog_EstablishConnection::InternalSwap(SharingLog_EstablishConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_EstablishConnection, is_incoming_connection_)
      + sizeof(SharingLog_EstablishConnection::is_incoming_connection_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_EstablishConnection, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
}

std::string SharingLog_EstablishConnection::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.EstablishConnection";
}


// ===================================================================

class SharingLog_AcceptAgreements::_Internal {
 public:
};

SharingLog_AcceptAgreements::SharingLog_AcceptAgreements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
}
SharingLog_AcceptAgreements::SharingLog_AcceptAgreements(const SharingLog_AcceptAgreements& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
}

inline void SharingLog_AcceptAgreements::SharedCtor() {
}

SharingLog_AcceptAgreements::~SharingLog_AcceptAgreements() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AcceptAgreements::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AcceptAgreements::ArenaDtor(void* object) {
  SharingLog_AcceptAgreements* _this = reinterpret_cast< SharingLog_AcceptAgreements* >(object);
  (void)_this;
}
void SharingLog_AcceptAgreements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AcceptAgreements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AcceptAgreements::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AcceptAgreements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AcceptAgreements::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  return target;
}

size_t SharingLog_AcceptAgreements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AcceptAgreements::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AcceptAgreements*>(
      &from));
}

void SharingLog_AcceptAgreements::MergeFrom(const SharingLog_AcceptAgreements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AcceptAgreements::CopyFrom(const SharingLog_AcceptAgreements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AcceptAgreements::IsInitialized() const {
  return true;
}

void SharingLog_AcceptAgreements::InternalSwap(SharingLog_AcceptAgreements* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_AcceptAgreements::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AcceptAgreements";
}


// ===================================================================

class SharingLog_DeclineAgreements::_Internal {
 public:
};

SharingLog_DeclineAgreements::SharingLog_DeclineAgreements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
}
SharingLog_DeclineAgreements::SharingLog_DeclineAgreements(const SharingLog_DeclineAgreements& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
}

inline void SharingLog_DeclineAgreements::SharedCtor() {
}

SharingLog_DeclineAgreements::~SharingLog_DeclineAgreements() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DeclineAgreements::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DeclineAgreements::ArenaDtor(void* object) {
  SharingLog_DeclineAgreements* _this = reinterpret_cast< SharingLog_DeclineAgreements* >(object);
  (void)_this;
}
void SharingLog_DeclineAgreements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DeclineAgreements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DeclineAgreements::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DeclineAgreements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DeclineAgreements::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  return target;
}

size_t SharingLog_DeclineAgreements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DeclineAgreements::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DeclineAgreements*>(
      &from));
}

void SharingLog_DeclineAgreements::MergeFrom(const SharingLog_DeclineAgreements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DeclineAgreements::CopyFrom(const SharingLog_DeclineAgreements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DeclineAgreements::IsInitialized() const {
  return true;
}

void SharingLog_DeclineAgreements::InternalSwap(SharingLog_DeclineAgreements* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DeclineAgreements::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DeclineAgreements";
}


// ===================================================================

class SharingLog_EnableNearbySharing::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_EnableNearbySharing>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_opted_in(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_EnableNearbySharing::SharingLog_EnableNearbySharing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
}
SharingLog_EnableNearbySharing::SharingLog_EnableNearbySharing(const SharingLog_EnableNearbySharing& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_opted_in_) -
    reinterpret_cast<char*>(&status_)) + sizeof(has_opted_in_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
}

inline void SharingLog_EnableNearbySharing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_opted_in_) -
    reinterpret_cast<char*>(&status_)) + sizeof(has_opted_in_));
}

SharingLog_EnableNearbySharing::~SharingLog_EnableNearbySharing() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_EnableNearbySharing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_EnableNearbySharing::ArenaDtor(void* object) {
  SharingLog_EnableNearbySharing* _this = reinterpret_cast< SharingLog_EnableNearbySharing* >(object);
  (void)_this;
}
void SharingLog_EnableNearbySharing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_EnableNearbySharing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_EnableNearbySharing::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_opted_in_) -
        reinterpret_cast<char*>(&status_)) + sizeof(has_opted_in_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_EnableNearbySharing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.NearbySharingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::NearbySharingStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::NearbySharingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool has_opted_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_opted_in(&has_bits);
          has_opted_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_EnableNearbySharing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.NearbySharingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional bool has_opted_in = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_opted_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  return target;
}

size_t SharingLog_EnableNearbySharing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.NearbySharingStatus status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional bool has_opted_in = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_EnableNearbySharing::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_EnableNearbySharing*>(
      &from));
}

void SharingLog_EnableNearbySharing::MergeFrom(const SharingLog_EnableNearbySharing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_opted_in_ = from.has_opted_in_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_EnableNearbySharing::CopyFrom(const SharingLog_EnableNearbySharing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_EnableNearbySharing::IsInitialized() const {
  return true;
}

void SharingLog_EnableNearbySharing::InternalSwap(SharingLog_EnableNearbySharing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_EnableNearbySharing, has_opted_in_)
      + sizeof(SharingLog_EnableNearbySharing::has_opted_in_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_EnableNearbySharing, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string SharingLog_EnableNearbySharing::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing";
}


// ===================================================================

class SharingLog_SetAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SetAccount>()._has_bits_);
  static void set_has_activity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_SetAccount::SharingLog_SetAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SetAccount)
}
SharingLog_SetAccount::SharingLog_SetAccount(const SharingLog_SetAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  activity_name_ = from.activity_name_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SetAccount)
}

inline void SharingLog_SetAccount::SharedCtor() {
activity_name_ = 0;
}

SharingLog_SetAccount::~SharingLog_SetAccount() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SetAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SetAccount::ArenaDtor(void* object) {
  SharingLog_SetAccount* _this = reinterpret_cast< SharingLog_SetAccount* >(object);
  (void)_this;
}
void SharingLog_SetAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SetAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SetAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SetAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ActivityName_IsValid(val))) {
            _internal_set_activity_name(static_cast<::location::nearby::proto::sharing::ActivityName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SetAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activity_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  return target;
}

size_t SharingLog_SetAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SetAccount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SetAccount*>(
      &from));
}

void SharingLog_SetAccount::MergeFrom(const SharingLog_SetAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity_name()) {
    _internal_set_activity_name(from._internal_activity_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SetAccount::CopyFrom(const SharingLog_SetAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SetAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SetAccount::IsInitialized() const {
  return true;
}

void SharingLog_SetAccount::InternalSwap(SharingLog_SetAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activity_name_, other->activity_name_);
}

std::string SharingLog_SetAccount::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SetAccount";
}


// ===================================================================

class SharingLog_SetVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SetVisibility>()._has_bits_);
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_activity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SharingLog_SetVisibility::SharingLog_SetVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
}
SharingLog_SetVisibility::SharingLog_SetVisibility(const SharingLog_SetVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&visibility_, &from.visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_activity_name_) -
    reinterpret_cast<char*>(&visibility_)) + sizeof(source_activity_name_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
}

inline void SharingLog_SetVisibility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visibility_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_activity_name_) -
    reinterpret_cast<char*>(&visibility_)) + sizeof(source_activity_name_));
}

SharingLog_SetVisibility::~SharingLog_SetVisibility() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SetVisibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SetVisibility::ArenaDtor(void* object) {
  SharingLog_SetVisibility* _this = reinterpret_cast< SharingLog_SetVisibility* >(object);
  (void)_this;
}
void SharingLog_SetVisibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SetVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SetVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&visibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_activity_name_) -
        reinterpret_cast<char*>(&visibility_)) + sizeof(source_activity_name_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SetVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.Visibility visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::Visibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::location::nearby::proto::sharing::Visibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.Visibility source_visibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::Visibility_IsValid(val))) {
            _internal_set_source_visibility(static_cast<::location::nearby::proto::sharing::Visibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration_millis(&has_bits);
          duration_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ActivityName_IsValid(val))) {
            _internal_set_source_activity_name(static_cast<::location::nearby::proto::sharing::ActivityName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SetVisibility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_visibility(), target);
  }

  // optional .location.nearby.proto.sharing.Visibility source_visibility = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_visibility(), target);
  }

  // optional int64 duration_millis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_millis(), target);
  }

  // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source_activity_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  return target;
}

size_t SharingLog_SetVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .location.nearby.proto.sharing.Visibility visibility = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional .location.nearby.proto.sharing.Visibility source_visibility = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_visibility());
    }

    // optional int64 duration_millis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_millis());
    }

    // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_activity_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SetVisibility::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SetVisibility*>(
      &from));
}

void SharingLog_SetVisibility::MergeFrom(const SharingLog_SetVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_visibility_ = from.source_visibility_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_millis_ = from.duration_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_activity_name_ = from.source_activity_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SetVisibility::CopyFrom(const SharingLog_SetVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SetVisibility::IsInitialized() const {
  return true;
}

void SharingLog_SetVisibility::InternalSwap(SharingLog_SetVisibility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SetVisibility, source_activity_name_)
      + sizeof(SharingLog_SetVisibility::source_activity_name_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SetVisibility, visibility_)>(
          reinterpret_cast<char*>(&visibility_),
          reinterpret_cast<char*>(&other->visibility_));
}

std::string SharingLog_SetVisibility::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SetVisibility";
}


// ===================================================================

class SharingLog_SetDataUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SetDataUsage>()._has_bits_);
  static void set_has_original_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_SetDataUsage::SharingLog_SetDataUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
}
SharingLog_SetDataUsage::SharingLog_SetDataUsage(const SharingLog_SetDataUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&original_preference_, &from.original_preference_,
    static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&original_preference_)) + sizeof(preference_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
}

inline void SharingLog_SetDataUsage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_preference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&original_preference_)) + sizeof(preference_));
}

SharingLog_SetDataUsage::~SharingLog_SetDataUsage() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SetDataUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SetDataUsage::ArenaDtor(void* object) {
  SharingLog_SetDataUsage* _this = reinterpret_cast< SharingLog_SetDataUsage* >(object);
  (void)_this;
}
void SharingLog_SetDataUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SetDataUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SetDataUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&original_preference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preference_) -
        reinterpret_cast<char*>(&original_preference_)) + sizeof(preference_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SetDataUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.DataUsage original_preference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DataUsage_IsValid(val))) {
            _internal_set_original_preference(static_cast<::location::nearby::proto::sharing::DataUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DataUsage preference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DataUsage_IsValid(val))) {
            _internal_set_preference(static_cast<::location::nearby::proto::sharing::DataUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SetDataUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.DataUsage original_preference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_original_preference(), target);
  }

  // optional .location.nearby.proto.sharing.DataUsage preference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_preference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  return target;
}

size_t SharingLog_SetDataUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.DataUsage original_preference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_original_preference());
    }

    // optional .location.nearby.proto.sharing.DataUsage preference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preference());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SetDataUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SetDataUsage*>(
      &from));
}

void SharingLog_SetDataUsage::MergeFrom(const SharingLog_SetDataUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_preference_ = from.original_preference_;
    }
    if (cached_has_bits & 0x00000002u) {
      preference_ = from.preference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SetDataUsage::CopyFrom(const SharingLog_SetDataUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SetDataUsage::IsInitialized() const {
  return true;
}

void SharingLog_SetDataUsage::InternalSwap(SharingLog_SetDataUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SetDataUsage, preference_)
      + sizeof(SharingLog_SetDataUsage::preference_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SetDataUsage, original_preference_)>(
          reinterpret_cast<char*>(&original_preference_),
          reinterpret_cast<char*>(&other->original_preference_));
}

std::string SharingLog_SetDataUsage::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SetDataUsage";
}


// ===================================================================

class SharingLog_ScanForShareTargetsStart::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ScanForShareTargetsStart>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scan_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flow_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_ScanForShareTargetsStart::SharingLog_ScanForShareTargetsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
}
SharingLog_ScanForShareTargetsStart::SharingLog_ScanForShareTargetsStart(const SharingLog_ScanForShareTargetsStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flow_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(flow_id_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
}

inline void SharingLog_ScanForShareTargetsStart::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flow_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(flow_id_));
}

SharingLog_ScanForShareTargetsStart::~SharingLog_ScanForShareTargetsStart() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ScanForShareTargetsStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_ScanForShareTargetsStart::ArenaDtor(void* object) {
  SharingLog_ScanForShareTargetsStart* _this = reinterpret_cast< SharingLog_ScanForShareTargetsStart* >(object);
  (void)_this;
}
void SharingLog_ScanForShareTargetsStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ScanForShareTargetsStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ScanForShareTargetsStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    referrer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flow_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(flow_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ScanForShareTargetsStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.SessionStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::SessionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::SessionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ScanType scan_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ScanType_IsValid(val))) {
            _internal_set_scan_type(static_cast<::location::nearby::proto::sharing::ScanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 flow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flow_id(&has_bits);
          flow_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ScanForShareTargetsStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .location.nearby.proto.sharing.SessionStatus status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional .location.nearby.proto.sharing.ScanType scan_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scan_type(), target);
  }

  // optional int64 flow_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_flow_id(), target);
  }

  // optional string referrer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_referrer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  return target;
}

size_t SharingLog_ScanForShareTargetsStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string referrer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional .location.nearby.proto.sharing.SessionStatus status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .location.nearby.proto.sharing.ScanType scan_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scan_type());
    }

    // optional int64 flow_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flow_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ScanForShareTargetsStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ScanForShareTargetsStart*>(
      &from));
}

void SharingLog_ScanForShareTargetsStart::MergeFrom(const SharingLog_ScanForShareTargetsStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      scan_type_ = from.scan_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      flow_id_ = from.flow_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ScanForShareTargetsStart::CopyFrom(const SharingLog_ScanForShareTargetsStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ScanForShareTargetsStart::IsInitialized() const {
  return true;
}

void SharingLog_ScanForShareTargetsStart::InternalSwap(SharingLog_ScanForShareTargetsStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ScanForShareTargetsStart, flow_id_)
      + sizeof(SharingLog_ScanForShareTargetsStart::flow_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ScanForShareTargetsStart, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string SharingLog_ScanForShareTargetsStart::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart";
}


// ===================================================================

class SharingLog_ScanForShareTargetsEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ScanForShareTargetsEnd>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_ScanForShareTargetsEnd::SharingLog_ScanForShareTargetsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
}
SharingLog_ScanForShareTargetsEnd::SharingLog_ScanForShareTargetsEnd(const SharingLog_ScanForShareTargetsEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
}

inline void SharingLog_ScanForShareTargetsEnd::SharedCtor() {
session_id_ = int64_t{0};
}

SharingLog_ScanForShareTargetsEnd::~SharingLog_ScanForShareTargetsEnd() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ScanForShareTargetsEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ScanForShareTargetsEnd::ArenaDtor(void* object) {
  SharingLog_ScanForShareTargetsEnd* _this = reinterpret_cast< SharingLog_ScanForShareTargetsEnd* >(object);
  (void)_this;
}
void SharingLog_ScanForShareTargetsEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ScanForShareTargetsEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ScanForShareTargetsEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ScanForShareTargetsEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ScanForShareTargetsEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  return target;
}

size_t SharingLog_ScanForShareTargetsEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ScanForShareTargetsEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ScanForShareTargetsEnd*>(
      &from));
}

void SharingLog_ScanForShareTargetsEnd::MergeFrom(const SharingLog_ScanForShareTargetsEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ScanForShareTargetsEnd::CopyFrom(const SharingLog_ScanForShareTargetsEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ScanForShareTargetsEnd::IsInitialized() const {
  return true;
}

void SharingLog_ScanForShareTargetsEnd::InternalSwap(SharingLog_ScanForShareTargetsEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

std::string SharingLog_ScanForShareTargetsEnd::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd";
}


// ===================================================================

class SharingLog_AdvertiseDevicePresenceStart::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AdvertiseDevicePresenceStart>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_name_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_advertising_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_qr_code_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SharingLog_AdvertiseDevicePresenceStart::SharingLog_AdvertiseDevicePresenceStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
}
SharingLog_AdvertiseDevicePresenceStart::SharingLog_AdvertiseDevicePresenceStart(const SharingLog_AdvertiseDevicePresenceStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
}

inline void SharingLog_AdvertiseDevicePresenceStart::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
}

SharingLog_AdvertiseDevicePresenceStart::~SharingLog_AdvertiseDevicePresenceStart() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AdvertiseDevicePresenceStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_AdvertiseDevicePresenceStart::ArenaDtor(void* object) {
  SharingLog_AdvertiseDevicePresenceStart* _this = reinterpret_cast< SharingLog_AdvertiseDevicePresenceStart* >(object);
  (void)_this;
}
void SharingLog_AdvertiseDevicePresenceStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AdvertiseDevicePresenceStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AdvertiseDevicePresenceStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    referrer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qr_code_flow_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AdvertiseDevicePresenceStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.Visibility visibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::Visibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::location::nearby::proto::sharing::Visibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.SessionStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::SessionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::SessionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DataUsage data_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DataUsage_IsValid(val))) {
            _internal_set_data_usage(static_cast<::location::nearby::proto::sharing::DataUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_name_size = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_device_name_size(&has_bits);
          device_name_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AdvertisingMode advertising_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AdvertisingMode_IsValid(val))) {
            _internal_set_advertising_mode(static_cast<::location::nearby::proto::sharing::AdvertisingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool qr_code_flow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_qr_code_flow(&has_bits);
          qr_code_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AdvertiseDevicePresenceStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .location.nearby.proto.sharing.Visibility visibility = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_visibility(), target);
  }

  // optional .location.nearby.proto.sharing.SessionStatus status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional .location.nearby.proto.sharing.DataUsage data_usage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_usage(), target);
  }

  // optional int32 device_name_size = 5 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_device_name_size(), target);
  }

  // optional string referrer_name = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_referrer_name(), target);
  }

  // optional .location.nearby.proto.sharing.AdvertisingMode advertising_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_advertising_mode(), target);
  }

  // optional bool qr_code_flow = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_qr_code_flow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  return target;
}

size_t SharingLog_AdvertiseDevicePresenceStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string referrer_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional int64 session_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional .location.nearby.proto.sharing.Visibility visibility = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional .location.nearby.proto.sharing.SessionStatus status = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .location.nearby.proto.sharing.DataUsage data_usage = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_usage());
    }

    // optional int32 device_name_size = 5 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_device_name_size());
    }

    // optional .location.nearby.proto.sharing.AdvertisingMode advertising_mode = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_advertising_mode());
    }

    // optional bool qr_code_flow = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AdvertiseDevicePresenceStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AdvertiseDevicePresenceStart*>(
      &from));
}

void SharingLog_AdvertiseDevicePresenceStart::MergeFrom(const SharingLog_AdvertiseDevicePresenceStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_usage_ = from.data_usage_;
    }
    if (cached_has_bits & 0x00000020u) {
      device_name_size_ = from.device_name_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      advertising_mode_ = from.advertising_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      qr_code_flow_ = from.qr_code_flow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AdvertiseDevicePresenceStart::CopyFrom(const SharingLog_AdvertiseDevicePresenceStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AdvertiseDevicePresenceStart::IsInitialized() const {
  return true;
}

void SharingLog_AdvertiseDevicePresenceStart::InternalSwap(SharingLog_AdvertiseDevicePresenceStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_AdvertiseDevicePresenceStart, qr_code_flow_)
      + sizeof(SharingLog_AdvertiseDevicePresenceStart::qr_code_flow_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_AdvertiseDevicePresenceStart, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string SharingLog_AdvertiseDevicePresenceStart::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart";
}


// ===================================================================

class SharingLog_AdvertiseDevicePresenceEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AdvertiseDevicePresenceEnd>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_AdvertiseDevicePresenceEnd::SharingLog_AdvertiseDevicePresenceEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
}
SharingLog_AdvertiseDevicePresenceEnd::SharingLog_AdvertiseDevicePresenceEnd(const SharingLog_AdvertiseDevicePresenceEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
}

inline void SharingLog_AdvertiseDevicePresenceEnd::SharedCtor() {
session_id_ = int64_t{0};
}

SharingLog_AdvertiseDevicePresenceEnd::~SharingLog_AdvertiseDevicePresenceEnd() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AdvertiseDevicePresenceEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AdvertiseDevicePresenceEnd::ArenaDtor(void* object) {
  SharingLog_AdvertiseDevicePresenceEnd* _this = reinterpret_cast< SharingLog_AdvertiseDevicePresenceEnd* >(object);
  (void)_this;
}
void SharingLog_AdvertiseDevicePresenceEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AdvertiseDevicePresenceEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AdvertiseDevicePresenceEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AdvertiseDevicePresenceEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AdvertiseDevicePresenceEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  return target;
}

size_t SharingLog_AdvertiseDevicePresenceEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 session_id = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AdvertiseDevicePresenceEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AdvertiseDevicePresenceEnd*>(
      &from));
}

void SharingLog_AdvertiseDevicePresenceEnd::MergeFrom(const SharingLog_AdvertiseDevicePresenceEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AdvertiseDevicePresenceEnd::CopyFrom(const SharingLog_AdvertiseDevicePresenceEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AdvertiseDevicePresenceEnd::IsInitialized() const {
  return true;
}

void SharingLog_AdvertiseDevicePresenceEnd::InternalSwap(SharingLog_AdvertiseDevicePresenceEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

std::string SharingLog_AdvertiseDevicePresenceEnd::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd";
}


// ===================================================================

class SharingLog_SendFastInitialization::_Internal {
 public:
};

SharingLog_SendFastInitialization::SharingLog_SendFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
}
SharingLog_SendFastInitialization::SharingLog_SendFastInitialization(const SharingLog_SendFastInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
}

inline void SharingLog_SendFastInitialization::SharedCtor() {
}

SharingLog_SendFastInitialization::~SharingLog_SendFastInitialization() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendFastInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SendFastInitialization::ArenaDtor(void* object) {
  SharingLog_SendFastInitialization* _this = reinterpret_cast< SharingLog_SendFastInitialization* >(object);
  (void)_this;
}
void SharingLog_SendFastInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendFastInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendFastInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendFastInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendFastInitialization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  return target;
}

size_t SharingLog_SendFastInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendFastInitialization::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendFastInitialization*>(
      &from));
}

void SharingLog_SendFastInitialization::MergeFrom(const SharingLog_SendFastInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendFastInitialization::CopyFrom(const SharingLog_SendFastInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendFastInitialization::IsInitialized() const {
  return true;
}

void SharingLog_SendFastInitialization::InternalSwap(SharingLog_SendFastInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_SendFastInitialization::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendFastInitialization";
}


// ===================================================================

class SharingLog_ReceiveFastInitialization::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ReceiveFastInitialization>()._has_bits_);
  static void set_has_time_elapse_since_screen_unlock_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notifications_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_ReceiveFastInitialization::SharingLog_ReceiveFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
}
SharingLog_ReceiveFastInitialization::SharingLog_ReceiveFastInitialization(const SharingLog_ReceiveFastInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&time_elapse_since_screen_unlock_millis_, &from.time_elapse_since_screen_unlock_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&notifications_filtered_) -
    reinterpret_cast<char*>(&time_elapse_since_screen_unlock_millis_)) + sizeof(notifications_filtered_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
}

inline void SharingLog_ReceiveFastInitialization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_elapse_since_screen_unlock_millis_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notifications_filtered_) -
    reinterpret_cast<char*>(&time_elapse_since_screen_unlock_millis_)) + sizeof(notifications_filtered_));
}

SharingLog_ReceiveFastInitialization::~SharingLog_ReceiveFastInitialization() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ReceiveFastInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ReceiveFastInitialization::ArenaDtor(void* object) {
  SharingLog_ReceiveFastInitialization* _this = reinterpret_cast< SharingLog_ReceiveFastInitialization* >(object);
  (void)_this;
}
void SharingLog_ReceiveFastInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ReceiveFastInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ReceiveFastInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&time_elapse_since_screen_unlock_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notifications_filtered_) -
        reinterpret_cast<char*>(&time_elapse_since_screen_unlock_millis_)) + sizeof(notifications_filtered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ReceiveFastInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 time_elapse_since_screen_unlock_millis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_elapse_since_screen_unlock_millis(&has_bits);
          time_elapse_since_screen_unlock_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_notifications_enabled(&has_bits);
          notifications_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_filtered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_notifications_filtered(&has_bits);
          notifications_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ReceiveFastInitialization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_elapse_since_screen_unlock_millis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_elapse_since_screen_unlock_millis(), target);
  }

  // optional bool notifications_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_notifications_enabled(), target);
  }

  // optional bool notifications_filtered = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_notifications_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  return target;
}

size_t SharingLog_ReceiveFastInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 time_elapse_since_screen_unlock_millis = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time_elapse_since_screen_unlock_millis());
    }

    // optional bool notifications_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_filtered = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ReceiveFastInitialization::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ReceiveFastInitialization*>(
      &from));
}

void SharingLog_ReceiveFastInitialization::MergeFrom(const SharingLog_ReceiveFastInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_elapse_since_screen_unlock_millis_ = from.time_elapse_since_screen_unlock_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      notifications_enabled_ = from.notifications_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_filtered_ = from.notifications_filtered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ReceiveFastInitialization::CopyFrom(const SharingLog_ReceiveFastInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ReceiveFastInitialization::IsInitialized() const {
  return true;
}

void SharingLog_ReceiveFastInitialization::InternalSwap(SharingLog_ReceiveFastInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveFastInitialization, notifications_filtered_)
      + sizeof(SharingLog_ReceiveFastInitialization::notifications_filtered_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveFastInitialization, time_elapse_since_screen_unlock_millis_)>(
          reinterpret_cast<char*>(&time_elapse_since_screen_unlock_millis_),
          reinterpret_cast<char*>(&other->time_elapse_since_screen_unlock_millis_));
}

std::string SharingLog_ReceiveFastInitialization::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization";
}


// ===================================================================

class SharingLog_DismissFastInitialization::_Internal {
 public:
};

SharingLog_DismissFastInitialization::SharingLog_DismissFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
}
SharingLog_DismissFastInitialization::SharingLog_DismissFastInitialization(const SharingLog_DismissFastInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
}

inline void SharingLog_DismissFastInitialization::SharedCtor() {
}

SharingLog_DismissFastInitialization::~SharingLog_DismissFastInitialization() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DismissFastInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DismissFastInitialization::ArenaDtor(void* object) {
  SharingLog_DismissFastInitialization* _this = reinterpret_cast< SharingLog_DismissFastInitialization* >(object);
  (void)_this;
}
void SharingLog_DismissFastInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DismissFastInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DismissFastInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DismissFastInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DismissFastInitialization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  return target;
}

size_t SharingLog_DismissFastInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DismissFastInitialization::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DismissFastInitialization*>(
      &from));
}

void SharingLog_DismissFastInitialization::MergeFrom(const SharingLog_DismissFastInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DismissFastInitialization::CopyFrom(const SharingLog_DismissFastInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DismissFastInitialization::IsInitialized() const {
  return true;
}

void SharingLog_DismissFastInitialization::InternalSwap(SharingLog_DismissFastInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DismissFastInitialization::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization";
}


// ===================================================================

class SharingLog_AutoDismissFastInitialization::_Internal {
 public:
};

SharingLog_AutoDismissFastInitialization::SharingLog_AutoDismissFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
}
SharingLog_AutoDismissFastInitialization::SharingLog_AutoDismissFastInitialization(const SharingLog_AutoDismissFastInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
}

inline void SharingLog_AutoDismissFastInitialization::SharedCtor() {
}

SharingLog_AutoDismissFastInitialization::~SharingLog_AutoDismissFastInitialization() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AutoDismissFastInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AutoDismissFastInitialization::ArenaDtor(void* object) {
  SharingLog_AutoDismissFastInitialization* _this = reinterpret_cast< SharingLog_AutoDismissFastInitialization* >(object);
  (void)_this;
}
void SharingLog_AutoDismissFastInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AutoDismissFastInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AutoDismissFastInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AutoDismissFastInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AutoDismissFastInitialization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  return target;
}

size_t SharingLog_AutoDismissFastInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AutoDismissFastInitialization::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AutoDismissFastInitialization*>(
      &from));
}

void SharingLog_AutoDismissFastInitialization::MergeFrom(const SharingLog_AutoDismissFastInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AutoDismissFastInitialization::CopyFrom(const SharingLog_AutoDismissFastInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AutoDismissFastInitialization::IsInitialized() const {
  return true;
}

void SharingLog_AutoDismissFastInitialization::InternalSwap(SharingLog_AutoDismissFastInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_AutoDismissFastInitialization::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization";
}


// ===================================================================

class SharingLog_EventMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_EventMetadata>()._has_bits_);
  static void set_has_use_case(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_opt_in(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opt_in(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_enable_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flow_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SharingLog_EventMetadata::SharingLog_EventMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
}
SharingLog_EventMetadata::SharingLog_EventMetadata(const SharingLog_EventMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&use_case_, &from.use_case_,
    static_cast<size_t>(reinterpret_cast<char*>(&vendor_id_) -
    reinterpret_cast<char*>(&use_case_)) + sizeof(vendor_id_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
}

inline void SharingLog_EventMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_case_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vendor_id_) -
    reinterpret_cast<char*>(&use_case_)) + sizeof(vendor_id_));
}

SharingLog_EventMetadata::~SharingLog_EventMetadata() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_EventMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_EventMetadata::ArenaDtor(void* object) {
  SharingLog_EventMetadata* _this = reinterpret_cast< SharingLog_EventMetadata* >(object);
  (void)_this;
}
void SharingLog_EventMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_EventMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_EventMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&use_case_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vendor_id_) -
        reinterpret_cast<char*>(&use_case_)) + sizeof(vendor_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_EventMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.SharingUseCase use_case = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::SharingUseCase_IsValid(val))) {
            _internal_set_use_case(static_cast<::location::nearby::proto::sharing::SharingUseCase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool initial_opt_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_initial_opt_in(&has_bits);
          initial_opt_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool opt_in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_opt_in(&has_bits);
          opt_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial_enable_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_initial_enable_status(&has_bits);
          initial_enable_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 flow_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flow_id(&has_bits);
          flow_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vendor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_vendor_id(&has_bits);
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_EventMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.SharingUseCase use_case = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_use_case(), target);
  }

  // optional bool initial_opt_in = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_initial_opt_in(), target);
  }

  // optional bool opt_in = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_opt_in(), target);
  }

  // optional bool initial_enable_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_initial_enable_status(), target);
  }

  // optional int64 flow_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_flow_id(), target);
  }

  // optional int64 session_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_session_id(), target);
  }

  // optional int32 vendor_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vendor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  return target;
}

size_t SharingLog_EventMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .location.nearby.proto.sharing.SharingUseCase use_case = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_case());
    }

    // optional bool initial_opt_in = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool opt_in = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool initial_enable_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 flow_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flow_id());
    }

    // optional int64 session_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int32 vendor_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vendor_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_EventMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_EventMetadata*>(
      &from));
}

void SharingLog_EventMetadata::MergeFrom(const SharingLog_EventMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      use_case_ = from.use_case_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_opt_in_ = from.initial_opt_in_;
    }
    if (cached_has_bits & 0x00000004u) {
      opt_in_ = from.opt_in_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_enable_status_ = from.initial_enable_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      flow_id_ = from.flow_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      vendor_id_ = from.vendor_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_EventMetadata::CopyFrom(const SharingLog_EventMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_EventMetadata::IsInitialized() const {
  return true;
}

void SharingLog_EventMetadata::InternalSwap(SharingLog_EventMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_EventMetadata, vendor_id_)
      + sizeof(SharingLog_EventMetadata::vendor_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_EventMetadata, use_case_)>(
          reinterpret_cast<char*>(&use_case_),
          reinterpret_cast<char*>(&other->use_case_));
}

std::string SharingLog_EventMetadata::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.EventMetadata";
}


// ===================================================================

class SharingLog_DiscoverShareTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_DiscoverShareTarget>()._has_bits_);
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_DiscoverShareTarget* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_scanning(const SharingLog_DiscoverShareTarget* msg);
  static void set_has_duration_since_scanning(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flow_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latency_since_activity_start_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scan_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_DiscoverShareTarget::_Internal::share_target_info(const SharingLog_DiscoverShareTarget* msg) {
  return *msg->share_target_info_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SharingLog_DiscoverShareTarget::_Internal::duration_since_scanning(const SharingLog_DiscoverShareTarget* msg) {
  return *msg->duration_since_scanning_;
}
void SharingLog_DiscoverShareTarget::clear_duration_since_scanning() {
  if (duration_since_scanning_ != nullptr) duration_since_scanning_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SharingLog_DiscoverShareTarget::SharingLog_DiscoverShareTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
}
SharingLog_DiscoverShareTarget::SharingLog_DiscoverShareTarget(const SharingLog_DiscoverShareTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  if (from._internal_has_duration_since_scanning()) {
    duration_since_scanning_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_since_scanning_);
  } else {
    duration_since_scanning_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_since_activity_start_millis_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(latency_since_activity_start_millis_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
}

inline void SharingLog_DiscoverShareTarget::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scan_type_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(scan_type_));
latency_since_activity_start_millis_ = int64_t{-1};
}

SharingLog_DiscoverShareTarget::~SharingLog_DiscoverShareTarget() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DiscoverShareTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete share_target_info_;
  if (this != internal_default_instance()) delete duration_since_scanning_;
}

void SharingLog_DiscoverShareTarget::ArenaDtor(void* object) {
  SharingLog_DiscoverShareTarget* _this = reinterpret_cast< SharingLog_DiscoverShareTarget* >(object);
  (void)_this;
}
void SharingLog_DiscoverShareTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DiscoverShareTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DiscoverShareTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(duration_since_scanning_ != nullptr);
      duration_since_scanning_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scan_type_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(scan_type_));
    latency_since_activity_start_millis_ = int64_t{-1};
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DiscoverShareTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration duration_since_scanning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_since_scanning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 flow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flow_id(&has_bits);
          flow_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 latency_since_activity_start_millis = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_latency_since_activity_start_millis(&has_bits);
          latency_since_activity_start_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ScanType_IsValid(val))) {
            _internal_set_scan_type(static_cast<::location::nearby::proto::sharing::ScanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DiscoverShareTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::share_target_info(this), target, stream);
  }

  // optional .google.protobuf.Duration duration_since_scanning = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration_since_scanning(this), target, stream);
  }

  // optional int64 session_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_session_id(), target);
  }

  // optional int64 flow_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_flow_id(), target);
  }

  // optional string referrer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_referrer_name(), target);
  }

  // optional int64 latency_since_activity_start_millis = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_latency_since_activity_start_millis(), target);
  }

  // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_scan_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  return target;
}

size_t SharingLog_DiscoverShareTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string referrer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional .google.protobuf.Duration duration_since_scanning = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_since_scanning_);
    }

    // optional int64 session_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int64 flow_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flow_id());
    }

    // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scan_type());
    }

    // optional int64 latency_since_activity_start_millis = 6 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_latency_since_activity_start_millis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DiscoverShareTarget::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DiscoverShareTarget*>(
      &from));
}

void SharingLog_DiscoverShareTarget::MergeFrom(const SharingLog_DiscoverShareTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_duration_since_scanning()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration_since_scanning());
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      flow_id_ = from.flow_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      scan_type_ = from.scan_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      latency_since_activity_start_millis_ = from.latency_since_activity_start_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DiscoverShareTarget::CopyFrom(const SharingLog_DiscoverShareTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DiscoverShareTarget::IsInitialized() const {
  return true;
}

void SharingLog_DiscoverShareTarget::InternalSwap(SharingLog_DiscoverShareTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_DiscoverShareTarget, scan_type_)
      + sizeof(SharingLog_DiscoverShareTarget::scan_type_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_DiscoverShareTarget, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
  swap(latency_since_activity_start_millis_, other->latency_since_activity_start_millis_);
}

std::string SharingLog_DiscoverShareTarget::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget";
}


// ===================================================================

class SharingLog_ParsingFailedEndpointId::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ParsingFailedEndpointId>()._has_bits_);
  static void set_has_endpoint_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_scanning(const SharingLog_ParsingFailedEndpointId* msg);
  static void set_has_duration_since_scanning(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flow_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latency_since_activity_start_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_scan_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_last_sync(const SharingLog_ParsingFailedEndpointId* msg);
  static void set_has_duration_since_last_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parsing_failed_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_discovery_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SharingLog_ParsingFailedEndpointId::_Internal::duration_since_scanning(const SharingLog_ParsingFailedEndpointId* msg) {
  return *msg->duration_since_scanning_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SharingLog_ParsingFailedEndpointId::_Internal::duration_since_last_sync(const SharingLog_ParsingFailedEndpointId* msg) {
  return *msg->duration_since_last_sync_;
}
void SharingLog_ParsingFailedEndpointId::clear_duration_since_scanning() {
  if (duration_since_scanning_ != nullptr) duration_since_scanning_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SharingLog_ParsingFailedEndpointId::clear_duration_since_last_sync() {
  if (duration_since_last_sync_ != nullptr) duration_since_last_sync_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SharingLog_ParsingFailedEndpointId::SharingLog_ParsingFailedEndpointId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
}
SharingLog_ParsingFailedEndpointId::SharingLog_ParsingFailedEndpointId(const SharingLog_ParsingFailedEndpointId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_endpoint_id()) {
    endpoint_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endpoint_id(), 
      GetArenaForAllocation());
  }
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_duration_since_scanning()) {
    duration_since_scanning_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_since_scanning_);
  } else {
    duration_since_scanning_ = nullptr;
  }
  if (from._internal_has_duration_since_last_sync()) {
    duration_since_last_sync_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_since_last_sync_);
  } else {
    duration_since_last_sync_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_since_activity_start_millis_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(latency_since_activity_start_millis_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
}

inline void SharingLog_ParsingFailedEndpointId::SharedCtor() {
endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_since_scanning_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discovery_mode_) -
    reinterpret_cast<char*>(&duration_since_scanning_)) + sizeof(discovery_mode_));
latency_since_activity_start_millis_ = int64_t{-1};
}

SharingLog_ParsingFailedEndpointId::~SharingLog_ParsingFailedEndpointId() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ParsingFailedEndpointId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  endpoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_since_scanning_;
  if (this != internal_default_instance()) delete duration_since_last_sync_;
}

void SharingLog_ParsingFailedEndpointId::ArenaDtor(void* object) {
  SharingLog_ParsingFailedEndpointId* _this = reinterpret_cast< SharingLog_ParsingFailedEndpointId* >(object);
  (void)_this;
}
void SharingLog_ParsingFailedEndpointId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ParsingFailedEndpointId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ParsingFailedEndpointId::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      endpoint_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(duration_since_scanning_ != nullptr);
      duration_since_scanning_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(duration_since_last_sync_ != nullptr);
      duration_since_last_sync_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parsing_failed_type_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(parsing_failed_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    discovery_mode_ = 0;
    latency_since_activity_start_millis_ = int64_t{-1};
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ParsingFailedEndpointId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string endpoint_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_endpoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration duration_since_scanning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_since_scanning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 flow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flow_id(&has_bits);
          flow_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 latency_since_activity_start_millis = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_latency_since_activity_start_millis(&has_bits);
          latency_since_activity_start_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ScanType_IsValid(val))) {
            _internal_set_scan_type(static_cast<::location::nearby::proto::sharing::ScanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration duration_since_last_sync = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_since_last_sync(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ParsingFailedType parsing_failed_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ParsingFailedType_IsValid(val))) {
            _internal_set_parsing_failed_type(static_cast<::location::nearby::proto::sharing::ParsingFailedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DiscoveryMode discovery_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DiscoveryMode_IsValid(val))) {
            _internal_set_discovery_mode(static_cast<::location::nearby::proto::sharing::DiscoveryMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ParsingFailedEndpointId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endpoint_id(), target);
  }

  // optional .google.protobuf.Duration duration_since_scanning = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration_since_scanning(this), target, stream);
  }

  // optional int64 session_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_session_id(), target);
  }

  // optional int64 flow_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_flow_id(), target);
  }

  // optional string referrer_name = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_referrer_name(), target);
  }

  // optional int64 latency_since_activity_start_millis = 6 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_latency_since_activity_start_millis(), target);
  }

  // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_scan_type(), target);
  }

  // optional .google.protobuf.Duration duration_since_last_sync = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::duration_since_last_sync(this), target, stream);
  }

  // optional .location.nearby.proto.sharing.ParsingFailedType parsing_failed_type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_parsing_failed_type(), target);
  }

  // optional .location.nearby.proto.sharing.DiscoveryMode discovery_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_discovery_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  return target;
}

size_t SharingLog_ParsingFailedEndpointId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string endpoint_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_endpoint_id());
    }

    // optional string referrer_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .google.protobuf.Duration duration_since_scanning = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_since_scanning_);
    }

    // optional .google.protobuf.Duration duration_since_last_sync = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_since_last_sync_);
    }

    // optional int64 session_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int64 flow_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flow_id());
    }

    // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scan_type());
    }

    // optional .location.nearby.proto.sharing.ParsingFailedType parsing_failed_type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parsing_failed_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .location.nearby.proto.sharing.DiscoveryMode discovery_mode = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_discovery_mode());
    }

    // optional int64 latency_since_activity_start_millis = 6 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_latency_since_activity_start_millis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ParsingFailedEndpointId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ParsingFailedEndpointId*>(
      &from));
}

void SharingLog_ParsingFailedEndpointId::MergeFrom(const SharingLog_ParsingFailedEndpointId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_endpoint_id(from._internal_endpoint_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_duration_since_scanning()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration_since_scanning());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_duration_since_last_sync()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration_since_last_sync());
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      flow_id_ = from.flow_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      scan_type_ = from.scan_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      parsing_failed_type_ = from.parsing_failed_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      discovery_mode_ = from.discovery_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      latency_since_activity_start_millis_ = from.latency_since_activity_start_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ParsingFailedEndpointId::CopyFrom(const SharingLog_ParsingFailedEndpointId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ParsingFailedEndpointId::IsInitialized() const {
  return true;
}

void SharingLog_ParsingFailedEndpointId::InternalSwap(SharingLog_ParsingFailedEndpointId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endpoint_id_, lhs_arena,
      &other->endpoint_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ParsingFailedEndpointId, discovery_mode_)
      + sizeof(SharingLog_ParsingFailedEndpointId::discovery_mode_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ParsingFailedEndpointId, duration_since_scanning_)>(
          reinterpret_cast<char*>(&duration_since_scanning_),
          reinterpret_cast<char*>(&other->duration_since_scanning_));
  swap(latency_since_activity_start_millis_, other->latency_since_activity_start_millis_);
}

std::string SharingLog_ParsingFailedEndpointId::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId";
}


// ===================================================================

class SharingLog_DescribeAttachments::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_DescribeAttachments>()._has_bits_);
  static const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info(const SharingLog_DescribeAttachments* msg);
  static void set_has_attachments_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&
SharingLog_DescribeAttachments::_Internal::attachments_info(const SharingLog_DescribeAttachments* msg) {
  return *msg->attachments_info_;
}
SharingLog_DescribeAttachments::SharingLog_DescribeAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
}
SharingLog_DescribeAttachments::SharingLog_DescribeAttachments(const SharingLog_DescribeAttachments& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachments_info()) {
    attachments_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo(*from.attachments_info_);
  } else {
    attachments_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
}

inline void SharingLog_DescribeAttachments::SharedCtor() {
attachments_info_ = nullptr;
}

SharingLog_DescribeAttachments::~SharingLog_DescribeAttachments() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DescribeAttachments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attachments_info_;
}

void SharingLog_DescribeAttachments::ArenaDtor(void* object) {
  SharingLog_DescribeAttachments* _this = reinterpret_cast< SharingLog_DescribeAttachments* >(object);
  (void)_this;
}
void SharingLog_DescribeAttachments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DescribeAttachments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DescribeAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attachments_info_ != nullptr);
    attachments_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DescribeAttachments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachments_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DescribeAttachments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attachments_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  return target;
}

size_t SharingLog_DescribeAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachments_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DescribeAttachments::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DescribeAttachments*>(
      &from));
}

void SharingLog_DescribeAttachments::MergeFrom(const SharingLog_DescribeAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attachments_info()) {
    _internal_mutable_attachments_info()->::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo::MergeFrom(from._internal_attachments_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DescribeAttachments::CopyFrom(const SharingLog_DescribeAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DescribeAttachments::IsInitialized() const {
  return true;
}

void SharingLog_DescribeAttachments::InternalSwap(SharingLog_DescribeAttachments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(attachments_info_, other->attachments_info_);
}

std::string SharingLog_DescribeAttachments::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DescribeAttachments";
}


// ===================================================================

class SharingLog_SendIntroduction::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendIntroduction>()._has_bits_);
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_SendIntroduction* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_SendIntroduction::_Internal::share_target_info(const SharingLog_SendIntroduction* msg) {
  return *msg->share_target_info_;
}
SharingLog_SendIntroduction::SharingLog_SendIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
}
SharingLog_SendIntroduction::SharingLog_SendIntroduction(const SharingLog_SendIntroduction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
}

inline void SharingLog_SendIntroduction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(concurrent_connections_));
}

SharingLog_SendIntroduction::~SharingLog_SendIntroduction() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendIntroduction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_SendIntroduction::ArenaDtor(void* object) {
  SharingLog_SendIntroduction* _this = reinterpret_cast< SharingLog_SendIntroduction* >(object);
  (void)_this;
}
void SharingLog_SendIntroduction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendIntroduction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendIntroduction::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(share_target_info_ != nullptr);
    share_target_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&concurrent_connections_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendIntroduction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendIntroduction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::share_target_info(this), target, stream);
  }

  // optional int64 session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_session_id(), target);
  }

  // optional int32 transfer_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_concurrent_connections(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  return target;
}

size_t SharingLog_SendIntroduction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int32 transfer_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int32 concurrent_connections = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendIntroduction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendIntroduction*>(
      &from));
}

void SharingLog_SendIntroduction::MergeFrom(const SharingLog_SendIntroduction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendIntroduction::CopyFrom(const SharingLog_SendIntroduction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendIntroduction::IsInitialized() const {
  return true;
}

void SharingLog_SendIntroduction::InternalSwap(SharingLog_SendIntroduction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SendIntroduction, concurrent_connections_)
      + sizeof(SharingLog_SendIntroduction::concurrent_connections_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SendIntroduction, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
}

std::string SharingLog_SendIntroduction::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendIntroduction";
}


// ===================================================================

class SharingLog_ReceiveIntroduction::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ReceiveIntroduction>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_ReceiveIntroduction* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_ReceiveIntroduction::_Internal::share_target_info(const SharingLog_ReceiveIntroduction* msg) {
  return *msg->share_target_info_;
}
SharingLog_ReceiveIntroduction::SharingLog_ReceiveIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
}
SharingLog_ReceiveIntroduction::SharingLog_ReceiveIntroduction(const SharingLog_ReceiveIntroduction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
}

inline void SharingLog_ReceiveIntroduction::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(session_id_));
}

SharingLog_ReceiveIntroduction::~SharingLog_ReceiveIntroduction() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ReceiveIntroduction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_ReceiveIntroduction::ArenaDtor(void* object) {
  SharingLog_ReceiveIntroduction* _this = reinterpret_cast< SharingLog_ReceiveIntroduction* >(object);
  (void)_this;
}
void SharingLog_ReceiveIntroduction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ReceiveIntroduction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ReceiveIntroduction::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
  }
  session_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ReceiveIntroduction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ReceiveIntroduction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::share_target_info(this), target, stream);
  }

  // optional string referrer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  return target;
}

size_t SharingLog_ReceiveIntroduction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string referrer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ReceiveIntroduction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ReceiveIntroduction*>(
      &from));
}

void SharingLog_ReceiveIntroduction::MergeFrom(const SharingLog_ReceiveIntroduction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ReceiveIntroduction::CopyFrom(const SharingLog_ReceiveIntroduction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ReceiveIntroduction::IsInitialized() const {
  return true;
}

void SharingLog_ReceiveIntroduction::InternalSwap(SharingLog_ReceiveIntroduction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveIntroduction, session_id_)
      + sizeof(SharingLog_ReceiveIntroduction::session_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveIntroduction, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
}

std::string SharingLog_ReceiveIntroduction::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction";
}


// ===================================================================

class SharingLog_RespondToIntroduction::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_RespondToIntroduction>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qr_code_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_RespondToIntroduction::SharingLog_RespondToIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
}
SharingLog_RespondToIntroduction::SharingLog_RespondToIntroduction(const SharingLog_RespondToIntroduction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
}

inline void SharingLog_RespondToIntroduction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
}

SharingLog_RespondToIntroduction::~SharingLog_RespondToIntroduction() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_RespondToIntroduction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_RespondToIntroduction::ArenaDtor(void* object) {
  SharingLog_RespondToIntroduction* _this = reinterpret_cast< SharingLog_RespondToIntroduction* >(object);
  (void)_this;
}
void SharingLog_RespondToIntroduction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_RespondToIntroduction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_RespondToIntroduction::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qr_code_flow_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_RespondToIntroduction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ResponseToIntroduction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ResponseToIntroduction_IsValid(val))) {
            _internal_set_action(static_cast<::location::nearby::proto::sharing::ResponseToIntroduction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool qr_code_flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_qr_code_flow(&has_bits);
          qr_code_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_RespondToIntroduction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ResponseToIntroduction action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // optional int64 session_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_session_id(), target);
  }

  // optional bool qr_code_flow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_qr_code_flow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  return target;
}

size_t SharingLog_RespondToIntroduction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional .location.nearby.proto.sharing.ResponseToIntroduction action = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional bool qr_code_flow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_RespondToIntroduction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_RespondToIntroduction*>(
      &from));
}

void SharingLog_RespondToIntroduction::MergeFrom(const SharingLog_RespondToIntroduction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      qr_code_flow_ = from.qr_code_flow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_RespondToIntroduction::CopyFrom(const SharingLog_RespondToIntroduction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_RespondToIntroduction::IsInitialized() const {
  return true;
}

void SharingLog_RespondToIntroduction::InternalSwap(SharingLog_RespondToIntroduction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_RespondToIntroduction, qr_code_flow_)
      + sizeof(SharingLog_RespondToIntroduction::qr_code_flow_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_RespondToIntroduction, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string SharingLog_RespondToIntroduction::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction";
}


// ===================================================================

class SharingLog_SendAttachmentsStart::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendAttachmentsStart>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info(const SharingLog_SendAttachmentsStart* msg);
  static void set_has_attachments_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_qr_code_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&
SharingLog_SendAttachmentsStart::_Internal::attachments_info(const SharingLog_SendAttachmentsStart* msg) {
  return *msg->attachments_info_;
}
SharingLog_SendAttachmentsStart::SharingLog_SendAttachmentsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
}
SharingLog_SendAttachmentsStart::SharingLog_SendAttachmentsStart(const SharingLog_SendAttachmentsStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachments_info()) {
    attachments_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo(*from.attachments_info_);
  } else {
    attachments_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
}

inline void SharingLog_SendAttachmentsStart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachments_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&qr_code_flow_) -
    reinterpret_cast<char*>(&attachments_info_)) + sizeof(qr_code_flow_));
}

SharingLog_SendAttachmentsStart::~SharingLog_SendAttachmentsStart() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendAttachmentsStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attachments_info_;
}

void SharingLog_SendAttachmentsStart::ArenaDtor(void* object) {
  SharingLog_SendAttachmentsStart* _this = reinterpret_cast< SharingLog_SendAttachmentsStart* >(object);
  (void)_this;
}
void SharingLog_SendAttachmentsStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendAttachmentsStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendAttachmentsStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attachments_info_ != nullptr);
    attachments_info_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qr_code_flow_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(qr_code_flow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendAttachmentsStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachments_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool qr_code_flow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_qr_code_flow(&has_bits);
          qr_code_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendAttachmentsStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachments_info(this), target, stream);
  }

  // optional int32 transfer_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_concurrent_connections(), target);
  }

  // optional bool qr_code_flow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_qr_code_flow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  return target;
}

size_t SharingLog_SendAttachmentsStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachments_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int32 transfer_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int32 concurrent_connections = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

    // optional bool qr_code_flow = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendAttachmentsStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendAttachmentsStart*>(
      &from));
}

void SharingLog_SendAttachmentsStart::MergeFrom(const SharingLog_SendAttachmentsStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_attachments_info()->::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo::MergeFrom(from._internal_attachments_info());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    if (cached_has_bits & 0x00000010u) {
      qr_code_flow_ = from.qr_code_flow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendAttachmentsStart::CopyFrom(const SharingLog_SendAttachmentsStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendAttachmentsStart::IsInitialized() const {
  return true;
}

void SharingLog_SendAttachmentsStart::InternalSwap(SharingLog_SendAttachmentsStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SendAttachmentsStart, qr_code_flow_)
      + sizeof(SharingLog_SendAttachmentsStart::qr_code_flow_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SendAttachmentsStart, attachments_info_)>(
          reinterpret_cast<char*>(&attachments_info_),
          reinterpret_cast<char*>(&other->attachments_info_));
}

std::string SharingLog_SendAttachmentsStart::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart";
}


// ===================================================================

class SharingLog_SendAttachmentsEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendAttachmentsEnd>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sent_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info(const SharingLog_SendAttachmentsEnd* msg);
  static void set_has_attachments_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_SendAttachmentsEnd* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connection_layer_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&
SharingLog_SendAttachmentsEnd::_Internal::attachments_info(const SharingLog_SendAttachmentsEnd* msg) {
  return *msg->attachments_info_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_SendAttachmentsEnd::_Internal::share_target_info(const SharingLog_SendAttachmentsEnd* msg) {
  return *msg->share_target_info_;
}
SharingLog_SendAttachmentsEnd::SharingLog_SendAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
}
SharingLog_SendAttachmentsEnd::SharingLog_SendAttachmentsEnd(const SharingLog_SendAttachmentsEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attachments_info()) {
    attachments_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo(*from.attachments_info_);
  } else {
    attachments_info_ = nullptr;
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_layer_status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(connection_layer_status_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
}

inline void SharingLog_SendAttachmentsEnd::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachments_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connection_layer_status_) -
    reinterpret_cast<char*>(&attachments_info_)) + sizeof(connection_layer_status_));
}

SharingLog_SendAttachmentsEnd::~SharingLog_SendAttachmentsEnd() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendAttachmentsEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attachments_info_;
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_SendAttachmentsEnd::ArenaDtor(void* object) {
  SharingLog_SendAttachmentsEnd* _this = reinterpret_cast< SharingLog_SendAttachmentsEnd* >(object);
  (void)_this;
}
void SharingLog_SendAttachmentsEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendAttachmentsEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendAttachmentsEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attachments_info_ != nullptr);
      attachments_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_millis_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(duration_millis_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&concurrent_connections_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_layer_status_) -
        reinterpret_cast<char*>(&concurrent_connections_)) + sizeof(connection_layer_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendAttachmentsEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sent_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sent_bytes(&has_bits);
          sent_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentTransmissionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::AttachmentTransmissionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachments_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_millis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration_millis(&has_bits);
          duration_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ConnectionLayerStatus connection_layer_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ConnectionLayerStatus_IsValid(val))) {
            _internal_set_connection_layer_status(static_cast<::location::nearby::proto::sharing::ConnectionLayerStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendAttachmentsEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int64 sent_bytes = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sent_bytes(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional int32 transfer_position = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_concurrent_connections(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::attachments_info(this), target, stream);
  }

  // optional int64 duration_millis = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_duration_millis(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::share_target_info(this), target, stream);
  }

  // optional string referrer_name = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_referrer_name(), target);
  }

  // optional .location.nearby.proto.sharing.ConnectionLayerStatus connection_layer_status = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_connection_layer_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  return target;
}

size_t SharingLog_SendAttachmentsEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string referrer_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachments_info_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int64 sent_bytes = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sent_bytes());
    }

    // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional int32 transfer_position = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int64 duration_millis = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_millis());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 concurrent_connections = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

    // optional .location.nearby.proto.sharing.ConnectionLayerStatus connection_layer_status = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection_layer_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendAttachmentsEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendAttachmentsEnd*>(
      &from));
}

void SharingLog_SendAttachmentsEnd::MergeFrom(const SharingLog_SendAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attachments_info()->::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo::MergeFrom(from._internal_attachments_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      sent_bytes_ = from.sent_bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_millis_ = from.duration_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    if (cached_has_bits & 0x00000200u) {
      connection_layer_status_ = from.connection_layer_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendAttachmentsEnd::CopyFrom(const SharingLog_SendAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendAttachmentsEnd::IsInitialized() const {
  return true;
}

void SharingLog_SendAttachmentsEnd::InternalSwap(SharingLog_SendAttachmentsEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SendAttachmentsEnd, connection_layer_status_)
      + sizeof(SharingLog_SendAttachmentsEnd::connection_layer_status_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SendAttachmentsEnd, attachments_info_)>(
          reinterpret_cast<char*>(&attachments_info_),
          reinterpret_cast<char*>(&other->attachments_info_));
}

std::string SharingLog_SendAttachmentsEnd::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd";
}


// ===================================================================

class SharingLog_ReceiveAttachmentsStart::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ReceiveAttachmentsStart>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info(const SharingLog_ReceiveAttachmentsStart* msg);
  static void set_has_attachments_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_ReceiveAttachmentsStart* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&
SharingLog_ReceiveAttachmentsStart::_Internal::attachments_info(const SharingLog_ReceiveAttachmentsStart* msg) {
  return *msg->attachments_info_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_ReceiveAttachmentsStart::_Internal::share_target_info(const SharingLog_ReceiveAttachmentsStart* msg) {
  return *msg->share_target_info_;
}
SharingLog_ReceiveAttachmentsStart::SharingLog_ReceiveAttachmentsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
}
SharingLog_ReceiveAttachmentsStart::SharingLog_ReceiveAttachmentsStart(const SharingLog_ReceiveAttachmentsStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachments_info()) {
    attachments_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo(*from.attachments_info_);
  } else {
    attachments_info_ = nullptr;
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
}

inline void SharingLog_ReceiveAttachmentsStart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachments_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&attachments_info_)) + sizeof(session_id_));
}

SharingLog_ReceiveAttachmentsStart::~SharingLog_ReceiveAttachmentsStart() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ReceiveAttachmentsStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attachments_info_;
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_ReceiveAttachmentsStart::ArenaDtor(void* object) {
  SharingLog_ReceiveAttachmentsStart* _this = reinterpret_cast< SharingLog_ReceiveAttachmentsStart* >(object);
  (void)_this;
}
void SharingLog_ReceiveAttachmentsStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ReceiveAttachmentsStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ReceiveAttachmentsStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(attachments_info_ != nullptr);
      attachments_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
  }
  session_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ReceiveAttachmentsStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachments_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ReceiveAttachmentsStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachments_info(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::share_target_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  return target;
}

size_t SharingLog_ReceiveAttachmentsStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachments_info_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ReceiveAttachmentsStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ReceiveAttachmentsStart*>(
      &from));
}

void SharingLog_ReceiveAttachmentsStart::MergeFrom(const SharingLog_ReceiveAttachmentsStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_attachments_info()->::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo::MergeFrom(from._internal_attachments_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ReceiveAttachmentsStart::CopyFrom(const SharingLog_ReceiveAttachmentsStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ReceiveAttachmentsStart::IsInitialized() const {
  return true;
}

void SharingLog_ReceiveAttachmentsStart::InternalSwap(SharingLog_ReceiveAttachmentsStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveAttachmentsStart, session_id_)
      + sizeof(SharingLog_ReceiveAttachmentsStart::session_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveAttachmentsStart, attachments_info_)>(
          reinterpret_cast<char*>(&attachments_info_),
          reinterpret_cast<char*>(&other->attachments_info_));
}

std::string SharingLog_ReceiveAttachmentsStart::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart";
}


// ===================================================================

class SharingLog_ReceiveAttachmentsEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ReceiveAttachmentsEnd>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_received_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_ReceiveAttachmentsEnd* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_ReceiveAttachmentsEnd::_Internal::share_target_info(const SharingLog_ReceiveAttachmentsEnd* msg) {
  return *msg->share_target_info_;
}
SharingLog_ReceiveAttachmentsEnd::SharingLog_ReceiveAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
}
SharingLog_ReceiveAttachmentsEnd::SharingLog_ReceiveAttachmentsEnd(const SharingLog_ReceiveAttachmentsEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
}

inline void SharingLog_ReceiveAttachmentsEnd::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(status_));
}

SharingLog_ReceiveAttachmentsEnd::~SharingLog_ReceiveAttachmentsEnd() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ReceiveAttachmentsEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_ReceiveAttachmentsEnd::ArenaDtor(void* object) {
  SharingLog_ReceiveAttachmentsEnd* _this = reinterpret_cast< SharingLog_ReceiveAttachmentsEnd* >(object);
  (void)_this;
}
void SharingLog_ReceiveAttachmentsEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ReceiveAttachmentsEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ReceiveAttachmentsEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      referrer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_target_info_ != nullptr);
      share_target_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ReceiveAttachmentsEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 received_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_received_bytes(&has_bits);
          received_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentTransmissionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::AttachmentTransmissionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ReceiveAttachmentsEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int64 received_bytes = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_received_bytes(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional string referrer_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_referrer_name(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::share_target_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  return target;
}

size_t SharingLog_ReceiveAttachmentsEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string referrer_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int64 received_bytes = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received_bytes());
    }

    // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ReceiveAttachmentsEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ReceiveAttachmentsEnd*>(
      &from));
}

void SharingLog_ReceiveAttachmentsEnd::MergeFrom(const SharingLog_ReceiveAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      received_bytes_ = from.received_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ReceiveAttachmentsEnd::CopyFrom(const SharingLog_ReceiveAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ReceiveAttachmentsEnd::IsInitialized() const {
  return true;
}

void SharingLog_ReceiveAttachmentsEnd::InternalSwap(SharingLog_ReceiveAttachmentsEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveAttachmentsEnd, status_)
      + sizeof(SharingLog_ReceiveAttachmentsEnd::status_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ReceiveAttachmentsEnd, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
}

std::string SharingLog_ReceiveAttachmentsEnd::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd";
}


// ===================================================================

class SharingLog_CancelConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_CancelConnection>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_CancelConnection::SharingLog_CancelConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
}
SharingLog_CancelConnection::SharingLog_CancelConnection(const SharingLog_CancelConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
}

inline void SharingLog_CancelConnection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
}

SharingLog_CancelConnection::~SharingLog_CancelConnection() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_CancelConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_CancelConnection::ArenaDtor(void* object) {
  SharingLog_CancelConnection* _this = reinterpret_cast< SharingLog_CancelConnection* >(object);
  (void)_this;
}
void SharingLog_CancelConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_CancelConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_CancelConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&concurrent_connections_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_CancelConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_CancelConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int32 transfer_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_concurrent_connections(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  return target;
}

size_t SharingLog_CancelConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int32 transfer_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int32 concurrent_connections = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_CancelConnection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_CancelConnection*>(
      &from));
}

void SharingLog_CancelConnection::MergeFrom(const SharingLog_CancelConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_CancelConnection::CopyFrom(const SharingLog_CancelConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_CancelConnection::IsInitialized() const {
  return true;
}

void SharingLog_CancelConnection::InternalSwap(SharingLog_CancelConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_CancelConnection, concurrent_connections_)
      + sizeof(SharingLog_CancelConnection::concurrent_connections_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_CancelConnection, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string SharingLog_CancelConnection::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.CancelConnection";
}


// ===================================================================

class SharingLog_CancelSendingAttachments::_Internal {
 public:
};

SharingLog_CancelSendingAttachments::SharingLog_CancelSendingAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
}
SharingLog_CancelSendingAttachments::SharingLog_CancelSendingAttachments(const SharingLog_CancelSendingAttachments& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
}

inline void SharingLog_CancelSendingAttachments::SharedCtor() {
}

SharingLog_CancelSendingAttachments::~SharingLog_CancelSendingAttachments() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_CancelSendingAttachments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_CancelSendingAttachments::ArenaDtor(void* object) {
  SharingLog_CancelSendingAttachments* _this = reinterpret_cast< SharingLog_CancelSendingAttachments* >(object);
  (void)_this;
}
void SharingLog_CancelSendingAttachments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_CancelSendingAttachments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_CancelSendingAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_CancelSendingAttachments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_CancelSendingAttachments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  return target;
}

size_t SharingLog_CancelSendingAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_CancelSendingAttachments::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_CancelSendingAttachments*>(
      &from));
}

void SharingLog_CancelSendingAttachments::MergeFrom(const SharingLog_CancelSendingAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_CancelSendingAttachments::CopyFrom(const SharingLog_CancelSendingAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_CancelSendingAttachments::IsInitialized() const {
  return true;
}

void SharingLog_CancelSendingAttachments::InternalSwap(SharingLog_CancelSendingAttachments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_CancelSendingAttachments::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments";
}


// ===================================================================

class SharingLog_CancelReceivingAttachments::_Internal {
 public:
};

SharingLog_CancelReceivingAttachments::SharingLog_CancelReceivingAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
}
SharingLog_CancelReceivingAttachments::SharingLog_CancelReceivingAttachments(const SharingLog_CancelReceivingAttachments& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
}

inline void SharingLog_CancelReceivingAttachments::SharedCtor() {
}

SharingLog_CancelReceivingAttachments::~SharingLog_CancelReceivingAttachments() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_CancelReceivingAttachments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_CancelReceivingAttachments::ArenaDtor(void* object) {
  SharingLog_CancelReceivingAttachments* _this = reinterpret_cast< SharingLog_CancelReceivingAttachments* >(object);
  (void)_this;
}
void SharingLog_CancelReceivingAttachments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_CancelReceivingAttachments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_CancelReceivingAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_CancelReceivingAttachments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_CancelReceivingAttachments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  return target;
}

size_t SharingLog_CancelReceivingAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_CancelReceivingAttachments::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_CancelReceivingAttachments*>(
      &from));
}

void SharingLog_CancelReceivingAttachments::MergeFrom(const SharingLog_CancelReceivingAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_CancelReceivingAttachments::CopyFrom(const SharingLog_CancelReceivingAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_CancelReceivingAttachments::IsInitialized() const {
  return true;
}

void SharingLog_CancelReceivingAttachments::InternalSwap(SharingLog_CancelReceivingAttachments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_CancelReceivingAttachments::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments";
}


// ===================================================================

class SharingLog_ProcessReceivedAttachmentsEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ProcessReceivedAttachmentsEnd>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_ProcessReceivedAttachmentsEnd::SharingLog_ProcessReceivedAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
}
SharingLog_ProcessReceivedAttachmentsEnd::SharingLog_ProcessReceivedAttachmentsEnd(const SharingLog_ProcessReceivedAttachmentsEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
}

inline void SharingLog_ProcessReceivedAttachmentsEnd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
}

SharingLog_ProcessReceivedAttachmentsEnd::~SharingLog_ProcessReceivedAttachmentsEnd() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ProcessReceivedAttachmentsEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ProcessReceivedAttachmentsEnd::ArenaDtor(void* object) {
  SharingLog_ProcessReceivedAttachmentsEnd* _this = reinterpret_cast< SharingLog_ProcessReceivedAttachmentsEnd* >(object);
  (void)_this;
}
void SharingLog_ProcessReceivedAttachmentsEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ProcessReceivedAttachmentsEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ProcessReceivedAttachmentsEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ProcessReceivedAttachmentsEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ProcessReceivedAttachmentsStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ProcessReceivedAttachmentsEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .location.nearby.proto.sharing.ProcessReceivedAttachmentsStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  return target;
}

size_t SharingLog_ProcessReceivedAttachmentsEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional .location.nearby.proto.sharing.ProcessReceivedAttachmentsStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ProcessReceivedAttachmentsEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ProcessReceivedAttachmentsEnd*>(
      &from));
}

void SharingLog_ProcessReceivedAttachmentsEnd::MergeFrom(const SharingLog_ProcessReceivedAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ProcessReceivedAttachmentsEnd::CopyFrom(const SharingLog_ProcessReceivedAttachmentsEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ProcessReceivedAttachmentsEnd::IsInitialized() const {
  return true;
}

void SharingLog_ProcessReceivedAttachmentsEnd::InternalSwap(SharingLog_ProcessReceivedAttachmentsEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ProcessReceivedAttachmentsEnd, status_)
      + sizeof(SharingLog_ProcessReceivedAttachmentsEnd::status_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ProcessReceivedAttachmentsEnd, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string SharingLog_ProcessReceivedAttachmentsEnd::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd";
}


// ===================================================================

class SharingLog_OpenReceivedAttachments::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_OpenReceivedAttachments>()._has_bits_);
  static const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info(const SharingLog_OpenReceivedAttachments* msg);
  static void set_has_attachments_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&
SharingLog_OpenReceivedAttachments::_Internal::attachments_info(const SharingLog_OpenReceivedAttachments* msg) {
  return *msg->attachments_info_;
}
SharingLog_OpenReceivedAttachments::SharingLog_OpenReceivedAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
}
SharingLog_OpenReceivedAttachments::SharingLog_OpenReceivedAttachments(const SharingLog_OpenReceivedAttachments& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachments_info()) {
    attachments_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo(*from.attachments_info_);
  } else {
    attachments_info_ = nullptr;
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
}

inline void SharingLog_OpenReceivedAttachments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachments_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&attachments_info_)) + sizeof(session_id_));
}

SharingLog_OpenReceivedAttachments::~SharingLog_OpenReceivedAttachments() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_OpenReceivedAttachments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attachments_info_;
}

void SharingLog_OpenReceivedAttachments::ArenaDtor(void* object) {
  SharingLog_OpenReceivedAttachments* _this = reinterpret_cast< SharingLog_OpenReceivedAttachments* >(object);
  (void)_this;
}
void SharingLog_OpenReceivedAttachments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_OpenReceivedAttachments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_OpenReceivedAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attachments_info_ != nullptr);
    attachments_info_->Clear();
  }
  session_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_OpenReceivedAttachments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachments_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_OpenReceivedAttachments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attachments_info(this), target, stream);
  }

  // optional int64 session_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  return target;
}

size_t SharingLog_OpenReceivedAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachments_info_);
    }

    // optional int64 session_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_OpenReceivedAttachments::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_OpenReceivedAttachments*>(
      &from));
}

void SharingLog_OpenReceivedAttachments::MergeFrom(const SharingLog_OpenReceivedAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_attachments_info()->::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo::MergeFrom(from._internal_attachments_info());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_OpenReceivedAttachments::CopyFrom(const SharingLog_OpenReceivedAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_OpenReceivedAttachments::IsInitialized() const {
  return true;
}

void SharingLog_OpenReceivedAttachments::InternalSwap(SharingLog_OpenReceivedAttachments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_OpenReceivedAttachments, session_id_)
      + sizeof(SharingLog_OpenReceivedAttachments::session_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_OpenReceivedAttachments, attachments_info_)>(
          reinterpret_cast<char*>(&attachments_info_),
          reinterpret_cast<char*>(&other->attachments_info_));
}

std::string SharingLog_OpenReceivedAttachments::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments";
}


// ===================================================================

class SharingLog_LaunchSetupActivity::_Internal {
 public:
};

SharingLog_LaunchSetupActivity::SharingLog_LaunchSetupActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
}
SharingLog_LaunchSetupActivity::SharingLog_LaunchSetupActivity(const SharingLog_LaunchSetupActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
}

inline void SharingLog_LaunchSetupActivity::SharedCtor() {
}

SharingLog_LaunchSetupActivity::~SharingLog_LaunchSetupActivity() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_LaunchSetupActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_LaunchSetupActivity::ArenaDtor(void* object) {
  SharingLog_LaunchSetupActivity* _this = reinterpret_cast< SharingLog_LaunchSetupActivity* >(object);
  (void)_this;
}
void SharingLog_LaunchSetupActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_LaunchSetupActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_LaunchSetupActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_LaunchSetupActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_LaunchSetupActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  return target;
}

size_t SharingLog_LaunchSetupActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_LaunchSetupActivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_LaunchSetupActivity*>(
      &from));
}

void SharingLog_LaunchSetupActivity::MergeFrom(const SharingLog_LaunchSetupActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_LaunchSetupActivity::CopyFrom(const SharingLog_LaunchSetupActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_LaunchSetupActivity::IsInitialized() const {
  return true;
}

void SharingLog_LaunchSetupActivity::InternalSwap(SharingLog_LaunchSetupActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_LaunchSetupActivity::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity";
}


// ===================================================================

class SharingLog_AddContact::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AddContact>()._has_bits_);
  static void set_has_was_phone_added(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_was_email_added(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_AddContact::SharingLog_AddContact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AddContact)
}
SharingLog_AddContact::SharingLog_AddContact(const SharingLog_AddContact& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&was_phone_added_, &from.was_phone_added_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_email_added_) -
    reinterpret_cast<char*>(&was_phone_added_)) + sizeof(was_email_added_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AddContact)
}

inline void SharingLog_AddContact::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&was_phone_added_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_email_added_) -
    reinterpret_cast<char*>(&was_phone_added_)) + sizeof(was_email_added_));
}

SharingLog_AddContact::~SharingLog_AddContact() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AddContact)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AddContact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AddContact::ArenaDtor(void* object) {
  SharingLog_AddContact* _this = reinterpret_cast< SharingLog_AddContact* >(object);
  (void)_this;
}
void SharingLog_AddContact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AddContact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AddContact::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AddContact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&was_phone_added_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_email_added_) -
      reinterpret_cast<char*>(&was_phone_added_)) + sizeof(was_email_added_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AddContact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool was_phone_added = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_was_phone_added(&has_bits);
          was_phone_added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_email_added = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_was_email_added(&has_bits);
          was_email_added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AddContact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AddContact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool was_phone_added = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_phone_added(), target);
  }

  // optional bool was_email_added = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_was_email_added(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AddContact)
  return target;
}

size_t SharingLog_AddContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AddContact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool was_phone_added = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool was_email_added = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AddContact::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AddContact*>(
      &from));
}

void SharingLog_AddContact::MergeFrom(const SharingLog_AddContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AddContact)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      was_phone_added_ = from.was_phone_added_;
    }
    if (cached_has_bits & 0x00000002u) {
      was_email_added_ = from.was_email_added_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AddContact::CopyFrom(const SharingLog_AddContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AddContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AddContact::IsInitialized() const {
  return true;
}

void SharingLog_AddContact::InternalSwap(SharingLog_AddContact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_AddContact, was_email_added_)
      + sizeof(SharingLog_AddContact::was_email_added_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_AddContact, was_phone_added_)>(
          reinterpret_cast<char*>(&was_phone_added_),
          reinterpret_cast<char*>(&other->was_phone_added_));
}

std::string SharingLog_AddContact::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AddContact";
}


// ===================================================================

class SharingLog_RemoveContact::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_RemoveContact>()._has_bits_);
  static void set_has_was_phone_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_was_email_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_RemoveContact::SharingLog_RemoveContact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
}
SharingLog_RemoveContact::SharingLog_RemoveContact(const SharingLog_RemoveContact& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&was_phone_removed_, &from.was_phone_removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_email_removed_) -
    reinterpret_cast<char*>(&was_phone_removed_)) + sizeof(was_email_removed_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
}

inline void SharingLog_RemoveContact::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&was_phone_removed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_email_removed_) -
    reinterpret_cast<char*>(&was_phone_removed_)) + sizeof(was_email_removed_));
}

SharingLog_RemoveContact::~SharingLog_RemoveContact() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_RemoveContact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_RemoveContact::ArenaDtor(void* object) {
  SharingLog_RemoveContact* _this = reinterpret_cast< SharingLog_RemoveContact* >(object);
  (void)_this;
}
void SharingLog_RemoveContact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_RemoveContact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_RemoveContact::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&was_phone_removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_email_removed_) -
      reinterpret_cast<char*>(&was_phone_removed_)) + sizeof(was_email_removed_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_RemoveContact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool was_phone_removed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_was_phone_removed(&has_bits);
          was_phone_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_email_removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_was_email_removed(&has_bits);
          was_email_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_RemoveContact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool was_phone_removed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_phone_removed(), target);
  }

  // optional bool was_email_removed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_was_email_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  return target;
}

size_t SharingLog_RemoveContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool was_phone_removed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool was_email_removed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_RemoveContact::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_RemoveContact*>(
      &from));
}

void SharingLog_RemoveContact::MergeFrom(const SharingLog_RemoveContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      was_phone_removed_ = from.was_phone_removed_;
    }
    if (cached_has_bits & 0x00000002u) {
      was_email_removed_ = from.was_email_removed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_RemoveContact::CopyFrom(const SharingLog_RemoveContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_RemoveContact::IsInitialized() const {
  return true;
}

void SharingLog_RemoveContact::InternalSwap(SharingLog_RemoveContact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_RemoveContact, was_email_removed_)
      + sizeof(SharingLog_RemoveContact::was_email_removed_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_RemoveContact, was_phone_removed_)>(
          reinterpret_cast<char*>(&was_phone_removed_),
          reinterpret_cast<char*>(&other->was_phone_removed_));
}

std::string SharingLog_RemoveContact::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.RemoveContact";
}


// ===================================================================

class SharingLog_FastShareServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_FastShareServerResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latency_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requester(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SharingLog_FastShareServerResponse::SharingLog_FastShareServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
}
SharingLog_FastShareServerResponse::SharingLog_FastShareServerResponse(const SharingLog_FastShareServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(device_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
}

inline void SharingLog_FastShareServerResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(device_type_));
}

SharingLog_FastShareServerResponse::~SharingLog_FastShareServerResponse() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_FastShareServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_FastShareServerResponse::ArenaDtor(void* object) {
  SharingLog_FastShareServerResponse* _this = reinterpret_cast< SharingLog_FastShareServerResponse* >(object);
  (void)_this;
}
void SharingLog_FastShareServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_FastShareServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_FastShareServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_type_) -
        reinterpret_cast<char*>(&status_)) + sizeof(device_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_FastShareServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ServerResponseState status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ServerResponseState_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::ServerResponseState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ServerActionName name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ServerActionName_IsValid(val))) {
            _internal_set_name(static_cast<::location::nearby::proto::sharing::ServerActionName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 latency_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_latency_millis(&has_bits);
          latency_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.SyncPurpose purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::SyncPurpose_IsValid(val))) {
            _internal_set_purpose(static_cast<::location::nearby::proto::sharing::SyncPurpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ClientRole requester = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ClientRole_IsValid(val))) {
            _internal_set_requester(static_cast<::location::nearby::proto::sharing::ClientRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DeviceType device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DeviceType_IsValid(val))) {
            _internal_set_device_type(static_cast<::location::nearby::proto::sharing::DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_FastShareServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ServerResponseState status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional .location.nearby.proto.sharing.ServerActionName name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_name(), target);
  }

  // optional int64 latency_millis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_latency_millis(), target);
  }

  // optional .location.nearby.proto.sharing.SyncPurpose purpose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_purpose(), target);
  }

  // optional .location.nearby.proto.sharing.ClientRole requester = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_requester(), target);
  }

  // optional .location.nearby.proto.sharing.DeviceType device_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  return target;
}

size_t SharingLog_FastShareServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .location.nearby.proto.sharing.ServerResponseState status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .location.nearby.proto.sharing.ServerActionName name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
    }

    // optional int64 latency_millis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_latency_millis());
    }

    // optional .location.nearby.proto.sharing.SyncPurpose purpose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_purpose());
    }

    // optional .location.nearby.proto.sharing.ClientRole requester = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requester());
    }

    // optional .location.nearby.proto.sharing.DeviceType device_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_FastShareServerResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_FastShareServerResponse*>(
      &from));
}

void SharingLog_FastShareServerResponse::MergeFrom(const SharingLog_FastShareServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    if (cached_has_bits & 0x00000004u) {
      latency_millis_ = from.latency_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      purpose_ = from.purpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      requester_ = from.requester_;
    }
    if (cached_has_bits & 0x00000020u) {
      device_type_ = from.device_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_FastShareServerResponse::CopyFrom(const SharingLog_FastShareServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_FastShareServerResponse::IsInitialized() const {
  return true;
}

void SharingLog_FastShareServerResponse::InternalSwap(SharingLog_FastShareServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_FastShareServerResponse, device_type_)
      + sizeof(SharingLog_FastShareServerResponse::device_type_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_FastShareServerResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string SharingLog_FastShareServerResponse::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse";
}


// ===================================================================

class SharingLog_SendStart::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendStart>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transfer_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_concurrent_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info(const SharingLog_SendStart* msg);
  static void set_has_share_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&
SharingLog_SendStart::_Internal::share_target_info(const SharingLog_SendStart* msg) {
  return *msg->share_target_info_;
}
SharingLog_SendStart::SharingLog_SendStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendStart)
}
SharingLog_SendStart::SharingLog_SendStart(const SharingLog_SendStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_share_target_info()) {
    share_target_info_ = new ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo(*from.share_target_info_);
  } else {
    share_target_info_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendStart)
}

inline void SharingLog_SendStart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&share_target_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&concurrent_connections_) -
    reinterpret_cast<char*>(&share_target_info_)) + sizeof(concurrent_connections_));
}

SharingLog_SendStart::~SharingLog_SendStart() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete share_target_info_;
}

void SharingLog_SendStart::ArenaDtor(void* object) {
  SharingLog_SendStart* _this = reinterpret_cast< SharingLog_SendStart* >(object);
  (void)_this;
}
void SharingLog_SendStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(share_target_info_ != nullptr);
    share_target_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&concurrent_connections_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(concurrent_connections_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_transfer_position(&has_bits);
          transfer_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 concurrent_connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_concurrent_connections(&has_bits);
          concurrent_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_share_target_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int32 transfer_position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_transfer_position(), target);
  }

  // optional int32 concurrent_connections = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_concurrent_connections(), target);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::share_target_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendStart)
  return target;
}

size_t SharingLog_SendStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *share_target_info_);
    }

    // optional int64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_session_id());
    }

    // optional int32 transfer_position = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_position());
    }

    // optional int32 concurrent_connections = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_concurrent_connections());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendStart*>(
      &from));
}

void SharingLog_SendStart::MergeFrom(const SharingLog_SendStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_share_target_info()->::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo::MergeFrom(from._internal_share_target_info());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_position_ = from.transfer_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      concurrent_connections_ = from.concurrent_connections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendStart::CopyFrom(const SharingLog_SendStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendStart::IsInitialized() const {
  return true;
}

void SharingLog_SendStart::InternalSwap(SharingLog_SendStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_SendStart, concurrent_connections_)
      + sizeof(SharingLog_SendStart::concurrent_connections_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_SendStart, share_target_info_)>(
          reinterpret_cast<char*>(&share_target_info_),
          reinterpret_cast<char*>(&other->share_target_info_));
}

std::string SharingLog_SendStart::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendStart";
}


// ===================================================================

class SharingLog_AcceptFastInitialization::_Internal {
 public:
};

SharingLog_AcceptFastInitialization::SharingLog_AcceptFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
}
SharingLog_AcceptFastInitialization::SharingLog_AcceptFastInitialization(const SharingLog_AcceptFastInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
}

inline void SharingLog_AcceptFastInitialization::SharedCtor() {
}

SharingLog_AcceptFastInitialization::~SharingLog_AcceptFastInitialization() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AcceptFastInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AcceptFastInitialization::ArenaDtor(void* object) {
  SharingLog_AcceptFastInitialization* _this = reinterpret_cast< SharingLog_AcceptFastInitialization* >(object);
  (void)_this;
}
void SharingLog_AcceptFastInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AcceptFastInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AcceptFastInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AcceptFastInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AcceptFastInitialization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  return target;
}

size_t SharingLog_AcceptFastInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AcceptFastInitialization::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AcceptFastInitialization*>(
      &from));
}

void SharingLog_AcceptFastInitialization::MergeFrom(const SharingLog_AcceptFastInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AcceptFastInitialization::CopyFrom(const SharingLog_AcceptFastInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AcceptFastInitialization::IsInitialized() const {
  return true;
}

void SharingLog_AcceptFastInitialization::InternalSwap(SharingLog_AcceptFastInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_AcceptFastInitialization::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization";
}


// ===================================================================

class SharingLog_LaunchActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_LaunchActivity>()._has_bits_);
  static void set_has_activity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_transfer_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_opted_in(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_activity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_finishing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SharingLog_LaunchActivity::SharingLog_LaunchActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
}
SharingLog_LaunchActivity::SharingLog_LaunchActivity(const SharingLog_LaunchActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_name()) {
    referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&duration_millis_, &from.duration_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_activity_name_) -
    reinterpret_cast<char*>(&duration_millis_)) + sizeof(source_activity_name_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
}

inline void SharingLog_LaunchActivity::SharedCtor() {
referrer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_millis_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_activity_name_) -
    reinterpret_cast<char*>(&duration_millis_)) + sizeof(source_activity_name_));
}

SharingLog_LaunchActivity::~SharingLog_LaunchActivity() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_LaunchActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_LaunchActivity::ArenaDtor(void* object) {
  SharingLog_LaunchActivity* _this = reinterpret_cast< SharingLog_LaunchActivity* >(object);
  (void)_this;
}
void SharingLog_LaunchActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_LaunchActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_LaunchActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    referrer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&duration_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_activity_name_) -
        reinterpret_cast<char*>(&duration_millis_)) + sizeof(source_activity_name_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_LaunchActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ActivityName_IsValid(val))) {
            _internal_set_activity_name(static_cast<::location::nearby::proto::sharing::ActivityName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration_millis(&has_bits);
          duration_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_referrer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool previous_transfer_in_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_previous_transfer_in_progress(&has_bits);
          previous_transfer_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_opted_in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_has_opted_in(&has_bits);
          has_opted_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ActivityName_IsValid(val))) {
            _internal_set_source_activity_name(static_cast<::location::nearby::proto::sharing::ActivityName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_finishing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_finishing(&has_bits);
          is_finishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_LaunchActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activity_name(), target);
  }

  // optional int64 duration_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration_millis(), target);
  }

  // optional string referrer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer_name(), target);
  }

  // optional bool previous_transfer_in_progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_previous_transfer_in_progress(), target);
  }

  // optional bool has_opted_in = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_opted_in(), target);
  }

  // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_source_activity_name(), target);
  }

  // optional bool is_finishing = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_finishing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  return target;
}

size_t SharingLog_LaunchActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string referrer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_name());
    }

    // optional int64 duration_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_millis());
    }

    // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_name());
    }

    // optional bool previous_transfer_in_progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool has_opted_in = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_finishing = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_activity_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_LaunchActivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_LaunchActivity*>(
      &from));
}

void SharingLog_LaunchActivity::MergeFrom(const SharingLog_LaunchActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_name(from._internal_referrer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_millis_ = from.duration_millis_;
    }
    if (cached_has_bits & 0x00000004u) {
      activity_name_ = from.activity_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      previous_transfer_in_progress_ = from.previous_transfer_in_progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_opted_in_ = from.has_opted_in_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_finishing_ = from.is_finishing_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_activity_name_ = from.source_activity_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_LaunchActivity::CopyFrom(const SharingLog_LaunchActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_LaunchActivity::IsInitialized() const {
  return true;
}

void SharingLog_LaunchActivity::InternalSwap(SharingLog_LaunchActivity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referrer_name_, lhs_arena,
      &other->referrer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_LaunchActivity, source_activity_name_)
      + sizeof(SharingLog_LaunchActivity::source_activity_name_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_LaunchActivity, duration_millis_)>(
          reinterpret_cast<char*>(&duration_millis_),
          reinterpret_cast<char*>(&other->duration_millis_));
}

std::string SharingLog_LaunchActivity::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.LaunchActivity";
}


// ===================================================================

class SharingLog_DismissPrivacyNotification::_Internal {
 public:
};

SharingLog_DismissPrivacyNotification::SharingLog_DismissPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
}
SharingLog_DismissPrivacyNotification::SharingLog_DismissPrivacyNotification(const SharingLog_DismissPrivacyNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
}

inline void SharingLog_DismissPrivacyNotification::SharedCtor() {
}

SharingLog_DismissPrivacyNotification::~SharingLog_DismissPrivacyNotification() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DismissPrivacyNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DismissPrivacyNotification::ArenaDtor(void* object) {
  SharingLog_DismissPrivacyNotification* _this = reinterpret_cast< SharingLog_DismissPrivacyNotification* >(object);
  (void)_this;
}
void SharingLog_DismissPrivacyNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DismissPrivacyNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DismissPrivacyNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DismissPrivacyNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DismissPrivacyNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  return target;
}

size_t SharingLog_DismissPrivacyNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DismissPrivacyNotification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DismissPrivacyNotification*>(
      &from));
}

void SharingLog_DismissPrivacyNotification::MergeFrom(const SharingLog_DismissPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DismissPrivacyNotification::CopyFrom(const SharingLog_DismissPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DismissPrivacyNotification::IsInitialized() const {
  return true;
}

void SharingLog_DismissPrivacyNotification::InternalSwap(SharingLog_DismissPrivacyNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DismissPrivacyNotification::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification";
}


// ===================================================================

class SharingLog_TapPrivacyNotification::_Internal {
 public:
};

SharingLog_TapPrivacyNotification::SharingLog_TapPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
}
SharingLog_TapPrivacyNotification::SharingLog_TapPrivacyNotification(const SharingLog_TapPrivacyNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
}

inline void SharingLog_TapPrivacyNotification::SharedCtor() {
}

SharingLog_TapPrivacyNotification::~SharingLog_TapPrivacyNotification() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapPrivacyNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapPrivacyNotification::ArenaDtor(void* object) {
  SharingLog_TapPrivacyNotification* _this = reinterpret_cast< SharingLog_TapPrivacyNotification* >(object);
  (void)_this;
}
void SharingLog_TapPrivacyNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapPrivacyNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapPrivacyNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapPrivacyNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapPrivacyNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  return target;
}

size_t SharingLog_TapPrivacyNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapPrivacyNotification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapPrivacyNotification*>(
      &from));
}

void SharingLog_TapPrivacyNotification::MergeFrom(const SharingLog_TapPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapPrivacyNotification::CopyFrom(const SharingLog_TapPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapPrivacyNotification::IsInitialized() const {
  return true;
}

void SharingLog_TapPrivacyNotification::InternalSwap(SharingLog_TapPrivacyNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapPrivacyNotification::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification";
}


// ===================================================================

class SharingLog_TapHelp::_Internal {
 public:
};

SharingLog_TapHelp::SharingLog_TapHelp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapHelp)
}
SharingLog_TapHelp::SharingLog_TapHelp(const SharingLog_TapHelp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapHelp)
}

inline void SharingLog_TapHelp::SharedCtor() {
}

SharingLog_TapHelp::~SharingLog_TapHelp() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapHelp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapHelp::ArenaDtor(void* object) {
  SharingLog_TapHelp* _this = reinterpret_cast< SharingLog_TapHelp* >(object);
  (void)_this;
}
void SharingLog_TapHelp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapHelp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapHelp::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapHelp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapHelp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  return target;
}

size_t SharingLog_TapHelp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapHelp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapHelp*>(
      &from));
}

void SharingLog_TapHelp::MergeFrom(const SharingLog_TapHelp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapHelp::CopyFrom(const SharingLog_TapHelp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapHelp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapHelp::IsInitialized() const {
  return true;
}

void SharingLog_TapHelp::InternalSwap(SharingLog_TapHelp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapHelp::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapHelp";
}


// ===================================================================

class SharingLog_TapFeedback::_Internal {
 public:
};

SharingLog_TapFeedback::SharingLog_TapFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
}
SharingLog_TapFeedback::SharingLog_TapFeedback(const SharingLog_TapFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
}

inline void SharingLog_TapFeedback::SharedCtor() {
}

SharingLog_TapFeedback::~SharingLog_TapFeedback() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapFeedback::ArenaDtor(void* object) {
  SharingLog_TapFeedback* _this = reinterpret_cast< SharingLog_TapFeedback* >(object);
  (void)_this;
}
void SharingLog_TapFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  return target;
}

size_t SharingLog_TapFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapFeedback::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapFeedback*>(
      &from));
}

void SharingLog_TapFeedback::MergeFrom(const SharingLog_TapFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapFeedback::CopyFrom(const SharingLog_TapFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapFeedback::IsInitialized() const {
  return true;
}

void SharingLog_TapFeedback::InternalSwap(SharingLog_TapFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapFeedback::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapFeedback";
}


// ===================================================================

class SharingLog_AddQuickSettingsTile::_Internal {
 public:
};

SharingLog_AddQuickSettingsTile::SharingLog_AddQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
}
SharingLog_AddQuickSettingsTile::SharingLog_AddQuickSettingsTile(const SharingLog_AddQuickSettingsTile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
}

inline void SharingLog_AddQuickSettingsTile::SharedCtor() {
}

SharingLog_AddQuickSettingsTile::~SharingLog_AddQuickSettingsTile() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AddQuickSettingsTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AddQuickSettingsTile::ArenaDtor(void* object) {
  SharingLog_AddQuickSettingsTile* _this = reinterpret_cast< SharingLog_AddQuickSettingsTile* >(object);
  (void)_this;
}
void SharingLog_AddQuickSettingsTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AddQuickSettingsTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AddQuickSettingsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AddQuickSettingsTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AddQuickSettingsTile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  return target;
}

size_t SharingLog_AddQuickSettingsTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AddQuickSettingsTile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AddQuickSettingsTile*>(
      &from));
}

void SharingLog_AddQuickSettingsTile::MergeFrom(const SharingLog_AddQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AddQuickSettingsTile::CopyFrom(const SharingLog_AddQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AddQuickSettingsTile::IsInitialized() const {
  return true;
}

void SharingLog_AddQuickSettingsTile::InternalSwap(SharingLog_AddQuickSettingsTile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_AddQuickSettingsTile::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile";
}


// ===================================================================

class SharingLog_RemoveQuickSettingsTile::_Internal {
 public:
};

SharingLog_RemoveQuickSettingsTile::SharingLog_RemoveQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
}
SharingLog_RemoveQuickSettingsTile::SharingLog_RemoveQuickSettingsTile(const SharingLog_RemoveQuickSettingsTile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
}

inline void SharingLog_RemoveQuickSettingsTile::SharedCtor() {
}

SharingLog_RemoveQuickSettingsTile::~SharingLog_RemoveQuickSettingsTile() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_RemoveQuickSettingsTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_RemoveQuickSettingsTile::ArenaDtor(void* object) {
  SharingLog_RemoveQuickSettingsTile* _this = reinterpret_cast< SharingLog_RemoveQuickSettingsTile* >(object);
  (void)_this;
}
void SharingLog_RemoveQuickSettingsTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_RemoveQuickSettingsTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_RemoveQuickSettingsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_RemoveQuickSettingsTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_RemoveQuickSettingsTile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  return target;
}

size_t SharingLog_RemoveQuickSettingsTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_RemoveQuickSettingsTile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_RemoveQuickSettingsTile*>(
      &from));
}

void SharingLog_RemoveQuickSettingsTile::MergeFrom(const SharingLog_RemoveQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_RemoveQuickSettingsTile::CopyFrom(const SharingLog_RemoveQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_RemoveQuickSettingsTile::IsInitialized() const {
  return true;
}

void SharingLog_RemoveQuickSettingsTile::InternalSwap(SharingLog_RemoveQuickSettingsTile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_RemoveQuickSettingsTile::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile";
}


// ===================================================================

class SharingLog_LaunchPhoneConsent::_Internal {
 public:
};

SharingLog_LaunchPhoneConsent::SharingLog_LaunchPhoneConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
}
SharingLog_LaunchPhoneConsent::SharingLog_LaunchPhoneConsent(const SharingLog_LaunchPhoneConsent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
}

inline void SharingLog_LaunchPhoneConsent::SharedCtor() {
}

SharingLog_LaunchPhoneConsent::~SharingLog_LaunchPhoneConsent() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_LaunchPhoneConsent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_LaunchPhoneConsent::ArenaDtor(void* object) {
  SharingLog_LaunchPhoneConsent* _this = reinterpret_cast< SharingLog_LaunchPhoneConsent* >(object);
  (void)_this;
}
void SharingLog_LaunchPhoneConsent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_LaunchPhoneConsent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_LaunchPhoneConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_LaunchPhoneConsent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_LaunchPhoneConsent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  return target;
}

size_t SharingLog_LaunchPhoneConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_LaunchPhoneConsent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_LaunchPhoneConsent*>(
      &from));
}

void SharingLog_LaunchPhoneConsent::MergeFrom(const SharingLog_LaunchPhoneConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_LaunchPhoneConsent::CopyFrom(const SharingLog_LaunchPhoneConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_LaunchPhoneConsent::IsInitialized() const {
  return true;
}

void SharingLog_LaunchPhoneConsent::InternalSwap(SharingLog_LaunchPhoneConsent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_LaunchPhoneConsent::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent";
}


// ===================================================================

class SharingLog_DisplayPhoneConsent::_Internal {
 public:
};

SharingLog_DisplayPhoneConsent::SharingLog_DisplayPhoneConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
}
SharingLog_DisplayPhoneConsent::SharingLog_DisplayPhoneConsent(const SharingLog_DisplayPhoneConsent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
}

inline void SharingLog_DisplayPhoneConsent::SharedCtor() {
}

SharingLog_DisplayPhoneConsent::~SharingLog_DisplayPhoneConsent() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DisplayPhoneConsent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DisplayPhoneConsent::ArenaDtor(void* object) {
  SharingLog_DisplayPhoneConsent* _this = reinterpret_cast< SharingLog_DisplayPhoneConsent* >(object);
  (void)_this;
}
void SharingLog_DisplayPhoneConsent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DisplayPhoneConsent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DisplayPhoneConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DisplayPhoneConsent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DisplayPhoneConsent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  return target;
}

size_t SharingLog_DisplayPhoneConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DisplayPhoneConsent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DisplayPhoneConsent*>(
      &from));
}

void SharingLog_DisplayPhoneConsent::MergeFrom(const SharingLog_DisplayPhoneConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DisplayPhoneConsent::CopyFrom(const SharingLog_DisplayPhoneConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DisplayPhoneConsent::IsInitialized() const {
  return true;
}

void SharingLog_DisplayPhoneConsent::InternalSwap(SharingLog_DisplayPhoneConsent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DisplayPhoneConsent::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent";
}


// ===================================================================

class SharingLog_TapQuickSettingsTile::_Internal {
 public:
};

SharingLog_TapQuickSettingsTile::SharingLog_TapQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
}
SharingLog_TapQuickSettingsTile::SharingLog_TapQuickSettingsTile(const SharingLog_TapQuickSettingsTile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
}

inline void SharingLog_TapQuickSettingsTile::SharedCtor() {
}

SharingLog_TapQuickSettingsTile::~SharingLog_TapQuickSettingsTile() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapQuickSettingsTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapQuickSettingsTile::ArenaDtor(void* object) {
  SharingLog_TapQuickSettingsTile* _this = reinterpret_cast< SharingLog_TapQuickSettingsTile* >(object);
  (void)_this;
}
void SharingLog_TapQuickSettingsTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapQuickSettingsTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapQuickSettingsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapQuickSettingsTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapQuickSettingsTile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  return target;
}

size_t SharingLog_TapQuickSettingsTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapQuickSettingsTile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapQuickSettingsTile*>(
      &from));
}

void SharingLog_TapQuickSettingsTile::MergeFrom(const SharingLog_TapQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapQuickSettingsTile::CopyFrom(const SharingLog_TapQuickSettingsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapQuickSettingsTile::IsInitialized() const {
  return true;
}

void SharingLog_TapQuickSettingsTile::InternalSwap(SharingLog_TapQuickSettingsTile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapQuickSettingsTile::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile";
}


// ===================================================================

class SharingLog_TapQuickSettingsFileShare::_Internal {
 public:
};

SharingLog_TapQuickSettingsFileShare::SharingLog_TapQuickSettingsFileShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
}
SharingLog_TapQuickSettingsFileShare::SharingLog_TapQuickSettingsFileShare(const SharingLog_TapQuickSettingsFileShare& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
}

inline void SharingLog_TapQuickSettingsFileShare::SharedCtor() {
}

SharingLog_TapQuickSettingsFileShare::~SharingLog_TapQuickSettingsFileShare() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapQuickSettingsFileShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapQuickSettingsFileShare::ArenaDtor(void* object) {
  SharingLog_TapQuickSettingsFileShare* _this = reinterpret_cast< SharingLog_TapQuickSettingsFileShare* >(object);
  (void)_this;
}
void SharingLog_TapQuickSettingsFileShare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapQuickSettingsFileShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapQuickSettingsFileShare::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapQuickSettingsFileShare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapQuickSettingsFileShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  return target;
}

size_t SharingLog_TapQuickSettingsFileShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapQuickSettingsFileShare::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapQuickSettingsFileShare*>(
      &from));
}

void SharingLog_TapQuickSettingsFileShare::MergeFrom(const SharingLog_TapQuickSettingsFileShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapQuickSettingsFileShare::CopyFrom(const SharingLog_TapQuickSettingsFileShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapQuickSettingsFileShare::IsInitialized() const {
  return true;
}

void SharingLog_TapQuickSettingsFileShare::InternalSwap(SharingLog_TapQuickSettingsFileShare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapQuickSettingsFileShare::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare";
}


// ===================================================================

class SharingLog_DisplayPrivacyNotification::_Internal {
 public:
};

SharingLog_DisplayPrivacyNotification::SharingLog_DisplayPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
}
SharingLog_DisplayPrivacyNotification::SharingLog_DisplayPrivacyNotification(const SharingLog_DisplayPrivacyNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
}

inline void SharingLog_DisplayPrivacyNotification::SharedCtor() {
}

SharingLog_DisplayPrivacyNotification::~SharingLog_DisplayPrivacyNotification() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DisplayPrivacyNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DisplayPrivacyNotification::ArenaDtor(void* object) {
  SharingLog_DisplayPrivacyNotification* _this = reinterpret_cast< SharingLog_DisplayPrivacyNotification* >(object);
  (void)_this;
}
void SharingLog_DisplayPrivacyNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DisplayPrivacyNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DisplayPrivacyNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DisplayPrivacyNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DisplayPrivacyNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  return target;
}

size_t SharingLog_DisplayPrivacyNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DisplayPrivacyNotification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DisplayPrivacyNotification*>(
      &from));
}

void SharingLog_DisplayPrivacyNotification::MergeFrom(const SharingLog_DisplayPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DisplayPrivacyNotification::CopyFrom(const SharingLog_DisplayPrivacyNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DisplayPrivacyNotification::IsInitialized() const {
  return true;
}

void SharingLog_DisplayPrivacyNotification::InternalSwap(SharingLog_DisplayPrivacyNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DisplayPrivacyNotification::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification";
}


// ===================================================================

class SharingLog_DefaultOptIn::_Internal {
 public:
};

SharingLog_DefaultOptIn::SharingLog_DefaultOptIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
}
SharingLog_DefaultOptIn::SharingLog_DefaultOptIn(const SharingLog_DefaultOptIn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
}

inline void SharingLog_DefaultOptIn::SharedCtor() {
}

SharingLog_DefaultOptIn::~SharingLog_DefaultOptIn() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DefaultOptIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DefaultOptIn::ArenaDtor(void* object) {
  SharingLog_DefaultOptIn* _this = reinterpret_cast< SharingLog_DefaultOptIn* >(object);
  (void)_this;
}
void SharingLog_DefaultOptIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DefaultOptIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DefaultOptIn::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DefaultOptIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DefaultOptIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  return target;
}

size_t SharingLog_DefaultOptIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DefaultOptIn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DefaultOptIn*>(
      &from));
}

void SharingLog_DefaultOptIn::MergeFrom(const SharingLog_DefaultOptIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DefaultOptIn::CopyFrom(const SharingLog_DefaultOptIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DefaultOptIn::IsInitialized() const {
  return true;
}

void SharingLog_DefaultOptIn::InternalSwap(SharingLog_DefaultOptIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_DefaultOptIn::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DefaultOptIn";
}


// ===================================================================

class SharingLog_SetDeviceName::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SetDeviceName>()._has_bits_);
  static void set_has_device_name_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_SetDeviceName::SharingLog_SetDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
}
SharingLog_SetDeviceName::SharingLog_SetDeviceName(const SharingLog_SetDeviceName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_name_size_ = from.device_name_size_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
}

inline void SharingLog_SetDeviceName::SharedCtor() {
device_name_size_ = 0;
}

SharingLog_SetDeviceName::~SharingLog_SetDeviceName() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SetDeviceName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SetDeviceName::ArenaDtor(void* object) {
  SharingLog_SetDeviceName* _this = reinterpret_cast< SharingLog_SetDeviceName* >(object);
  (void)_this;
}
void SharingLog_SetDeviceName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SetDeviceName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SetDeviceName::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SetDeviceName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 device_name_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device_name_size(&has_bits);
          device_name_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SetDeviceName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 device_name_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_name_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  return target;
}

size_t SharingLog_SetDeviceName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 device_name_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_device_name_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SetDeviceName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SetDeviceName*>(
      &from));
}

void SharingLog_SetDeviceName::MergeFrom(const SharingLog_SetDeviceName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_name_size()) {
    _internal_set_device_name_size(from._internal_device_name_size());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SetDeviceName::CopyFrom(const SharingLog_SetDeviceName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SetDeviceName::IsInitialized() const {
  return true;
}

void SharingLog_SetDeviceName::InternalSwap(SharingLog_SetDeviceName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_name_size_, other->device_name_size_);
}

std::string SharingLog_SetDeviceName::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SetDeviceName";
}


// ===================================================================

class SharingLog_RequestSettingPermissions::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_RequestSettingPermissions>()._has_bits_);
  static void set_has_permission_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission_request_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_RequestSettingPermissions::SharingLog_RequestSettingPermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
}
SharingLog_RequestSettingPermissions::SharingLog_RequestSettingPermissions(const SharingLog_RequestSettingPermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&permission_type_, &from.permission_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_request_result_) -
    reinterpret_cast<char*>(&permission_type_)) + sizeof(permission_request_result_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
}

inline void SharingLog_RequestSettingPermissions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_request_result_) -
    reinterpret_cast<char*>(&permission_type_)) + sizeof(permission_request_result_));
}

SharingLog_RequestSettingPermissions::~SharingLog_RequestSettingPermissions() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_RequestSettingPermissions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_RequestSettingPermissions::ArenaDtor(void* object) {
  SharingLog_RequestSettingPermissions* _this = reinterpret_cast< SharingLog_RequestSettingPermissions* >(object);
  (void)_this;
}
void SharingLog_RequestSettingPermissions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_RequestSettingPermissions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_RequestSettingPermissions::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&permission_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_request_result_) -
        reinterpret_cast<char*>(&permission_type_)) + sizeof(permission_request_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_RequestSettingPermissions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.PermissionRequestType permission_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PermissionRequestType_IsValid(val))) {
            _internal_set_permission_type(static_cast<::location::nearby::proto::sharing::PermissionRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.PermissionRequestResult permission_request_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::PermissionRequestResult_IsValid(val))) {
            _internal_set_permission_request_result(static_cast<::location::nearby::proto::sharing::PermissionRequestResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_RequestSettingPermissions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.PermissionRequestType permission_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_permission_type(), target);
  }

  // optional .location.nearby.proto.sharing.PermissionRequestResult permission_request_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permission_request_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  return target;
}

size_t SharingLog_RequestSettingPermissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.PermissionRequestType permission_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission_type());
    }

    // optional .location.nearby.proto.sharing.PermissionRequestResult permission_request_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission_request_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_RequestSettingPermissions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_RequestSettingPermissions*>(
      &from));
}

void SharingLog_RequestSettingPermissions::MergeFrom(const SharingLog_RequestSettingPermissions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      permission_type_ = from.permission_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      permission_request_result_ = from.permission_request_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_RequestSettingPermissions::CopyFrom(const SharingLog_RequestSettingPermissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_RequestSettingPermissions::IsInitialized() const {
  return true;
}

void SharingLog_RequestSettingPermissions::InternalSwap(SharingLog_RequestSettingPermissions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_RequestSettingPermissions, permission_request_result_)
      + sizeof(SharingLog_RequestSettingPermissions::permission_request_result_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_RequestSettingPermissions, permission_type_)>(
          reinterpret_cast<char*>(&permission_type_),
          reinterpret_cast<char*>(&other->permission_type_));
}

std::string SharingLog_RequestSettingPermissions::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions";
}


// ===================================================================

class SharingLog_LaunchConsent::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_LaunchConsent>()._has_bits_);
  static void set_has_consent_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_LaunchConsent::SharingLog_LaunchConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
}
SharingLog_LaunchConsent::SharingLog_LaunchConsent(const SharingLog_LaunchConsent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&consent_type_, &from.consent_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&consent_type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
}

inline void SharingLog_LaunchConsent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consent_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&consent_type_)) + sizeof(status_));
}

SharingLog_LaunchConsent::~SharingLog_LaunchConsent() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_LaunchConsent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_LaunchConsent::ArenaDtor(void* object) {
  SharingLog_LaunchConsent* _this = reinterpret_cast< SharingLog_LaunchConsent* >(object);
  (void)_this;
}
void SharingLog_LaunchConsent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_LaunchConsent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_LaunchConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&consent_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&consent_type_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_LaunchConsent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ConsentType consent_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ConsentType_IsValid(val))) {
            _internal_set_consent_type(static_cast<::location::nearby::proto::sharing::ConsentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ConsentAcceptanceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ConsentAcceptanceStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::ConsentAcceptanceStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_LaunchConsent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ConsentType consent_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_consent_type(), target);
  }

  // optional .location.nearby.proto.sharing.ConsentAcceptanceStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  return target;
}

size_t SharingLog_LaunchConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.ConsentType consent_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consent_type());
    }

    // optional .location.nearby.proto.sharing.ConsentAcceptanceStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_LaunchConsent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_LaunchConsent*>(
      &from));
}

void SharingLog_LaunchConsent::MergeFrom(const SharingLog_LaunchConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      consent_type_ = from.consent_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_LaunchConsent::CopyFrom(const SharingLog_LaunchConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_LaunchConsent::IsInitialized() const {
  return true;
}

void SharingLog_LaunchConsent::InternalSwap(SharingLog_LaunchConsent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_LaunchConsent, status_)
      + sizeof(SharingLog_LaunchConsent::status_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_LaunchConsent, consent_type_)>(
          reinterpret_cast<char*>(&consent_type_),
          reinterpret_cast<char*>(&other->consent_type_));
}

std::string SharingLog_LaunchConsent::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.LaunchConsent";
}


// ===================================================================

class SharingLog_InstallAPKStatus::_Internal {
 public:
};

SharingLog_InstallAPKStatus::SharingLog_InstallAPKStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  status_(arena),
  source_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
}
SharingLog_InstallAPKStatus::SharingLog_InstallAPKStatus(const SharingLog_InstallAPKStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      status_(from.status_),
      source_(from.source_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
}

inline void SharingLog_InstallAPKStatus::SharedCtor() {
}

SharingLog_InstallAPKStatus::~SharingLog_InstallAPKStatus() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_InstallAPKStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_InstallAPKStatus::ArenaDtor(void* object) {
  SharingLog_InstallAPKStatus* _this = reinterpret_cast< SharingLog_InstallAPKStatus* >(object);
  (void)_this;
}
void SharingLog_InstallAPKStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_InstallAPKStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_InstallAPKStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  source_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_InstallAPKStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .location.nearby.proto.sharing.InstallAPKStatus status = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_status(), ptr, ctx, ::location::nearby::proto::sharing::InstallAPKStatus_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::InstallAPKStatus_IsValid(val))) {
            _internal_add_status(static_cast<::location::nearby::proto::sharing::InstallAPKStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_source(), ptr, ctx, ::location::nearby::proto::sharing::ApkSource_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ApkSource_IsValid(val))) {
            _internal_add_source(static_cast<::location::nearby::proto::sharing::ApkSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_InstallAPKStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .location.nearby.proto.sharing.InstallAPKStatus status = 1 [packed = true];
  {
    int byte_size = _status_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, status_, byte_size, target);
    }
  }

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  {
    int byte_size = _source_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, source_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  return target;
}

size_t SharingLog_InstallAPKStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .location.nearby.proto.sharing.InstallAPKStatus status = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_status(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _status_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_source_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_source(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _source_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_InstallAPKStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_InstallAPKStatus*>(
      &from));
}

void SharingLog_InstallAPKStatus::MergeFrom(const SharingLog_InstallAPKStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  source_.MergeFrom(from.source_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_InstallAPKStatus::CopyFrom(const SharingLog_InstallAPKStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_InstallAPKStatus::IsInitialized() const {
  return true;
}

void SharingLog_InstallAPKStatus::InternalSwap(SharingLog_InstallAPKStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
  source_.InternalSwap(&other->source_);
}

std::string SharingLog_InstallAPKStatus::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus";
}


// ===================================================================

class SharingLog_VerifyAPKStatus::_Internal {
 public:
};

SharingLog_VerifyAPKStatus::SharingLog_VerifyAPKStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  status_(arena),
  source_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
}
SharingLog_VerifyAPKStatus::SharingLog_VerifyAPKStatus(const SharingLog_VerifyAPKStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      status_(from.status_),
      source_(from.source_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
}

inline void SharingLog_VerifyAPKStatus::SharedCtor() {
}

SharingLog_VerifyAPKStatus::~SharingLog_VerifyAPKStatus() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_VerifyAPKStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_VerifyAPKStatus::ArenaDtor(void* object) {
  SharingLog_VerifyAPKStatus* _this = reinterpret_cast< SharingLog_VerifyAPKStatus* >(object);
  (void)_this;
}
void SharingLog_VerifyAPKStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_VerifyAPKStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_VerifyAPKStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  source_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_VerifyAPKStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .location.nearby.proto.sharing.VerifyAPKStatus status = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_status(), ptr, ctx, ::location::nearby::proto::sharing::VerifyAPKStatus_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::VerifyAPKStatus_IsValid(val))) {
            _internal_add_status(static_cast<::location::nearby::proto::sharing::VerifyAPKStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_source(), ptr, ctx, ::location::nearby::proto::sharing::ApkSource_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ApkSource_IsValid(val))) {
            _internal_add_source(static_cast<::location::nearby::proto::sharing::ApkSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_VerifyAPKStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .location.nearby.proto.sharing.VerifyAPKStatus status = 1 [packed = true];
  {
    int byte_size = _status_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, status_, byte_size, target);
    }
  }

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  {
    int byte_size = _source_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, source_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  return target;
}

size_t SharingLog_VerifyAPKStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .location.nearby.proto.sharing.VerifyAPKStatus status = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_status(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _status_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_source_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_source(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _source_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_VerifyAPKStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_VerifyAPKStatus*>(
      &from));
}

void SharingLog_VerifyAPKStatus::MergeFrom(const SharingLog_VerifyAPKStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  source_.MergeFrom(from.source_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_VerifyAPKStatus::CopyFrom(const SharingLog_VerifyAPKStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_VerifyAPKStatus::IsInitialized() const {
  return true;
}

void SharingLog_VerifyAPKStatus::InternalSwap(SharingLog_VerifyAPKStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
  source_.InternalSwap(&other->source_);
}

std::string SharingLog_VerifyAPKStatus::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus";
}


// ===================================================================

class SharingLog_ToggleShowNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ToggleShowNotification>()._has_bits_);
  static void set_has_previous_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_ToggleShowNotification::SharingLog_ToggleShowNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
}
SharingLog_ToggleShowNotification::SharingLog_ToggleShowNotification(const SharingLog_ToggleShowNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&previous_status_, &from.previous_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_status_) -
    reinterpret_cast<char*>(&previous_status_)) + sizeof(current_status_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
}

inline void SharingLog_ToggleShowNotification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&previous_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_status_) -
    reinterpret_cast<char*>(&previous_status_)) + sizeof(current_status_));
}

SharingLog_ToggleShowNotification::~SharingLog_ToggleShowNotification() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ToggleShowNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ToggleShowNotification::ArenaDtor(void* object) {
  SharingLog_ToggleShowNotification* _this = reinterpret_cast< SharingLog_ToggleShowNotification* >(object);
  (void)_this;
}
void SharingLog_ToggleShowNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ToggleShowNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ToggleShowNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&previous_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_status_) -
        reinterpret_cast<char*>(&previous_status_)) + sizeof(current_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ToggleShowNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ShowNotificationStatus previous_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ShowNotificationStatus_IsValid(val))) {
            _internal_set_previous_status(static_cast<::location::nearby::proto::sharing::ShowNotificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.ShowNotificationStatus current_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ShowNotificationStatus_IsValid(val))) {
            _internal_set_current_status(static_cast<::location::nearby::proto::sharing::ShowNotificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ToggleShowNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ShowNotificationStatus previous_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_previous_status(), target);
  }

  // optional .location.nearby.proto.sharing.ShowNotificationStatus current_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_current_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  return target;
}

size_t SharingLog_ToggleShowNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.ShowNotificationStatus previous_status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_previous_status());
    }

    // optional .location.nearby.proto.sharing.ShowNotificationStatus current_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ToggleShowNotification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ToggleShowNotification*>(
      &from));
}

void SharingLog_ToggleShowNotification::MergeFrom(const SharingLog_ToggleShowNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      previous_status_ = from.previous_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_status_ = from.current_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ToggleShowNotification::CopyFrom(const SharingLog_ToggleShowNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ToggleShowNotification::IsInitialized() const {
  return true;
}

void SharingLog_ToggleShowNotification::InternalSwap(SharingLog_ToggleShowNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ToggleShowNotification, current_status_)
      + sizeof(SharingLog_ToggleShowNotification::current_status_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ToggleShowNotification, previous_status_)>(
          reinterpret_cast<char*>(&previous_status_),
          reinterpret_cast<char*>(&other->previous_status_));
}

std::string SharingLog_ToggleShowNotification::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification";
}


// ===================================================================

class SharingLog_DecryptCertificateFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_DecryptCertificateFailure>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_DecryptCertificateFailure::SharingLog_DecryptCertificateFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
}
SharingLog_DecryptCertificateFailure::SharingLog_DecryptCertificateFailure(const SharingLog_DecryptCertificateFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
}

inline void SharingLog_DecryptCertificateFailure::SharedCtor() {
status_ = 0;
}

SharingLog_DecryptCertificateFailure::~SharingLog_DecryptCertificateFailure() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_DecryptCertificateFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_DecryptCertificateFailure::ArenaDtor(void* object) {
  SharingLog_DecryptCertificateFailure* _this = reinterpret_cast< SharingLog_DecryptCertificateFailure* >(object);
  (void)_this;
}
void SharingLog_DecryptCertificateFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_DecryptCertificateFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_DecryptCertificateFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_DecryptCertificateFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.DecryptCertificateFailureStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DecryptCertificateFailureStatus_IsValid(val))) {
            _internal_set_status(static_cast<::location::nearby::proto::sharing::DecryptCertificateFailureStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_DecryptCertificateFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.DecryptCertificateFailureStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  return target;
}

size_t SharingLog_DecryptCertificateFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.DecryptCertificateFailureStatus status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_DecryptCertificateFailure::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_DecryptCertificateFailure*>(
      &from));
}

void SharingLog_DecryptCertificateFailure::MergeFrom(const SharingLog_DecryptCertificateFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_DecryptCertificateFailure::CopyFrom(const SharingLog_DecryptCertificateFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_DecryptCertificateFailure::IsInitialized() const {
  return true;
}

void SharingLog_DecryptCertificateFailure::InternalSwap(SharingLog_DecryptCertificateFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

std::string SharingLog_DecryptCertificateFailure::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure";
}


// ===================================================================

class SharingLog_ShowAllowPermissionAutoAccess::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ShowAllowPermissionAutoAccess>()._has_bits_);
  static void set_has_activity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowed_auto_access(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_wifi_missing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_bt_missing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SharingLog_ShowAllowPermissionAutoAccess::SharingLog_ShowAllowPermissionAutoAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
}
SharingLog_ShowAllowPermissionAutoAccess::SharingLog_ShowAllowPermissionAutoAccess(const SharingLog_ShowAllowPermissionAutoAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&activity_name_, &from.activity_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_bt_missing_) -
    reinterpret_cast<char*>(&activity_name_)) + sizeof(is_bt_missing_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
}

inline void SharingLog_ShowAllowPermissionAutoAccess::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activity_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_bt_missing_) -
    reinterpret_cast<char*>(&activity_name_)) + sizeof(is_bt_missing_));
}

SharingLog_ShowAllowPermissionAutoAccess::~SharingLog_ShowAllowPermissionAutoAccess() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ShowAllowPermissionAutoAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ShowAllowPermissionAutoAccess::ArenaDtor(void* object) {
  SharingLog_ShowAllowPermissionAutoAccess* _this = reinterpret_cast< SharingLog_ShowAllowPermissionAutoAccess* >(object);
  (void)_this;
}
void SharingLog_ShowAllowPermissionAutoAccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ShowAllowPermissionAutoAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ShowAllowPermissionAutoAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&activity_name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_bt_missing_) -
        reinterpret_cast<char*>(&activity_name_)) + sizeof(is_bt_missing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ShowAllowPermissionAutoAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::ActivityName_IsValid(val))) {
            _internal_set_activity_name(static_cast<::location::nearby::proto::sharing::ActivityName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool allowed_auto_access = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_allowed_auto_access(&has_bits);
          allowed_auto_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wifi_missing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_wifi_missing(&has_bits);
          is_wifi_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bt_missing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_bt_missing(&has_bits);
          is_bt_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ShowAllowPermissionAutoAccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activity_name(), target);
  }

  // optional bool allowed_auto_access = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allowed_auto_access(), target);
  }

  // optional bool is_wifi_missing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_wifi_missing(), target);
  }

  // optional bool is_bt_missing = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_bt_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  return target;
}

size_t SharingLog_ShowAllowPermissionAutoAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_name());
    }

    // optional bool allowed_auto_access = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_missing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_bt_missing = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ShowAllowPermissionAutoAccess::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ShowAllowPermissionAutoAccess*>(
      &from));
}

void SharingLog_ShowAllowPermissionAutoAccess::MergeFrom(const SharingLog_ShowAllowPermissionAutoAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      activity_name_ = from.activity_name_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_auto_access_ = from.allowed_auto_access_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_wifi_missing_ = from.is_wifi_missing_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_bt_missing_ = from.is_bt_missing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ShowAllowPermissionAutoAccess::CopyFrom(const SharingLog_ShowAllowPermissionAutoAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ShowAllowPermissionAutoAccess::IsInitialized() const {
  return true;
}

void SharingLog_ShowAllowPermissionAutoAccess::InternalSwap(SharingLog_ShowAllowPermissionAutoAccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ShowAllowPermissionAutoAccess, is_bt_missing_)
      + sizeof(SharingLog_ShowAllowPermissionAutoAccess::is_bt_missing_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ShowAllowPermissionAutoAccess, activity_name_)>(
          reinterpret_cast<char*>(&activity_name_),
          reinterpret_cast<char*>(&other->activity_name_));
}

std::string SharingLog_ShowAllowPermissionAutoAccess::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess";
}


// ===================================================================

class SharingLog_TapQrCode::_Internal {
 public:
};

SharingLog_TapQrCode::SharingLog_TapQrCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
}
SharingLog_TapQrCode::SharingLog_TapQrCode(const SharingLog_TapQrCode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
}

inline void SharingLog_TapQrCode::SharedCtor() {
}

SharingLog_TapQrCode::~SharingLog_TapQrCode() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TapQrCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TapQrCode::ArenaDtor(void* object) {
  SharingLog_TapQrCode* _this = reinterpret_cast< SharingLog_TapQrCode* >(object);
  (void)_this;
}
void SharingLog_TapQrCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TapQrCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TapQrCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TapQrCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TapQrCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  return target;
}

size_t SharingLog_TapQrCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TapQrCode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TapQrCode*>(
      &from));
}

void SharingLog_TapQrCode::MergeFrom(const SharingLog_TapQrCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TapQrCode::CopyFrom(const SharingLog_TapQrCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TapQrCode::IsInitialized() const {
  return true;
}

void SharingLog_TapQrCode::InternalSwap(SharingLog_TapQrCode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_TapQrCode::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TapQrCode";
}


// ===================================================================

class SharingLog_QrCodeLinkShown::_Internal {
 public:
};

SharingLog_QrCodeLinkShown::SharingLog_QrCodeLinkShown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
}
SharingLog_QrCodeLinkShown::SharingLog_QrCodeLinkShown(const SharingLog_QrCodeLinkShown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
}

inline void SharingLog_QrCodeLinkShown::SharedCtor() {
}

SharingLog_QrCodeLinkShown::~SharingLog_QrCodeLinkShown() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_QrCodeLinkShown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_QrCodeLinkShown::ArenaDtor(void* object) {
  SharingLog_QrCodeLinkShown* _this = reinterpret_cast< SharingLog_QrCodeLinkShown* >(object);
  (void)_this;
}
void SharingLog_QrCodeLinkShown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_QrCodeLinkShown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_QrCodeLinkShown::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_QrCodeLinkShown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_QrCodeLinkShown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  return target;
}

size_t SharingLog_QrCodeLinkShown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_QrCodeLinkShown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_QrCodeLinkShown*>(
      &from));
}

void SharingLog_QrCodeLinkShown::MergeFrom(const SharingLog_QrCodeLinkShown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_QrCodeLinkShown::CopyFrom(const SharingLog_QrCodeLinkShown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_QrCodeLinkShown::IsInitialized() const {
  return true;
}

void SharingLog_QrCodeLinkShown::InternalSwap(SharingLog_QrCodeLinkShown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string SharingLog_QrCodeLinkShown::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown";
}


// ===================================================================

class SharingLog_FastInitDiscoverDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_FastInitDiscoverDevice>()._has_bits_);
  static void set_has_fast_init_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fast_init_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SharingLog_FastInitDiscoverDevice::SharingLog_FastInitDiscoverDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
}
SharingLog_FastInitDiscoverDevice::SharingLog_FastInitDiscoverDevice(const SharingLog_FastInitDiscoverDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fast_init_type_, &from.fast_init_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&fast_init_state_) -
    reinterpret_cast<char*>(&fast_init_type_)) + sizeof(fast_init_state_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
}

inline void SharingLog_FastInitDiscoverDevice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fast_init_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fast_init_state_) -
    reinterpret_cast<char*>(&fast_init_type_)) + sizeof(fast_init_state_));
}

SharingLog_FastInitDiscoverDevice::~SharingLog_FastInitDiscoverDevice() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_FastInitDiscoverDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_FastInitDiscoverDevice::ArenaDtor(void* object) {
  SharingLog_FastInitDiscoverDevice* _this = reinterpret_cast< SharingLog_FastInitDiscoverDevice* >(object);
  (void)_this;
}
void SharingLog_FastInitDiscoverDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_FastInitDiscoverDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_FastInitDiscoverDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fast_init_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fast_init_state_) -
        reinterpret_cast<char*>(&fast_init_type_)) + sizeof(fast_init_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_FastInitDiscoverDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.FastInitType fast_init_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::FastInitType_IsValid(val))) {
            _internal_set_fast_init_type(static_cast<::location::nearby::proto::sharing::FastInitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.FastInitState fast_init_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::FastInitState_IsValid(val))) {
            _internal_set_fast_init_state(static_cast<::location::nearby::proto::sharing::FastInitState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_FastInitDiscoverDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.FastInitType fast_init_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fast_init_type(), target);
  }

  // optional .location.nearby.proto.sharing.FastInitState fast_init_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fast_init_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  return target;
}

size_t SharingLog_FastInitDiscoverDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .location.nearby.proto.sharing.FastInitType fast_init_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fast_init_type());
    }

    // optional .location.nearby.proto.sharing.FastInitState fast_init_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fast_init_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_FastInitDiscoverDevice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_FastInitDiscoverDevice*>(
      &from));
}

void SharingLog_FastInitDiscoverDevice::MergeFrom(const SharingLog_FastInitDiscoverDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fast_init_type_ = from.fast_init_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      fast_init_state_ = from.fast_init_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_FastInitDiscoverDevice::CopyFrom(const SharingLog_FastInitDiscoverDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_FastInitDiscoverDevice::IsInitialized() const {
  return true;
}

void SharingLog_FastInitDiscoverDevice::InternalSwap(SharingLog_FastInitDiscoverDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_FastInitDiscoverDevice, fast_init_state_)
      + sizeof(SharingLog_FastInitDiscoverDevice::fast_init_state_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_FastInitDiscoverDevice, fast_init_type_)>(
          reinterpret_cast<char*>(&fast_init_type_),
          reinterpret_cast<char*>(&other->fast_init_type_));
}

std::string SharingLog_FastInitDiscoverDevice::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice";
}


// ===================================================================

class SharingLog_ShareTargetInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_ShareTargetInfo>()._has_bits_);
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_ShareTargetInfo::SharingLog_ShareTargetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
}
SharingLog_ShareTargetInfo::SharingLog_ShareTargetInfo(const SharingLog_ShareTargetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_relationship_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(device_relationship_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
}

inline void SharingLog_ShareTargetInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_relationship_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(device_relationship_));
}

SharingLog_ShareTargetInfo::~SharingLog_ShareTargetInfo() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_ShareTargetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_ShareTargetInfo::ArenaDtor(void* object) {
  SharingLog_ShareTargetInfo* _this = reinterpret_cast< SharingLog_ShareTargetInfo* >(object);
  (void)_this;
}
void SharingLog_ShareTargetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_ShareTargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_ShareTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&device_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_relationship_) -
        reinterpret_cast<char*>(&device_type_)) + sizeof(device_relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_ShareTargetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.DeviceType device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DeviceType_IsValid(val))) {
            _internal_set_device_type(static_cast<::location::nearby::proto::sharing::DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.OSType os_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::OSType_IsValid(val))) {
            _internal_set_os_type(static_cast<::location::nearby::proto::sharing::OSType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.DeviceRelationship device_relationship = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DeviceRelationship_IsValid(val))) {
            _internal_set_device_relationship(static_cast<::location::nearby::proto::sharing::DeviceRelationship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_ShareTargetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.DeviceType device_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_type(), target);
  }

  // optional .location.nearby.proto.sharing.OSType os_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_os_type(), target);
  }

  // optional .location.nearby.proto.sharing.DeviceRelationship device_relationship = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_device_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  return target;
}

size_t SharingLog_ShareTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .location.nearby.proto.sharing.DeviceType device_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
    }

    // optional .location.nearby.proto.sharing.OSType os_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_os_type());
    }

    // optional .location.nearby.proto.sharing.DeviceRelationship device_relationship = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_relationship());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_ShareTargetInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_ShareTargetInfo*>(
      &from));
}

void SharingLog_ShareTargetInfo::MergeFrom(const SharingLog_ShareTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_type_ = from.device_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_relationship_ = from.device_relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_ShareTargetInfo::CopyFrom(const SharingLog_ShareTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_ShareTargetInfo::IsInitialized() const {
  return true;
}

void SharingLog_ShareTargetInfo::InternalSwap(SharingLog_ShareTargetInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_ShareTargetInfo, device_relationship_)
      + sizeof(SharingLog_ShareTargetInfo::device_relationship_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_ShareTargetInfo, device_type_)>(
          reinterpret_cast<char*>(&device_type_),
          reinterpret_cast<char*>(&other->device_type_));
}

std::string SharingLog_ShareTargetInfo::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo";
}


// ===================================================================

class SharingLog_AttachmentsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AttachmentsInfo>()._has_bits_);
  static void set_has_required_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_AttachmentsInfo::SharingLog_AttachmentsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  text_attachment_(arena),
  file_attachment_(arena),
  wifi_credentials_attachment_(arena),
  app_attachment_(arena),
  stream_attachment_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
}
SharingLog_AttachmentsInfo::SharingLog_AttachmentsInfo(const SharingLog_AttachmentsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      text_attachment_(from.text_attachment_),
      file_attachment_(from.file_attachment_),
      wifi_credentials_attachment_(from.wifi_credentials_attachment_),
      app_attachment_(from.app_attachment_),
      stream_attachment_(from.stream_attachment_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  required_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    required_app_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_required_app()) {
    required_app_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_app(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
}

inline void SharingLog_AttachmentsInfo::SharedCtor() {
required_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  required_app_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SharingLog_AttachmentsInfo::~SharingLog_AttachmentsInfo() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AttachmentsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  required_app_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_AttachmentsInfo::ArenaDtor(void* object) {
  SharingLog_AttachmentsInfo* _this = reinterpret_cast< SharingLog_AttachmentsInfo* >(object);
  (void)_this;
}
void SharingLog_AttachmentsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AttachmentsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AttachmentsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_attachment_.Clear();
  file_attachment_.Clear();
  wifi_credentials_attachment_.Clear();
  app_attachment_.Clear();
  stream_attachment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    required_app_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AttachmentsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nearby.sharing.analytics.proto.SharingLog.TextAttachment text_attachment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .nearby.sharing.analytics.proto.SharingLog.FileAttachment file_attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string required_app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_required_app();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment wifi_credentials_attachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wifi_credentials_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .nearby.sharing.analytics.proto.SharingLog.AppAttachment app_attachment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .nearby.sharing.analytics.proto.SharingLog.StreamAttachment stream_attachment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AttachmentsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nearby.sharing.analytics.proto.SharingLog.TextAttachment text_attachment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text_attachment(i), target, stream);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.FileAttachment file_attachment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_file_attachment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string required_app = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_required_app(), target);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment wifi_credentials_attachment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wifi_credentials_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_wifi_credentials_attachment(i), target, stream);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.AppAttachment app_attachment = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_app_attachment(i), target, stream);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.StreamAttachment stream_attachment = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stream_attachment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  return target;
}

size_t SharingLog_AttachmentsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nearby.sharing.analytics.proto.SharingLog.TextAttachment text_attachment = 1;
  total_size += 1UL * this->_internal_text_attachment_size();
  for (const auto& msg : this->text_attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.FileAttachment file_attachment = 2;
  total_size += 1UL * this->_internal_file_attachment_size();
  for (const auto& msg : this->file_attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment wifi_credentials_attachment = 4;
  total_size += 1UL * this->_internal_wifi_credentials_attachment_size();
  for (const auto& msg : this->wifi_credentials_attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.AppAttachment app_attachment = 5;
  total_size += 1UL * this->_internal_app_attachment_size();
  for (const auto& msg : this->app_attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nearby.sharing.analytics.proto.SharingLog.StreamAttachment stream_attachment = 6;
  total_size += 1UL * this->_internal_stream_attachment_size();
  for (const auto& msg : this->stream_attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string required_app = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_app());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AttachmentsInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AttachmentsInfo*>(
      &from));
}

void SharingLog_AttachmentsInfo::MergeFrom(const SharingLog_AttachmentsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  text_attachment_.MergeFrom(from.text_attachment_);
  file_attachment_.MergeFrom(from.file_attachment_);
  wifi_credentials_attachment_.MergeFrom(from.wifi_credentials_attachment_);
  app_attachment_.MergeFrom(from.app_attachment_);
  stream_attachment_.MergeFrom(from.stream_attachment_);
  if (from._internal_has_required_app()) {
    _internal_set_required_app(from._internal_required_app());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AttachmentsInfo::CopyFrom(const SharingLog_AttachmentsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AttachmentsInfo::IsInitialized() const {
  return true;
}

void SharingLog_AttachmentsInfo::InternalSwap(SharingLog_AttachmentsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_attachment_.InternalSwap(&other->text_attachment_);
  file_attachment_.InternalSwap(&other->file_attachment_);
  wifi_credentials_attachment_.InternalSwap(&other->wifi_credentials_attachment_);
  app_attachment_.InternalSwap(&other->app_attachment_);
  stream_attachment_.InternalSwap(&other->stream_attachment_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_app_, lhs_arena,
      &other->required_app_, rhs_arena
  );
}

std::string SharingLog_AttachmentsInfo::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo";
}


// ===================================================================

class SharingLog_TextAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_TextAttachment>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_TextAttachment::SharingLog_TextAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
}
SharingLog_TextAttachment::SharingLog_TextAttachment(const SharingLog_TextAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_id_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
}

inline void SharingLog_TextAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_id_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
}

SharingLog_TextAttachment::~SharingLog_TextAttachment() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_TextAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_TextAttachment::ArenaDtor(void* object) {
  SharingLog_TextAttachment* _this = reinterpret_cast< SharingLog_TextAttachment* >(object);
  (void)_this;
}
void SharingLog_TextAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_TextAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_TextAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_id_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_TextAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.TextAttachment.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type_IsValid(val))) {
            _internal_set_type(static_cast<::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::location::nearby::proto::sharing::AttachmentSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_TextAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.TextAttachment.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int64 size_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size_bytes(), target);
  }

  // optional int64 batch_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_batch_id(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  return target;
}

size_t SharingLog_TextAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 size_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TextAttachment.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

    // optional int64 batch_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_batch_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_TextAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_TextAttachment*>(
      &from));
}

void SharingLog_TextAttachment::MergeFrom(const SharingLog_TextAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_id_ = from.batch_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_TextAttachment::CopyFrom(const SharingLog_TextAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_TextAttachment::IsInitialized() const {
  return true;
}

void SharingLog_TextAttachment::InternalSwap(SharingLog_TextAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_TextAttachment, batch_id_)
      + sizeof(SharingLog_TextAttachment::batch_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_TextAttachment, size_bytes_)>(
          reinterpret_cast<char*>(&size_bytes_),
          reinterpret_cast<char*>(&other->size_bytes_));
}

std::string SharingLog_TextAttachment::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.TextAttachment";
}


// ===================================================================

class SharingLog_FileAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_FileAttachment>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_FileAttachment::SharingLog_FileAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
}
SharingLog_FileAttachment::SharingLog_FileAttachment(const SharingLog_FileAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_id_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
}

inline void SharingLog_FileAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_id_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
}

SharingLog_FileAttachment::~SharingLog_FileAttachment() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_FileAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_FileAttachment::ArenaDtor(void* object) {
  SharingLog_FileAttachment* _this = reinterpret_cast< SharingLog_FileAttachment* >(object);
  (void)_this;
}
void SharingLog_FileAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_FileAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_FileAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_id_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(batch_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_FileAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.sharing.analytics.proto.SharingLog.FileAttachment.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type_IsValid(val))) {
            _internal_set_type(static_cast<::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 offset_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_offset_bytes(&has_bits);
          offset_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 batch_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::location::nearby::proto::sharing::AttachmentSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_FileAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.FileAttachment.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int64 size_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size_bytes(), target);
  }

  // optional int64 offset_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset_bytes(), target);
  }

  // optional int64 batch_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_batch_id(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  return target;
}

size_t SharingLog_FileAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 size_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.FileAttachment.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

    // optional int64 offset_bytes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset_bytes());
    }

    // optional int64 batch_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_batch_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_FileAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_FileAttachment*>(
      &from));
}

void SharingLog_FileAttachment::MergeFrom(const SharingLog_FileAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_bytes_ = from.offset_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      batch_id_ = from.batch_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_FileAttachment::CopyFrom(const SharingLog_FileAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_FileAttachment::IsInitialized() const {
  return true;
}

void SharingLog_FileAttachment::InternalSwap(SharingLog_FileAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_FileAttachment, batch_id_)
      + sizeof(SharingLog_FileAttachment::batch_id_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_FileAttachment, size_bytes_)>(
          reinterpret_cast<char*>(&size_bytes_),
          reinterpret_cast<char*>(&other->size_bytes_));
}

std::string SharingLog_FileAttachment::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.FileAttachment";
}


// ===================================================================

class SharingLog_WifiCredentialsAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_WifiCredentialsAttachment>()._has_bits_);
  static void set_has_security_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_WifiCredentialsAttachment::SharingLog_WifiCredentialsAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
}
SharingLog_WifiCredentialsAttachment::SharingLog_WifiCredentialsAttachment(const SharingLog_WifiCredentialsAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
}

inline void SharingLog_WifiCredentialsAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
}

SharingLog_WifiCredentialsAttachment::~SharingLog_WifiCredentialsAttachment() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_WifiCredentialsAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_WifiCredentialsAttachment::ArenaDtor(void* object) {
  SharingLog_WifiCredentialsAttachment* _this = reinterpret_cast< SharingLog_WifiCredentialsAttachment* >(object);
  (void)_this;
}
void SharingLog_WifiCredentialsAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_WifiCredentialsAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_WifiCredentialsAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_type_) -
        reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_WifiCredentialsAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 security_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_security_type(&has_bits);
          security_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 batch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::location::nearby::proto::sharing::AttachmentSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_WifiCredentialsAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 security_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_security_type(), target);
  }

  // optional int64 batch_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_batch_id(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  return target;
}

size_t SharingLog_WifiCredentialsAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 batch_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_batch_id());
    }

    // optional int32 security_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_security_type());
    }

    // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_WifiCredentialsAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_WifiCredentialsAttachment*>(
      &from));
}

void SharingLog_WifiCredentialsAttachment::MergeFrom(const SharingLog_WifiCredentialsAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      security_type_ = from.security_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_WifiCredentialsAttachment::CopyFrom(const SharingLog_WifiCredentialsAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_WifiCredentialsAttachment::IsInitialized() const {
  return true;
}

void SharingLog_WifiCredentialsAttachment::InternalSwap(SharingLog_WifiCredentialsAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_WifiCredentialsAttachment, source_type_)
      + sizeof(SharingLog_WifiCredentialsAttachment::source_type_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_WifiCredentialsAttachment, batch_id_)>(
          reinterpret_cast<char*>(&batch_id_),
          reinterpret_cast<char*>(&other->batch_id_));
}

std::string SharingLog_WifiCredentialsAttachment::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment";
}


// ===================================================================

class SharingLog_AppAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AppAttachment>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SharingLog_AppAttachment::SharingLog_AppAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
}
SharingLog_AppAttachment::SharingLog_AppAttachment(const SharingLog_AppAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(source_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
}

inline void SharingLog_AppAttachment::SharedCtor() {
package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(source_type_));
}

SharingLog_AppAttachment::~SharingLog_AppAttachment() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AppAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_AppAttachment::ArenaDtor(void* object) {
  SharingLog_AppAttachment* _this = reinterpret_cast< SharingLog_AppAttachment* >(object);
  (void)_this;
}
void SharingLog_AppAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AppAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AppAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_type_) -
        reinterpret_cast<char*>(&size_)) + sizeof(source_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AppAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::location::nearby::proto::sharing::AttachmentSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AppAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional int64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // optional int64 batch_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_batch_id(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  return target;
}

size_t SharingLog_AppAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional int64 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int64 batch_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_batch_id());
    }

    // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AppAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AppAttachment*>(
      &from));
}

void SharingLog_AppAttachment::MergeFrom(const SharingLog_AppAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_type_ = from.source_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AppAttachment::CopyFrom(const SharingLog_AppAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AppAttachment::IsInitialized() const {
  return true;
}

void SharingLog_AppAttachment::InternalSwap(SharingLog_AppAttachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_name_, lhs_arena,
      &other->package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_AppAttachment, source_type_)
      + sizeof(SharingLog_AppAttachment::source_type_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_AppAttachment, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

std::string SharingLog_AppAttachment::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AppAttachment";
}


// ===================================================================

class SharingLog_StreamAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_StreamAttachment>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingLog_StreamAttachment::SharingLog_StreamAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
}
SharingLog_StreamAttachment::SharingLog_StreamAttachment(const SharingLog_StreamAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
}

inline void SharingLog_StreamAttachment::SharedCtor() {
package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
}

SharingLog_StreamAttachment::~SharingLog_StreamAttachment() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_StreamAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingLog_StreamAttachment::ArenaDtor(void* object) {
  SharingLog_StreamAttachment* _this = reinterpret_cast< SharingLog_StreamAttachment* >(object);
  (void)_this;
}
void SharingLog_StreamAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_StreamAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_StreamAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_type_) -
        reinterpret_cast<char*>(&batch_id_)) + sizeof(source_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_StreamAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 batch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::location::nearby::proto::sharing::AttachmentSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_StreamAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional int64 batch_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_batch_id(), target);
  }

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  return target;
}

size_t SharingLog_StreamAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional int64 batch_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_batch_id());
    }

    // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_StreamAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_StreamAttachment*>(
      &from));
}

void SharingLog_StreamAttachment::MergeFrom(const SharingLog_StreamAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_StreamAttachment::CopyFrom(const SharingLog_StreamAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_StreamAttachment::IsInitialized() const {
  return true;
}

void SharingLog_StreamAttachment::InternalSwap(SharingLog_StreamAttachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_name_, lhs_arena,
      &other->package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog_StreamAttachment, source_type_)
      + sizeof(SharingLog_StreamAttachment::source_type_)
      - PROTOBUF_FIELD_OFFSET(SharingLog_StreamAttachment, batch_id_)>(
          reinterpret_cast<char*>(&batch_id_),
          reinterpret_cast<char*>(&other->batch_id_));
}

std::string SharingLog_StreamAttachment::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.StreamAttachment";
}


// ===================================================================

class SharingLog_AppCrash::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_AppCrash>()._has_bits_);
  static void set_has_crash_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_AppCrash::SharingLog_AppCrash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.AppCrash)
}
SharingLog_AppCrash::SharingLog_AppCrash(const SharingLog_AppCrash& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  crash_reason_ = from.crash_reason_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.AppCrash)
}

inline void SharingLog_AppCrash::SharedCtor() {
crash_reason_ = 0;
}

SharingLog_AppCrash::~SharingLog_AppCrash() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_AppCrash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_AppCrash::ArenaDtor(void* object) {
  SharingLog_AppCrash* _this = reinterpret_cast< SharingLog_AppCrash* >(object);
  (void)_this;
}
void SharingLog_AppCrash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_AppCrash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_AppCrash::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crash_reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_AppCrash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.AppCrashReason crash_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::AppCrashReason_IsValid(val))) {
            _internal_set_crash_reason(static_cast<::location::nearby::proto::sharing::AppCrashReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_AppCrash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.AppCrashReason crash_reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_crash_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  return target;
}

size_t SharingLog_AppCrash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.AppCrashReason crash_reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crash_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_AppCrash::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_AppCrash*>(
      &from));
}

void SharingLog_AppCrash::MergeFrom(const SharingLog_AppCrash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crash_reason()) {
    _internal_set_crash_reason(from._internal_crash_reason());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_AppCrash::CopyFrom(const SharingLog_AppCrash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.AppCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_AppCrash::IsInitialized() const {
  return true;
}

void SharingLog_AppCrash::InternalSwap(SharingLog_AppCrash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crash_reason_, other->crash_reason_);
}

std::string SharingLog_AppCrash::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.AppCrash";
}


// ===================================================================

class SharingLog_SetupWizard::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SetupWizard>()._has_bits_);
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_SetupWizard::SharingLog_SetupWizard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
}
SharingLog_SetupWizard::SharingLog_SetupWizard(const SharingLog_SetupWizard& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
}

inline void SharingLog_SetupWizard::SharedCtor() {
visibility_ = 0;
}

SharingLog_SetupWizard::~SharingLog_SetupWizard() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SetupWizard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SetupWizard::ArenaDtor(void* object) {
  SharingLog_SetupWizard* _this = reinterpret_cast< SharingLog_SetupWizard* >(object);
  (void)_this;
}
void SharingLog_SetupWizard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SetupWizard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SetupWizard::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SetupWizard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.Visibility visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::Visibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::location::nearby::proto::sharing::Visibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SetupWizard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  return target;
}

size_t SharingLog_SetupWizard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SetupWizard::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SetupWizard*>(
      &from));
}

void SharingLog_SetupWizard::MergeFrom(const SharingLog_SetupWizard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_visibility()) {
    _internal_set_visibility(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SetupWizard::CopyFrom(const SharingLog_SetupWizard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SetupWizard::IsInitialized() const {
  return true;
}

void SharingLog_SetupWizard::InternalSwap(SharingLog_SetupWizard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(visibility_, other->visibility_);
}

std::string SharingLog_SetupWizard::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SetupWizard";
}


// ===================================================================

class SharingLog_SendDesktopNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendDesktopNotification>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_SendDesktopNotification::SharingLog_SendDesktopNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
}
SharingLog_SendDesktopNotification::SharingLog_SendDesktopNotification(const SharingLog_SendDesktopNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
}

inline void SharingLog_SendDesktopNotification::SharedCtor() {
event_ = 0;
}

SharingLog_SendDesktopNotification::~SharingLog_SendDesktopNotification() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendDesktopNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SendDesktopNotification::ArenaDtor(void* object) {
  SharingLog_SendDesktopNotification* _this = reinterpret_cast< SharingLog_SendDesktopNotification* >(object);
  (void)_this;
}
void SharingLog_SendDesktopNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendDesktopNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendDesktopNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendDesktopNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.DesktopNotification event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DesktopNotification_IsValid(val))) {
            _internal_set_event(static_cast<::location::nearby::proto::sharing::DesktopNotification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendDesktopNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.DesktopNotification event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  return target;
}

size_t SharingLog_SendDesktopNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.DesktopNotification event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendDesktopNotification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendDesktopNotification*>(
      &from));
}

void SharingLog_SendDesktopNotification::MergeFrom(const SharingLog_SendDesktopNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_set_event(from._internal_event());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendDesktopNotification::CopyFrom(const SharingLog_SendDesktopNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendDesktopNotification::IsInitialized() const {
  return true;
}

void SharingLog_SendDesktopNotification::InternalSwap(SharingLog_SendDesktopNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

std::string SharingLog_SendDesktopNotification::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification";
}


// ===================================================================

class SharingLog_SendDesktopTransferEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog_SendDesktopTransferEvent>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingLog_SendDesktopTransferEvent::SharingLog_SendDesktopTransferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
}
SharingLog_SendDesktopTransferEvent::SharingLog_SendDesktopTransferEvent(const SharingLog_SendDesktopTransferEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
}

inline void SharingLog_SendDesktopTransferEvent::SharedCtor() {
event_ = 0;
}

SharingLog_SendDesktopTransferEvent::~SharingLog_SendDesktopTransferEvent() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog_SendDesktopTransferEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingLog_SendDesktopTransferEvent::ArenaDtor(void* object) {
  SharingLog_SendDesktopTransferEvent* _this = reinterpret_cast< SharingLog_SendDesktopTransferEvent* >(object);
  (void)_this;
}
void SharingLog_SendDesktopTransferEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog_SendDesktopTransferEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog_SendDesktopTransferEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog_SendDesktopTransferEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.DesktopTransferEventType event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::DesktopTransferEventType_IsValid(val))) {
            _internal_set_event(static_cast<::location::nearby::proto::sharing::DesktopTransferEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog_SendDesktopTransferEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.proto.sharing.DesktopTransferEventType event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  return target;
}

size_t SharingLog_SendDesktopTransferEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .location.nearby.proto.sharing.DesktopTransferEventType event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog_SendDesktopTransferEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog_SendDesktopTransferEvent*>(
      &from));
}

void SharingLog_SendDesktopTransferEvent::MergeFrom(const SharingLog_SendDesktopTransferEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_set_event(from._internal_event());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog_SendDesktopTransferEvent::CopyFrom(const SharingLog_SendDesktopTransferEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog_SendDesktopTransferEvent::IsInitialized() const {
  return true;
}

void SharingLog_SendDesktopTransferEvent::InternalSwap(SharingLog_SendDesktopTransferEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

std::string SharingLog_SendDesktopTransferEvent::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent";
}


// ===================================================================

class SharingLog::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingLog>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent& unknown_event(const SharingLog* msg);
  static void set_has_unknown_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements& accept_agreements(const SharingLog* msg);
  static void set_has_accept_agreements(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing& enable_nearby_sharing(const SharingLog* msg);
  static void set_has_enable_nearby_sharing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility& set_visibility(const SharingLog* msg);
  static void set_has_set_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments& describe_attachments(const SharingLog* msg);
  static void set_has_describe_attachments(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart& scan_for_share_targets_start(const SharingLog* msg);
  static void set_has_scan_for_share_targets_start(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd& scan_for_share_targets_end(const SharingLog* msg);
  static void set_has_scan_for_share_targets_end(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart& advertise_device_presence_start(const SharingLog* msg);
  static void set_has_advertise_device_presence_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd& advertise_device_presence_end(const SharingLog* msg);
  static void set_has_advertise_device_presence_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization& send_initialization(const SharingLog* msg);
  static void set_has_send_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization& receive_initialization(const SharingLog* msg);
  static void set_has_receive_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget& discover_share_target(const SharingLog* msg);
  static void set_has_discover_share_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction& send_introduction(const SharingLog* msg);
  static void set_has_send_introduction(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction& receive_introduction(const SharingLog* msg);
  static void set_has_receive_introduction(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction& respond_introduction(const SharingLog* msg);
  static void set_has_respond_introduction(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart& send_attachments_start(const SharingLog* msg);
  static void set_has_send_attachments_start(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd& send_attachments_end(const SharingLog* msg);
  static void set_has_send_attachments_end(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart& receive_attachments_start(const SharingLog* msg);
  static void set_has_receive_attachments_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd& receive_attachments_end(const SharingLog* msg);
  static void set_has_receive_attachments_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments& cancel_sending_attachments(const SharingLog* msg);
  static void set_has_cancel_sending_attachments(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments& cancel_receiving_attachments(const SharingLog* msg);
  static void set_has_cancel_receiving_attachments(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments& open_received_attachments(const SharingLog* msg);
  static void set_has_open_received_attachments(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity& launch_activity(const SharingLog* msg);
  static void set_has_launch_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AddContact& add_contact(const SharingLog* msg);
  static void set_has_add_contact(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact& remove_contact(const SharingLog* msg);
  static void set_has_remove_contact(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_log_source(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse& fast_share_server_response(const SharingLog* msg);
  static void set_has_fast_share_server_response(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendStart& send_start(const SharingLog* msg);
  static void set_has_send_start(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization& accept_fast_initialization(const SharingLog* msg);
  static void set_has_accept_fast_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage& set_data_usage(const SharingLog* msg);
  static void set_has_set_data_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_category(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization& dismiss_fast_initialization(const SharingLog* msg);
  static void set_has_dismiss_fast_initialization(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection& cancel_connection(const SharingLog* msg);
  static void set_has_cancel_connection(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification& dismiss_privacy_notification(const SharingLog* msg);
  static void set_has_dismiss_privacy_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification& tap_privacy_notification(const SharingLog* msg);
  static void set_has_tap_privacy_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapHelp& tap_help(const SharingLog* msg);
  static void set_has_tap_help(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback& tap_feedback(const SharingLog* msg);
  static void set_has_tap_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile& add_quick_settings_tile(const SharingLog* msg);
  static void set_has_add_quick_settings_tile(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile& remove_quick_settings_tile(const SharingLog* msg);
  static void set_has_remove_quick_settings_tile(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent& launch_phone_consent(const SharingLog* msg);
  static void set_has_launch_phone_consent(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile& tap_quick_settings_tile(const SharingLog* msg);
  static void set_has_tap_quick_settings_tile(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus& install_apk_status(const SharingLog* msg);
  static void set_has_install_apk_status(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus& verify_apk_status(const SharingLog* msg);
  static void set_has_verify_apk_status(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent& launch_consent(const SharingLog* msg);
  static void set_has_launch_consent(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd& process_received_attachments_end(const SharingLog* msg);
  static void set_has_process_received_attachments_end(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification& toggle_show_notification(const SharingLog* msg);
  static void set_has_toggle_show_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName& set_device_name(const SharingLog* msg);
  static void set_has_set_device_name(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_files_migration_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements& decline_agreements(const SharingLog* msg);
  static void set_has_decline_agreements(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions& request_setting_permissions(const SharingLog* msg);
  static void set_has_request_setting_permissions(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings& device_settings(const SharingLog* msg);
  static void set_has_device_settings(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection& establish_connection(const SharingLog* msg);
  static void set_has_establish_connection(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization& auto_dismiss_fast_initialization(const SharingLog* msg);
  static void set_has_auto_dismiss_fast_initialization(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata& event_metadata(const SharingLog* msg);
  static void set_has_event_metadata(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AppCrash& app_crash(const SharingLog* msg);
  static void set_has_app_crash(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare& tap_quick_settings_file_share(const SharingLog* msg);
  static void set_has_tap_quick_settings_file_share(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_AppInfo& app_info(const SharingLog* msg);
  static void set_has_app_info(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification& display_privacy_notification(const SharingLog* msg);
  static void set_has_display_privacy_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent& display_phone_consent(const SharingLog* msg);
  static void set_has_display_phone_consent(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage& preferences_usage(const SharingLog* msg);
  static void set_has_preferences_usage(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn& default_opt_in(const SharingLog* msg);
  static void set_has_default_opt_in(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard& setup_wizard(const SharingLog* msg);
  static void set_has_setup_wizard(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode& tap_qr_code(const SharingLog* msg);
  static void set_has_tap_qr_code(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown& qr_code_link_shown(const SharingLog* msg);
  static void set_has_qr_code_link_shown(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId& parsing_failed_endpoint_id(const SharingLog* msg);
  static void set_has_parsing_failed_endpoint_id(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice& fast_init_discover_device(const SharingLog* msg);
  static void set_has_fast_init_discover_device(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification& send_desktop_notification(const SharingLog* msg);
  static void set_has_send_desktop_notification(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent& send_desktop_transfer_event(const SharingLog* msg);
  static void set_has_send_desktop_transfer_event(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_SetAccount& set_account(const SharingLog* msg);
  static void set_has_set_account(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure& decrypt_certificate_failure(const SharingLog* msg);
  static void set_has_decrypt_certificate_failure(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess& show_allow_permission_auto_access(const SharingLog* msg);
  static void set_has_show_allow_permission_auto_access(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
};

const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent&
SharingLog::_Internal::unknown_event(const SharingLog* msg) {
  return *msg->unknown_event_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements&
SharingLog::_Internal::accept_agreements(const SharingLog* msg) {
  return *msg->accept_agreements_;
}
const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing&
SharingLog::_Internal::enable_nearby_sharing(const SharingLog* msg) {
  return *msg->enable_nearby_sharing_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility&
SharingLog::_Internal::set_visibility(const SharingLog* msg) {
  return *msg->set_visibility_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments&
SharingLog::_Internal::describe_attachments(const SharingLog* msg) {
  return *msg->describe_attachments_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart&
SharingLog::_Internal::scan_for_share_targets_start(const SharingLog* msg) {
  return *msg->scan_for_share_targets_start_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd&
SharingLog::_Internal::scan_for_share_targets_end(const SharingLog* msg) {
  return *msg->scan_for_share_targets_end_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart&
SharingLog::_Internal::advertise_device_presence_start(const SharingLog* msg) {
  return *msg->advertise_device_presence_start_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd&
SharingLog::_Internal::advertise_device_presence_end(const SharingLog* msg) {
  return *msg->advertise_device_presence_end_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization&
SharingLog::_Internal::send_initialization(const SharingLog* msg) {
  return *msg->send_initialization_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization&
SharingLog::_Internal::receive_initialization(const SharingLog* msg) {
  return *msg->receive_initialization_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget&
SharingLog::_Internal::discover_share_target(const SharingLog* msg) {
  return *msg->discover_share_target_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction&
SharingLog::_Internal::send_introduction(const SharingLog* msg) {
  return *msg->send_introduction_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction&
SharingLog::_Internal::receive_introduction(const SharingLog* msg) {
  return *msg->receive_introduction_;
}
const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction&
SharingLog::_Internal::respond_introduction(const SharingLog* msg) {
  return *msg->respond_introduction_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart&
SharingLog::_Internal::send_attachments_start(const SharingLog* msg) {
  return *msg->send_attachments_start_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd&
SharingLog::_Internal::send_attachments_end(const SharingLog* msg) {
  return *msg->send_attachments_end_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart&
SharingLog::_Internal::receive_attachments_start(const SharingLog* msg) {
  return *msg->receive_attachments_start_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd&
SharingLog::_Internal::receive_attachments_end(const SharingLog* msg) {
  return *msg->receive_attachments_end_;
}
const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments&
SharingLog::_Internal::cancel_sending_attachments(const SharingLog* msg) {
  return *msg->cancel_sending_attachments_;
}
const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments&
SharingLog::_Internal::cancel_receiving_attachments(const SharingLog* msg) {
  return *msg->cancel_receiving_attachments_;
}
const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments&
SharingLog::_Internal::open_received_attachments(const SharingLog* msg) {
  return *msg->open_received_attachments_;
}
const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity&
SharingLog::_Internal::launch_activity(const SharingLog* msg) {
  return *msg->launch_activity_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AddContact&
SharingLog::_Internal::add_contact(const SharingLog* msg) {
  return *msg->add_contact_;
}
const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact&
SharingLog::_Internal::remove_contact(const SharingLog* msg) {
  return *msg->remove_contact_;
}
const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse&
SharingLog::_Internal::fast_share_server_response(const SharingLog* msg) {
  return *msg->fast_share_server_response_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendStart&
SharingLog::_Internal::send_start(const SharingLog* msg) {
  return *msg->send_start_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization&
SharingLog::_Internal::accept_fast_initialization(const SharingLog* msg) {
  return *msg->accept_fast_initialization_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage&
SharingLog::_Internal::set_data_usage(const SharingLog* msg) {
  return *msg->set_data_usage_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization&
SharingLog::_Internal::dismiss_fast_initialization(const SharingLog* msg) {
  return *msg->dismiss_fast_initialization_;
}
const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection&
SharingLog::_Internal::cancel_connection(const SharingLog* msg) {
  return *msg->cancel_connection_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification&
SharingLog::_Internal::dismiss_privacy_notification(const SharingLog* msg) {
  return *msg->dismiss_privacy_notification_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification&
SharingLog::_Internal::tap_privacy_notification(const SharingLog* msg) {
  return *msg->tap_privacy_notification_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapHelp&
SharingLog::_Internal::tap_help(const SharingLog* msg) {
  return *msg->tap_help_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback&
SharingLog::_Internal::tap_feedback(const SharingLog* msg) {
  return *msg->tap_feedback_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile&
SharingLog::_Internal::add_quick_settings_tile(const SharingLog* msg) {
  return *msg->add_quick_settings_tile_;
}
const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile&
SharingLog::_Internal::remove_quick_settings_tile(const SharingLog* msg) {
  return *msg->remove_quick_settings_tile_;
}
const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent&
SharingLog::_Internal::launch_phone_consent(const SharingLog* msg) {
  return *msg->launch_phone_consent_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile&
SharingLog::_Internal::tap_quick_settings_tile(const SharingLog* msg) {
  return *msg->tap_quick_settings_tile_;
}
const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus&
SharingLog::_Internal::install_apk_status(const SharingLog* msg) {
  return *msg->install_apk_status_;
}
const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus&
SharingLog::_Internal::verify_apk_status(const SharingLog* msg) {
  return *msg->verify_apk_status_;
}
const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent&
SharingLog::_Internal::launch_consent(const SharingLog* msg) {
  return *msg->launch_consent_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd&
SharingLog::_Internal::process_received_attachments_end(const SharingLog* msg) {
  return *msg->process_received_attachments_end_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification&
SharingLog::_Internal::toggle_show_notification(const SharingLog* msg) {
  return *msg->toggle_show_notification_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName&
SharingLog::_Internal::set_device_name(const SharingLog* msg) {
  return *msg->set_device_name_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements&
SharingLog::_Internal::decline_agreements(const SharingLog* msg) {
  return *msg->decline_agreements_;
}
const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions&
SharingLog::_Internal::request_setting_permissions(const SharingLog* msg) {
  return *msg->request_setting_permissions_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings&
SharingLog::_Internal::device_settings(const SharingLog* msg) {
  return *msg->device_settings_;
}
const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection&
SharingLog::_Internal::establish_connection(const SharingLog* msg) {
  return *msg->establish_connection_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization&
SharingLog::_Internal::auto_dismiss_fast_initialization(const SharingLog* msg) {
  return *msg->auto_dismiss_fast_initialization_;
}
const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata&
SharingLog::_Internal::event_metadata(const SharingLog* msg) {
  return *msg->event_metadata_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AppCrash&
SharingLog::_Internal::app_crash(const SharingLog* msg) {
  return *msg->app_crash_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare&
SharingLog::_Internal::tap_quick_settings_file_share(const SharingLog* msg) {
  return *msg->tap_quick_settings_file_share_;
}
const ::nearby::sharing::analytics::proto::SharingLog_AppInfo&
SharingLog::_Internal::app_info(const SharingLog* msg) {
  return *msg->app_info_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification&
SharingLog::_Internal::display_privacy_notification(const SharingLog* msg) {
  return *msg->display_privacy_notification_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent&
SharingLog::_Internal::display_phone_consent(const SharingLog* msg) {
  return *msg->display_phone_consent_;
}
const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage&
SharingLog::_Internal::preferences_usage(const SharingLog* msg) {
  return *msg->preferences_usage_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn&
SharingLog::_Internal::default_opt_in(const SharingLog* msg) {
  return *msg->default_opt_in_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard&
SharingLog::_Internal::setup_wizard(const SharingLog* msg) {
  return *msg->setup_wizard_;
}
const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode&
SharingLog::_Internal::tap_qr_code(const SharingLog* msg) {
  return *msg->tap_qr_code_;
}
const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown&
SharingLog::_Internal::qr_code_link_shown(const SharingLog* msg) {
  return *msg->qr_code_link_shown_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId&
SharingLog::_Internal::parsing_failed_endpoint_id(const SharingLog* msg) {
  return *msg->parsing_failed_endpoint_id_;
}
const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice&
SharingLog::_Internal::fast_init_discover_device(const SharingLog* msg) {
  return *msg->fast_init_discover_device_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification&
SharingLog::_Internal::send_desktop_notification(const SharingLog* msg) {
  return *msg->send_desktop_notification_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent&
SharingLog::_Internal::send_desktop_transfer_event(const SharingLog* msg) {
  return *msg->send_desktop_transfer_event_;
}
const ::nearby::sharing::analytics::proto::SharingLog_SetAccount&
SharingLog::_Internal::set_account(const SharingLog* msg) {
  return *msg->set_account_;
}
const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure&
SharingLog::_Internal::decrypt_certificate_failure(const SharingLog* msg) {
  return *msg->decrypt_certificate_failure_;
}
const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess&
SharingLog::_Internal::show_allow_permission_auto_access(const SharingLog* msg) {
  return *msg->show_allow_permission_auto_access_;
}
SharingLog::SharingLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.analytics.proto.SharingLog)
}
SharingLog::SharingLog(const SharingLog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  files_migration_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    files_migration_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_files_migration_phase()) {
    files_migration_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_files_migration_phase(), 
      GetArenaForAllocation());
  }
  app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_version()) {
    app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_unknown_event()) {
    unknown_event_ = new ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent(*from.unknown_event_);
  } else {
    unknown_event_ = nullptr;
  }
  if (from._internal_has_accept_agreements()) {
    accept_agreements_ = new ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements(*from.accept_agreements_);
  } else {
    accept_agreements_ = nullptr;
  }
  if (from._internal_has_enable_nearby_sharing()) {
    enable_nearby_sharing_ = new ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing(*from.enable_nearby_sharing_);
  } else {
    enable_nearby_sharing_ = nullptr;
  }
  if (from._internal_has_set_visibility()) {
    set_visibility_ = new ::nearby::sharing::analytics::proto::SharingLog_SetVisibility(*from.set_visibility_);
  } else {
    set_visibility_ = nullptr;
  }
  if (from._internal_has_describe_attachments()) {
    describe_attachments_ = new ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments(*from.describe_attachments_);
  } else {
    describe_attachments_ = nullptr;
  }
  if (from._internal_has_scan_for_share_targets_start()) {
    scan_for_share_targets_start_ = new ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart(*from.scan_for_share_targets_start_);
  } else {
    scan_for_share_targets_start_ = nullptr;
  }
  if (from._internal_has_scan_for_share_targets_end()) {
    scan_for_share_targets_end_ = new ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd(*from.scan_for_share_targets_end_);
  } else {
    scan_for_share_targets_end_ = nullptr;
  }
  if (from._internal_has_advertise_device_presence_start()) {
    advertise_device_presence_start_ = new ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart(*from.advertise_device_presence_start_);
  } else {
    advertise_device_presence_start_ = nullptr;
  }
  if (from._internal_has_advertise_device_presence_end()) {
    advertise_device_presence_end_ = new ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd(*from.advertise_device_presence_end_);
  } else {
    advertise_device_presence_end_ = nullptr;
  }
  if (from._internal_has_send_initialization()) {
    send_initialization_ = new ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization(*from.send_initialization_);
  } else {
    send_initialization_ = nullptr;
  }
  if (from._internal_has_receive_initialization()) {
    receive_initialization_ = new ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization(*from.receive_initialization_);
  } else {
    receive_initialization_ = nullptr;
  }
  if (from._internal_has_discover_share_target()) {
    discover_share_target_ = new ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget(*from.discover_share_target_);
  } else {
    discover_share_target_ = nullptr;
  }
  if (from._internal_has_send_introduction()) {
    send_introduction_ = new ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction(*from.send_introduction_);
  } else {
    send_introduction_ = nullptr;
  }
  if (from._internal_has_receive_introduction()) {
    receive_introduction_ = new ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction(*from.receive_introduction_);
  } else {
    receive_introduction_ = nullptr;
  }
  if (from._internal_has_respond_introduction()) {
    respond_introduction_ = new ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction(*from.respond_introduction_);
  } else {
    respond_introduction_ = nullptr;
  }
  if (from._internal_has_send_attachments_start()) {
    send_attachments_start_ = new ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart(*from.send_attachments_start_);
  } else {
    send_attachments_start_ = nullptr;
  }
  if (from._internal_has_send_attachments_end()) {
    send_attachments_end_ = new ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd(*from.send_attachments_end_);
  } else {
    send_attachments_end_ = nullptr;
  }
  if (from._internal_has_receive_attachments_start()) {
    receive_attachments_start_ = new ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart(*from.receive_attachments_start_);
  } else {
    receive_attachments_start_ = nullptr;
  }
  if (from._internal_has_receive_attachments_end()) {
    receive_attachments_end_ = new ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd(*from.receive_attachments_end_);
  } else {
    receive_attachments_end_ = nullptr;
  }
  if (from._internal_has_cancel_sending_attachments()) {
    cancel_sending_attachments_ = new ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments(*from.cancel_sending_attachments_);
  } else {
    cancel_sending_attachments_ = nullptr;
  }
  if (from._internal_has_cancel_receiving_attachments()) {
    cancel_receiving_attachments_ = new ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments(*from.cancel_receiving_attachments_);
  } else {
    cancel_receiving_attachments_ = nullptr;
  }
  if (from._internal_has_open_received_attachments()) {
    open_received_attachments_ = new ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments(*from.open_received_attachments_);
  } else {
    open_received_attachments_ = nullptr;
  }
  if (from._internal_has_launch_activity()) {
    launch_activity_ = new ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity(*from.launch_activity_);
  } else {
    launch_activity_ = nullptr;
  }
  if (from._internal_has_add_contact()) {
    add_contact_ = new ::nearby::sharing::analytics::proto::SharingLog_AddContact(*from.add_contact_);
  } else {
    add_contact_ = nullptr;
  }
  if (from._internal_has_remove_contact()) {
    remove_contact_ = new ::nearby::sharing::analytics::proto::SharingLog_RemoveContact(*from.remove_contact_);
  } else {
    remove_contact_ = nullptr;
  }
  if (from._internal_has_fast_share_server_response()) {
    fast_share_server_response_ = new ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse(*from.fast_share_server_response_);
  } else {
    fast_share_server_response_ = nullptr;
  }
  if (from._internal_has_send_start()) {
    send_start_ = new ::nearby::sharing::analytics::proto::SharingLog_SendStart(*from.send_start_);
  } else {
    send_start_ = nullptr;
  }
  if (from._internal_has_accept_fast_initialization()) {
    accept_fast_initialization_ = new ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization(*from.accept_fast_initialization_);
  } else {
    accept_fast_initialization_ = nullptr;
  }
  if (from._internal_has_set_data_usage()) {
    set_data_usage_ = new ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage(*from.set_data_usage_);
  } else {
    set_data_usage_ = nullptr;
  }
  if (from._internal_has_dismiss_fast_initialization()) {
    dismiss_fast_initialization_ = new ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization(*from.dismiss_fast_initialization_);
  } else {
    dismiss_fast_initialization_ = nullptr;
  }
  if (from._internal_has_cancel_connection()) {
    cancel_connection_ = new ::nearby::sharing::analytics::proto::SharingLog_CancelConnection(*from.cancel_connection_);
  } else {
    cancel_connection_ = nullptr;
  }
  if (from._internal_has_dismiss_privacy_notification()) {
    dismiss_privacy_notification_ = new ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification(*from.dismiss_privacy_notification_);
  } else {
    dismiss_privacy_notification_ = nullptr;
  }
  if (from._internal_has_tap_privacy_notification()) {
    tap_privacy_notification_ = new ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification(*from.tap_privacy_notification_);
  } else {
    tap_privacy_notification_ = nullptr;
  }
  if (from._internal_has_tap_help()) {
    tap_help_ = new ::nearby::sharing::analytics::proto::SharingLog_TapHelp(*from.tap_help_);
  } else {
    tap_help_ = nullptr;
  }
  if (from._internal_has_tap_feedback()) {
    tap_feedback_ = new ::nearby::sharing::analytics::proto::SharingLog_TapFeedback(*from.tap_feedback_);
  } else {
    tap_feedback_ = nullptr;
  }
  if (from._internal_has_add_quick_settings_tile()) {
    add_quick_settings_tile_ = new ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile(*from.add_quick_settings_tile_);
  } else {
    add_quick_settings_tile_ = nullptr;
  }
  if (from._internal_has_remove_quick_settings_tile()) {
    remove_quick_settings_tile_ = new ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile(*from.remove_quick_settings_tile_);
  } else {
    remove_quick_settings_tile_ = nullptr;
  }
  if (from._internal_has_launch_phone_consent()) {
    launch_phone_consent_ = new ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent(*from.launch_phone_consent_);
  } else {
    launch_phone_consent_ = nullptr;
  }
  if (from._internal_has_tap_quick_settings_tile()) {
    tap_quick_settings_tile_ = new ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile(*from.tap_quick_settings_tile_);
  } else {
    tap_quick_settings_tile_ = nullptr;
  }
  if (from._internal_has_install_apk_status()) {
    install_apk_status_ = new ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus(*from.install_apk_status_);
  } else {
    install_apk_status_ = nullptr;
  }
  if (from._internal_has_verify_apk_status()) {
    verify_apk_status_ = new ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus(*from.verify_apk_status_);
  } else {
    verify_apk_status_ = nullptr;
  }
  if (from._internal_has_launch_consent()) {
    launch_consent_ = new ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent(*from.launch_consent_);
  } else {
    launch_consent_ = nullptr;
  }
  if (from._internal_has_process_received_attachments_end()) {
    process_received_attachments_end_ = new ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd(*from.process_received_attachments_end_);
  } else {
    process_received_attachments_end_ = nullptr;
  }
  if (from._internal_has_toggle_show_notification()) {
    toggle_show_notification_ = new ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification(*from.toggle_show_notification_);
  } else {
    toggle_show_notification_ = nullptr;
  }
  if (from._internal_has_set_device_name()) {
    set_device_name_ = new ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName(*from.set_device_name_);
  } else {
    set_device_name_ = nullptr;
  }
  if (from._internal_has_decline_agreements()) {
    decline_agreements_ = new ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements(*from.decline_agreements_);
  } else {
    decline_agreements_ = nullptr;
  }
  if (from._internal_has_request_setting_permissions()) {
    request_setting_permissions_ = new ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions(*from.request_setting_permissions_);
  } else {
    request_setting_permissions_ = nullptr;
  }
  if (from._internal_has_device_settings()) {
    device_settings_ = new ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings(*from.device_settings_);
  } else {
    device_settings_ = nullptr;
  }
  if (from._internal_has_establish_connection()) {
    establish_connection_ = new ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection(*from.establish_connection_);
  } else {
    establish_connection_ = nullptr;
  }
  if (from._internal_has_auto_dismiss_fast_initialization()) {
    auto_dismiss_fast_initialization_ = new ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization(*from.auto_dismiss_fast_initialization_);
  } else {
    auto_dismiss_fast_initialization_ = nullptr;
  }
  if (from._internal_has_event_metadata()) {
    event_metadata_ = new ::nearby::sharing::analytics::proto::SharingLog_EventMetadata(*from.event_metadata_);
  } else {
    event_metadata_ = nullptr;
  }
  if (from._internal_has_app_crash()) {
    app_crash_ = new ::nearby::sharing::analytics::proto::SharingLog_AppCrash(*from.app_crash_);
  } else {
    app_crash_ = nullptr;
  }
  if (from._internal_has_tap_quick_settings_file_share()) {
    tap_quick_settings_file_share_ = new ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare(*from.tap_quick_settings_file_share_);
  } else {
    tap_quick_settings_file_share_ = nullptr;
  }
  if (from._internal_has_app_info()) {
    app_info_ = new ::nearby::sharing::analytics::proto::SharingLog_AppInfo(*from.app_info_);
  } else {
    app_info_ = nullptr;
  }
  if (from._internal_has_display_privacy_notification()) {
    display_privacy_notification_ = new ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification(*from.display_privacy_notification_);
  } else {
    display_privacy_notification_ = nullptr;
  }
  if (from._internal_has_display_phone_consent()) {
    display_phone_consent_ = new ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent(*from.display_phone_consent_);
  } else {
    display_phone_consent_ = nullptr;
  }
  if (from._internal_has_preferences_usage()) {
    preferences_usage_ = new ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage(*from.preferences_usage_);
  } else {
    preferences_usage_ = nullptr;
  }
  if (from._internal_has_default_opt_in()) {
    default_opt_in_ = new ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn(*from.default_opt_in_);
  } else {
    default_opt_in_ = nullptr;
  }
  if (from._internal_has_setup_wizard()) {
    setup_wizard_ = new ::nearby::sharing::analytics::proto::SharingLog_SetupWizard(*from.setup_wizard_);
  } else {
    setup_wizard_ = nullptr;
  }
  if (from._internal_has_tap_qr_code()) {
    tap_qr_code_ = new ::nearby::sharing::analytics::proto::SharingLog_TapQrCode(*from.tap_qr_code_);
  } else {
    tap_qr_code_ = nullptr;
  }
  if (from._internal_has_qr_code_link_shown()) {
    qr_code_link_shown_ = new ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown(*from.qr_code_link_shown_);
  } else {
    qr_code_link_shown_ = nullptr;
  }
  if (from._internal_has_parsing_failed_endpoint_id()) {
    parsing_failed_endpoint_id_ = new ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId(*from.parsing_failed_endpoint_id_);
  } else {
    parsing_failed_endpoint_id_ = nullptr;
  }
  if (from._internal_has_fast_init_discover_device()) {
    fast_init_discover_device_ = new ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice(*from.fast_init_discover_device_);
  } else {
    fast_init_discover_device_ = nullptr;
  }
  if (from._internal_has_send_desktop_notification()) {
    send_desktop_notification_ = new ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification(*from.send_desktop_notification_);
  } else {
    send_desktop_notification_ = nullptr;
  }
  if (from._internal_has_send_desktop_transfer_event()) {
    send_desktop_transfer_event_ = new ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent(*from.send_desktop_transfer_event_);
  } else {
    send_desktop_transfer_event_ = nullptr;
  }
  if (from._internal_has_set_account()) {
    set_account_ = new ::nearby::sharing::analytics::proto::SharingLog_SetAccount(*from.set_account_);
  } else {
    set_account_ = nullptr;
  }
  if (from._internal_has_decrypt_certificate_failure()) {
    decrypt_certificate_failure_ = new ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure(*from.decrypt_certificate_failure_);
  } else {
    decrypt_certificate_failure_ = nullptr;
  }
  if (from._internal_has_show_allow_permission_auto_access()) {
    show_allow_permission_auto_access_ = new ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess(*from.show_allow_permission_auto_access_);
  } else {
    show_allow_permission_auto_access_ = nullptr;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_category_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(event_category_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.analytics.proto.SharingLog)
}

inline void SharingLog::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
files_migration_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  files_migration_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unknown_event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_category_) -
    reinterpret_cast<char*>(&unknown_event_)) + sizeof(event_category_));
}

SharingLog::~SharingLog() {
  // @@protoc_insertion_point(destructor:nearby.sharing.analytics.proto.SharingLog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SharingLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  files_migration_phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unknown_event_;
  if (this != internal_default_instance()) delete accept_agreements_;
  if (this != internal_default_instance()) delete enable_nearby_sharing_;
  if (this != internal_default_instance()) delete set_visibility_;
  if (this != internal_default_instance()) delete describe_attachments_;
  if (this != internal_default_instance()) delete scan_for_share_targets_start_;
  if (this != internal_default_instance()) delete scan_for_share_targets_end_;
  if (this != internal_default_instance()) delete advertise_device_presence_start_;
  if (this != internal_default_instance()) delete advertise_device_presence_end_;
  if (this != internal_default_instance()) delete send_initialization_;
  if (this != internal_default_instance()) delete receive_initialization_;
  if (this != internal_default_instance()) delete discover_share_target_;
  if (this != internal_default_instance()) delete send_introduction_;
  if (this != internal_default_instance()) delete receive_introduction_;
  if (this != internal_default_instance()) delete respond_introduction_;
  if (this != internal_default_instance()) delete send_attachments_start_;
  if (this != internal_default_instance()) delete send_attachments_end_;
  if (this != internal_default_instance()) delete receive_attachments_start_;
  if (this != internal_default_instance()) delete receive_attachments_end_;
  if (this != internal_default_instance()) delete cancel_sending_attachments_;
  if (this != internal_default_instance()) delete cancel_receiving_attachments_;
  if (this != internal_default_instance()) delete open_received_attachments_;
  if (this != internal_default_instance()) delete launch_activity_;
  if (this != internal_default_instance()) delete add_contact_;
  if (this != internal_default_instance()) delete remove_contact_;
  if (this != internal_default_instance()) delete fast_share_server_response_;
  if (this != internal_default_instance()) delete send_start_;
  if (this != internal_default_instance()) delete accept_fast_initialization_;
  if (this != internal_default_instance()) delete set_data_usage_;
  if (this != internal_default_instance()) delete dismiss_fast_initialization_;
  if (this != internal_default_instance()) delete cancel_connection_;
  if (this != internal_default_instance()) delete dismiss_privacy_notification_;
  if (this != internal_default_instance()) delete tap_privacy_notification_;
  if (this != internal_default_instance()) delete tap_help_;
  if (this != internal_default_instance()) delete tap_feedback_;
  if (this != internal_default_instance()) delete add_quick_settings_tile_;
  if (this != internal_default_instance()) delete remove_quick_settings_tile_;
  if (this != internal_default_instance()) delete launch_phone_consent_;
  if (this != internal_default_instance()) delete tap_quick_settings_tile_;
  if (this != internal_default_instance()) delete install_apk_status_;
  if (this != internal_default_instance()) delete verify_apk_status_;
  if (this != internal_default_instance()) delete launch_consent_;
  if (this != internal_default_instance()) delete process_received_attachments_end_;
  if (this != internal_default_instance()) delete toggle_show_notification_;
  if (this != internal_default_instance()) delete set_device_name_;
  if (this != internal_default_instance()) delete decline_agreements_;
  if (this != internal_default_instance()) delete request_setting_permissions_;
  if (this != internal_default_instance()) delete device_settings_;
  if (this != internal_default_instance()) delete establish_connection_;
  if (this != internal_default_instance()) delete auto_dismiss_fast_initialization_;
  if (this != internal_default_instance()) delete event_metadata_;
  if (this != internal_default_instance()) delete app_crash_;
  if (this != internal_default_instance()) delete tap_quick_settings_file_share_;
  if (this != internal_default_instance()) delete app_info_;
  if (this != internal_default_instance()) delete display_privacy_notification_;
  if (this != internal_default_instance()) delete display_phone_consent_;
  if (this != internal_default_instance()) delete preferences_usage_;
  if (this != internal_default_instance()) delete default_opt_in_;
  if (this != internal_default_instance()) delete setup_wizard_;
  if (this != internal_default_instance()) delete tap_qr_code_;
  if (this != internal_default_instance()) delete qr_code_link_shown_;
  if (this != internal_default_instance()) delete parsing_failed_endpoint_id_;
  if (this != internal_default_instance()) delete fast_init_discover_device_;
  if (this != internal_default_instance()) delete send_desktop_notification_;
  if (this != internal_default_instance()) delete send_desktop_transfer_event_;
  if (this != internal_default_instance()) delete set_account_;
  if (this != internal_default_instance()) delete decrypt_certificate_failure_;
  if (this != internal_default_instance()) delete show_allow_permission_auto_access_;
}

void SharingLog::ArenaDtor(void* object) {
  SharingLog* _this = reinterpret_cast< SharingLog* >(object);
  (void)_this;
}
void SharingLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharingLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingLog::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.analytics.proto.SharingLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      files_migration_phase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      app_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(unknown_event_ != nullptr);
      unknown_event_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(accept_agreements_ != nullptr);
      accept_agreements_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(enable_nearby_sharing_ != nullptr);
      enable_nearby_sharing_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(set_visibility_ != nullptr);
      set_visibility_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(describe_attachments_ != nullptr);
      describe_attachments_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scan_for_share_targets_start_ != nullptr);
      scan_for_share_targets_start_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scan_for_share_targets_end_ != nullptr);
      scan_for_share_targets_end_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(advertise_device_presence_start_ != nullptr);
      advertise_device_presence_start_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(advertise_device_presence_end_ != nullptr);
      advertise_device_presence_end_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(send_initialization_ != nullptr);
      send_initialization_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(receive_initialization_ != nullptr);
      receive_initialization_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(discover_share_target_ != nullptr);
      discover_share_target_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(send_introduction_ != nullptr);
      send_introduction_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(receive_introduction_ != nullptr);
      receive_introduction_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(respond_introduction_ != nullptr);
      respond_introduction_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(send_attachments_start_ != nullptr);
      send_attachments_start_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(send_attachments_end_ != nullptr);
      send_attachments_end_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(receive_attachments_start_ != nullptr);
      receive_attachments_start_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(receive_attachments_end_ != nullptr);
      receive_attachments_end_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(cancel_sending_attachments_ != nullptr);
      cancel_sending_attachments_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(cancel_receiving_attachments_ != nullptr);
      cancel_receiving_attachments_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(open_received_attachments_ != nullptr);
      open_received_attachments_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(launch_activity_ != nullptr);
      launch_activity_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(add_contact_ != nullptr);
      add_contact_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(remove_contact_ != nullptr);
      remove_contact_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(fast_share_server_response_ != nullptr);
      fast_share_server_response_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(send_start_ != nullptr);
      send_start_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(accept_fast_initialization_ != nullptr);
      accept_fast_initialization_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(set_data_usage_ != nullptr);
      set_data_usage_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dismiss_fast_initialization_ != nullptr);
      dismiss_fast_initialization_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cancel_connection_ != nullptr);
      cancel_connection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dismiss_privacy_notification_ != nullptr);
      dismiss_privacy_notification_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tap_privacy_notification_ != nullptr);
      tap_privacy_notification_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tap_help_ != nullptr);
      tap_help_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tap_feedback_ != nullptr);
      tap_feedback_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(add_quick_settings_tile_ != nullptr);
      add_quick_settings_tile_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(remove_quick_settings_tile_ != nullptr);
      remove_quick_settings_tile_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(launch_phone_consent_ != nullptr);
      launch_phone_consent_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tap_quick_settings_tile_ != nullptr);
      tap_quick_settings_tile_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(install_apk_status_ != nullptr);
      install_apk_status_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(verify_apk_status_ != nullptr);
      verify_apk_status_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(launch_consent_ != nullptr);
      launch_consent_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(process_received_attachments_end_ != nullptr);
      process_received_attachments_end_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(toggle_show_notification_ != nullptr);
      toggle_show_notification_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(set_device_name_ != nullptr);
      set_device_name_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(decline_agreements_ != nullptr);
      decline_agreements_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(request_setting_permissions_ != nullptr);
      request_setting_permissions_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(device_settings_ != nullptr);
      device_settings_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(establish_connection_ != nullptr);
      establish_connection_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(auto_dismiss_fast_initialization_ != nullptr);
      auto_dismiss_fast_initialization_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(event_metadata_ != nullptr);
      event_metadata_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(app_crash_ != nullptr);
      app_crash_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tap_quick_settings_file_share_ != nullptr);
      tap_quick_settings_file_share_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(app_info_ != nullptr);
      app_info_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(display_privacy_notification_ != nullptr);
      display_privacy_notification_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(display_phone_consent_ != nullptr);
      display_phone_consent_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(preferences_usage_ != nullptr);
      preferences_usage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(default_opt_in_ != nullptr);
      default_opt_in_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(setup_wizard_ != nullptr);
      setup_wizard_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(tap_qr_code_ != nullptr);
      tap_qr_code_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(qr_code_link_shown_ != nullptr);
      qr_code_link_shown_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(parsing_failed_endpoint_id_ != nullptr);
      parsing_failed_endpoint_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fast_init_discover_device_ != nullptr);
      fast_init_discover_device_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(send_desktop_notification_ != nullptr);
      send_desktop_notification_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(send_desktop_transfer_event_ != nullptr);
      send_desktop_transfer_event_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(set_account_ != nullptr);
      set_account_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(decrypt_certificate_failure_ != nullptr);
      decrypt_certificate_failure_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(show_allow_permission_auto_access_ != nullptr);
      show_allow_permission_auto_access_->Clear();
    }
  }
  event_type_ = 0;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&log_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_category_) -
        reinterpret_cast<char*>(&log_source_)) + sizeof(event_category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.proto.sharing.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::location::nearby::proto::sharing::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.UnknownEvent unknown_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AcceptAgreements accept_agreements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept_agreements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing enable_nearby_sharing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_nearby_sharing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SetVisibility set_visibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DescribeAttachments describe_attachments = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_describe_attachments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart scan_for_share_targets_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scan_for_share_targets_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd scan_for_share_targets_end = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_scan_for_share_targets_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart advertise_device_presence_start = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertise_device_presence_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd advertise_device_presence_end = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertise_device_presence_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendFastInitialization send_initialization = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization receive_initialization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget discover_share_target = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_discover_share_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendIntroduction send_introduction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_introduction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction receive_introduction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_introduction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction respond_introduction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_respond_introduction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart send_attachments_start = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_attachments_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd send_attachments_end = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_attachments_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart receive_attachments_start = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_attachments_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd receive_attachments_end = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_attachments_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments cancel_sending_attachments = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_sending_attachments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments cancel_receiving_attachments = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_receiving_attachments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments open_received_attachments = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_received_attachments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.LaunchActivity launch_activity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_launch_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AddContact add_contact = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.RemoveContact remove_contact = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.LogSource log_source = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::LogSource_IsValid(val))) {
            _internal_set_log_source(static_cast<::location::nearby::proto::sharing::LogSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse fast_share_server_response = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_share_server_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendStart send_start = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization accept_fast_initialization = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept_fast_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SetDataUsage set_data_usage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_data_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.proto.sharing.EventCategory event_category = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::proto::sharing::EventCategory_IsValid(val))) {
            _internal_set_event_category(static_cast<::location::nearby::proto::sharing::EventCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization dismiss_fast_initialization = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismiss_fast_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.CancelConnection cancel_connection = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification dismiss_privacy_notification = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismiss_privacy_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification tap_privacy_notification = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_privacy_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapHelp tap_help = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_help(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapFeedback tap_feedback = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile add_quick_settings_tile = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_quick_settings_tile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile remove_quick_settings_tile = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_quick_settings_tile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent launch_phone_consent = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_launch_phone_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile tap_quick_settings_tile = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_quick_settings_tile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus install_apk_status = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_install_apk_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus verify_apk_status = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_verify_apk_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.LaunchConsent launch_consent = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_launch_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd process_received_attachments_end = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_received_attachments_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification toggle_show_notification = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_show_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SetDeviceName set_device_name = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_device_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string files_migration_phase = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_files_migration_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DeclineAgreements decline_agreements = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_decline_agreements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions request_setting_permissions = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_setting_permissions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DeviceSettings device_settings = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.EstablishConnection establish_connection = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_establish_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization auto_dismiss_fast_initialization = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_dismiss_fast_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.EventMetadata event_metadata = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_version = 57 [deprecated = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_app_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AppCrash app_crash = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_crash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare tap_quick_settings_file_share = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_quick_settings_file_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.AppInfo app_info = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification display_privacy_notification = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_privacy_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent display_phone_consent = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_phone_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.PreferencesUsage preferences_usage = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DefaultOptIn default_opt_in = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_opt_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SetupWizard setup_wizard = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup_wizard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.TapQrCode tap_qr_code = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tap_qr_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown qr_code_link_shown = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_qr_code_link_shown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId parsing_failed_endpoint_id = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parsing_failed_endpoint_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice fast_init_discover_device = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_init_discover_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification send_desktop_notification = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_desktop_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent send_desktop_transfer_event = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_desktop_transfer_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.SetAccount set_account = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure decrypt_certificate_failure = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_decrypt_certificate_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess show_allow_permission_auto_access = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_show_allow_permission_auto_access(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.analytics.proto.SharingLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // optional .location.nearby.proto.sharing.EventType event_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.UnknownEvent unknown_event = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unknown_event(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AcceptAgreements accept_agreements = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::accept_agreements(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing enable_nearby_sharing = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::enable_nearby_sharing(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SetVisibility set_visibility = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_visibility(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DescribeAttachments describe_attachments = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::describe_attachments(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart scan_for_share_targets_start = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scan_for_share_targets_start(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd scan_for_share_targets_end = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::scan_for_share_targets_end(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart advertise_device_presence_start = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::advertise_device_presence_start(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd advertise_device_presence_end = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advertise_device_presence_end(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendFastInitialization send_initialization = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::send_initialization(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization receive_initialization = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::receive_initialization(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget discover_share_target = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::discover_share_target(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendIntroduction send_introduction = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::send_introduction(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction receive_introduction = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::receive_introduction(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction respond_introduction = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::respond_introduction(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart send_attachments_start = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::send_attachments_start(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd send_attachments_end = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::send_attachments_end(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart receive_attachments_start = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::receive_attachments_start(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd receive_attachments_end = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::receive_attachments_end(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments cancel_sending_attachments = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::cancel_sending_attachments(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments cancel_receiving_attachments = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::cancel_receiving_attachments(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments open_received_attachments = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::open_received_attachments(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchActivity launch_activity = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::launch_activity(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AddContact add_contact = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::add_contact(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.RemoveContact remove_contact = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::remove_contact(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .location.nearby.proto.sharing.LogSource log_source = 27;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_log_source(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse fast_share_server_response = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::fast_share_server_response(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendStart send_start = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::send_start(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization accept_fast_initialization = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::accept_fast_initialization(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SetDataUsage set_data_usage = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::set_data_usage(this), target, stream);
  }

  // optional string version = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_version(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .location.nearby.proto.sharing.EventCategory event_category = 33;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_event_category(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization dismiss_fast_initialization = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::dismiss_fast_initialization(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelConnection cancel_connection = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::cancel_connection(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification dismiss_privacy_notification = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::dismiss_privacy_notification(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification tap_privacy_notification = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::tap_privacy_notification(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapHelp tap_help = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::tap_help(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapFeedback tap_feedback = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::tap_feedback(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile add_quick_settings_tile = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::add_quick_settings_tile(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile remove_quick_settings_tile = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::remove_quick_settings_tile(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent launch_phone_consent = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::launch_phone_consent(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile tap_quick_settings_tile = 43;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::tap_quick_settings_tile(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus install_apk_status = 44;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::install_apk_status(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus verify_apk_status = 45;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::verify_apk_status(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchConsent launch_consent = 46;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::launch_consent(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd process_received_attachments_end = 47;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::process_received_attachments_end(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification toggle_show_notification = 48;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::toggle_show_notification(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SetDeviceName set_device_name = 49;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::set_device_name(this), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string files_migration_phase = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_files_migration_phase(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nearby.sharing.analytics.proto.SharingLog.DeclineAgreements decline_agreements = 51;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::decline_agreements(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions request_setting_permissions = 52;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::request_setting_permissions(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DeviceSettings device_settings = 53;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::device_settings(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.EstablishConnection establish_connection = 54;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::establish_connection(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization auto_dismiss_fast_initialization = 55;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::auto_dismiss_fast_initialization(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.EventMetadata event_metadata = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::event_metadata(this), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_version = 57 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_app_version(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nearby.sharing.analytics.proto.SharingLog.AppCrash app_crash = 58;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::app_crash(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare tap_quick_settings_file_share = 59;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::tap_quick_settings_file_share(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.AppInfo app_info = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::app_info(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification display_privacy_notification = 61;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::display_privacy_notification(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent display_phone_consent = 62;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::display_phone_consent(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.PreferencesUsage preferences_usage = 63;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::preferences_usage(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DefaultOptIn default_opt_in = 64;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::default_opt_in(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SetupWizard setup_wizard = 65;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        65, _Internal::setup_wizard(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQrCode tap_qr_code = 66;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::tap_qr_code(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown qr_code_link_shown = 67;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        67, _Internal::qr_code_link_shown(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId parsing_failed_endpoint_id = 68;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        68, _Internal::parsing_failed_endpoint_id(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice fast_init_discover_device = 69;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::fast_init_discover_device(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification send_desktop_notification = 70;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::send_desktop_notification(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent send_desktop_transfer_event = 72;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::send_desktop_transfer_event(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.SetAccount set_account = 73;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        73, _Internal::set_account(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure decrypt_certificate_failure = 74;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        74, _Internal::decrypt_certificate_failure(this), target, stream);
  }

  // optional .nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess show_allow_permission_auto_access = 75;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        75, _Internal::show_allow_permission_auto_access(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.analytics.proto.SharingLog)
  return target;
}

size_t SharingLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.analytics.proto.SharingLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string files_migration_phase = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_files_migration_phase());
    }

    // optional string app_version = 57 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_version());
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.UnknownEvent unknown_event = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unknown_event_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AcceptAgreements accept_agreements = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accept_agreements_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing enable_nearby_sharing = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_nearby_sharing_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SetVisibility set_visibility = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_visibility_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DescribeAttachments describe_attachments = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *describe_attachments_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart scan_for_share_targets_start = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_for_share_targets_start_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd scan_for_share_targets_end = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_for_share_targets_end_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart advertise_device_presence_start = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *advertise_device_presence_start_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd advertise_device_presence_end = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *advertise_device_presence_end_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendFastInitialization send_initialization = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_initialization_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization receive_initialization = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receive_initialization_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget discover_share_target = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discover_share_target_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendIntroduction send_introduction = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_introduction_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction receive_introduction = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receive_introduction_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction respond_introduction = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *respond_introduction_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart send_attachments_start = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_attachments_start_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd send_attachments_end = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_attachments_end_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart receive_attachments_start = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receive_attachments_start_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd receive_attachments_end = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receive_attachments_end_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments cancel_sending_attachments = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_sending_attachments_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments cancel_receiving_attachments = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_receiving_attachments_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments open_received_attachments = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_received_attachments_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.LaunchActivity launch_activity = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launch_activity_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AddContact add_contact = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_contact_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.RemoveContact remove_contact = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_contact_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse fast_share_server_response = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fast_share_server_response_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendStart send_start = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_start_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization accept_fast_initialization = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accept_fast_initialization_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SetDataUsage set_data_usage = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_data_usage_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization dismiss_fast_initialization = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dismiss_fast_initialization_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.CancelConnection cancel_connection = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_connection_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification dismiss_privacy_notification = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dismiss_privacy_notification_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification tap_privacy_notification = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_privacy_notification_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapHelp tap_help = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_help_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapFeedback tap_feedback = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_feedback_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile add_quick_settings_tile = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_quick_settings_tile_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile remove_quick_settings_tile = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_quick_settings_tile_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent launch_phone_consent = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launch_phone_consent_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile tap_quick_settings_tile = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_quick_settings_tile_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus install_apk_status = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *install_apk_status_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus verify_apk_status = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *verify_apk_status_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.LaunchConsent launch_consent = 46;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launch_consent_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd process_received_attachments_end = 47;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_received_attachments_end_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification toggle_show_notification = 48;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggle_show_notification_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SetDeviceName set_device_name = 49;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_device_name_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.DeclineAgreements decline_agreements = 51;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decline_agreements_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions request_setting_permissions = 52;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_setting_permissions_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DeviceSettings device_settings = 53;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_settings_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.EstablishConnection establish_connection = 54;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *establish_connection_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization auto_dismiss_fast_initialization = 55;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_dismiss_fast_initialization_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.EventMetadata event_metadata = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_metadata_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.AppCrash app_crash = 58;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_crash_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare tap_quick_settings_file_share = 59;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_quick_settings_file_share_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .nearby.sharing.analytics.proto.SharingLog.AppInfo app_info = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_info_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification display_privacy_notification = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_privacy_notification_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent display_phone_consent = 62;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_phone_consent_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.PreferencesUsage preferences_usage = 63;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_usage_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DefaultOptIn default_opt_in = 64;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_opt_in_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SetupWizard setup_wizard = 65;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setup_wizard_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.TapQrCode tap_qr_code = 66;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tap_qr_code_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown qr_code_link_shown = 67;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qr_code_link_shown_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId parsing_failed_endpoint_id = 68;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parsing_failed_endpoint_id_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice fast_init_discover_device = 69;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fast_init_discover_device_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification send_desktop_notification = 70;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_desktop_notification_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent send_desktop_transfer_event = 72;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_desktop_transfer_event_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.SetAccount set_account = 73;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_account_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure decrypt_certificate_failure = 74;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decrypt_certificate_failure_);
    }

    // optional .nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess show_allow_permission_auto_access = 75;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_allow_permission_auto_access_);
    }

    // optional .location.nearby.proto.sharing.EventType event_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .location.nearby.proto.sharing.LogSource log_source = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_source());
    }

    // optional .location.nearby.proto.sharing.EventCategory event_category = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_category());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingLog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingLog*>(
      &from));
}

void SharingLog::MergeFrom(const SharingLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.analytics.proto.SharingLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_files_migration_phase(from._internal_files_migration_phase());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_app_version(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_unknown_event()->::nearby::sharing::analytics::proto::SharingLog_UnknownEvent::MergeFrom(from._internal_unknown_event());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_accept_agreements()->::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements::MergeFrom(from._internal_accept_agreements());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_enable_nearby_sharing()->::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing::MergeFrom(from._internal_enable_nearby_sharing());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_set_visibility()->::nearby::sharing::analytics::proto::SharingLog_SetVisibility::MergeFrom(from._internal_set_visibility());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_describe_attachments()->::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments::MergeFrom(from._internal_describe_attachments());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scan_for_share_targets_start()->::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart::MergeFrom(from._internal_scan_for_share_targets_start());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scan_for_share_targets_end()->::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd::MergeFrom(from._internal_scan_for_share_targets_end());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_advertise_device_presence_start()->::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart::MergeFrom(from._internal_advertise_device_presence_start());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_advertise_device_presence_end()->::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd::MergeFrom(from._internal_advertise_device_presence_end());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_send_initialization()->::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization::MergeFrom(from._internal_send_initialization());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_receive_initialization()->::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization::MergeFrom(from._internal_receive_initialization());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_discover_share_target()->::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget::MergeFrom(from._internal_discover_share_target());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_send_introduction()->::nearby::sharing::analytics::proto::SharingLog_SendIntroduction::MergeFrom(from._internal_send_introduction());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_receive_introduction()->::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction::MergeFrom(from._internal_receive_introduction());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_respond_introduction()->::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction::MergeFrom(from._internal_respond_introduction());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_send_attachments_start()->::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart::MergeFrom(from._internal_send_attachments_start());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_send_attachments_end()->::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd::MergeFrom(from._internal_send_attachments_end());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_receive_attachments_start()->::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart::MergeFrom(from._internal_receive_attachments_start());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_receive_attachments_end()->::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd::MergeFrom(from._internal_receive_attachments_end());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_cancel_sending_attachments()->::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments::MergeFrom(from._internal_cancel_sending_attachments());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_cancel_receiving_attachments()->::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments::MergeFrom(from._internal_cancel_receiving_attachments());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_open_received_attachments()->::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments::MergeFrom(from._internal_open_received_attachments());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_launch_activity()->::nearby::sharing::analytics::proto::SharingLog_LaunchActivity::MergeFrom(from._internal_launch_activity());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_add_contact()->::nearby::sharing::analytics::proto::SharingLog_AddContact::MergeFrom(from._internal_add_contact());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_remove_contact()->::nearby::sharing::analytics::proto::SharingLog_RemoveContact::MergeFrom(from._internal_remove_contact());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_fast_share_server_response()->::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse::MergeFrom(from._internal_fast_share_server_response());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_send_start()->::nearby::sharing::analytics::proto::SharingLog_SendStart::MergeFrom(from._internal_send_start());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_accept_fast_initialization()->::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization::MergeFrom(from._internal_accept_fast_initialization());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_set_data_usage()->::nearby::sharing::analytics::proto::SharingLog_SetDataUsage::MergeFrom(from._internal_set_data_usage());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dismiss_fast_initialization()->::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization::MergeFrom(from._internal_dismiss_fast_initialization());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cancel_connection()->::nearby::sharing::analytics::proto::SharingLog_CancelConnection::MergeFrom(from._internal_cancel_connection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dismiss_privacy_notification()->::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification::MergeFrom(from._internal_dismiss_privacy_notification());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tap_privacy_notification()->::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification::MergeFrom(from._internal_tap_privacy_notification());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tap_help()->::nearby::sharing::analytics::proto::SharingLog_TapHelp::MergeFrom(from._internal_tap_help());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tap_feedback()->::nearby::sharing::analytics::proto::SharingLog_TapFeedback::MergeFrom(from._internal_tap_feedback());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_add_quick_settings_tile()->::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile::MergeFrom(from._internal_add_quick_settings_tile());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_remove_quick_settings_tile()->::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile::MergeFrom(from._internal_remove_quick_settings_tile());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_launch_phone_consent()->::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent::MergeFrom(from._internal_launch_phone_consent());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tap_quick_settings_tile()->::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile::MergeFrom(from._internal_tap_quick_settings_tile());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_install_apk_status()->::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus::MergeFrom(from._internal_install_apk_status());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_verify_apk_status()->::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus::MergeFrom(from._internal_verify_apk_status());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_launch_consent()->::nearby::sharing::analytics::proto::SharingLog_LaunchConsent::MergeFrom(from._internal_launch_consent());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_process_received_attachments_end()->::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd::MergeFrom(from._internal_process_received_attachments_end());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_toggle_show_notification()->::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification::MergeFrom(from._internal_toggle_show_notification());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_set_device_name()->::nearby::sharing::analytics::proto::SharingLog_SetDeviceName::MergeFrom(from._internal_set_device_name());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_decline_agreements()->::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements::MergeFrom(from._internal_decline_agreements());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_request_setting_permissions()->::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions::MergeFrom(from._internal_request_setting_permissions());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_device_settings()->::nearby::sharing::analytics::proto::SharingLog_DeviceSettings::MergeFrom(from._internal_device_settings());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_establish_connection()->::nearby::sharing::analytics::proto::SharingLog_EstablishConnection::MergeFrom(from._internal_establish_connection());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_auto_dismiss_fast_initialization()->::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization::MergeFrom(from._internal_auto_dismiss_fast_initialization());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_event_metadata()->::nearby::sharing::analytics::proto::SharingLog_EventMetadata::MergeFrom(from._internal_event_metadata());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_app_crash()->::nearby::sharing::analytics::proto::SharingLog_AppCrash::MergeFrom(from._internal_app_crash());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tap_quick_settings_file_share()->::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare::MergeFrom(from._internal_tap_quick_settings_file_share());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_app_info()->::nearby::sharing::analytics::proto::SharingLog_AppInfo::MergeFrom(from._internal_app_info());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_display_privacy_notification()->::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification::MergeFrom(from._internal_display_privacy_notification());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_display_phone_consent()->::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent::MergeFrom(from._internal_display_phone_consent());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_preferences_usage()->::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage::MergeFrom(from._internal_preferences_usage());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_default_opt_in()->::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn::MergeFrom(from._internal_default_opt_in());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_setup_wizard()->::nearby::sharing::analytics::proto::SharingLog_SetupWizard::MergeFrom(from._internal_setup_wizard());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_tap_qr_code()->::nearby::sharing::analytics::proto::SharingLog_TapQrCode::MergeFrom(from._internal_tap_qr_code());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_qr_code_link_shown()->::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown::MergeFrom(from._internal_qr_code_link_shown());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_parsing_failed_endpoint_id()->::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId::MergeFrom(from._internal_parsing_failed_endpoint_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fast_init_discover_device()->::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice::MergeFrom(from._internal_fast_init_discover_device());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_send_desktop_notification()->::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification::MergeFrom(from._internal_send_desktop_notification());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_send_desktop_transfer_event()->::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent::MergeFrom(from._internal_send_desktop_transfer_event());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_set_account()->::nearby::sharing::analytics::proto::SharingLog_SetAccount::MergeFrom(from._internal_set_account());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_decrypt_certificate_failure()->::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure::MergeFrom(from._internal_decrypt_certificate_failure());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_show_allow_permission_auto_access()->::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess::MergeFrom(from._internal_show_allow_permission_auto_access());
    }
    if (cached_has_bits & 0x00000080u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      log_source_ = from.log_source_;
    }
    if (cached_has_bits & 0x00000200u) {
      event_category_ = from.event_category_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingLog::CopyFrom(const SharingLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.analytics.proto.SharingLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingLog::IsInitialized() const {
  return true;
}

void SharingLog::InternalSwap(SharingLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &files_migration_phase_, lhs_arena,
      &other->files_migration_phase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_version_, lhs_arena,
      &other->app_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingLog, event_category_)
      + sizeof(SharingLog::event_category_)
      - PROTOBUF_FIELD_OFFSET(SharingLog, unknown_event_)>(
          reinterpret_cast<char*>(&unknown_event_),
          reinterpret_cast<char*>(&other->unknown_event_));
}

std::string SharingLog::GetTypeName() const {
  return "nearby.sharing.analytics.proto.SharingLog";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace analytics
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AppInfo* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SetAccount* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SetAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SetAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SetVisibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SetVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_EventMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_EventMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_CancelConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_CancelConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_LaunchSetupActivity* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_LaunchSetupActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_LaunchSetupActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AddContact* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AddContact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AddContact >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_RemoveContact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_RemoveContact >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendStart* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapHelp* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapHelp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapHelp >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TapQrCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TapQrCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_AppCrash* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_AppCrash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_AppCrash >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SetupWizard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SetupWizard >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::analytics::proto::SharingLog* Arena::CreateMaybeMessage< ::nearby::sharing::analytics::proto::SharingLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::analytics::proto::SharingLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
