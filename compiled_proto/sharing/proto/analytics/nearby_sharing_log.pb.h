// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/analytics/nearby_sharing_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/duration.pb.h>
#include "proto/sharing_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[77]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace nearby {
namespace sharing {
namespace analytics {
namespace proto {
class SharingLog;
struct SharingLogDefaultTypeInternal;
extern SharingLogDefaultTypeInternal _SharingLog_default_instance_;
class SharingLog_AcceptAgreements;
struct SharingLog_AcceptAgreementsDefaultTypeInternal;
extern SharingLog_AcceptAgreementsDefaultTypeInternal _SharingLog_AcceptAgreements_default_instance_;
class SharingLog_AcceptFastInitialization;
struct SharingLog_AcceptFastInitializationDefaultTypeInternal;
extern SharingLog_AcceptFastInitializationDefaultTypeInternal _SharingLog_AcceptFastInitialization_default_instance_;
class SharingLog_AddContact;
struct SharingLog_AddContactDefaultTypeInternal;
extern SharingLog_AddContactDefaultTypeInternal _SharingLog_AddContact_default_instance_;
class SharingLog_AddQuickSettingsTile;
struct SharingLog_AddQuickSettingsTileDefaultTypeInternal;
extern SharingLog_AddQuickSettingsTileDefaultTypeInternal _SharingLog_AddQuickSettingsTile_default_instance_;
class SharingLog_AdvertiseDevicePresenceEnd;
struct SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal;
extern SharingLog_AdvertiseDevicePresenceEndDefaultTypeInternal _SharingLog_AdvertiseDevicePresenceEnd_default_instance_;
class SharingLog_AdvertiseDevicePresenceStart;
struct SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal;
extern SharingLog_AdvertiseDevicePresenceStartDefaultTypeInternal _SharingLog_AdvertiseDevicePresenceStart_default_instance_;
class SharingLog_AppAttachment;
struct SharingLog_AppAttachmentDefaultTypeInternal;
extern SharingLog_AppAttachmentDefaultTypeInternal _SharingLog_AppAttachment_default_instance_;
class SharingLog_AppCrash;
struct SharingLog_AppCrashDefaultTypeInternal;
extern SharingLog_AppCrashDefaultTypeInternal _SharingLog_AppCrash_default_instance_;
class SharingLog_AppInfo;
struct SharingLog_AppInfoDefaultTypeInternal;
extern SharingLog_AppInfoDefaultTypeInternal _SharingLog_AppInfo_default_instance_;
class SharingLog_AttachmentsInfo;
struct SharingLog_AttachmentsInfoDefaultTypeInternal;
extern SharingLog_AttachmentsInfoDefaultTypeInternal _SharingLog_AttachmentsInfo_default_instance_;
class SharingLog_AutoDismissFastInitialization;
struct SharingLog_AutoDismissFastInitializationDefaultTypeInternal;
extern SharingLog_AutoDismissFastInitializationDefaultTypeInternal _SharingLog_AutoDismissFastInitialization_default_instance_;
class SharingLog_CancelConnection;
struct SharingLog_CancelConnectionDefaultTypeInternal;
extern SharingLog_CancelConnectionDefaultTypeInternal _SharingLog_CancelConnection_default_instance_;
class SharingLog_CancelReceivingAttachments;
struct SharingLog_CancelReceivingAttachmentsDefaultTypeInternal;
extern SharingLog_CancelReceivingAttachmentsDefaultTypeInternal _SharingLog_CancelReceivingAttachments_default_instance_;
class SharingLog_CancelSendingAttachments;
struct SharingLog_CancelSendingAttachmentsDefaultTypeInternal;
extern SharingLog_CancelSendingAttachmentsDefaultTypeInternal _SharingLog_CancelSendingAttachments_default_instance_;
class SharingLog_DeclineAgreements;
struct SharingLog_DeclineAgreementsDefaultTypeInternal;
extern SharingLog_DeclineAgreementsDefaultTypeInternal _SharingLog_DeclineAgreements_default_instance_;
class SharingLog_DecryptCertificateFailure;
struct SharingLog_DecryptCertificateFailureDefaultTypeInternal;
extern SharingLog_DecryptCertificateFailureDefaultTypeInternal _SharingLog_DecryptCertificateFailure_default_instance_;
class SharingLog_DefaultOptIn;
struct SharingLog_DefaultOptInDefaultTypeInternal;
extern SharingLog_DefaultOptInDefaultTypeInternal _SharingLog_DefaultOptIn_default_instance_;
class SharingLog_DescribeAttachments;
struct SharingLog_DescribeAttachmentsDefaultTypeInternal;
extern SharingLog_DescribeAttachmentsDefaultTypeInternal _SharingLog_DescribeAttachments_default_instance_;
class SharingLog_DeviceSettings;
struct SharingLog_DeviceSettingsDefaultTypeInternal;
extern SharingLog_DeviceSettingsDefaultTypeInternal _SharingLog_DeviceSettings_default_instance_;
class SharingLog_DiscoverShareTarget;
struct SharingLog_DiscoverShareTargetDefaultTypeInternal;
extern SharingLog_DiscoverShareTargetDefaultTypeInternal _SharingLog_DiscoverShareTarget_default_instance_;
class SharingLog_DismissFastInitialization;
struct SharingLog_DismissFastInitializationDefaultTypeInternal;
extern SharingLog_DismissFastInitializationDefaultTypeInternal _SharingLog_DismissFastInitialization_default_instance_;
class SharingLog_DismissPrivacyNotification;
struct SharingLog_DismissPrivacyNotificationDefaultTypeInternal;
extern SharingLog_DismissPrivacyNotificationDefaultTypeInternal _SharingLog_DismissPrivacyNotification_default_instance_;
class SharingLog_DisplayPhoneConsent;
struct SharingLog_DisplayPhoneConsentDefaultTypeInternal;
extern SharingLog_DisplayPhoneConsentDefaultTypeInternal _SharingLog_DisplayPhoneConsent_default_instance_;
class SharingLog_DisplayPrivacyNotification;
struct SharingLog_DisplayPrivacyNotificationDefaultTypeInternal;
extern SharingLog_DisplayPrivacyNotificationDefaultTypeInternal _SharingLog_DisplayPrivacyNotification_default_instance_;
class SharingLog_EnableNearbySharing;
struct SharingLog_EnableNearbySharingDefaultTypeInternal;
extern SharingLog_EnableNearbySharingDefaultTypeInternal _SharingLog_EnableNearbySharing_default_instance_;
class SharingLog_EstablishConnection;
struct SharingLog_EstablishConnectionDefaultTypeInternal;
extern SharingLog_EstablishConnectionDefaultTypeInternal _SharingLog_EstablishConnection_default_instance_;
class SharingLog_EventMetadata;
struct SharingLog_EventMetadataDefaultTypeInternal;
extern SharingLog_EventMetadataDefaultTypeInternal _SharingLog_EventMetadata_default_instance_;
class SharingLog_FastInitDiscoverDevice;
struct SharingLog_FastInitDiscoverDeviceDefaultTypeInternal;
extern SharingLog_FastInitDiscoverDeviceDefaultTypeInternal _SharingLog_FastInitDiscoverDevice_default_instance_;
class SharingLog_FastShareServerResponse;
struct SharingLog_FastShareServerResponseDefaultTypeInternal;
extern SharingLog_FastShareServerResponseDefaultTypeInternal _SharingLog_FastShareServerResponse_default_instance_;
class SharingLog_FileAttachment;
struct SharingLog_FileAttachmentDefaultTypeInternal;
extern SharingLog_FileAttachmentDefaultTypeInternal _SharingLog_FileAttachment_default_instance_;
class SharingLog_InstallAPKStatus;
struct SharingLog_InstallAPKStatusDefaultTypeInternal;
extern SharingLog_InstallAPKStatusDefaultTypeInternal _SharingLog_InstallAPKStatus_default_instance_;
class SharingLog_LaunchActivity;
struct SharingLog_LaunchActivityDefaultTypeInternal;
extern SharingLog_LaunchActivityDefaultTypeInternal _SharingLog_LaunchActivity_default_instance_;
class SharingLog_LaunchConsent;
struct SharingLog_LaunchConsentDefaultTypeInternal;
extern SharingLog_LaunchConsentDefaultTypeInternal _SharingLog_LaunchConsent_default_instance_;
class SharingLog_LaunchPhoneConsent;
struct SharingLog_LaunchPhoneConsentDefaultTypeInternal;
extern SharingLog_LaunchPhoneConsentDefaultTypeInternal _SharingLog_LaunchPhoneConsent_default_instance_;
class SharingLog_LaunchSetupActivity;
struct SharingLog_LaunchSetupActivityDefaultTypeInternal;
extern SharingLog_LaunchSetupActivityDefaultTypeInternal _SharingLog_LaunchSetupActivity_default_instance_;
class SharingLog_OpenReceivedAttachments;
struct SharingLog_OpenReceivedAttachmentsDefaultTypeInternal;
extern SharingLog_OpenReceivedAttachmentsDefaultTypeInternal _SharingLog_OpenReceivedAttachments_default_instance_;
class SharingLog_ParsingFailedEndpointId;
struct SharingLog_ParsingFailedEndpointIdDefaultTypeInternal;
extern SharingLog_ParsingFailedEndpointIdDefaultTypeInternal _SharingLog_ParsingFailedEndpointId_default_instance_;
class SharingLog_PreferencesUsage;
struct SharingLog_PreferencesUsageDefaultTypeInternal;
extern SharingLog_PreferencesUsageDefaultTypeInternal _SharingLog_PreferencesUsage_default_instance_;
class SharingLog_ProcessReceivedAttachmentsEnd;
struct SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal;
extern SharingLog_ProcessReceivedAttachmentsEndDefaultTypeInternal _SharingLog_ProcessReceivedAttachmentsEnd_default_instance_;
class SharingLog_QrCodeLinkShown;
struct SharingLog_QrCodeLinkShownDefaultTypeInternal;
extern SharingLog_QrCodeLinkShownDefaultTypeInternal _SharingLog_QrCodeLinkShown_default_instance_;
class SharingLog_ReceiveAttachmentsEnd;
struct SharingLog_ReceiveAttachmentsEndDefaultTypeInternal;
extern SharingLog_ReceiveAttachmentsEndDefaultTypeInternal _SharingLog_ReceiveAttachmentsEnd_default_instance_;
class SharingLog_ReceiveAttachmentsStart;
struct SharingLog_ReceiveAttachmentsStartDefaultTypeInternal;
extern SharingLog_ReceiveAttachmentsStartDefaultTypeInternal _SharingLog_ReceiveAttachmentsStart_default_instance_;
class SharingLog_ReceiveFastInitialization;
struct SharingLog_ReceiveFastInitializationDefaultTypeInternal;
extern SharingLog_ReceiveFastInitializationDefaultTypeInternal _SharingLog_ReceiveFastInitialization_default_instance_;
class SharingLog_ReceiveIntroduction;
struct SharingLog_ReceiveIntroductionDefaultTypeInternal;
extern SharingLog_ReceiveIntroductionDefaultTypeInternal _SharingLog_ReceiveIntroduction_default_instance_;
class SharingLog_RemoveContact;
struct SharingLog_RemoveContactDefaultTypeInternal;
extern SharingLog_RemoveContactDefaultTypeInternal _SharingLog_RemoveContact_default_instance_;
class SharingLog_RemoveQuickSettingsTile;
struct SharingLog_RemoveQuickSettingsTileDefaultTypeInternal;
extern SharingLog_RemoveQuickSettingsTileDefaultTypeInternal _SharingLog_RemoveQuickSettingsTile_default_instance_;
class SharingLog_RequestSettingPermissions;
struct SharingLog_RequestSettingPermissionsDefaultTypeInternal;
extern SharingLog_RequestSettingPermissionsDefaultTypeInternal _SharingLog_RequestSettingPermissions_default_instance_;
class SharingLog_RespondToIntroduction;
struct SharingLog_RespondToIntroductionDefaultTypeInternal;
extern SharingLog_RespondToIntroductionDefaultTypeInternal _SharingLog_RespondToIntroduction_default_instance_;
class SharingLog_ScanForShareTargetsEnd;
struct SharingLog_ScanForShareTargetsEndDefaultTypeInternal;
extern SharingLog_ScanForShareTargetsEndDefaultTypeInternal _SharingLog_ScanForShareTargetsEnd_default_instance_;
class SharingLog_ScanForShareTargetsStart;
struct SharingLog_ScanForShareTargetsStartDefaultTypeInternal;
extern SharingLog_ScanForShareTargetsStartDefaultTypeInternal _SharingLog_ScanForShareTargetsStart_default_instance_;
class SharingLog_SendAttachmentsEnd;
struct SharingLog_SendAttachmentsEndDefaultTypeInternal;
extern SharingLog_SendAttachmentsEndDefaultTypeInternal _SharingLog_SendAttachmentsEnd_default_instance_;
class SharingLog_SendAttachmentsStart;
struct SharingLog_SendAttachmentsStartDefaultTypeInternal;
extern SharingLog_SendAttachmentsStartDefaultTypeInternal _SharingLog_SendAttachmentsStart_default_instance_;
class SharingLog_SendDesktopNotification;
struct SharingLog_SendDesktopNotificationDefaultTypeInternal;
extern SharingLog_SendDesktopNotificationDefaultTypeInternal _SharingLog_SendDesktopNotification_default_instance_;
class SharingLog_SendDesktopTransferEvent;
struct SharingLog_SendDesktopTransferEventDefaultTypeInternal;
extern SharingLog_SendDesktopTransferEventDefaultTypeInternal _SharingLog_SendDesktopTransferEvent_default_instance_;
class SharingLog_SendFastInitialization;
struct SharingLog_SendFastInitializationDefaultTypeInternal;
extern SharingLog_SendFastInitializationDefaultTypeInternal _SharingLog_SendFastInitialization_default_instance_;
class SharingLog_SendIntroduction;
struct SharingLog_SendIntroductionDefaultTypeInternal;
extern SharingLog_SendIntroductionDefaultTypeInternal _SharingLog_SendIntroduction_default_instance_;
class SharingLog_SendStart;
struct SharingLog_SendStartDefaultTypeInternal;
extern SharingLog_SendStartDefaultTypeInternal _SharingLog_SendStart_default_instance_;
class SharingLog_SetAccount;
struct SharingLog_SetAccountDefaultTypeInternal;
extern SharingLog_SetAccountDefaultTypeInternal _SharingLog_SetAccount_default_instance_;
class SharingLog_SetDataUsage;
struct SharingLog_SetDataUsageDefaultTypeInternal;
extern SharingLog_SetDataUsageDefaultTypeInternal _SharingLog_SetDataUsage_default_instance_;
class SharingLog_SetDeviceName;
struct SharingLog_SetDeviceNameDefaultTypeInternal;
extern SharingLog_SetDeviceNameDefaultTypeInternal _SharingLog_SetDeviceName_default_instance_;
class SharingLog_SetVisibility;
struct SharingLog_SetVisibilityDefaultTypeInternal;
extern SharingLog_SetVisibilityDefaultTypeInternal _SharingLog_SetVisibility_default_instance_;
class SharingLog_SetupWizard;
struct SharingLog_SetupWizardDefaultTypeInternal;
extern SharingLog_SetupWizardDefaultTypeInternal _SharingLog_SetupWizard_default_instance_;
class SharingLog_ShareTargetInfo;
struct SharingLog_ShareTargetInfoDefaultTypeInternal;
extern SharingLog_ShareTargetInfoDefaultTypeInternal _SharingLog_ShareTargetInfo_default_instance_;
class SharingLog_ShowAllowPermissionAutoAccess;
struct SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal;
extern SharingLog_ShowAllowPermissionAutoAccessDefaultTypeInternal _SharingLog_ShowAllowPermissionAutoAccess_default_instance_;
class SharingLog_StreamAttachment;
struct SharingLog_StreamAttachmentDefaultTypeInternal;
extern SharingLog_StreamAttachmentDefaultTypeInternal _SharingLog_StreamAttachment_default_instance_;
class SharingLog_TapFeedback;
struct SharingLog_TapFeedbackDefaultTypeInternal;
extern SharingLog_TapFeedbackDefaultTypeInternal _SharingLog_TapFeedback_default_instance_;
class SharingLog_TapHelp;
struct SharingLog_TapHelpDefaultTypeInternal;
extern SharingLog_TapHelpDefaultTypeInternal _SharingLog_TapHelp_default_instance_;
class SharingLog_TapPrivacyNotification;
struct SharingLog_TapPrivacyNotificationDefaultTypeInternal;
extern SharingLog_TapPrivacyNotificationDefaultTypeInternal _SharingLog_TapPrivacyNotification_default_instance_;
class SharingLog_TapQrCode;
struct SharingLog_TapQrCodeDefaultTypeInternal;
extern SharingLog_TapQrCodeDefaultTypeInternal _SharingLog_TapQrCode_default_instance_;
class SharingLog_TapQuickSettingsFileShare;
struct SharingLog_TapQuickSettingsFileShareDefaultTypeInternal;
extern SharingLog_TapQuickSettingsFileShareDefaultTypeInternal _SharingLog_TapQuickSettingsFileShare_default_instance_;
class SharingLog_TapQuickSettingsTile;
struct SharingLog_TapQuickSettingsTileDefaultTypeInternal;
extern SharingLog_TapQuickSettingsTileDefaultTypeInternal _SharingLog_TapQuickSettingsTile_default_instance_;
class SharingLog_TextAttachment;
struct SharingLog_TextAttachmentDefaultTypeInternal;
extern SharingLog_TextAttachmentDefaultTypeInternal _SharingLog_TextAttachment_default_instance_;
class SharingLog_ToggleShowNotification;
struct SharingLog_ToggleShowNotificationDefaultTypeInternal;
extern SharingLog_ToggleShowNotificationDefaultTypeInternal _SharingLog_ToggleShowNotification_default_instance_;
class SharingLog_UnknownEvent;
struct SharingLog_UnknownEventDefaultTypeInternal;
extern SharingLog_UnknownEventDefaultTypeInternal _SharingLog_UnknownEvent_default_instance_;
class SharingLog_VerifyAPKStatus;
struct SharingLog_VerifyAPKStatusDefaultTypeInternal;
extern SharingLog_VerifyAPKStatusDefaultTypeInternal _SharingLog_VerifyAPKStatus_default_instance_;
class SharingLog_WifiCredentialsAttachment;
struct SharingLog_WifiCredentialsAttachmentDefaultTypeInternal;
extern SharingLog_WifiCredentialsAttachmentDefaultTypeInternal _SharingLog_WifiCredentialsAttachment_default_instance_;
}  // namespace proto
}  // namespace analytics
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> ::nearby::sharing::analytics::proto::SharingLog* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AddContact* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AddContact>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AppAttachment>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AppCrash* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AppCrash>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AppInfo* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AppInfo>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelConnection>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DeviceSettings>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EstablishConnection>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EventMetadata>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_FileAttachment>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchActivity>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchConsent>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_LaunchSetupActivity* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchSetupActivity>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RemoveContact>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendIntroduction>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SendStart* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendStart>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SetAccount* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetAccount>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetDataUsage>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetDeviceName>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetVisibility>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetupWizard>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_StreamAttachment>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapFeedback>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapHelp* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapHelp>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQrCode>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TextAttachment>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_UnknownEvent>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus>(Arena*);
template<> ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* Arena::CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nearby {
namespace sharing {
namespace analytics {
namespace proto {

enum SharingLog_TextAttachment_Type : int {
  SharingLog_TextAttachment_Type_UNKNOWN_TEXT_TYPE = 0,
  SharingLog_TextAttachment_Type_URL = 1,
  SharingLog_TextAttachment_Type_ADDRESS = 2,
  SharingLog_TextAttachment_Type_PHONE_NUMBER = 3
};
bool SharingLog_TextAttachment_Type_IsValid(int value);
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment_Type_Type_MIN = SharingLog_TextAttachment_Type_UNKNOWN_TEXT_TYPE;
constexpr SharingLog_TextAttachment_Type SharingLog_TextAttachment_Type_Type_MAX = SharingLog_TextAttachment_Type_PHONE_NUMBER;
constexpr int SharingLog_TextAttachment_Type_Type_ARRAYSIZE = SharingLog_TextAttachment_Type_Type_MAX + 1;

const std::string& SharingLog_TextAttachment_Type_Name(SharingLog_TextAttachment_Type value);
template<typename T>
inline const std::string& SharingLog_TextAttachment_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SharingLog_TextAttachment_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SharingLog_TextAttachment_Type_Name.");
  return SharingLog_TextAttachment_Type_Name(static_cast<SharingLog_TextAttachment_Type>(enum_t_value));
}
bool SharingLog_TextAttachment_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingLog_TextAttachment_Type* value);
enum SharingLog_FileAttachment_Type : int {
  SharingLog_FileAttachment_Type_UNKNOWN_FILE_TYPE = 0,
  SharingLog_FileAttachment_Type_IMAGE = 1,
  SharingLog_FileAttachment_Type_VIDEO = 2,
  SharingLog_FileAttachment_Type_ANDROID_APP = 3,
  SharingLog_FileAttachment_Type_AUDIO = 4,
  SharingLog_FileAttachment_Type_DOCUMENT = 5
};
bool SharingLog_FileAttachment_Type_IsValid(int value);
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment_Type_Type_MIN = SharingLog_FileAttachment_Type_UNKNOWN_FILE_TYPE;
constexpr SharingLog_FileAttachment_Type SharingLog_FileAttachment_Type_Type_MAX = SharingLog_FileAttachment_Type_DOCUMENT;
constexpr int SharingLog_FileAttachment_Type_Type_ARRAYSIZE = SharingLog_FileAttachment_Type_Type_MAX + 1;

const std::string& SharingLog_FileAttachment_Type_Name(SharingLog_FileAttachment_Type value);
template<typename T>
inline const std::string& SharingLog_FileAttachment_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SharingLog_FileAttachment_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SharingLog_FileAttachment_Type_Name.");
  return SharingLog_FileAttachment_Type_Name(static_cast<SharingLog_FileAttachment_Type>(enum_t_value));
}
bool SharingLog_FileAttachment_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingLog_FileAttachment_Type* value);
// ===================================================================

class SharingLog_AppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AppInfo) */ {
 public:
  inline SharingLog_AppInfo() : SharingLog_AppInfo(nullptr) {}
  ~SharingLog_AppInfo() override;
  explicit constexpr SharingLog_AppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AppInfo(const SharingLog_AppInfo& from);
  SharingLog_AppInfo(SharingLog_AppInfo&& from) noexcept
    : SharingLog_AppInfo() {
    *this = ::std::move(from);
  }

  inline SharingLog_AppInfo& operator=(const SharingLog_AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AppInfo& operator=(SharingLog_AppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AppInfo* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AppInfo*>(
               &_SharingLog_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharingLog_AppInfo& a, SharingLog_AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AppInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AppInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AppInfo& from);
  void MergeFrom(const SharingLog_AppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AppInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AppInfo";
  }
  protected:
  explicit SharingLog_AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppVersionFieldNumber = 1,
    kAppLanguageFieldNumber = 2,
    kUpdateTrackFieldNumber = 3,
  };
  // optional string app_version = 1;
  bool has_app_version() const;
  private:
  bool _internal_has_app_version() const;
  public:
  void clear_app_version();
  const std::string& app_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_version();
  PROTOBUF_NODISCARD std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // optional string app_language = 2;
  bool has_app_language() const;
  private:
  bool _internal_has_app_language() const;
  public:
  void clear_app_language();
  const std::string& app_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_language();
  PROTOBUF_NODISCARD std::string* release_app_language();
  void set_allocated_app_language(std::string* app_language);
  private:
  const std::string& _internal_app_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_language(const std::string& value);
  std::string* _internal_mutable_app_language();
  public:

  // optional string update_track = 3;
  bool has_update_track() const;
  private:
  bool _internal_has_update_track() const;
  public:
  void clear_update_track();
  const std::string& update_track() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_track(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_track();
  PROTOBUF_NODISCARD std::string* release_update_track();
  void set_allocated_update_track(std::string* update_track);
  private:
  const std::string& _internal_update_track() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_track(const std::string& value);
  std::string* _internal_mutable_update_track();
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_track_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DeviceSettings final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DeviceSettings) */ {
 public:
  inline SharingLog_DeviceSettings() : SharingLog_DeviceSettings(nullptr) {}
  ~SharingLog_DeviceSettings() override;
  explicit constexpr SharingLog_DeviceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DeviceSettings(const SharingLog_DeviceSettings& from);
  SharingLog_DeviceSettings(SharingLog_DeviceSettings&& from) noexcept
    : SharingLog_DeviceSettings() {
    *this = ::std::move(from);
  }

  inline SharingLog_DeviceSettings& operator=(const SharingLog_DeviceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DeviceSettings& operator=(SharingLog_DeviceSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DeviceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DeviceSettings* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DeviceSettings*>(
               &_SharingLog_DeviceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SharingLog_DeviceSettings& a, SharingLog_DeviceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DeviceSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DeviceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DeviceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DeviceSettings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DeviceSettings& from);
  void MergeFrom(const SharingLog_DeviceSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DeviceSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DeviceSettings";
  }
  protected:
  explicit SharingLog_DeviceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
    kDataUsageFieldNumber = 2,
    kDeviceNameSizeFieldNumber = 3,
    kIsShowNotificationEnabledFieldNumber = 4,
    kIsBtEnabledFieldNumber = 5,
    kIsLocationEnabledFieldNumber = 6,
    kIsWifiEnabledFieldNumber = 7,
  };
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::location::nearby::proto::sharing::Visibility visibility() const;
  void set_visibility(::location::nearby::proto::sharing::Visibility value);
  private:
  ::location::nearby::proto::sharing::Visibility _internal_visibility() const;
  void _internal_set_visibility(::location::nearby::proto::sharing::Visibility value);
  public:

  // optional .location.nearby.proto.sharing.DataUsage data_usage = 2;
  bool has_data_usage() const;
  private:
  bool _internal_has_data_usage() const;
  public:
  void clear_data_usage();
  ::location::nearby::proto::sharing::DataUsage data_usage() const;
  void set_data_usage(::location::nearby::proto::sharing::DataUsage value);
  private:
  ::location::nearby::proto::sharing::DataUsage _internal_data_usage() const;
  void _internal_set_data_usage(::location::nearby::proto::sharing::DataUsage value);
  public:

  // optional int32 device_name_size = 3;
  bool has_device_name_size() const;
  private:
  bool _internal_has_device_name_size() const;
  public:
  void clear_device_name_size();
  int32_t device_name_size() const;
  void set_device_name_size(int32_t value);
  private:
  int32_t _internal_device_name_size() const;
  void _internal_set_device_name_size(int32_t value);
  public:

  // optional bool is_show_notification_enabled = 4;
  bool has_is_show_notification_enabled() const;
  private:
  bool _internal_has_is_show_notification_enabled() const;
  public:
  void clear_is_show_notification_enabled();
  bool is_show_notification_enabled() const;
  void set_is_show_notification_enabled(bool value);
  private:
  bool _internal_is_show_notification_enabled() const;
  void _internal_set_is_show_notification_enabled(bool value);
  public:

  // optional bool is_bt_enabled = 5;
  bool has_is_bt_enabled() const;
  private:
  bool _internal_has_is_bt_enabled() const;
  public:
  void clear_is_bt_enabled();
  bool is_bt_enabled() const;
  void set_is_bt_enabled(bool value);
  private:
  bool _internal_is_bt_enabled() const;
  void _internal_set_is_bt_enabled(bool value);
  public:

  // optional bool is_location_enabled = 6;
  bool has_is_location_enabled() const;
  private:
  bool _internal_has_is_location_enabled() const;
  public:
  void clear_is_location_enabled();
  bool is_location_enabled() const;
  void set_is_location_enabled(bool value);
  private:
  bool _internal_is_location_enabled() const;
  void _internal_set_is_location_enabled(bool value);
  public:

  // optional bool is_wifi_enabled = 7;
  bool has_is_wifi_enabled() const;
  private:
  bool _internal_has_is_wifi_enabled() const;
  public:
  void clear_is_wifi_enabled();
  bool is_wifi_enabled() const;
  void set_is_wifi_enabled(bool value);
  private:
  bool _internal_is_wifi_enabled() const;
  void _internal_set_is_wifi_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DeviceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int visibility_;
  int data_usage_;
  int32_t device_name_size_;
  bool is_show_notification_enabled_;
  bool is_bt_enabled_;
  bool is_location_enabled_;
  bool is_wifi_enabled_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_PreferencesUsage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage) */ {
 public:
  inline SharingLog_PreferencesUsage() : SharingLog_PreferencesUsage(nullptr) {}
  ~SharingLog_PreferencesUsage() override;
  explicit constexpr SharingLog_PreferencesUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_PreferencesUsage(const SharingLog_PreferencesUsage& from);
  SharingLog_PreferencesUsage(SharingLog_PreferencesUsage&& from) noexcept
    : SharingLog_PreferencesUsage() {
    *this = ::std::move(from);
  }

  inline SharingLog_PreferencesUsage& operator=(const SharingLog_PreferencesUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_PreferencesUsage& operator=(SharingLog_PreferencesUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_PreferencesUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_PreferencesUsage* internal_default_instance() {
    return reinterpret_cast<const SharingLog_PreferencesUsage*>(
               &_SharingLog_PreferencesUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SharingLog_PreferencesUsage& a, SharingLog_PreferencesUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_PreferencesUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_PreferencesUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_PreferencesUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_PreferencesUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_PreferencesUsage& from);
  void MergeFrom(const SharingLog_PreferencesUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_PreferencesUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.PreferencesUsage";
  }
  protected:
  explicit SharingLog_PreferencesUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kActionStatusFieldNumber = 2,
    kPrevSubActionFieldNumber = 3,
    kNextSubActionFieldNumber = 4,
  };
  // optional .location.nearby.proto.sharing.PreferencesAction action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::location::nearby::proto::sharing::PreferencesAction action() const;
  void set_action(::location::nearby::proto::sharing::PreferencesAction value);
  private:
  ::location::nearby::proto::sharing::PreferencesAction _internal_action() const;
  void _internal_set_action(::location::nearby::proto::sharing::PreferencesAction value);
  public:

  // optional .location.nearby.proto.sharing.PreferencesActionStatus action_status = 2;
  bool has_action_status() const;
  private:
  bool _internal_has_action_status() const;
  public:
  void clear_action_status();
  ::location::nearby::proto::sharing::PreferencesActionStatus action_status() const;
  void set_action_status(::location::nearby::proto::sharing::PreferencesActionStatus value);
  private:
  ::location::nearby::proto::sharing::PreferencesActionStatus _internal_action_status() const;
  void _internal_set_action_status(::location::nearby::proto::sharing::PreferencesActionStatus value);
  public:

  // optional .location.nearby.proto.sharing.PreferencesAction prev_sub_action = 3;
  bool has_prev_sub_action() const;
  private:
  bool _internal_has_prev_sub_action() const;
  public:
  void clear_prev_sub_action();
  ::location::nearby::proto::sharing::PreferencesAction prev_sub_action() const;
  void set_prev_sub_action(::location::nearby::proto::sharing::PreferencesAction value);
  private:
  ::location::nearby::proto::sharing::PreferencesAction _internal_prev_sub_action() const;
  void _internal_set_prev_sub_action(::location::nearby::proto::sharing::PreferencesAction value);
  public:

  // optional .location.nearby.proto.sharing.PreferencesAction next_sub_action = 4;
  bool has_next_sub_action() const;
  private:
  bool _internal_has_next_sub_action() const;
  public:
  void clear_next_sub_action();
  ::location::nearby::proto::sharing::PreferencesAction next_sub_action() const;
  void set_next_sub_action(::location::nearby::proto::sharing::PreferencesAction value);
  private:
  ::location::nearby::proto::sharing::PreferencesAction _internal_next_sub_action() const;
  void _internal_set_next_sub_action(::location::nearby::proto::sharing::PreferencesAction value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int action_;
  int action_status_;
  int prev_sub_action_;
  int next_sub_action_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_UnknownEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.UnknownEvent) */ {
 public:
  inline SharingLog_UnknownEvent() : SharingLog_UnknownEvent(nullptr) {}
  ~SharingLog_UnknownEvent() override;
  explicit constexpr SharingLog_UnknownEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_UnknownEvent(const SharingLog_UnknownEvent& from);
  SharingLog_UnknownEvent(SharingLog_UnknownEvent&& from) noexcept
    : SharingLog_UnknownEvent() {
    *this = ::std::move(from);
  }

  inline SharingLog_UnknownEvent& operator=(const SharingLog_UnknownEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_UnknownEvent& operator=(SharingLog_UnknownEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_UnknownEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_UnknownEvent* internal_default_instance() {
    return reinterpret_cast<const SharingLog_UnknownEvent*>(
               &_SharingLog_UnknownEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SharingLog_UnknownEvent& a, SharingLog_UnknownEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_UnknownEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_UnknownEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_UnknownEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_UnknownEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_UnknownEvent& from);
  void MergeFrom(const SharingLog_UnknownEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_UnknownEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.UnknownEvent";
  }
  protected:
  explicit SharingLog_UnknownEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.UnknownEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_EstablishConnection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.EstablishConnection) */ {
 public:
  inline SharingLog_EstablishConnection() : SharingLog_EstablishConnection(nullptr) {}
  ~SharingLog_EstablishConnection() override;
  explicit constexpr SharingLog_EstablishConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_EstablishConnection(const SharingLog_EstablishConnection& from);
  SharingLog_EstablishConnection(SharingLog_EstablishConnection&& from) noexcept
    : SharingLog_EstablishConnection() {
    *this = ::std::move(from);
  }

  inline SharingLog_EstablishConnection& operator=(const SharingLog_EstablishConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_EstablishConnection& operator=(SharingLog_EstablishConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_EstablishConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_EstablishConnection* internal_default_instance() {
    return reinterpret_cast<const SharingLog_EstablishConnection*>(
               &_SharingLog_EstablishConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SharingLog_EstablishConnection& a, SharingLog_EstablishConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_EstablishConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_EstablishConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_EstablishConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_EstablishConnection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_EstablishConnection& from);
  void MergeFrom(const SharingLog_EstablishConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_EstablishConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.EstablishConnection";
  }
  protected:
  explicit SharingLog_EstablishConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 7,
    kShareTargetInfoFieldNumber = 6,
    kSessionIdFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTransferPositionFieldNumber = 3,
    kDurationMillisFieldNumber = 5,
    kConcurrentConnectionsFieldNumber = 4,
    kQrCodeFlowFieldNumber = 8,
    kIsIncomingConnectionFieldNumber = 9,
  };
  // optional string referrer_name = 7;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 6;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.EstablishConnectionStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::EstablishConnectionStatus status() const;
  void set_status(::location::nearby::proto::sharing::EstablishConnectionStatus value);
  private:
  ::location::nearby::proto::sharing::EstablishConnectionStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::EstablishConnectionStatus value);
  public:

  // optional int32 transfer_position = 3;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int64 duration_millis = 5;
  bool has_duration_millis() const;
  private:
  bool _internal_has_duration_millis() const;
  public:
  void clear_duration_millis();
  int64_t duration_millis() const;
  void set_duration_millis(int64_t value);
  private:
  int64_t _internal_duration_millis() const;
  void _internal_set_duration_millis(int64_t value);
  public:

  // optional int32 concurrent_connections = 4;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // optional bool qr_code_flow = 8;
  bool has_qr_code_flow() const;
  private:
  bool _internal_has_qr_code_flow() const;
  public:
  void clear_qr_code_flow();
  bool qr_code_flow() const;
  void set_qr_code_flow(bool value);
  private:
  bool _internal_qr_code_flow() const;
  void _internal_set_qr_code_flow(bool value);
  public:

  // optional bool is_incoming_connection = 9;
  bool has_is_incoming_connection() const;
  private:
  bool _internal_has_is_incoming_connection() const;
  public:
  void clear_is_incoming_connection();
  bool is_incoming_connection() const;
  void set_is_incoming_connection(bool value);
  private:
  bool _internal_is_incoming_connection() const;
  void _internal_set_is_incoming_connection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.EstablishConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  int status_;
  int32_t transfer_position_;
  int64_t duration_millis_;
  int32_t concurrent_connections_;
  bool qr_code_flow_;
  bool is_incoming_connection_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AcceptAgreements final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements) */ {
 public:
  inline SharingLog_AcceptAgreements() : SharingLog_AcceptAgreements(nullptr) {}
  ~SharingLog_AcceptAgreements() override;
  explicit constexpr SharingLog_AcceptAgreements(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AcceptAgreements(const SharingLog_AcceptAgreements& from);
  SharingLog_AcceptAgreements(SharingLog_AcceptAgreements&& from) noexcept
    : SharingLog_AcceptAgreements() {
    *this = ::std::move(from);
  }

  inline SharingLog_AcceptAgreements& operator=(const SharingLog_AcceptAgreements& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AcceptAgreements& operator=(SharingLog_AcceptAgreements&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AcceptAgreements& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AcceptAgreements* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AcceptAgreements*>(
               &_SharingLog_AcceptAgreements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SharingLog_AcceptAgreements& a, SharingLog_AcceptAgreements& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AcceptAgreements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AcceptAgreements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AcceptAgreements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AcceptAgreements>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AcceptAgreements& from);
  void MergeFrom(const SharingLog_AcceptAgreements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AcceptAgreements* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AcceptAgreements";
  }
  protected:
  explicit SharingLog_AcceptAgreements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AcceptAgreements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DeclineAgreements final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements) */ {
 public:
  inline SharingLog_DeclineAgreements() : SharingLog_DeclineAgreements(nullptr) {}
  ~SharingLog_DeclineAgreements() override;
  explicit constexpr SharingLog_DeclineAgreements(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DeclineAgreements(const SharingLog_DeclineAgreements& from);
  SharingLog_DeclineAgreements(SharingLog_DeclineAgreements&& from) noexcept
    : SharingLog_DeclineAgreements() {
    *this = ::std::move(from);
  }

  inline SharingLog_DeclineAgreements& operator=(const SharingLog_DeclineAgreements& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DeclineAgreements& operator=(SharingLog_DeclineAgreements&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DeclineAgreements& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DeclineAgreements* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DeclineAgreements*>(
               &_SharingLog_DeclineAgreements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SharingLog_DeclineAgreements& a, SharingLog_DeclineAgreements& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DeclineAgreements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DeclineAgreements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DeclineAgreements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DeclineAgreements>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DeclineAgreements& from);
  void MergeFrom(const SharingLog_DeclineAgreements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DeclineAgreements* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DeclineAgreements";
  }
  protected:
  explicit SharingLog_DeclineAgreements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DeclineAgreements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_EnableNearbySharing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing) */ {
 public:
  inline SharingLog_EnableNearbySharing() : SharingLog_EnableNearbySharing(nullptr) {}
  ~SharingLog_EnableNearbySharing() override;
  explicit constexpr SharingLog_EnableNearbySharing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_EnableNearbySharing(const SharingLog_EnableNearbySharing& from);
  SharingLog_EnableNearbySharing(SharingLog_EnableNearbySharing&& from) noexcept
    : SharingLog_EnableNearbySharing() {
    *this = ::std::move(from);
  }

  inline SharingLog_EnableNearbySharing& operator=(const SharingLog_EnableNearbySharing& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_EnableNearbySharing& operator=(SharingLog_EnableNearbySharing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_EnableNearbySharing& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_EnableNearbySharing* internal_default_instance() {
    return reinterpret_cast<const SharingLog_EnableNearbySharing*>(
               &_SharingLog_EnableNearbySharing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SharingLog_EnableNearbySharing& a, SharingLog_EnableNearbySharing& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_EnableNearbySharing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_EnableNearbySharing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_EnableNearbySharing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_EnableNearbySharing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_EnableNearbySharing& from);
  void MergeFrom(const SharingLog_EnableNearbySharing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_EnableNearbySharing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing";
  }
  protected:
  explicit SharingLog_EnableNearbySharing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kHasOptedInFieldNumber = 2,
  };
  // optional .location.nearby.proto.sharing.NearbySharingStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::NearbySharingStatus status() const;
  void set_status(::location::nearby::proto::sharing::NearbySharingStatus value);
  private:
  ::location::nearby::proto::sharing::NearbySharingStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::NearbySharingStatus value);
  public:

  // optional bool has_opted_in = 2;
  bool has_has_opted_in() const;
  private:
  bool _internal_has_has_opted_in() const;
  public:
  void clear_has_opted_in();
  bool has_opted_in() const;
  void set_has_opted_in(bool value);
  private:
  bool _internal_has_opted_in() const;
  void _internal_set_has_opted_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  bool has_opted_in_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SetAccount final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SetAccount) */ {
 public:
  inline SharingLog_SetAccount() : SharingLog_SetAccount(nullptr) {}
  ~SharingLog_SetAccount() override;
  explicit constexpr SharingLog_SetAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SetAccount(const SharingLog_SetAccount& from);
  SharingLog_SetAccount(SharingLog_SetAccount&& from) noexcept
    : SharingLog_SetAccount() {
    *this = ::std::move(from);
  }

  inline SharingLog_SetAccount& operator=(const SharingLog_SetAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SetAccount& operator=(SharingLog_SetAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SetAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SetAccount* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SetAccount*>(
               &_SharingLog_SetAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SharingLog_SetAccount& a, SharingLog_SetAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SetAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SetAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SetAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SetAccount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SetAccount& from);
  void MergeFrom(const SharingLog_SetAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SetAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SetAccount";
  }
  protected:
  explicit SharingLog_SetAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityNameFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  bool has_activity_name() const;
  private:
  bool _internal_has_activity_name() const;
  public:
  void clear_activity_name();
  ::location::nearby::proto::sharing::ActivityName activity_name() const;
  void set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  private:
  ::location::nearby::proto::sharing::ActivityName _internal_activity_name() const;
  void _internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SetAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int activity_name_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SetVisibility final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SetVisibility) */ {
 public:
  inline SharingLog_SetVisibility() : SharingLog_SetVisibility(nullptr) {}
  ~SharingLog_SetVisibility() override;
  explicit constexpr SharingLog_SetVisibility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SetVisibility(const SharingLog_SetVisibility& from);
  SharingLog_SetVisibility(SharingLog_SetVisibility&& from) noexcept
    : SharingLog_SetVisibility() {
    *this = ::std::move(from);
  }

  inline SharingLog_SetVisibility& operator=(const SharingLog_SetVisibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SetVisibility& operator=(SharingLog_SetVisibility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SetVisibility& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SetVisibility* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SetVisibility*>(
               &_SharingLog_SetVisibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SharingLog_SetVisibility& a, SharingLog_SetVisibility& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SetVisibility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SetVisibility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SetVisibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SetVisibility>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SetVisibility& from);
  void MergeFrom(const SharingLog_SetVisibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SetVisibility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SetVisibility";
  }
  protected:
  explicit SharingLog_SetVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
    kSourceVisibilityFieldNumber = 2,
    kDurationMillisFieldNumber = 3,
    kSourceActivityNameFieldNumber = 4,
  };
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::location::nearby::proto::sharing::Visibility visibility() const;
  void set_visibility(::location::nearby::proto::sharing::Visibility value);
  private:
  ::location::nearby::proto::sharing::Visibility _internal_visibility() const;
  void _internal_set_visibility(::location::nearby::proto::sharing::Visibility value);
  public:

  // optional .location.nearby.proto.sharing.Visibility source_visibility = 2;
  bool has_source_visibility() const;
  private:
  bool _internal_has_source_visibility() const;
  public:
  void clear_source_visibility();
  ::location::nearby::proto::sharing::Visibility source_visibility() const;
  void set_source_visibility(::location::nearby::proto::sharing::Visibility value);
  private:
  ::location::nearby::proto::sharing::Visibility _internal_source_visibility() const;
  void _internal_set_source_visibility(::location::nearby::proto::sharing::Visibility value);
  public:

  // optional int64 duration_millis = 3;
  bool has_duration_millis() const;
  private:
  bool _internal_has_duration_millis() const;
  public:
  void clear_duration_millis();
  int64_t duration_millis() const;
  void set_duration_millis(int64_t value);
  private:
  int64_t _internal_duration_millis() const;
  void _internal_set_duration_millis(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 4;
  bool has_source_activity_name() const;
  private:
  bool _internal_has_source_activity_name() const;
  public:
  void clear_source_activity_name();
  ::location::nearby::proto::sharing::ActivityName source_activity_name() const;
  void set_source_activity_name(::location::nearby::proto::sharing::ActivityName value);
  private:
  ::location::nearby::proto::sharing::ActivityName _internal_source_activity_name() const;
  void _internal_set_source_activity_name(::location::nearby::proto::sharing::ActivityName value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SetVisibility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int visibility_;
  int source_visibility_;
  int64_t duration_millis_;
  int source_activity_name_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SetDataUsage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SetDataUsage) */ {
 public:
  inline SharingLog_SetDataUsage() : SharingLog_SetDataUsage(nullptr) {}
  ~SharingLog_SetDataUsage() override;
  explicit constexpr SharingLog_SetDataUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SetDataUsage(const SharingLog_SetDataUsage& from);
  SharingLog_SetDataUsage(SharingLog_SetDataUsage&& from) noexcept
    : SharingLog_SetDataUsage() {
    *this = ::std::move(from);
  }

  inline SharingLog_SetDataUsage& operator=(const SharingLog_SetDataUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SetDataUsage& operator=(SharingLog_SetDataUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SetDataUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SetDataUsage* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SetDataUsage*>(
               &_SharingLog_SetDataUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SharingLog_SetDataUsage& a, SharingLog_SetDataUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SetDataUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SetDataUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SetDataUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SetDataUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SetDataUsage& from);
  void MergeFrom(const SharingLog_SetDataUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SetDataUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SetDataUsage";
  }
  protected:
  explicit SharingLog_SetDataUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalPreferenceFieldNumber = 1,
    kPreferenceFieldNumber = 2,
  };
  // optional .location.nearby.proto.sharing.DataUsage original_preference = 1;
  bool has_original_preference() const;
  private:
  bool _internal_has_original_preference() const;
  public:
  void clear_original_preference();
  ::location::nearby::proto::sharing::DataUsage original_preference() const;
  void set_original_preference(::location::nearby::proto::sharing::DataUsage value);
  private:
  ::location::nearby::proto::sharing::DataUsage _internal_original_preference() const;
  void _internal_set_original_preference(::location::nearby::proto::sharing::DataUsage value);
  public:

  // optional .location.nearby.proto.sharing.DataUsage preference = 2;
  bool has_preference() const;
  private:
  bool _internal_has_preference() const;
  public:
  void clear_preference();
  ::location::nearby::proto::sharing::DataUsage preference() const;
  void set_preference(::location::nearby::proto::sharing::DataUsage value);
  private:
  ::location::nearby::proto::sharing::DataUsage _internal_preference() const;
  void _internal_set_preference(::location::nearby::proto::sharing::DataUsage value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SetDataUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int original_preference_;
  int preference_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ScanForShareTargetsStart final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart) */ {
 public:
  inline SharingLog_ScanForShareTargetsStart() : SharingLog_ScanForShareTargetsStart(nullptr) {}
  ~SharingLog_ScanForShareTargetsStart() override;
  explicit constexpr SharingLog_ScanForShareTargetsStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ScanForShareTargetsStart(const SharingLog_ScanForShareTargetsStart& from);
  SharingLog_ScanForShareTargetsStart(SharingLog_ScanForShareTargetsStart&& from) noexcept
    : SharingLog_ScanForShareTargetsStart() {
    *this = ::std::move(from);
  }

  inline SharingLog_ScanForShareTargetsStart& operator=(const SharingLog_ScanForShareTargetsStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ScanForShareTargetsStart& operator=(SharingLog_ScanForShareTargetsStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ScanForShareTargetsStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ScanForShareTargetsStart* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ScanForShareTargetsStart*>(
               &_SharingLog_ScanForShareTargetsStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SharingLog_ScanForShareTargetsStart& a, SharingLog_ScanForShareTargetsStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ScanForShareTargetsStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ScanForShareTargetsStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ScanForShareTargetsStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ScanForShareTargetsStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ScanForShareTargetsStart& from);
  void MergeFrom(const SharingLog_ScanForShareTargetsStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ScanForShareTargetsStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart";
  }
  protected:
  explicit SharingLog_ScanForShareTargetsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 5,
    kSessionIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kScanTypeFieldNumber = 3,
    kFlowIdFieldNumber = 4,
  };
  // optional string referrer_name = 5;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.SessionStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::SessionStatus status() const;
  void set_status(::location::nearby::proto::sharing::SessionStatus value);
  private:
  ::location::nearby::proto::sharing::SessionStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::SessionStatus value);
  public:

  // optional .location.nearby.proto.sharing.ScanType scan_type = 3;
  bool has_scan_type() const;
  private:
  bool _internal_has_scan_type() const;
  public:
  void clear_scan_type();
  ::location::nearby::proto::sharing::ScanType scan_type() const;
  void set_scan_type(::location::nearby::proto::sharing::ScanType value);
  private:
  ::location::nearby::proto::sharing::ScanType _internal_scan_type() const;
  void _internal_set_scan_type(::location::nearby::proto::sharing::ScanType value);
  public:

  // optional int64 flow_id = 4;
  bool has_flow_id() const;
  private:
  bool _internal_has_flow_id() const;
  public:
  void clear_flow_id();
  int64_t flow_id() const;
  void set_flow_id(int64_t value);
  private:
  int64_t _internal_flow_id() const;
  void _internal_set_flow_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  int64_t session_id_;
  int status_;
  int scan_type_;
  int64_t flow_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ScanForShareTargetsEnd final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd) */ {
 public:
  inline SharingLog_ScanForShareTargetsEnd() : SharingLog_ScanForShareTargetsEnd(nullptr) {}
  ~SharingLog_ScanForShareTargetsEnd() override;
  explicit constexpr SharingLog_ScanForShareTargetsEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ScanForShareTargetsEnd(const SharingLog_ScanForShareTargetsEnd& from);
  SharingLog_ScanForShareTargetsEnd(SharingLog_ScanForShareTargetsEnd&& from) noexcept
    : SharingLog_ScanForShareTargetsEnd() {
    *this = ::std::move(from);
  }

  inline SharingLog_ScanForShareTargetsEnd& operator=(const SharingLog_ScanForShareTargetsEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ScanForShareTargetsEnd& operator=(SharingLog_ScanForShareTargetsEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ScanForShareTargetsEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ScanForShareTargetsEnd* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ScanForShareTargetsEnd*>(
               &_SharingLog_ScanForShareTargetsEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SharingLog_ScanForShareTargetsEnd& a, SharingLog_ScanForShareTargetsEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ScanForShareTargetsEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ScanForShareTargetsEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ScanForShareTargetsEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ScanForShareTargetsEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ScanForShareTargetsEnd& from);
  void MergeFrom(const SharingLog_ScanForShareTargetsEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ScanForShareTargetsEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd";
  }
  protected:
  explicit SharingLog_ScanForShareTargetsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t session_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AdvertiseDevicePresenceStart final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart) */ {
 public:
  inline SharingLog_AdvertiseDevicePresenceStart() : SharingLog_AdvertiseDevicePresenceStart(nullptr) {}
  ~SharingLog_AdvertiseDevicePresenceStart() override;
  explicit constexpr SharingLog_AdvertiseDevicePresenceStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AdvertiseDevicePresenceStart(const SharingLog_AdvertiseDevicePresenceStart& from);
  SharingLog_AdvertiseDevicePresenceStart(SharingLog_AdvertiseDevicePresenceStart&& from) noexcept
    : SharingLog_AdvertiseDevicePresenceStart() {
    *this = ::std::move(from);
  }

  inline SharingLog_AdvertiseDevicePresenceStart& operator=(const SharingLog_AdvertiseDevicePresenceStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AdvertiseDevicePresenceStart& operator=(SharingLog_AdvertiseDevicePresenceStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AdvertiseDevicePresenceStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AdvertiseDevicePresenceStart* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AdvertiseDevicePresenceStart*>(
               &_SharingLog_AdvertiseDevicePresenceStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SharingLog_AdvertiseDevicePresenceStart& a, SharingLog_AdvertiseDevicePresenceStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AdvertiseDevicePresenceStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AdvertiseDevicePresenceStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AdvertiseDevicePresenceStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AdvertiseDevicePresenceStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AdvertiseDevicePresenceStart& from);
  void MergeFrom(const SharingLog_AdvertiseDevicePresenceStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AdvertiseDevicePresenceStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart";
  }
  protected:
  explicit SharingLog_AdvertiseDevicePresenceStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 6,
    kSessionIdFieldNumber = 1,
    kVisibilityFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDataUsageFieldNumber = 4,
    kDeviceNameSizeFieldNumber = 5,
    kAdvertisingModeFieldNumber = 7,
    kQrCodeFlowFieldNumber = 8,
  };
  // optional string referrer_name = 6;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional int64 session_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_session_id();
  PROTOBUF_DEPRECATED int64_t session_id() const;
  PROTOBUF_DEPRECATED void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.Visibility visibility = 2;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::location::nearby::proto::sharing::Visibility visibility() const;
  void set_visibility(::location::nearby::proto::sharing::Visibility value);
  private:
  ::location::nearby::proto::sharing::Visibility _internal_visibility() const;
  void _internal_set_visibility(::location::nearby::proto::sharing::Visibility value);
  public:

  // optional .location.nearby.proto.sharing.SessionStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::SessionStatus status() const;
  void set_status(::location::nearby::proto::sharing::SessionStatus value);
  private:
  ::location::nearby::proto::sharing::SessionStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::SessionStatus value);
  public:

  // optional .location.nearby.proto.sharing.DataUsage data_usage = 4;
  bool has_data_usage() const;
  private:
  bool _internal_has_data_usage() const;
  public:
  void clear_data_usage();
  ::location::nearby::proto::sharing::DataUsage data_usage() const;
  void set_data_usage(::location::nearby::proto::sharing::DataUsage value);
  private:
  ::location::nearby::proto::sharing::DataUsage _internal_data_usage() const;
  void _internal_set_data_usage(::location::nearby::proto::sharing::DataUsage value);
  public:

  // optional int32 device_name_size = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_device_name_size() const;
  private:
  bool _internal_has_device_name_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_device_name_size();
  PROTOBUF_DEPRECATED int32_t device_name_size() const;
  PROTOBUF_DEPRECATED void set_device_name_size(int32_t value);
  private:
  int32_t _internal_device_name_size() const;
  void _internal_set_device_name_size(int32_t value);
  public:

  // optional .location.nearby.proto.sharing.AdvertisingMode advertising_mode = 7;
  bool has_advertising_mode() const;
  private:
  bool _internal_has_advertising_mode() const;
  public:
  void clear_advertising_mode();
  ::location::nearby::proto::sharing::AdvertisingMode advertising_mode() const;
  void set_advertising_mode(::location::nearby::proto::sharing::AdvertisingMode value);
  private:
  ::location::nearby::proto::sharing::AdvertisingMode _internal_advertising_mode() const;
  void _internal_set_advertising_mode(::location::nearby::proto::sharing::AdvertisingMode value);
  public:

  // optional bool qr_code_flow = 8;
  bool has_qr_code_flow() const;
  private:
  bool _internal_has_qr_code_flow() const;
  public:
  void clear_qr_code_flow();
  bool qr_code_flow() const;
  void set_qr_code_flow(bool value);
  private:
  bool _internal_qr_code_flow() const;
  void _internal_set_qr_code_flow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  int64_t session_id_;
  int visibility_;
  int status_;
  int data_usage_;
  int32_t device_name_size_;
  int advertising_mode_;
  bool qr_code_flow_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AdvertiseDevicePresenceEnd final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd) */ {
 public:
  inline SharingLog_AdvertiseDevicePresenceEnd() : SharingLog_AdvertiseDevicePresenceEnd(nullptr) {}
  ~SharingLog_AdvertiseDevicePresenceEnd() override;
  explicit constexpr SharingLog_AdvertiseDevicePresenceEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AdvertiseDevicePresenceEnd(const SharingLog_AdvertiseDevicePresenceEnd& from);
  SharingLog_AdvertiseDevicePresenceEnd(SharingLog_AdvertiseDevicePresenceEnd&& from) noexcept
    : SharingLog_AdvertiseDevicePresenceEnd() {
    *this = ::std::move(from);
  }

  inline SharingLog_AdvertiseDevicePresenceEnd& operator=(const SharingLog_AdvertiseDevicePresenceEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AdvertiseDevicePresenceEnd& operator=(SharingLog_AdvertiseDevicePresenceEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AdvertiseDevicePresenceEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AdvertiseDevicePresenceEnd* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AdvertiseDevicePresenceEnd*>(
               &_SharingLog_AdvertiseDevicePresenceEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SharingLog_AdvertiseDevicePresenceEnd& a, SharingLog_AdvertiseDevicePresenceEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AdvertiseDevicePresenceEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AdvertiseDevicePresenceEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AdvertiseDevicePresenceEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AdvertiseDevicePresenceEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AdvertiseDevicePresenceEnd& from);
  void MergeFrom(const SharingLog_AdvertiseDevicePresenceEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AdvertiseDevicePresenceEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd";
  }
  protected:
  explicit SharingLog_AdvertiseDevicePresenceEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional int64 session_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_session_id();
  PROTOBUF_DEPRECATED int64_t session_id() const;
  PROTOBUF_DEPRECATED void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t session_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendFastInitialization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization) */ {
 public:
  inline SharingLog_SendFastInitialization() : SharingLog_SendFastInitialization(nullptr) {}
  ~SharingLog_SendFastInitialization() override;
  explicit constexpr SharingLog_SendFastInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendFastInitialization(const SharingLog_SendFastInitialization& from);
  SharingLog_SendFastInitialization(SharingLog_SendFastInitialization&& from) noexcept
    : SharingLog_SendFastInitialization() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendFastInitialization& operator=(const SharingLog_SendFastInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendFastInitialization& operator=(SharingLog_SendFastInitialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendFastInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendFastInitialization* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendFastInitialization*>(
               &_SharingLog_SendFastInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SharingLog_SendFastInitialization& a, SharingLog_SendFastInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendFastInitialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendFastInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendFastInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendFastInitialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendFastInitialization& from);
  void MergeFrom(const SharingLog_SendFastInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendFastInitialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendFastInitialization";
  }
  protected:
  explicit SharingLog_SendFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendFastInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ReceiveFastInitialization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization) */ {
 public:
  inline SharingLog_ReceiveFastInitialization() : SharingLog_ReceiveFastInitialization(nullptr) {}
  ~SharingLog_ReceiveFastInitialization() override;
  explicit constexpr SharingLog_ReceiveFastInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ReceiveFastInitialization(const SharingLog_ReceiveFastInitialization& from);
  SharingLog_ReceiveFastInitialization(SharingLog_ReceiveFastInitialization&& from) noexcept
    : SharingLog_ReceiveFastInitialization() {
    *this = ::std::move(from);
  }

  inline SharingLog_ReceiveFastInitialization& operator=(const SharingLog_ReceiveFastInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ReceiveFastInitialization& operator=(SharingLog_ReceiveFastInitialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ReceiveFastInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ReceiveFastInitialization* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ReceiveFastInitialization*>(
               &_SharingLog_ReceiveFastInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SharingLog_ReceiveFastInitialization& a, SharingLog_ReceiveFastInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ReceiveFastInitialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ReceiveFastInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ReceiveFastInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ReceiveFastInitialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ReceiveFastInitialization& from);
  void MergeFrom(const SharingLog_ReceiveFastInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ReceiveFastInitialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization";
  }
  protected:
  explicit SharingLog_ReceiveFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeElapseSinceScreenUnlockMillisFieldNumber = 1,
    kNotificationsEnabledFieldNumber = 2,
    kNotificationsFilteredFieldNumber = 3,
  };
  // optional int64 time_elapse_since_screen_unlock_millis = 1;
  bool has_time_elapse_since_screen_unlock_millis() const;
  private:
  bool _internal_has_time_elapse_since_screen_unlock_millis() const;
  public:
  void clear_time_elapse_since_screen_unlock_millis();
  int64_t time_elapse_since_screen_unlock_millis() const;
  void set_time_elapse_since_screen_unlock_millis(int64_t value);
  private:
  int64_t _internal_time_elapse_since_screen_unlock_millis() const;
  void _internal_set_time_elapse_since_screen_unlock_millis(int64_t value);
  public:

  // optional bool notifications_enabled = 2;
  bool has_notifications_enabled() const;
  private:
  bool _internal_has_notifications_enabled() const;
  public:
  void clear_notifications_enabled();
  bool notifications_enabled() const;
  void set_notifications_enabled(bool value);
  private:
  bool _internal_notifications_enabled() const;
  void _internal_set_notifications_enabled(bool value);
  public:

  // optional bool notifications_filtered = 3;
  bool has_notifications_filtered() const;
  private:
  bool _internal_has_notifications_filtered() const;
  public:
  void clear_notifications_filtered();
  bool notifications_filtered() const;
  void set_notifications_filtered(bool value);
  private:
  bool _internal_notifications_filtered() const;
  void _internal_set_notifications_filtered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t time_elapse_since_screen_unlock_millis_;
  bool notifications_enabled_;
  bool notifications_filtered_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DismissFastInitialization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization) */ {
 public:
  inline SharingLog_DismissFastInitialization() : SharingLog_DismissFastInitialization(nullptr) {}
  ~SharingLog_DismissFastInitialization() override;
  explicit constexpr SharingLog_DismissFastInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DismissFastInitialization(const SharingLog_DismissFastInitialization& from);
  SharingLog_DismissFastInitialization(SharingLog_DismissFastInitialization&& from) noexcept
    : SharingLog_DismissFastInitialization() {
    *this = ::std::move(from);
  }

  inline SharingLog_DismissFastInitialization& operator=(const SharingLog_DismissFastInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DismissFastInitialization& operator=(SharingLog_DismissFastInitialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DismissFastInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DismissFastInitialization* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DismissFastInitialization*>(
               &_SharingLog_DismissFastInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SharingLog_DismissFastInitialization& a, SharingLog_DismissFastInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DismissFastInitialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DismissFastInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DismissFastInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DismissFastInitialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DismissFastInitialization& from);
  void MergeFrom(const SharingLog_DismissFastInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DismissFastInitialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization";
  }
  protected:
  explicit SharingLog_DismissFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AutoDismissFastInitialization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization) */ {
 public:
  inline SharingLog_AutoDismissFastInitialization() : SharingLog_AutoDismissFastInitialization(nullptr) {}
  ~SharingLog_AutoDismissFastInitialization() override;
  explicit constexpr SharingLog_AutoDismissFastInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AutoDismissFastInitialization(const SharingLog_AutoDismissFastInitialization& from);
  SharingLog_AutoDismissFastInitialization(SharingLog_AutoDismissFastInitialization&& from) noexcept
    : SharingLog_AutoDismissFastInitialization() {
    *this = ::std::move(from);
  }

  inline SharingLog_AutoDismissFastInitialization& operator=(const SharingLog_AutoDismissFastInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AutoDismissFastInitialization& operator=(SharingLog_AutoDismissFastInitialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AutoDismissFastInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AutoDismissFastInitialization* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AutoDismissFastInitialization*>(
               &_SharingLog_AutoDismissFastInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SharingLog_AutoDismissFastInitialization& a, SharingLog_AutoDismissFastInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AutoDismissFastInitialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AutoDismissFastInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AutoDismissFastInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AutoDismissFastInitialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AutoDismissFastInitialization& from);
  void MergeFrom(const SharingLog_AutoDismissFastInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AutoDismissFastInitialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization";
  }
  protected:
  explicit SharingLog_AutoDismissFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_EventMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.EventMetadata) */ {
 public:
  inline SharingLog_EventMetadata() : SharingLog_EventMetadata(nullptr) {}
  ~SharingLog_EventMetadata() override;
  explicit constexpr SharingLog_EventMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_EventMetadata(const SharingLog_EventMetadata& from);
  SharingLog_EventMetadata(SharingLog_EventMetadata&& from) noexcept
    : SharingLog_EventMetadata() {
    *this = ::std::move(from);
  }

  inline SharingLog_EventMetadata& operator=(const SharingLog_EventMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_EventMetadata& operator=(SharingLog_EventMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_EventMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_EventMetadata* internal_default_instance() {
    return reinterpret_cast<const SharingLog_EventMetadata*>(
               &_SharingLog_EventMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SharingLog_EventMetadata& a, SharingLog_EventMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_EventMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_EventMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_EventMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_EventMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_EventMetadata& from);
  void MergeFrom(const SharingLog_EventMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_EventMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.EventMetadata";
  }
  protected:
  explicit SharingLog_EventMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseCaseFieldNumber = 1,
    kInitialOptInFieldNumber = 2,
    kOptInFieldNumber = 3,
    kInitialEnableStatusFieldNumber = 4,
    kFlowIdFieldNumber = 5,
    kSessionIdFieldNumber = 6,
    kVendorIdFieldNumber = 7,
  };
  // optional .location.nearby.proto.sharing.SharingUseCase use_case = 1;
  bool has_use_case() const;
  private:
  bool _internal_has_use_case() const;
  public:
  void clear_use_case();
  ::location::nearby::proto::sharing::SharingUseCase use_case() const;
  void set_use_case(::location::nearby::proto::sharing::SharingUseCase value);
  private:
  ::location::nearby::proto::sharing::SharingUseCase _internal_use_case() const;
  void _internal_set_use_case(::location::nearby::proto::sharing::SharingUseCase value);
  public:

  // optional bool initial_opt_in = 2;
  bool has_initial_opt_in() const;
  private:
  bool _internal_has_initial_opt_in() const;
  public:
  void clear_initial_opt_in();
  bool initial_opt_in() const;
  void set_initial_opt_in(bool value);
  private:
  bool _internal_initial_opt_in() const;
  void _internal_set_initial_opt_in(bool value);
  public:

  // optional bool opt_in = 3;
  bool has_opt_in() const;
  private:
  bool _internal_has_opt_in() const;
  public:
  void clear_opt_in();
  bool opt_in() const;
  void set_opt_in(bool value);
  private:
  bool _internal_opt_in() const;
  void _internal_set_opt_in(bool value);
  public:

  // optional bool initial_enable_status = 4;
  bool has_initial_enable_status() const;
  private:
  bool _internal_has_initial_enable_status() const;
  public:
  void clear_initial_enable_status();
  bool initial_enable_status() const;
  void set_initial_enable_status(bool value);
  private:
  bool _internal_initial_enable_status() const;
  void _internal_set_initial_enable_status(bool value);
  public:

  // optional int64 flow_id = 5;
  bool has_flow_id() const;
  private:
  bool _internal_has_flow_id() const;
  public:
  void clear_flow_id();
  int64_t flow_id() const;
  void set_flow_id(int64_t value);
  private:
  int64_t _internal_flow_id() const;
  void _internal_set_flow_id(int64_t value);
  public:

  // optional int64 session_id = 6;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int32 vendor_id = 7;
  bool has_vendor_id() const;
  private:
  bool _internal_has_vendor_id() const;
  public:
  void clear_vendor_id();
  int32_t vendor_id() const;
  void set_vendor_id(int32_t value);
  private:
  int32_t _internal_vendor_id() const;
  void _internal_set_vendor_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.EventMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int use_case_;
  bool initial_opt_in_;
  bool opt_in_;
  bool initial_enable_status_;
  int64_t flow_id_;
  int64_t session_id_;
  int32_t vendor_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DiscoverShareTarget final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget) */ {
 public:
  inline SharingLog_DiscoverShareTarget() : SharingLog_DiscoverShareTarget(nullptr) {}
  ~SharingLog_DiscoverShareTarget() override;
  explicit constexpr SharingLog_DiscoverShareTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DiscoverShareTarget(const SharingLog_DiscoverShareTarget& from);
  SharingLog_DiscoverShareTarget(SharingLog_DiscoverShareTarget&& from) noexcept
    : SharingLog_DiscoverShareTarget() {
    *this = ::std::move(from);
  }

  inline SharingLog_DiscoverShareTarget& operator=(const SharingLog_DiscoverShareTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DiscoverShareTarget& operator=(SharingLog_DiscoverShareTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DiscoverShareTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DiscoverShareTarget* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DiscoverShareTarget*>(
               &_SharingLog_DiscoverShareTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SharingLog_DiscoverShareTarget& a, SharingLog_DiscoverShareTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DiscoverShareTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DiscoverShareTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DiscoverShareTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DiscoverShareTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DiscoverShareTarget& from);
  void MergeFrom(const SharingLog_DiscoverShareTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DiscoverShareTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget";
  }
  protected:
  explicit SharingLog_DiscoverShareTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 5,
    kShareTargetInfoFieldNumber = 1,
    kDurationSinceScanningFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kFlowIdFieldNumber = 4,
    kScanTypeFieldNumber = 7,
    kLatencySinceActivityStartMillisFieldNumber = 6,
  };
  // optional string referrer_name = 5;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional .google.protobuf.Duration duration_since_scanning = 2;
  bool has_duration_since_scanning() const;
  private:
  bool _internal_has_duration_since_scanning() const;
  public:
  void clear_duration_since_scanning();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_scanning() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration_since_scanning();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_since_scanning();
  void set_allocated_duration_since_scanning(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_since_scanning() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_since_scanning();
  public:
  void unsafe_arena_set_allocated_duration_since_scanning(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_since_scanning();

  // optional int64 session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int64 flow_id = 4;
  bool has_flow_id() const;
  private:
  bool _internal_has_flow_id() const;
  public:
  void clear_flow_id();
  int64_t flow_id() const;
  void set_flow_id(int64_t value);
  private:
  int64_t _internal_flow_id() const;
  void _internal_set_flow_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
  bool has_scan_type() const;
  private:
  bool _internal_has_scan_type() const;
  public:
  void clear_scan_type();
  ::location::nearby::proto::sharing::ScanType scan_type() const;
  void set_scan_type(::location::nearby::proto::sharing::ScanType value);
  private:
  ::location::nearby::proto::sharing::ScanType _internal_scan_type() const;
  void _internal_set_scan_type(::location::nearby::proto::sharing::ScanType value);
  public:

  // optional int64 latency_since_activity_start_millis = 6 [default = -1];
  bool has_latency_since_activity_start_millis() const;
  private:
  bool _internal_has_latency_since_activity_start_millis() const;
  public:
  void clear_latency_since_activity_start_millis();
  int64_t latency_since_activity_start_millis() const;
  void set_latency_since_activity_start_millis(int64_t value);
  private:
  int64_t _internal_latency_since_activity_start_millis() const;
  void _internal_set_latency_since_activity_start_millis(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning_;
  int64_t session_id_;
  int64_t flow_id_;
  int scan_type_;
  int64_t latency_since_activity_start_millis_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ParsingFailedEndpointId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId) */ {
 public:
  inline SharingLog_ParsingFailedEndpointId() : SharingLog_ParsingFailedEndpointId(nullptr) {}
  ~SharingLog_ParsingFailedEndpointId() override;
  explicit constexpr SharingLog_ParsingFailedEndpointId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ParsingFailedEndpointId(const SharingLog_ParsingFailedEndpointId& from);
  SharingLog_ParsingFailedEndpointId(SharingLog_ParsingFailedEndpointId&& from) noexcept
    : SharingLog_ParsingFailedEndpointId() {
    *this = ::std::move(from);
  }

  inline SharingLog_ParsingFailedEndpointId& operator=(const SharingLog_ParsingFailedEndpointId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ParsingFailedEndpointId& operator=(SharingLog_ParsingFailedEndpointId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ParsingFailedEndpointId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ParsingFailedEndpointId* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ParsingFailedEndpointId*>(
               &_SharingLog_ParsingFailedEndpointId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SharingLog_ParsingFailedEndpointId& a, SharingLog_ParsingFailedEndpointId& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ParsingFailedEndpointId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ParsingFailedEndpointId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ParsingFailedEndpointId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ParsingFailedEndpointId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ParsingFailedEndpointId& from);
  void MergeFrom(const SharingLog_ParsingFailedEndpointId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ParsingFailedEndpointId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId";
  }
  protected:
  explicit SharingLog_ParsingFailedEndpointId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointIdFieldNumber = 1,
    kReferrerNameFieldNumber = 5,
    kDurationSinceScanningFieldNumber = 2,
    kDurationSinceLastSyncFieldNumber = 8,
    kSessionIdFieldNumber = 3,
    kFlowIdFieldNumber = 4,
    kScanTypeFieldNumber = 7,
    kParsingFailedTypeFieldNumber = 9,
    kDiscoveryModeFieldNumber = 10,
    kLatencySinceActivityStartMillisFieldNumber = 6,
  };
  // optional string endpoint_id = 1;
  bool has_endpoint_id() const;
  private:
  bool _internal_has_endpoint_id() const;
  public:
  void clear_endpoint_id();
  const std::string& endpoint_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endpoint_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endpoint_id();
  PROTOBUF_NODISCARD std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* endpoint_id);
  private:
  const std::string& _internal_endpoint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint_id(const std::string& value);
  std::string* _internal_mutable_endpoint_id();
  public:

  // optional string referrer_name = 5;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .google.protobuf.Duration duration_since_scanning = 2;
  bool has_duration_since_scanning() const;
  private:
  bool _internal_has_duration_since_scanning() const;
  public:
  void clear_duration_since_scanning();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_scanning() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration_since_scanning();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_since_scanning();
  void set_allocated_duration_since_scanning(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_since_scanning() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_since_scanning();
  public:
  void unsafe_arena_set_allocated_duration_since_scanning(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_since_scanning();

  // optional .google.protobuf.Duration duration_since_last_sync = 8;
  bool has_duration_since_last_sync() const;
  private:
  bool _internal_has_duration_since_last_sync() const;
  public:
  void clear_duration_since_last_sync();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration_since_last_sync() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration_since_last_sync();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_since_last_sync();
  void set_allocated_duration_since_last_sync(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_last_sync);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_since_last_sync() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_since_last_sync();
  public:
  void unsafe_arena_set_allocated_duration_since_last_sync(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_last_sync);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_since_last_sync();

  // optional int64 session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int64 flow_id = 4;
  bool has_flow_id() const;
  private:
  bool _internal_has_flow_id() const;
  public:
  void clear_flow_id();
  int64_t flow_id() const;
  void set_flow_id(int64_t value);
  private:
  int64_t _internal_flow_id() const;
  void _internal_set_flow_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ScanType scan_type = 7;
  bool has_scan_type() const;
  private:
  bool _internal_has_scan_type() const;
  public:
  void clear_scan_type();
  ::location::nearby::proto::sharing::ScanType scan_type() const;
  void set_scan_type(::location::nearby::proto::sharing::ScanType value);
  private:
  ::location::nearby::proto::sharing::ScanType _internal_scan_type() const;
  void _internal_set_scan_type(::location::nearby::proto::sharing::ScanType value);
  public:

  // optional .location.nearby.proto.sharing.ParsingFailedType parsing_failed_type = 9;
  bool has_parsing_failed_type() const;
  private:
  bool _internal_has_parsing_failed_type() const;
  public:
  void clear_parsing_failed_type();
  ::location::nearby::proto::sharing::ParsingFailedType parsing_failed_type() const;
  void set_parsing_failed_type(::location::nearby::proto::sharing::ParsingFailedType value);
  private:
  ::location::nearby::proto::sharing::ParsingFailedType _internal_parsing_failed_type() const;
  void _internal_set_parsing_failed_type(::location::nearby::proto::sharing::ParsingFailedType value);
  public:

  // optional .location.nearby.proto.sharing.DiscoveryMode discovery_mode = 10;
  bool has_discovery_mode() const;
  private:
  bool _internal_has_discovery_mode() const;
  public:
  void clear_discovery_mode();
  ::location::nearby::proto::sharing::DiscoveryMode discovery_mode() const;
  void set_discovery_mode(::location::nearby::proto::sharing::DiscoveryMode value);
  private:
  ::location::nearby::proto::sharing::DiscoveryMode _internal_discovery_mode() const;
  void _internal_set_discovery_mode(::location::nearby::proto::sharing::DiscoveryMode value);
  public:

  // optional int64 latency_since_activity_start_millis = 6 [default = -1];
  bool has_latency_since_activity_start_millis() const;
  private:
  bool _internal_has_latency_since_activity_start_millis() const;
  public:
  void clear_latency_since_activity_start_millis();
  int64_t latency_since_activity_start_millis() const;
  void set_latency_since_activity_start_millis(int64_t value);
  private:
  int64_t _internal_latency_since_activity_start_millis() const;
  void _internal_set_latency_since_activity_start_millis(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_last_sync_;
  int64_t session_id_;
  int64_t flow_id_;
  int scan_type_;
  int parsing_failed_type_;
  int discovery_mode_;
  int64_t latency_since_activity_start_millis_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DescribeAttachments final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments) */ {
 public:
  inline SharingLog_DescribeAttachments() : SharingLog_DescribeAttachments(nullptr) {}
  ~SharingLog_DescribeAttachments() override;
  explicit constexpr SharingLog_DescribeAttachments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DescribeAttachments(const SharingLog_DescribeAttachments& from);
  SharingLog_DescribeAttachments(SharingLog_DescribeAttachments&& from) noexcept
    : SharingLog_DescribeAttachments() {
    *this = ::std::move(from);
  }

  inline SharingLog_DescribeAttachments& operator=(const SharingLog_DescribeAttachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DescribeAttachments& operator=(SharingLog_DescribeAttachments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DescribeAttachments& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DescribeAttachments* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DescribeAttachments*>(
               &_SharingLog_DescribeAttachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SharingLog_DescribeAttachments& a, SharingLog_DescribeAttachments& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DescribeAttachments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DescribeAttachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DescribeAttachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DescribeAttachments>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DescribeAttachments& from);
  void MergeFrom(const SharingLog_DescribeAttachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DescribeAttachments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DescribeAttachments";
  }
  protected:
  explicit SharingLog_DescribeAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsInfoFieldNumber = 1,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 1;
  bool has_attachments_info() const;
  private:
  bool _internal_has_attachments_info() const;
  public:
  void clear_attachments_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* release_attachments_info();
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* mutable_attachments_info();
  void set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& _internal_attachments_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _internal_mutable_attachments_info();
  public:
  void unsafe_arena_set_allocated_attachments_info(
      ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* unsafe_arena_release_attachments_info();

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendIntroduction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendIntroduction) */ {
 public:
  inline SharingLog_SendIntroduction() : SharingLog_SendIntroduction(nullptr) {}
  ~SharingLog_SendIntroduction() override;
  explicit constexpr SharingLog_SendIntroduction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendIntroduction(const SharingLog_SendIntroduction& from);
  SharingLog_SendIntroduction(SharingLog_SendIntroduction&& from) noexcept
    : SharingLog_SendIntroduction() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendIntroduction& operator=(const SharingLog_SendIntroduction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendIntroduction& operator=(SharingLog_SendIntroduction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendIntroduction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendIntroduction* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendIntroduction*>(
               &_SharingLog_SendIntroduction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SharingLog_SendIntroduction& a, SharingLog_SendIntroduction& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendIntroduction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendIntroduction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendIntroduction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendIntroduction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendIntroduction& from);
  void MergeFrom(const SharingLog_SendIntroduction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendIntroduction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendIntroduction";
  }
  protected:
  explicit SharingLog_SendIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareTargetInfoFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kTransferPositionFieldNumber = 3,
    kConcurrentConnectionsFieldNumber = 4,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int32 transfer_position = 3;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int32 concurrent_connections = 4;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendIntroduction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  int32_t transfer_position_;
  int32_t concurrent_connections_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ReceiveIntroduction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction) */ {
 public:
  inline SharingLog_ReceiveIntroduction() : SharingLog_ReceiveIntroduction(nullptr) {}
  ~SharingLog_ReceiveIntroduction() override;
  explicit constexpr SharingLog_ReceiveIntroduction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ReceiveIntroduction(const SharingLog_ReceiveIntroduction& from);
  SharingLog_ReceiveIntroduction(SharingLog_ReceiveIntroduction&& from) noexcept
    : SharingLog_ReceiveIntroduction() {
    *this = ::std::move(from);
  }

  inline SharingLog_ReceiveIntroduction& operator=(const SharingLog_ReceiveIntroduction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ReceiveIntroduction& operator=(SharingLog_ReceiveIntroduction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ReceiveIntroduction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ReceiveIntroduction* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ReceiveIntroduction*>(
               &_SharingLog_ReceiveIntroduction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SharingLog_ReceiveIntroduction& a, SharingLog_ReceiveIntroduction& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ReceiveIntroduction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ReceiveIntroduction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ReceiveIntroduction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ReceiveIntroduction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ReceiveIntroduction& from);
  void MergeFrom(const SharingLog_ReceiveIntroduction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ReceiveIntroduction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction";
  }
  protected:
  explicit SharingLog_ReceiveIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 3,
    kShareTargetInfoFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // optional string referrer_name = 3;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 2;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_RespondToIntroduction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction) */ {
 public:
  inline SharingLog_RespondToIntroduction() : SharingLog_RespondToIntroduction(nullptr) {}
  ~SharingLog_RespondToIntroduction() override;
  explicit constexpr SharingLog_RespondToIntroduction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_RespondToIntroduction(const SharingLog_RespondToIntroduction& from);
  SharingLog_RespondToIntroduction(SharingLog_RespondToIntroduction&& from) noexcept
    : SharingLog_RespondToIntroduction() {
    *this = ::std::move(from);
  }

  inline SharingLog_RespondToIntroduction& operator=(const SharingLog_RespondToIntroduction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_RespondToIntroduction& operator=(SharingLog_RespondToIntroduction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_RespondToIntroduction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_RespondToIntroduction* internal_default_instance() {
    return reinterpret_cast<const SharingLog_RespondToIntroduction*>(
               &_SharingLog_RespondToIntroduction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SharingLog_RespondToIntroduction& a, SharingLog_RespondToIntroduction& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_RespondToIntroduction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_RespondToIntroduction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_RespondToIntroduction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_RespondToIntroduction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_RespondToIntroduction& from);
  void MergeFrom(const SharingLog_RespondToIntroduction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_RespondToIntroduction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction";
  }
  protected:
  explicit SharingLog_RespondToIntroduction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kActionFieldNumber = 1,
    kQrCodeFlowFieldNumber = 3,
  };
  // optional int64 session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ResponseToIntroduction action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::location::nearby::proto::sharing::ResponseToIntroduction action() const;
  void set_action(::location::nearby::proto::sharing::ResponseToIntroduction value);
  private:
  ::location::nearby::proto::sharing::ResponseToIntroduction _internal_action() const;
  void _internal_set_action(::location::nearby::proto::sharing::ResponseToIntroduction value);
  public:

  // optional bool qr_code_flow = 3;
  bool has_qr_code_flow() const;
  private:
  bool _internal_has_qr_code_flow() const;
  public:
  void clear_qr_code_flow();
  bool qr_code_flow() const;
  void set_qr_code_flow(bool value);
  private:
  bool _internal_qr_code_flow() const;
  void _internal_set_qr_code_flow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t session_id_;
  int action_;
  bool qr_code_flow_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendAttachmentsStart final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart) */ {
 public:
  inline SharingLog_SendAttachmentsStart() : SharingLog_SendAttachmentsStart(nullptr) {}
  ~SharingLog_SendAttachmentsStart() override;
  explicit constexpr SharingLog_SendAttachmentsStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendAttachmentsStart(const SharingLog_SendAttachmentsStart& from);
  SharingLog_SendAttachmentsStart(SharingLog_SendAttachmentsStart&& from) noexcept
    : SharingLog_SendAttachmentsStart() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendAttachmentsStart& operator=(const SharingLog_SendAttachmentsStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendAttachmentsStart& operator=(SharingLog_SendAttachmentsStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendAttachmentsStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendAttachmentsStart* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendAttachmentsStart*>(
               &_SharingLog_SendAttachmentsStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SharingLog_SendAttachmentsStart& a, SharingLog_SendAttachmentsStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendAttachmentsStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendAttachmentsStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendAttachmentsStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendAttachmentsStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendAttachmentsStart& from);
  void MergeFrom(const SharingLog_SendAttachmentsStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendAttachmentsStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart";
  }
  protected:
  explicit SharingLog_SendAttachmentsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsInfoFieldNumber = 2,
    kSessionIdFieldNumber = 1,
    kTransferPositionFieldNumber = 3,
    kConcurrentConnectionsFieldNumber = 4,
    kQrCodeFlowFieldNumber = 5,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
  bool has_attachments_info() const;
  private:
  bool _internal_has_attachments_info() const;
  public:
  void clear_attachments_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* release_attachments_info();
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* mutable_attachments_info();
  void set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& _internal_attachments_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _internal_mutable_attachments_info();
  public:
  void unsafe_arena_set_allocated_attachments_info(
      ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* unsafe_arena_release_attachments_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int32 transfer_position = 3;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int32 concurrent_connections = 4;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // optional bool qr_code_flow = 5;
  bool has_qr_code_flow() const;
  private:
  bool _internal_has_qr_code_flow() const;
  public:
  void clear_qr_code_flow();
  bool qr_code_flow() const;
  void set_qr_code_flow(bool value);
  private:
  bool _internal_qr_code_flow() const;
  void _internal_set_qr_code_flow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info_;
  int64_t session_id_;
  int32_t transfer_position_;
  int32_t concurrent_connections_;
  bool qr_code_flow_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendAttachmentsEnd final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd) */ {
 public:
  inline SharingLog_SendAttachmentsEnd() : SharingLog_SendAttachmentsEnd(nullptr) {}
  ~SharingLog_SendAttachmentsEnd() override;
  explicit constexpr SharingLog_SendAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendAttachmentsEnd(const SharingLog_SendAttachmentsEnd& from);
  SharingLog_SendAttachmentsEnd(SharingLog_SendAttachmentsEnd&& from) noexcept
    : SharingLog_SendAttachmentsEnd() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendAttachmentsEnd& operator=(const SharingLog_SendAttachmentsEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendAttachmentsEnd& operator=(SharingLog_SendAttachmentsEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendAttachmentsEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendAttachmentsEnd* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendAttachmentsEnd*>(
               &_SharingLog_SendAttachmentsEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SharingLog_SendAttachmentsEnd& a, SharingLog_SendAttachmentsEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendAttachmentsEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendAttachmentsEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendAttachmentsEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendAttachmentsEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendAttachmentsEnd& from);
  void MergeFrom(const SharingLog_SendAttachmentsEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendAttachmentsEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd";
  }
  protected:
  explicit SharingLog_SendAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 9,
    kAttachmentsInfoFieldNumber = 6,
    kShareTargetInfoFieldNumber = 8,
    kSessionIdFieldNumber = 1,
    kSentBytesFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTransferPositionFieldNumber = 4,
    kDurationMillisFieldNumber = 7,
    kConcurrentConnectionsFieldNumber = 5,
    kConnectionLayerStatusFieldNumber = 10,
  };
  // optional string referrer_name = 9;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 6;
  bool has_attachments_info() const;
  private:
  bool _internal_has_attachments_info() const;
  public:
  void clear_attachments_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* release_attachments_info();
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* mutable_attachments_info();
  void set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& _internal_attachments_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _internal_mutable_attachments_info();
  public:
  void unsafe_arena_set_allocated_attachments_info(
      ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* unsafe_arena_release_attachments_info();

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 8;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int64 sent_bytes = 2;
  bool has_sent_bytes() const;
  private:
  bool _internal_has_sent_bytes() const;
  public:
  void clear_sent_bytes();
  int64_t sent_bytes() const;
  void set_sent_bytes(int64_t value);
  private:
  int64_t _internal_sent_bytes() const;
  void _internal_set_sent_bytes(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::AttachmentTransmissionStatus status() const;
  void set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value);
  private:
  ::location::nearby::proto::sharing::AttachmentTransmissionStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value);
  public:

  // optional int32 transfer_position = 4;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int64 duration_millis = 7;
  bool has_duration_millis() const;
  private:
  bool _internal_has_duration_millis() const;
  public:
  void clear_duration_millis();
  int64_t duration_millis() const;
  void set_duration_millis(int64_t value);
  private:
  int64_t _internal_duration_millis() const;
  void _internal_set_duration_millis(int64_t value);
  public:

  // optional int32 concurrent_connections = 5;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // optional .location.nearby.proto.sharing.ConnectionLayerStatus connection_layer_status = 10;
  bool has_connection_layer_status() const;
  private:
  bool _internal_has_connection_layer_status() const;
  public:
  void clear_connection_layer_status();
  ::location::nearby::proto::sharing::ConnectionLayerStatus connection_layer_status() const;
  void set_connection_layer_status(::location::nearby::proto::sharing::ConnectionLayerStatus value);
  private:
  ::location::nearby::proto::sharing::ConnectionLayerStatus _internal_connection_layer_status() const;
  void _internal_set_connection_layer_status(::location::nearby::proto::sharing::ConnectionLayerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  int64_t sent_bytes_;
  int status_;
  int32_t transfer_position_;
  int64_t duration_millis_;
  int32_t concurrent_connections_;
  int connection_layer_status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ReceiveAttachmentsStart final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart) */ {
 public:
  inline SharingLog_ReceiveAttachmentsStart() : SharingLog_ReceiveAttachmentsStart(nullptr) {}
  ~SharingLog_ReceiveAttachmentsStart() override;
  explicit constexpr SharingLog_ReceiveAttachmentsStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ReceiveAttachmentsStart(const SharingLog_ReceiveAttachmentsStart& from);
  SharingLog_ReceiveAttachmentsStart(SharingLog_ReceiveAttachmentsStart&& from) noexcept
    : SharingLog_ReceiveAttachmentsStart() {
    *this = ::std::move(from);
  }

  inline SharingLog_ReceiveAttachmentsStart& operator=(const SharingLog_ReceiveAttachmentsStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ReceiveAttachmentsStart& operator=(SharingLog_ReceiveAttachmentsStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ReceiveAttachmentsStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ReceiveAttachmentsStart* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ReceiveAttachmentsStart*>(
               &_SharingLog_ReceiveAttachmentsStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SharingLog_ReceiveAttachmentsStart& a, SharingLog_ReceiveAttachmentsStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ReceiveAttachmentsStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ReceiveAttachmentsStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ReceiveAttachmentsStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ReceiveAttachmentsStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ReceiveAttachmentsStart& from);
  void MergeFrom(const SharingLog_ReceiveAttachmentsStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ReceiveAttachmentsStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart";
  }
  protected:
  explicit SharingLog_ReceiveAttachmentsStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsInfoFieldNumber = 2,
    kShareTargetInfoFieldNumber = 3,
    kSessionIdFieldNumber = 1,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
  bool has_attachments_info() const;
  private:
  bool _internal_has_attachments_info() const;
  public:
  void clear_attachments_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* release_attachments_info();
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* mutable_attachments_info();
  void set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& _internal_attachments_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _internal_mutable_attachments_info();
  public:
  void unsafe_arena_set_allocated_attachments_info(
      ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* unsafe_arena_release_attachments_info();

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 3;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ReceiveAttachmentsEnd final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd) */ {
 public:
  inline SharingLog_ReceiveAttachmentsEnd() : SharingLog_ReceiveAttachmentsEnd(nullptr) {}
  ~SharingLog_ReceiveAttachmentsEnd() override;
  explicit constexpr SharingLog_ReceiveAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ReceiveAttachmentsEnd(const SharingLog_ReceiveAttachmentsEnd& from);
  SharingLog_ReceiveAttachmentsEnd(SharingLog_ReceiveAttachmentsEnd&& from) noexcept
    : SharingLog_ReceiveAttachmentsEnd() {
    *this = ::std::move(from);
  }

  inline SharingLog_ReceiveAttachmentsEnd& operator=(const SharingLog_ReceiveAttachmentsEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ReceiveAttachmentsEnd& operator=(SharingLog_ReceiveAttachmentsEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ReceiveAttachmentsEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ReceiveAttachmentsEnd* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ReceiveAttachmentsEnd*>(
               &_SharingLog_ReceiveAttachmentsEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SharingLog_ReceiveAttachmentsEnd& a, SharingLog_ReceiveAttachmentsEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ReceiveAttachmentsEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ReceiveAttachmentsEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ReceiveAttachmentsEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ReceiveAttachmentsEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ReceiveAttachmentsEnd& from);
  void MergeFrom(const SharingLog_ReceiveAttachmentsEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ReceiveAttachmentsEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd";
  }
  protected:
  explicit SharingLog_ReceiveAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 4,
    kShareTargetInfoFieldNumber = 5,
    kSessionIdFieldNumber = 1,
    kReceivedBytesFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional string referrer_name = 4;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 5;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int64 received_bytes = 2;
  bool has_received_bytes() const;
  private:
  bool _internal_has_received_bytes() const;
  public:
  void clear_received_bytes();
  int64_t received_bytes() const;
  void set_received_bytes(int64_t value);
  private:
  int64_t _internal_received_bytes() const;
  void _internal_set_received_bytes(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::AttachmentTransmissionStatus status() const;
  void set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value);
  private:
  ::location::nearby::proto::sharing::AttachmentTransmissionStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  int64_t received_bytes_;
  int status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_CancelConnection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.CancelConnection) */ {
 public:
  inline SharingLog_CancelConnection() : SharingLog_CancelConnection(nullptr) {}
  ~SharingLog_CancelConnection() override;
  explicit constexpr SharingLog_CancelConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_CancelConnection(const SharingLog_CancelConnection& from);
  SharingLog_CancelConnection(SharingLog_CancelConnection&& from) noexcept
    : SharingLog_CancelConnection() {
    *this = ::std::move(from);
  }

  inline SharingLog_CancelConnection& operator=(const SharingLog_CancelConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_CancelConnection& operator=(SharingLog_CancelConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_CancelConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_CancelConnection* internal_default_instance() {
    return reinterpret_cast<const SharingLog_CancelConnection*>(
               &_SharingLog_CancelConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SharingLog_CancelConnection& a, SharingLog_CancelConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_CancelConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_CancelConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_CancelConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_CancelConnection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_CancelConnection& from);
  void MergeFrom(const SharingLog_CancelConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_CancelConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.CancelConnection";
  }
  protected:
  explicit SharingLog_CancelConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTransferPositionFieldNumber = 2,
    kConcurrentConnectionsFieldNumber = 3,
  };
  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int32 transfer_position = 2;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int32 concurrent_connections = 3;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.CancelConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t session_id_;
  int32_t transfer_position_;
  int32_t concurrent_connections_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_CancelSendingAttachments final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments) */ {
 public:
  inline SharingLog_CancelSendingAttachments() : SharingLog_CancelSendingAttachments(nullptr) {}
  ~SharingLog_CancelSendingAttachments() override;
  explicit constexpr SharingLog_CancelSendingAttachments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_CancelSendingAttachments(const SharingLog_CancelSendingAttachments& from);
  SharingLog_CancelSendingAttachments(SharingLog_CancelSendingAttachments&& from) noexcept
    : SharingLog_CancelSendingAttachments() {
    *this = ::std::move(from);
  }

  inline SharingLog_CancelSendingAttachments& operator=(const SharingLog_CancelSendingAttachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_CancelSendingAttachments& operator=(SharingLog_CancelSendingAttachments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_CancelSendingAttachments& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_CancelSendingAttachments* internal_default_instance() {
    return reinterpret_cast<const SharingLog_CancelSendingAttachments*>(
               &_SharingLog_CancelSendingAttachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SharingLog_CancelSendingAttachments& a, SharingLog_CancelSendingAttachments& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_CancelSendingAttachments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_CancelSendingAttachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_CancelSendingAttachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_CancelSendingAttachments>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_CancelSendingAttachments& from);
  void MergeFrom(const SharingLog_CancelSendingAttachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_CancelSendingAttachments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments";
  }
  protected:
  explicit SharingLog_CancelSendingAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_CancelReceivingAttachments final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments) */ {
 public:
  inline SharingLog_CancelReceivingAttachments() : SharingLog_CancelReceivingAttachments(nullptr) {}
  ~SharingLog_CancelReceivingAttachments() override;
  explicit constexpr SharingLog_CancelReceivingAttachments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_CancelReceivingAttachments(const SharingLog_CancelReceivingAttachments& from);
  SharingLog_CancelReceivingAttachments(SharingLog_CancelReceivingAttachments&& from) noexcept
    : SharingLog_CancelReceivingAttachments() {
    *this = ::std::move(from);
  }

  inline SharingLog_CancelReceivingAttachments& operator=(const SharingLog_CancelReceivingAttachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_CancelReceivingAttachments& operator=(SharingLog_CancelReceivingAttachments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_CancelReceivingAttachments& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_CancelReceivingAttachments* internal_default_instance() {
    return reinterpret_cast<const SharingLog_CancelReceivingAttachments*>(
               &_SharingLog_CancelReceivingAttachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SharingLog_CancelReceivingAttachments& a, SharingLog_CancelReceivingAttachments& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_CancelReceivingAttachments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_CancelReceivingAttachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_CancelReceivingAttachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_CancelReceivingAttachments>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_CancelReceivingAttachments& from);
  void MergeFrom(const SharingLog_CancelReceivingAttachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_CancelReceivingAttachments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments";
  }
  protected:
  explicit SharingLog_CancelReceivingAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ProcessReceivedAttachmentsEnd final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd) */ {
 public:
  inline SharingLog_ProcessReceivedAttachmentsEnd() : SharingLog_ProcessReceivedAttachmentsEnd(nullptr) {}
  ~SharingLog_ProcessReceivedAttachmentsEnd() override;
  explicit constexpr SharingLog_ProcessReceivedAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ProcessReceivedAttachmentsEnd(const SharingLog_ProcessReceivedAttachmentsEnd& from);
  SharingLog_ProcessReceivedAttachmentsEnd(SharingLog_ProcessReceivedAttachmentsEnd&& from) noexcept
    : SharingLog_ProcessReceivedAttachmentsEnd() {
    *this = ::std::move(from);
  }

  inline SharingLog_ProcessReceivedAttachmentsEnd& operator=(const SharingLog_ProcessReceivedAttachmentsEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ProcessReceivedAttachmentsEnd& operator=(SharingLog_ProcessReceivedAttachmentsEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ProcessReceivedAttachmentsEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ProcessReceivedAttachmentsEnd* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ProcessReceivedAttachmentsEnd*>(
               &_SharingLog_ProcessReceivedAttachmentsEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SharingLog_ProcessReceivedAttachmentsEnd& a, SharingLog_ProcessReceivedAttachmentsEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ProcessReceivedAttachmentsEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ProcessReceivedAttachmentsEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ProcessReceivedAttachmentsEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ProcessReceivedAttachmentsEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ProcessReceivedAttachmentsEnd& from);
  void MergeFrom(const SharingLog_ProcessReceivedAttachmentsEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ProcessReceivedAttachmentsEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd";
  }
  protected:
  explicit SharingLog_ProcessReceivedAttachmentsEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ProcessReceivedAttachmentsStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus status() const;
  void set_status(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus value);
  private:
  ::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t session_id_;
  int status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_OpenReceivedAttachments final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments) */ {
 public:
  inline SharingLog_OpenReceivedAttachments() : SharingLog_OpenReceivedAttachments(nullptr) {}
  ~SharingLog_OpenReceivedAttachments() override;
  explicit constexpr SharingLog_OpenReceivedAttachments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_OpenReceivedAttachments(const SharingLog_OpenReceivedAttachments& from);
  SharingLog_OpenReceivedAttachments(SharingLog_OpenReceivedAttachments&& from) noexcept
    : SharingLog_OpenReceivedAttachments() {
    *this = ::std::move(from);
  }

  inline SharingLog_OpenReceivedAttachments& operator=(const SharingLog_OpenReceivedAttachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_OpenReceivedAttachments& operator=(SharingLog_OpenReceivedAttachments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_OpenReceivedAttachments& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_OpenReceivedAttachments* internal_default_instance() {
    return reinterpret_cast<const SharingLog_OpenReceivedAttachments*>(
               &_SharingLog_OpenReceivedAttachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SharingLog_OpenReceivedAttachments& a, SharingLog_OpenReceivedAttachments& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_OpenReceivedAttachments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_OpenReceivedAttachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_OpenReceivedAttachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_OpenReceivedAttachments>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_OpenReceivedAttachments& from);
  void MergeFrom(const SharingLog_OpenReceivedAttachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_OpenReceivedAttachments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments";
  }
  protected:
  explicit SharingLog_OpenReceivedAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsInfoFieldNumber = 3,
    kSessionIdFieldNumber = 4,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 3;
  bool has_attachments_info() const;
  private:
  bool _internal_has_attachments_info() const;
  public:
  void clear_attachments_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& attachments_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* release_attachments_info();
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* mutable_attachments_info();
  void set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& _internal_attachments_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _internal_mutable_attachments_info();
  public:
  void unsafe_arena_set_allocated_attachments_info(
      ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info);
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* unsafe_arena_release_attachments_info();

  // optional int64 session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info_;
  int64_t session_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_LaunchSetupActivity final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity) */ {
 public:
  inline SharingLog_LaunchSetupActivity() : SharingLog_LaunchSetupActivity(nullptr) {}
  ~SharingLog_LaunchSetupActivity() override;
  explicit constexpr SharingLog_LaunchSetupActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_LaunchSetupActivity(const SharingLog_LaunchSetupActivity& from);
  SharingLog_LaunchSetupActivity(SharingLog_LaunchSetupActivity&& from) noexcept
    : SharingLog_LaunchSetupActivity() {
    *this = ::std::move(from);
  }

  inline SharingLog_LaunchSetupActivity& operator=(const SharingLog_LaunchSetupActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_LaunchSetupActivity& operator=(SharingLog_LaunchSetupActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_LaunchSetupActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_LaunchSetupActivity* internal_default_instance() {
    return reinterpret_cast<const SharingLog_LaunchSetupActivity*>(
               &_SharingLog_LaunchSetupActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SharingLog_LaunchSetupActivity& a, SharingLog_LaunchSetupActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_LaunchSetupActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_LaunchSetupActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_LaunchSetupActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_LaunchSetupActivity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_LaunchSetupActivity& from);
  void MergeFrom(const SharingLog_LaunchSetupActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_LaunchSetupActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity";
  }
  protected:
  explicit SharingLog_LaunchSetupActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.LaunchSetupActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AddContact final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AddContact) */ {
 public:
  inline SharingLog_AddContact() : SharingLog_AddContact(nullptr) {}
  ~SharingLog_AddContact() override;
  explicit constexpr SharingLog_AddContact(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AddContact(const SharingLog_AddContact& from);
  SharingLog_AddContact(SharingLog_AddContact&& from) noexcept
    : SharingLog_AddContact() {
    *this = ::std::move(from);
  }

  inline SharingLog_AddContact& operator=(const SharingLog_AddContact& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AddContact& operator=(SharingLog_AddContact&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AddContact& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AddContact* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AddContact*>(
               &_SharingLog_AddContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SharingLog_AddContact& a, SharingLog_AddContact& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AddContact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AddContact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AddContact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AddContact>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AddContact& from);
  void MergeFrom(const SharingLog_AddContact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AddContact* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AddContact";
  }
  protected:
  explicit SharingLog_AddContact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasPhoneAddedFieldNumber = 1,
    kWasEmailAddedFieldNumber = 2,
  };
  // optional bool was_phone_added = 1;
  bool has_was_phone_added() const;
  private:
  bool _internal_has_was_phone_added() const;
  public:
  void clear_was_phone_added();
  bool was_phone_added() const;
  void set_was_phone_added(bool value);
  private:
  bool _internal_was_phone_added() const;
  void _internal_set_was_phone_added(bool value);
  public:

  // optional bool was_email_added = 2;
  bool has_was_email_added() const;
  private:
  bool _internal_has_was_email_added() const;
  public:
  void clear_was_email_added();
  bool was_email_added() const;
  void set_was_email_added(bool value);
  private:
  bool _internal_was_email_added() const;
  void _internal_set_was_email_added(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AddContact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool was_phone_added_;
  bool was_email_added_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_RemoveContact final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.RemoveContact) */ {
 public:
  inline SharingLog_RemoveContact() : SharingLog_RemoveContact(nullptr) {}
  ~SharingLog_RemoveContact() override;
  explicit constexpr SharingLog_RemoveContact(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_RemoveContact(const SharingLog_RemoveContact& from);
  SharingLog_RemoveContact(SharingLog_RemoveContact&& from) noexcept
    : SharingLog_RemoveContact() {
    *this = ::std::move(from);
  }

  inline SharingLog_RemoveContact& operator=(const SharingLog_RemoveContact& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_RemoveContact& operator=(SharingLog_RemoveContact&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_RemoveContact& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_RemoveContact* internal_default_instance() {
    return reinterpret_cast<const SharingLog_RemoveContact*>(
               &_SharingLog_RemoveContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SharingLog_RemoveContact& a, SharingLog_RemoveContact& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_RemoveContact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_RemoveContact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_RemoveContact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_RemoveContact>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_RemoveContact& from);
  void MergeFrom(const SharingLog_RemoveContact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_RemoveContact* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.RemoveContact";
  }
  protected:
  explicit SharingLog_RemoveContact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasPhoneRemovedFieldNumber = 1,
    kWasEmailRemovedFieldNumber = 2,
  };
  // optional bool was_phone_removed = 1;
  bool has_was_phone_removed() const;
  private:
  bool _internal_has_was_phone_removed() const;
  public:
  void clear_was_phone_removed();
  bool was_phone_removed() const;
  void set_was_phone_removed(bool value);
  private:
  bool _internal_was_phone_removed() const;
  void _internal_set_was_phone_removed(bool value);
  public:

  // optional bool was_email_removed = 2;
  bool has_was_email_removed() const;
  private:
  bool _internal_has_was_email_removed() const;
  public:
  void clear_was_email_removed();
  bool was_email_removed() const;
  void set_was_email_removed(bool value);
  private:
  bool _internal_was_email_removed() const;
  void _internal_set_was_email_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.RemoveContact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool was_phone_removed_;
  bool was_email_removed_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_FastShareServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse) */ {
 public:
  inline SharingLog_FastShareServerResponse() : SharingLog_FastShareServerResponse(nullptr) {}
  ~SharingLog_FastShareServerResponse() override;
  explicit constexpr SharingLog_FastShareServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_FastShareServerResponse(const SharingLog_FastShareServerResponse& from);
  SharingLog_FastShareServerResponse(SharingLog_FastShareServerResponse&& from) noexcept
    : SharingLog_FastShareServerResponse() {
    *this = ::std::move(from);
  }

  inline SharingLog_FastShareServerResponse& operator=(const SharingLog_FastShareServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_FastShareServerResponse& operator=(SharingLog_FastShareServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_FastShareServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_FastShareServerResponse* internal_default_instance() {
    return reinterpret_cast<const SharingLog_FastShareServerResponse*>(
               &_SharingLog_FastShareServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SharingLog_FastShareServerResponse& a, SharingLog_FastShareServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_FastShareServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_FastShareServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_FastShareServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_FastShareServerResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_FastShareServerResponse& from);
  void MergeFrom(const SharingLog_FastShareServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_FastShareServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse";
  }
  protected:
  explicit SharingLog_FastShareServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kNameFieldNumber = 2,
    kLatencyMillisFieldNumber = 3,
    kPurposeFieldNumber = 4,
    kRequesterFieldNumber = 5,
    kDeviceTypeFieldNumber = 6,
  };
  // optional .location.nearby.proto.sharing.ServerResponseState status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::ServerResponseState status() const;
  void set_status(::location::nearby::proto::sharing::ServerResponseState value);
  private:
  ::location::nearby::proto::sharing::ServerResponseState _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::ServerResponseState value);
  public:

  // optional .location.nearby.proto.sharing.ServerActionName name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  ::location::nearby::proto::sharing::ServerActionName name() const;
  void set_name(::location::nearby::proto::sharing::ServerActionName value);
  private:
  ::location::nearby::proto::sharing::ServerActionName _internal_name() const;
  void _internal_set_name(::location::nearby::proto::sharing::ServerActionName value);
  public:

  // optional int64 latency_millis = 3;
  bool has_latency_millis() const;
  private:
  bool _internal_has_latency_millis() const;
  public:
  void clear_latency_millis();
  int64_t latency_millis() const;
  void set_latency_millis(int64_t value);
  private:
  int64_t _internal_latency_millis() const;
  void _internal_set_latency_millis(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.SyncPurpose purpose = 4;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  ::location::nearby::proto::sharing::SyncPurpose purpose() const;
  void set_purpose(::location::nearby::proto::sharing::SyncPurpose value);
  private:
  ::location::nearby::proto::sharing::SyncPurpose _internal_purpose() const;
  void _internal_set_purpose(::location::nearby::proto::sharing::SyncPurpose value);
  public:

  // optional .location.nearby.proto.sharing.ClientRole requester = 5;
  bool has_requester() const;
  private:
  bool _internal_has_requester() const;
  public:
  void clear_requester();
  ::location::nearby::proto::sharing::ClientRole requester() const;
  void set_requester(::location::nearby::proto::sharing::ClientRole value);
  private:
  ::location::nearby::proto::sharing::ClientRole _internal_requester() const;
  void _internal_set_requester(::location::nearby::proto::sharing::ClientRole value);
  public:

  // optional .location.nearby.proto.sharing.DeviceType device_type = 6;
  bool has_device_type() const;
  private:
  bool _internal_has_device_type() const;
  public:
  void clear_device_type();
  ::location::nearby::proto::sharing::DeviceType device_type() const;
  void set_device_type(::location::nearby::proto::sharing::DeviceType value);
  private:
  ::location::nearby::proto::sharing::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::location::nearby::proto::sharing::DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  int name_;
  int64_t latency_millis_;
  int purpose_;
  int requester_;
  int device_type_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendStart final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendStart) */ {
 public:
  inline SharingLog_SendStart() : SharingLog_SendStart(nullptr) {}
  ~SharingLog_SendStart() override;
  explicit constexpr SharingLog_SendStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendStart(const SharingLog_SendStart& from);
  SharingLog_SendStart(SharingLog_SendStart&& from) noexcept
    : SharingLog_SendStart() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendStart& operator=(const SharingLog_SendStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendStart& operator=(SharingLog_SendStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendStart* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendStart*>(
               &_SharingLog_SendStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SharingLog_SendStart& a, SharingLog_SendStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendStart& from);
  void MergeFrom(const SharingLog_SendStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendStart";
  }
  protected:
  explicit SharingLog_SendStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareTargetInfoFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kTransferPositionFieldNumber = 2,
    kConcurrentConnectionsFieldNumber = 3,
  };
  // optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 4;
  bool has_share_target_info() const;
  private:
  bool _internal_has_share_target_info() const;
  public:
  void clear_share_target_info();
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& share_target_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* release_share_target_info();
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* mutable_share_target_info();
  void set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& _internal_share_target_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _internal_mutable_share_target_info();
  public:
  void unsafe_arena_set_allocated_share_target_info(
      ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info);
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* unsafe_arena_release_share_target_info();

  // optional int64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // optional int32 transfer_position = 2;
  bool has_transfer_position() const;
  private:
  bool _internal_has_transfer_position() const;
  public:
  void clear_transfer_position();
  int32_t transfer_position() const;
  void set_transfer_position(int32_t value);
  private:
  int32_t _internal_transfer_position() const;
  void _internal_set_transfer_position(int32_t value);
  public:

  // optional int32 concurrent_connections = 3;
  bool has_concurrent_connections() const;
  private:
  bool _internal_has_concurrent_connections() const;
  public:
  void clear_concurrent_connections();
  int32_t concurrent_connections() const;
  void set_concurrent_connections(int32_t value);
  private:
  int32_t _internal_concurrent_connections() const;
  void _internal_set_concurrent_connections(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info_;
  int64_t session_id_;
  int32_t transfer_position_;
  int32_t concurrent_connections_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AcceptFastInitialization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization) */ {
 public:
  inline SharingLog_AcceptFastInitialization() : SharingLog_AcceptFastInitialization(nullptr) {}
  ~SharingLog_AcceptFastInitialization() override;
  explicit constexpr SharingLog_AcceptFastInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AcceptFastInitialization(const SharingLog_AcceptFastInitialization& from);
  SharingLog_AcceptFastInitialization(SharingLog_AcceptFastInitialization&& from) noexcept
    : SharingLog_AcceptFastInitialization() {
    *this = ::std::move(from);
  }

  inline SharingLog_AcceptFastInitialization& operator=(const SharingLog_AcceptFastInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AcceptFastInitialization& operator=(SharingLog_AcceptFastInitialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AcceptFastInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AcceptFastInitialization* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AcceptFastInitialization*>(
               &_SharingLog_AcceptFastInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SharingLog_AcceptFastInitialization& a, SharingLog_AcceptFastInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AcceptFastInitialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AcceptFastInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AcceptFastInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AcceptFastInitialization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AcceptFastInitialization& from);
  void MergeFrom(const SharingLog_AcceptFastInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AcceptFastInitialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization";
  }
  protected:
  explicit SharingLog_AcceptFastInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_LaunchActivity final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.LaunchActivity) */ {
 public:
  inline SharingLog_LaunchActivity() : SharingLog_LaunchActivity(nullptr) {}
  ~SharingLog_LaunchActivity() override;
  explicit constexpr SharingLog_LaunchActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_LaunchActivity(const SharingLog_LaunchActivity& from);
  SharingLog_LaunchActivity(SharingLog_LaunchActivity&& from) noexcept
    : SharingLog_LaunchActivity() {
    *this = ::std::move(from);
  }

  inline SharingLog_LaunchActivity& operator=(const SharingLog_LaunchActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_LaunchActivity& operator=(SharingLog_LaunchActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_LaunchActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_LaunchActivity* internal_default_instance() {
    return reinterpret_cast<const SharingLog_LaunchActivity*>(
               &_SharingLog_LaunchActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SharingLog_LaunchActivity& a, SharingLog_LaunchActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_LaunchActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_LaunchActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_LaunchActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_LaunchActivity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_LaunchActivity& from);
  void MergeFrom(const SharingLog_LaunchActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_LaunchActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.LaunchActivity";
  }
  protected:
  explicit SharingLog_LaunchActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerNameFieldNumber = 3,
    kDurationMillisFieldNumber = 2,
    kActivityNameFieldNumber = 1,
    kPreviousTransferInProgressFieldNumber = 4,
    kHasOptedInFieldNumber = 5,
    kIsFinishingFieldNumber = 7,
    kSourceActivityNameFieldNumber = 6,
  };
  // optional string referrer_name = 3;
  bool has_referrer_name() const;
  private:
  bool _internal_has_referrer_name() const;
  public:
  void clear_referrer_name();
  const std::string& referrer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_name();
  PROTOBUF_NODISCARD std::string* release_referrer_name();
  void set_allocated_referrer_name(std::string* referrer_name);
  private:
  const std::string& _internal_referrer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_name(const std::string& value);
  std::string* _internal_mutable_referrer_name();
  public:

  // optional int64 duration_millis = 2;
  bool has_duration_millis() const;
  private:
  bool _internal_has_duration_millis() const;
  public:
  void clear_duration_millis();
  int64_t duration_millis() const;
  void set_duration_millis(int64_t value);
  private:
  int64_t _internal_duration_millis() const;
  void _internal_set_duration_millis(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  bool has_activity_name() const;
  private:
  bool _internal_has_activity_name() const;
  public:
  void clear_activity_name();
  ::location::nearby::proto::sharing::ActivityName activity_name() const;
  void set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  private:
  ::location::nearby::proto::sharing::ActivityName _internal_activity_name() const;
  void _internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  public:

  // optional bool previous_transfer_in_progress = 4;
  bool has_previous_transfer_in_progress() const;
  private:
  bool _internal_has_previous_transfer_in_progress() const;
  public:
  void clear_previous_transfer_in_progress();
  bool previous_transfer_in_progress() const;
  void set_previous_transfer_in_progress(bool value);
  private:
  bool _internal_previous_transfer_in_progress() const;
  void _internal_set_previous_transfer_in_progress(bool value);
  public:

  // optional bool has_opted_in = 5;
  bool has_has_opted_in() const;
  private:
  bool _internal_has_has_opted_in() const;
  public:
  void clear_has_opted_in();
  bool has_opted_in() const;
  void set_has_opted_in(bool value);
  private:
  bool _internal_has_opted_in() const;
  void _internal_set_has_opted_in(bool value);
  public:

  // optional bool is_finishing = 7;
  bool has_is_finishing() const;
  private:
  bool _internal_has_is_finishing() const;
  public:
  void clear_is_finishing();
  bool is_finishing() const;
  void set_is_finishing(bool value);
  private:
  bool _internal_is_finishing() const;
  void _internal_set_is_finishing(bool value);
  public:

  // optional .location.nearby.proto.sharing.ActivityName source_activity_name = 6;
  bool has_source_activity_name() const;
  private:
  bool _internal_has_source_activity_name() const;
  public:
  void clear_source_activity_name();
  ::location::nearby::proto::sharing::ActivityName source_activity_name() const;
  void set_source_activity_name(::location::nearby::proto::sharing::ActivityName value);
  private:
  ::location::nearby::proto::sharing::ActivityName _internal_source_activity_name() const;
  void _internal_set_source_activity_name(::location::nearby::proto::sharing::ActivityName value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.LaunchActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_name_;
  int64_t duration_millis_;
  int activity_name_;
  bool previous_transfer_in_progress_;
  bool has_opted_in_;
  bool is_finishing_;
  int source_activity_name_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DismissPrivacyNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification) */ {
 public:
  inline SharingLog_DismissPrivacyNotification() : SharingLog_DismissPrivacyNotification(nullptr) {}
  ~SharingLog_DismissPrivacyNotification() override;
  explicit constexpr SharingLog_DismissPrivacyNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DismissPrivacyNotification(const SharingLog_DismissPrivacyNotification& from);
  SharingLog_DismissPrivacyNotification(SharingLog_DismissPrivacyNotification&& from) noexcept
    : SharingLog_DismissPrivacyNotification() {
    *this = ::std::move(from);
  }

  inline SharingLog_DismissPrivacyNotification& operator=(const SharingLog_DismissPrivacyNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DismissPrivacyNotification& operator=(SharingLog_DismissPrivacyNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DismissPrivacyNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DismissPrivacyNotification* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DismissPrivacyNotification*>(
               &_SharingLog_DismissPrivacyNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SharingLog_DismissPrivacyNotification& a, SharingLog_DismissPrivacyNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DismissPrivacyNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DismissPrivacyNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DismissPrivacyNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DismissPrivacyNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DismissPrivacyNotification& from);
  void MergeFrom(const SharingLog_DismissPrivacyNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DismissPrivacyNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification";
  }
  protected:
  explicit SharingLog_DismissPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapPrivacyNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification) */ {
 public:
  inline SharingLog_TapPrivacyNotification() : SharingLog_TapPrivacyNotification(nullptr) {}
  ~SharingLog_TapPrivacyNotification() override;
  explicit constexpr SharingLog_TapPrivacyNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapPrivacyNotification(const SharingLog_TapPrivacyNotification& from);
  SharingLog_TapPrivacyNotification(SharingLog_TapPrivacyNotification&& from) noexcept
    : SharingLog_TapPrivacyNotification() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapPrivacyNotification& operator=(const SharingLog_TapPrivacyNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapPrivacyNotification& operator=(SharingLog_TapPrivacyNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapPrivacyNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapPrivacyNotification* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapPrivacyNotification*>(
               &_SharingLog_TapPrivacyNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SharingLog_TapPrivacyNotification& a, SharingLog_TapPrivacyNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapPrivacyNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapPrivacyNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapPrivacyNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapPrivacyNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapPrivacyNotification& from);
  void MergeFrom(const SharingLog_TapPrivacyNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapPrivacyNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification";
  }
  protected:
  explicit SharingLog_TapPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapHelp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapHelp) */ {
 public:
  inline SharingLog_TapHelp() : SharingLog_TapHelp(nullptr) {}
  ~SharingLog_TapHelp() override;
  explicit constexpr SharingLog_TapHelp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapHelp(const SharingLog_TapHelp& from);
  SharingLog_TapHelp(SharingLog_TapHelp&& from) noexcept
    : SharingLog_TapHelp() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapHelp& operator=(const SharingLog_TapHelp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapHelp& operator=(SharingLog_TapHelp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapHelp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapHelp* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapHelp*>(
               &_SharingLog_TapHelp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SharingLog_TapHelp& a, SharingLog_TapHelp& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapHelp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapHelp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapHelp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapHelp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapHelp& from);
  void MergeFrom(const SharingLog_TapHelp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapHelp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapHelp";
  }
  protected:
  explicit SharingLog_TapHelp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapHelp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapFeedback) */ {
 public:
  inline SharingLog_TapFeedback() : SharingLog_TapFeedback(nullptr) {}
  ~SharingLog_TapFeedback() override;
  explicit constexpr SharingLog_TapFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapFeedback(const SharingLog_TapFeedback& from);
  SharingLog_TapFeedback(SharingLog_TapFeedback&& from) noexcept
    : SharingLog_TapFeedback() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapFeedback& operator=(const SharingLog_TapFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapFeedback& operator=(SharingLog_TapFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapFeedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapFeedback* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapFeedback*>(
               &_SharingLog_TapFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SharingLog_TapFeedback& a, SharingLog_TapFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapFeedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapFeedback>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapFeedback& from);
  void MergeFrom(const SharingLog_TapFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapFeedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapFeedback";
  }
  protected:
  explicit SharingLog_TapFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AddQuickSettingsTile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile) */ {
 public:
  inline SharingLog_AddQuickSettingsTile() : SharingLog_AddQuickSettingsTile(nullptr) {}
  ~SharingLog_AddQuickSettingsTile() override;
  explicit constexpr SharingLog_AddQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AddQuickSettingsTile(const SharingLog_AddQuickSettingsTile& from);
  SharingLog_AddQuickSettingsTile(SharingLog_AddQuickSettingsTile&& from) noexcept
    : SharingLog_AddQuickSettingsTile() {
    *this = ::std::move(from);
  }

  inline SharingLog_AddQuickSettingsTile& operator=(const SharingLog_AddQuickSettingsTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AddQuickSettingsTile& operator=(SharingLog_AddQuickSettingsTile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AddQuickSettingsTile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AddQuickSettingsTile* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AddQuickSettingsTile*>(
               &_SharingLog_AddQuickSettingsTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SharingLog_AddQuickSettingsTile& a, SharingLog_AddQuickSettingsTile& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AddQuickSettingsTile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AddQuickSettingsTile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AddQuickSettingsTile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AddQuickSettingsTile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AddQuickSettingsTile& from);
  void MergeFrom(const SharingLog_AddQuickSettingsTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AddQuickSettingsTile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile";
  }
  protected:
  explicit SharingLog_AddQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_RemoveQuickSettingsTile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile) */ {
 public:
  inline SharingLog_RemoveQuickSettingsTile() : SharingLog_RemoveQuickSettingsTile(nullptr) {}
  ~SharingLog_RemoveQuickSettingsTile() override;
  explicit constexpr SharingLog_RemoveQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_RemoveQuickSettingsTile(const SharingLog_RemoveQuickSettingsTile& from);
  SharingLog_RemoveQuickSettingsTile(SharingLog_RemoveQuickSettingsTile&& from) noexcept
    : SharingLog_RemoveQuickSettingsTile() {
    *this = ::std::move(from);
  }

  inline SharingLog_RemoveQuickSettingsTile& operator=(const SharingLog_RemoveQuickSettingsTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_RemoveQuickSettingsTile& operator=(SharingLog_RemoveQuickSettingsTile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_RemoveQuickSettingsTile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_RemoveQuickSettingsTile* internal_default_instance() {
    return reinterpret_cast<const SharingLog_RemoveQuickSettingsTile*>(
               &_SharingLog_RemoveQuickSettingsTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SharingLog_RemoveQuickSettingsTile& a, SharingLog_RemoveQuickSettingsTile& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_RemoveQuickSettingsTile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_RemoveQuickSettingsTile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_RemoveQuickSettingsTile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_RemoveQuickSettingsTile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_RemoveQuickSettingsTile& from);
  void MergeFrom(const SharingLog_RemoveQuickSettingsTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_RemoveQuickSettingsTile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile";
  }
  protected:
  explicit SharingLog_RemoveQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_LaunchPhoneConsent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent) */ {
 public:
  inline SharingLog_LaunchPhoneConsent() : SharingLog_LaunchPhoneConsent(nullptr) {}
  ~SharingLog_LaunchPhoneConsent() override;
  explicit constexpr SharingLog_LaunchPhoneConsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_LaunchPhoneConsent(const SharingLog_LaunchPhoneConsent& from);
  SharingLog_LaunchPhoneConsent(SharingLog_LaunchPhoneConsent&& from) noexcept
    : SharingLog_LaunchPhoneConsent() {
    *this = ::std::move(from);
  }

  inline SharingLog_LaunchPhoneConsent& operator=(const SharingLog_LaunchPhoneConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_LaunchPhoneConsent& operator=(SharingLog_LaunchPhoneConsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_LaunchPhoneConsent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_LaunchPhoneConsent* internal_default_instance() {
    return reinterpret_cast<const SharingLog_LaunchPhoneConsent*>(
               &_SharingLog_LaunchPhoneConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SharingLog_LaunchPhoneConsent& a, SharingLog_LaunchPhoneConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_LaunchPhoneConsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_LaunchPhoneConsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_LaunchPhoneConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_LaunchPhoneConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_LaunchPhoneConsent& from);
  void MergeFrom(const SharingLog_LaunchPhoneConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_LaunchPhoneConsent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent";
  }
  protected:
  explicit SharingLog_LaunchPhoneConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DisplayPhoneConsent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent) */ {
 public:
  inline SharingLog_DisplayPhoneConsent() : SharingLog_DisplayPhoneConsent(nullptr) {}
  ~SharingLog_DisplayPhoneConsent() override;
  explicit constexpr SharingLog_DisplayPhoneConsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DisplayPhoneConsent(const SharingLog_DisplayPhoneConsent& from);
  SharingLog_DisplayPhoneConsent(SharingLog_DisplayPhoneConsent&& from) noexcept
    : SharingLog_DisplayPhoneConsent() {
    *this = ::std::move(from);
  }

  inline SharingLog_DisplayPhoneConsent& operator=(const SharingLog_DisplayPhoneConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DisplayPhoneConsent& operator=(SharingLog_DisplayPhoneConsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DisplayPhoneConsent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DisplayPhoneConsent* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DisplayPhoneConsent*>(
               &_SharingLog_DisplayPhoneConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SharingLog_DisplayPhoneConsent& a, SharingLog_DisplayPhoneConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DisplayPhoneConsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DisplayPhoneConsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DisplayPhoneConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DisplayPhoneConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DisplayPhoneConsent& from);
  void MergeFrom(const SharingLog_DisplayPhoneConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DisplayPhoneConsent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent";
  }
  protected:
  explicit SharingLog_DisplayPhoneConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapQuickSettingsTile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile) */ {
 public:
  inline SharingLog_TapQuickSettingsTile() : SharingLog_TapQuickSettingsTile(nullptr) {}
  ~SharingLog_TapQuickSettingsTile() override;
  explicit constexpr SharingLog_TapQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapQuickSettingsTile(const SharingLog_TapQuickSettingsTile& from);
  SharingLog_TapQuickSettingsTile(SharingLog_TapQuickSettingsTile&& from) noexcept
    : SharingLog_TapQuickSettingsTile() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapQuickSettingsTile& operator=(const SharingLog_TapQuickSettingsTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapQuickSettingsTile& operator=(SharingLog_TapQuickSettingsTile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapQuickSettingsTile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapQuickSettingsTile* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapQuickSettingsTile*>(
               &_SharingLog_TapQuickSettingsTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SharingLog_TapQuickSettingsTile& a, SharingLog_TapQuickSettingsTile& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapQuickSettingsTile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapQuickSettingsTile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapQuickSettingsTile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapQuickSettingsTile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapQuickSettingsTile& from);
  void MergeFrom(const SharingLog_TapQuickSettingsTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapQuickSettingsTile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile";
  }
  protected:
  explicit SharingLog_TapQuickSettingsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapQuickSettingsFileShare final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare) */ {
 public:
  inline SharingLog_TapQuickSettingsFileShare() : SharingLog_TapQuickSettingsFileShare(nullptr) {}
  ~SharingLog_TapQuickSettingsFileShare() override;
  explicit constexpr SharingLog_TapQuickSettingsFileShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapQuickSettingsFileShare(const SharingLog_TapQuickSettingsFileShare& from);
  SharingLog_TapQuickSettingsFileShare(SharingLog_TapQuickSettingsFileShare&& from) noexcept
    : SharingLog_TapQuickSettingsFileShare() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapQuickSettingsFileShare& operator=(const SharingLog_TapQuickSettingsFileShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapQuickSettingsFileShare& operator=(SharingLog_TapQuickSettingsFileShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapQuickSettingsFileShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapQuickSettingsFileShare* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapQuickSettingsFileShare*>(
               &_SharingLog_TapQuickSettingsFileShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SharingLog_TapQuickSettingsFileShare& a, SharingLog_TapQuickSettingsFileShare& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapQuickSettingsFileShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapQuickSettingsFileShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapQuickSettingsFileShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapQuickSettingsFileShare>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapQuickSettingsFileShare& from);
  void MergeFrom(const SharingLog_TapQuickSettingsFileShare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapQuickSettingsFileShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare";
  }
  protected:
  explicit SharingLog_TapQuickSettingsFileShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DisplayPrivacyNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification) */ {
 public:
  inline SharingLog_DisplayPrivacyNotification() : SharingLog_DisplayPrivacyNotification(nullptr) {}
  ~SharingLog_DisplayPrivacyNotification() override;
  explicit constexpr SharingLog_DisplayPrivacyNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DisplayPrivacyNotification(const SharingLog_DisplayPrivacyNotification& from);
  SharingLog_DisplayPrivacyNotification(SharingLog_DisplayPrivacyNotification&& from) noexcept
    : SharingLog_DisplayPrivacyNotification() {
    *this = ::std::move(from);
  }

  inline SharingLog_DisplayPrivacyNotification& operator=(const SharingLog_DisplayPrivacyNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DisplayPrivacyNotification& operator=(SharingLog_DisplayPrivacyNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DisplayPrivacyNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DisplayPrivacyNotification* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DisplayPrivacyNotification*>(
               &_SharingLog_DisplayPrivacyNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SharingLog_DisplayPrivacyNotification& a, SharingLog_DisplayPrivacyNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DisplayPrivacyNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DisplayPrivacyNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DisplayPrivacyNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DisplayPrivacyNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DisplayPrivacyNotification& from);
  void MergeFrom(const SharingLog_DisplayPrivacyNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DisplayPrivacyNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification";
  }
  protected:
  explicit SharingLog_DisplayPrivacyNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DefaultOptIn final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn) */ {
 public:
  inline SharingLog_DefaultOptIn() : SharingLog_DefaultOptIn(nullptr) {}
  ~SharingLog_DefaultOptIn() override;
  explicit constexpr SharingLog_DefaultOptIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DefaultOptIn(const SharingLog_DefaultOptIn& from);
  SharingLog_DefaultOptIn(SharingLog_DefaultOptIn&& from) noexcept
    : SharingLog_DefaultOptIn() {
    *this = ::std::move(from);
  }

  inline SharingLog_DefaultOptIn& operator=(const SharingLog_DefaultOptIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DefaultOptIn& operator=(SharingLog_DefaultOptIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DefaultOptIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DefaultOptIn* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DefaultOptIn*>(
               &_SharingLog_DefaultOptIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SharingLog_DefaultOptIn& a, SharingLog_DefaultOptIn& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DefaultOptIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DefaultOptIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DefaultOptIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DefaultOptIn>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DefaultOptIn& from);
  void MergeFrom(const SharingLog_DefaultOptIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DefaultOptIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DefaultOptIn";
  }
  protected:
  explicit SharingLog_DefaultOptIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DefaultOptIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SetDeviceName final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SetDeviceName) */ {
 public:
  inline SharingLog_SetDeviceName() : SharingLog_SetDeviceName(nullptr) {}
  ~SharingLog_SetDeviceName() override;
  explicit constexpr SharingLog_SetDeviceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SetDeviceName(const SharingLog_SetDeviceName& from);
  SharingLog_SetDeviceName(SharingLog_SetDeviceName&& from) noexcept
    : SharingLog_SetDeviceName() {
    *this = ::std::move(from);
  }

  inline SharingLog_SetDeviceName& operator=(const SharingLog_SetDeviceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SetDeviceName& operator=(SharingLog_SetDeviceName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SetDeviceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SetDeviceName* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SetDeviceName*>(
               &_SharingLog_SetDeviceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SharingLog_SetDeviceName& a, SharingLog_SetDeviceName& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SetDeviceName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SetDeviceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SetDeviceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SetDeviceName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SetDeviceName& from);
  void MergeFrom(const SharingLog_SetDeviceName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SetDeviceName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SetDeviceName";
  }
  protected:
  explicit SharingLog_SetDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameSizeFieldNumber = 1,
  };
  // optional int32 device_name_size = 1;
  bool has_device_name_size() const;
  private:
  bool _internal_has_device_name_size() const;
  public:
  void clear_device_name_size();
  int32_t device_name_size() const;
  void set_device_name_size(int32_t value);
  private:
  int32_t _internal_device_name_size() const;
  void _internal_set_device_name_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SetDeviceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t device_name_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_RequestSettingPermissions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions) */ {
 public:
  inline SharingLog_RequestSettingPermissions() : SharingLog_RequestSettingPermissions(nullptr) {}
  ~SharingLog_RequestSettingPermissions() override;
  explicit constexpr SharingLog_RequestSettingPermissions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_RequestSettingPermissions(const SharingLog_RequestSettingPermissions& from);
  SharingLog_RequestSettingPermissions(SharingLog_RequestSettingPermissions&& from) noexcept
    : SharingLog_RequestSettingPermissions() {
    *this = ::std::move(from);
  }

  inline SharingLog_RequestSettingPermissions& operator=(const SharingLog_RequestSettingPermissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_RequestSettingPermissions& operator=(SharingLog_RequestSettingPermissions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_RequestSettingPermissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_RequestSettingPermissions* internal_default_instance() {
    return reinterpret_cast<const SharingLog_RequestSettingPermissions*>(
               &_SharingLog_RequestSettingPermissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SharingLog_RequestSettingPermissions& a, SharingLog_RequestSettingPermissions& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_RequestSettingPermissions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_RequestSettingPermissions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_RequestSettingPermissions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_RequestSettingPermissions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_RequestSettingPermissions& from);
  void MergeFrom(const SharingLog_RequestSettingPermissions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_RequestSettingPermissions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions";
  }
  protected:
  explicit SharingLog_RequestSettingPermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionTypeFieldNumber = 1,
    kPermissionRequestResultFieldNumber = 2,
  };
  // optional .location.nearby.proto.sharing.PermissionRequestType permission_type = 1;
  bool has_permission_type() const;
  private:
  bool _internal_has_permission_type() const;
  public:
  void clear_permission_type();
  ::location::nearby::proto::sharing::PermissionRequestType permission_type() const;
  void set_permission_type(::location::nearby::proto::sharing::PermissionRequestType value);
  private:
  ::location::nearby::proto::sharing::PermissionRequestType _internal_permission_type() const;
  void _internal_set_permission_type(::location::nearby::proto::sharing::PermissionRequestType value);
  public:

  // optional .location.nearby.proto.sharing.PermissionRequestResult permission_request_result = 2;
  bool has_permission_request_result() const;
  private:
  bool _internal_has_permission_request_result() const;
  public:
  void clear_permission_request_result();
  ::location::nearby::proto::sharing::PermissionRequestResult permission_request_result() const;
  void set_permission_request_result(::location::nearby::proto::sharing::PermissionRequestResult value);
  private:
  ::location::nearby::proto::sharing::PermissionRequestResult _internal_permission_request_result() const;
  void _internal_set_permission_request_result(::location::nearby::proto::sharing::PermissionRequestResult value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int permission_type_;
  int permission_request_result_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_LaunchConsent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.LaunchConsent) */ {
 public:
  inline SharingLog_LaunchConsent() : SharingLog_LaunchConsent(nullptr) {}
  ~SharingLog_LaunchConsent() override;
  explicit constexpr SharingLog_LaunchConsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_LaunchConsent(const SharingLog_LaunchConsent& from);
  SharingLog_LaunchConsent(SharingLog_LaunchConsent&& from) noexcept
    : SharingLog_LaunchConsent() {
    *this = ::std::move(from);
  }

  inline SharingLog_LaunchConsent& operator=(const SharingLog_LaunchConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_LaunchConsent& operator=(SharingLog_LaunchConsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_LaunchConsent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_LaunchConsent* internal_default_instance() {
    return reinterpret_cast<const SharingLog_LaunchConsent*>(
               &_SharingLog_LaunchConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SharingLog_LaunchConsent& a, SharingLog_LaunchConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_LaunchConsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_LaunchConsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_LaunchConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_LaunchConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_LaunchConsent& from);
  void MergeFrom(const SharingLog_LaunchConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_LaunchConsent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.LaunchConsent";
  }
  protected:
  explicit SharingLog_LaunchConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsentTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional .location.nearby.proto.sharing.ConsentType consent_type = 1;
  bool has_consent_type() const;
  private:
  bool _internal_has_consent_type() const;
  public:
  void clear_consent_type();
  ::location::nearby::proto::sharing::ConsentType consent_type() const;
  void set_consent_type(::location::nearby::proto::sharing::ConsentType value);
  private:
  ::location::nearby::proto::sharing::ConsentType _internal_consent_type() const;
  void _internal_set_consent_type(::location::nearby::proto::sharing::ConsentType value);
  public:

  // optional .location.nearby.proto.sharing.ConsentAcceptanceStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::ConsentAcceptanceStatus status() const;
  void set_status(::location::nearby::proto::sharing::ConsentAcceptanceStatus value);
  private:
  ::location::nearby::proto::sharing::ConsentAcceptanceStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::ConsentAcceptanceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.LaunchConsent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int consent_type_;
  int status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_InstallAPKStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus) */ {
 public:
  inline SharingLog_InstallAPKStatus() : SharingLog_InstallAPKStatus(nullptr) {}
  ~SharingLog_InstallAPKStatus() override;
  explicit constexpr SharingLog_InstallAPKStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_InstallAPKStatus(const SharingLog_InstallAPKStatus& from);
  SharingLog_InstallAPKStatus(SharingLog_InstallAPKStatus&& from) noexcept
    : SharingLog_InstallAPKStatus() {
    *this = ::std::move(from);
  }

  inline SharingLog_InstallAPKStatus& operator=(const SharingLog_InstallAPKStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_InstallAPKStatus& operator=(SharingLog_InstallAPKStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_InstallAPKStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_InstallAPKStatus* internal_default_instance() {
    return reinterpret_cast<const SharingLog_InstallAPKStatus*>(
               &_SharingLog_InstallAPKStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SharingLog_InstallAPKStatus& a, SharingLog_InstallAPKStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_InstallAPKStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_InstallAPKStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_InstallAPKStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_InstallAPKStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_InstallAPKStatus& from);
  void MergeFrom(const SharingLog_InstallAPKStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_InstallAPKStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus";
  }
  protected:
  explicit SharingLog_InstallAPKStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSourceFieldNumber = 2,
  };
  // repeated .location.nearby.proto.sharing.InstallAPKStatus status = 1 [packed = true];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  ::location::nearby::proto::sharing::InstallAPKStatus _internal_status(int index) const;
  void _internal_add_status(::location::nearby::proto::sharing::InstallAPKStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_status();
  public:
  ::location::nearby::proto::sharing::InstallAPKStatus status(int index) const;
  void set_status(int index, ::location::nearby::proto::sharing::InstallAPKStatus value);
  void add_status(::location::nearby::proto::sharing::InstallAPKStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_status();

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  private:
  ::location::nearby::proto::sharing::ApkSource _internal_source(int index) const;
  void _internal_add_source(::location::nearby::proto::sharing::ApkSource value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_source();
  public:
  ::location::nearby::proto::sharing::ApkSource source(int index) const;
  void set_source(int index, ::location::nearby::proto::sharing::ApkSource value);
  void add_source(::location::nearby::proto::sharing::ApkSource value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& source() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_source();

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> status_;
  mutable std::atomic<int> _status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> source_;
  mutable std::atomic<int> _source_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_VerifyAPKStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus) */ {
 public:
  inline SharingLog_VerifyAPKStatus() : SharingLog_VerifyAPKStatus(nullptr) {}
  ~SharingLog_VerifyAPKStatus() override;
  explicit constexpr SharingLog_VerifyAPKStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_VerifyAPKStatus(const SharingLog_VerifyAPKStatus& from);
  SharingLog_VerifyAPKStatus(SharingLog_VerifyAPKStatus&& from) noexcept
    : SharingLog_VerifyAPKStatus() {
    *this = ::std::move(from);
  }

  inline SharingLog_VerifyAPKStatus& operator=(const SharingLog_VerifyAPKStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_VerifyAPKStatus& operator=(SharingLog_VerifyAPKStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_VerifyAPKStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_VerifyAPKStatus* internal_default_instance() {
    return reinterpret_cast<const SharingLog_VerifyAPKStatus*>(
               &_SharingLog_VerifyAPKStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SharingLog_VerifyAPKStatus& a, SharingLog_VerifyAPKStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_VerifyAPKStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_VerifyAPKStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_VerifyAPKStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_VerifyAPKStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_VerifyAPKStatus& from);
  void MergeFrom(const SharingLog_VerifyAPKStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_VerifyAPKStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus";
  }
  protected:
  explicit SharingLog_VerifyAPKStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSourceFieldNumber = 2,
  };
  // repeated .location.nearby.proto.sharing.VerifyAPKStatus status = 1 [packed = true];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  ::location::nearby::proto::sharing::VerifyAPKStatus _internal_status(int index) const;
  void _internal_add_status(::location::nearby::proto::sharing::VerifyAPKStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_status();
  public:
  ::location::nearby::proto::sharing::VerifyAPKStatus status(int index) const;
  void set_status(int index, ::location::nearby::proto::sharing::VerifyAPKStatus value);
  void add_status(::location::nearby::proto::sharing::VerifyAPKStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_status();

  // repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  private:
  ::location::nearby::proto::sharing::ApkSource _internal_source(int index) const;
  void _internal_add_source(::location::nearby::proto::sharing::ApkSource value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_source();
  public:
  ::location::nearby::proto::sharing::ApkSource source(int index) const;
  void set_source(int index, ::location::nearby::proto::sharing::ApkSource value);
  void add_source(::location::nearby::proto::sharing::ApkSource value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& source() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_source();

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> status_;
  mutable std::atomic<int> _status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> source_;
  mutable std::atomic<int> _source_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ToggleShowNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification) */ {
 public:
  inline SharingLog_ToggleShowNotification() : SharingLog_ToggleShowNotification(nullptr) {}
  ~SharingLog_ToggleShowNotification() override;
  explicit constexpr SharingLog_ToggleShowNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ToggleShowNotification(const SharingLog_ToggleShowNotification& from);
  SharingLog_ToggleShowNotification(SharingLog_ToggleShowNotification&& from) noexcept
    : SharingLog_ToggleShowNotification() {
    *this = ::std::move(from);
  }

  inline SharingLog_ToggleShowNotification& operator=(const SharingLog_ToggleShowNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ToggleShowNotification& operator=(SharingLog_ToggleShowNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ToggleShowNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ToggleShowNotification* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ToggleShowNotification*>(
               &_SharingLog_ToggleShowNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SharingLog_ToggleShowNotification& a, SharingLog_ToggleShowNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ToggleShowNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ToggleShowNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ToggleShowNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ToggleShowNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ToggleShowNotification& from);
  void MergeFrom(const SharingLog_ToggleShowNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ToggleShowNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification";
  }
  protected:
  explicit SharingLog_ToggleShowNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousStatusFieldNumber = 1,
    kCurrentStatusFieldNumber = 2,
  };
  // optional .location.nearby.proto.sharing.ShowNotificationStatus previous_status = 1;
  bool has_previous_status() const;
  private:
  bool _internal_has_previous_status() const;
  public:
  void clear_previous_status();
  ::location::nearby::proto::sharing::ShowNotificationStatus previous_status() const;
  void set_previous_status(::location::nearby::proto::sharing::ShowNotificationStatus value);
  private:
  ::location::nearby::proto::sharing::ShowNotificationStatus _internal_previous_status() const;
  void _internal_set_previous_status(::location::nearby::proto::sharing::ShowNotificationStatus value);
  public:

  // optional .location.nearby.proto.sharing.ShowNotificationStatus current_status = 2;
  bool has_current_status() const;
  private:
  bool _internal_has_current_status() const;
  public:
  void clear_current_status();
  ::location::nearby::proto::sharing::ShowNotificationStatus current_status() const;
  void set_current_status(::location::nearby::proto::sharing::ShowNotificationStatus value);
  private:
  ::location::nearby::proto::sharing::ShowNotificationStatus _internal_current_status() const;
  void _internal_set_current_status(::location::nearby::proto::sharing::ShowNotificationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int previous_status_;
  int current_status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_DecryptCertificateFailure final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure) */ {
 public:
  inline SharingLog_DecryptCertificateFailure() : SharingLog_DecryptCertificateFailure(nullptr) {}
  ~SharingLog_DecryptCertificateFailure() override;
  explicit constexpr SharingLog_DecryptCertificateFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_DecryptCertificateFailure(const SharingLog_DecryptCertificateFailure& from);
  SharingLog_DecryptCertificateFailure(SharingLog_DecryptCertificateFailure&& from) noexcept
    : SharingLog_DecryptCertificateFailure() {
    *this = ::std::move(from);
  }

  inline SharingLog_DecryptCertificateFailure& operator=(const SharingLog_DecryptCertificateFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_DecryptCertificateFailure& operator=(SharingLog_DecryptCertificateFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_DecryptCertificateFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_DecryptCertificateFailure* internal_default_instance() {
    return reinterpret_cast<const SharingLog_DecryptCertificateFailure*>(
               &_SharingLog_DecryptCertificateFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SharingLog_DecryptCertificateFailure& a, SharingLog_DecryptCertificateFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_DecryptCertificateFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_DecryptCertificateFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_DecryptCertificateFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_DecryptCertificateFailure>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_DecryptCertificateFailure& from);
  void MergeFrom(const SharingLog_DecryptCertificateFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_DecryptCertificateFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure";
  }
  protected:
  explicit SharingLog_DecryptCertificateFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.DecryptCertificateFailureStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::location::nearby::proto::sharing::DecryptCertificateFailureStatus status() const;
  void set_status(::location::nearby::proto::sharing::DecryptCertificateFailureStatus value);
  private:
  ::location::nearby::proto::sharing::DecryptCertificateFailureStatus _internal_status() const;
  void _internal_set_status(::location::nearby::proto::sharing::DecryptCertificateFailureStatus value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ShowAllowPermissionAutoAccess final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess) */ {
 public:
  inline SharingLog_ShowAllowPermissionAutoAccess() : SharingLog_ShowAllowPermissionAutoAccess(nullptr) {}
  ~SharingLog_ShowAllowPermissionAutoAccess() override;
  explicit constexpr SharingLog_ShowAllowPermissionAutoAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ShowAllowPermissionAutoAccess(const SharingLog_ShowAllowPermissionAutoAccess& from);
  SharingLog_ShowAllowPermissionAutoAccess(SharingLog_ShowAllowPermissionAutoAccess&& from) noexcept
    : SharingLog_ShowAllowPermissionAutoAccess() {
    *this = ::std::move(from);
  }

  inline SharingLog_ShowAllowPermissionAutoAccess& operator=(const SharingLog_ShowAllowPermissionAutoAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ShowAllowPermissionAutoAccess& operator=(SharingLog_ShowAllowPermissionAutoAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ShowAllowPermissionAutoAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ShowAllowPermissionAutoAccess* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ShowAllowPermissionAutoAccess*>(
               &_SharingLog_ShowAllowPermissionAutoAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SharingLog_ShowAllowPermissionAutoAccess& a, SharingLog_ShowAllowPermissionAutoAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ShowAllowPermissionAutoAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ShowAllowPermissionAutoAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ShowAllowPermissionAutoAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ShowAllowPermissionAutoAccess>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ShowAllowPermissionAutoAccess& from);
  void MergeFrom(const SharingLog_ShowAllowPermissionAutoAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ShowAllowPermissionAutoAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess";
  }
  protected:
  explicit SharingLog_ShowAllowPermissionAutoAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityNameFieldNumber = 1,
    kAllowedAutoAccessFieldNumber = 2,
    kIsWifiMissingFieldNumber = 3,
    kIsBtMissingFieldNumber = 4,
  };
  // optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
  bool has_activity_name() const;
  private:
  bool _internal_has_activity_name() const;
  public:
  void clear_activity_name();
  ::location::nearby::proto::sharing::ActivityName activity_name() const;
  void set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  private:
  ::location::nearby::proto::sharing::ActivityName _internal_activity_name() const;
  void _internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value);
  public:

  // optional bool allowed_auto_access = 2;
  bool has_allowed_auto_access() const;
  private:
  bool _internal_has_allowed_auto_access() const;
  public:
  void clear_allowed_auto_access();
  bool allowed_auto_access() const;
  void set_allowed_auto_access(bool value);
  private:
  bool _internal_allowed_auto_access() const;
  void _internal_set_allowed_auto_access(bool value);
  public:

  // optional bool is_wifi_missing = 3;
  bool has_is_wifi_missing() const;
  private:
  bool _internal_has_is_wifi_missing() const;
  public:
  void clear_is_wifi_missing();
  bool is_wifi_missing() const;
  void set_is_wifi_missing(bool value);
  private:
  bool _internal_is_wifi_missing() const;
  void _internal_set_is_wifi_missing(bool value);
  public:

  // optional bool is_bt_missing = 4;
  bool has_is_bt_missing() const;
  private:
  bool _internal_has_is_bt_missing() const;
  public:
  void clear_is_bt_missing();
  bool is_bt_missing() const;
  void set_is_bt_missing(bool value);
  private:
  bool _internal_is_bt_missing() const;
  void _internal_set_is_bt_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int activity_name_;
  bool allowed_auto_access_;
  bool is_wifi_missing_;
  bool is_bt_missing_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TapQrCode final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TapQrCode) */ {
 public:
  inline SharingLog_TapQrCode() : SharingLog_TapQrCode(nullptr) {}
  ~SharingLog_TapQrCode() override;
  explicit constexpr SharingLog_TapQrCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TapQrCode(const SharingLog_TapQrCode& from);
  SharingLog_TapQrCode(SharingLog_TapQrCode&& from) noexcept
    : SharingLog_TapQrCode() {
    *this = ::std::move(from);
  }

  inline SharingLog_TapQrCode& operator=(const SharingLog_TapQrCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TapQrCode& operator=(SharingLog_TapQrCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TapQrCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TapQrCode* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TapQrCode*>(
               &_SharingLog_TapQrCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SharingLog_TapQrCode& a, SharingLog_TapQrCode& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TapQrCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TapQrCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TapQrCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TapQrCode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TapQrCode& from);
  void MergeFrom(const SharingLog_TapQrCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TapQrCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TapQrCode";
  }
  protected:
  explicit SharingLog_TapQrCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TapQrCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_QrCodeLinkShown final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown) */ {
 public:
  inline SharingLog_QrCodeLinkShown() : SharingLog_QrCodeLinkShown(nullptr) {}
  ~SharingLog_QrCodeLinkShown() override;
  explicit constexpr SharingLog_QrCodeLinkShown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_QrCodeLinkShown(const SharingLog_QrCodeLinkShown& from);
  SharingLog_QrCodeLinkShown(SharingLog_QrCodeLinkShown&& from) noexcept
    : SharingLog_QrCodeLinkShown() {
    *this = ::std::move(from);
  }

  inline SharingLog_QrCodeLinkShown& operator=(const SharingLog_QrCodeLinkShown& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_QrCodeLinkShown& operator=(SharingLog_QrCodeLinkShown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_QrCodeLinkShown& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_QrCodeLinkShown* internal_default_instance() {
    return reinterpret_cast<const SharingLog_QrCodeLinkShown*>(
               &_SharingLog_QrCodeLinkShown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SharingLog_QrCodeLinkShown& a, SharingLog_QrCodeLinkShown& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_QrCodeLinkShown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_QrCodeLinkShown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_QrCodeLinkShown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_QrCodeLinkShown>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_QrCodeLinkShown& from);
  void MergeFrom(const SharingLog_QrCodeLinkShown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_QrCodeLinkShown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown";
  }
  protected:
  explicit SharingLog_QrCodeLinkShown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_FastInitDiscoverDevice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice) */ {
 public:
  inline SharingLog_FastInitDiscoverDevice() : SharingLog_FastInitDiscoverDevice(nullptr) {}
  ~SharingLog_FastInitDiscoverDevice() override;
  explicit constexpr SharingLog_FastInitDiscoverDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_FastInitDiscoverDevice(const SharingLog_FastInitDiscoverDevice& from);
  SharingLog_FastInitDiscoverDevice(SharingLog_FastInitDiscoverDevice&& from) noexcept
    : SharingLog_FastInitDiscoverDevice() {
    *this = ::std::move(from);
  }

  inline SharingLog_FastInitDiscoverDevice& operator=(const SharingLog_FastInitDiscoverDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_FastInitDiscoverDevice& operator=(SharingLog_FastInitDiscoverDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_FastInitDiscoverDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_FastInitDiscoverDevice* internal_default_instance() {
    return reinterpret_cast<const SharingLog_FastInitDiscoverDevice*>(
               &_SharingLog_FastInitDiscoverDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SharingLog_FastInitDiscoverDevice& a, SharingLog_FastInitDiscoverDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_FastInitDiscoverDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_FastInitDiscoverDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_FastInitDiscoverDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_FastInitDiscoverDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_FastInitDiscoverDevice& from);
  void MergeFrom(const SharingLog_FastInitDiscoverDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_FastInitDiscoverDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice";
  }
  protected:
  explicit SharingLog_FastInitDiscoverDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFastInitTypeFieldNumber = 2,
    kFastInitStateFieldNumber = 3,
  };
  // optional .location.nearby.proto.sharing.FastInitType fast_init_type = 2;
  bool has_fast_init_type() const;
  private:
  bool _internal_has_fast_init_type() const;
  public:
  void clear_fast_init_type();
  ::location::nearby::proto::sharing::FastInitType fast_init_type() const;
  void set_fast_init_type(::location::nearby::proto::sharing::FastInitType value);
  private:
  ::location::nearby::proto::sharing::FastInitType _internal_fast_init_type() const;
  void _internal_set_fast_init_type(::location::nearby::proto::sharing::FastInitType value);
  public:

  // optional .location.nearby.proto.sharing.FastInitState fast_init_state = 3;
  bool has_fast_init_state() const;
  private:
  bool _internal_has_fast_init_state() const;
  public:
  void clear_fast_init_state();
  ::location::nearby::proto::sharing::FastInitState fast_init_state() const;
  void set_fast_init_state(::location::nearby::proto::sharing::FastInitState value);
  private:
  ::location::nearby::proto::sharing::FastInitState _internal_fast_init_state() const;
  void _internal_set_fast_init_state(::location::nearby::proto::sharing::FastInitState value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int fast_init_type_;
  int fast_init_state_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_ShareTargetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo) */ {
 public:
  inline SharingLog_ShareTargetInfo() : SharingLog_ShareTargetInfo(nullptr) {}
  ~SharingLog_ShareTargetInfo() override;
  explicit constexpr SharingLog_ShareTargetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_ShareTargetInfo(const SharingLog_ShareTargetInfo& from);
  SharingLog_ShareTargetInfo(SharingLog_ShareTargetInfo&& from) noexcept
    : SharingLog_ShareTargetInfo() {
    *this = ::std::move(from);
  }

  inline SharingLog_ShareTargetInfo& operator=(const SharingLog_ShareTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_ShareTargetInfo& operator=(SharingLog_ShareTargetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_ShareTargetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_ShareTargetInfo* internal_default_instance() {
    return reinterpret_cast<const SharingLog_ShareTargetInfo*>(
               &_SharingLog_ShareTargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SharingLog_ShareTargetInfo& a, SharingLog_ShareTargetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_ShareTargetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_ShareTargetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_ShareTargetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_ShareTargetInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_ShareTargetInfo& from);
  void MergeFrom(const SharingLog_ShareTargetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_ShareTargetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo";
  }
  protected:
  explicit SharingLog_ShareTargetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypeFieldNumber = 1,
    kOsTypeFieldNumber = 2,
    kDeviceRelationshipFieldNumber = 3,
  };
  // optional .location.nearby.proto.sharing.DeviceType device_type = 1;
  bool has_device_type() const;
  private:
  bool _internal_has_device_type() const;
  public:
  void clear_device_type();
  ::location::nearby::proto::sharing::DeviceType device_type() const;
  void set_device_type(::location::nearby::proto::sharing::DeviceType value);
  private:
  ::location::nearby::proto::sharing::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::location::nearby::proto::sharing::DeviceType value);
  public:

  // optional .location.nearby.proto.sharing.OSType os_type = 2;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  ::location::nearby::proto::sharing::OSType os_type() const;
  void set_os_type(::location::nearby::proto::sharing::OSType value);
  private:
  ::location::nearby::proto::sharing::OSType _internal_os_type() const;
  void _internal_set_os_type(::location::nearby::proto::sharing::OSType value);
  public:

  // optional .location.nearby.proto.sharing.DeviceRelationship device_relationship = 3;
  bool has_device_relationship() const;
  private:
  bool _internal_has_device_relationship() const;
  public:
  void clear_device_relationship();
  ::location::nearby::proto::sharing::DeviceRelationship device_relationship() const;
  void set_device_relationship(::location::nearby::proto::sharing::DeviceRelationship value);
  private:
  ::location::nearby::proto::sharing::DeviceRelationship _internal_device_relationship() const;
  void _internal_set_device_relationship(::location::nearby::proto::sharing::DeviceRelationship value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int device_type_;
  int os_type_;
  int device_relationship_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AttachmentsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo) */ {
 public:
  inline SharingLog_AttachmentsInfo() : SharingLog_AttachmentsInfo(nullptr) {}
  ~SharingLog_AttachmentsInfo() override;
  explicit constexpr SharingLog_AttachmentsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AttachmentsInfo(const SharingLog_AttachmentsInfo& from);
  SharingLog_AttachmentsInfo(SharingLog_AttachmentsInfo&& from) noexcept
    : SharingLog_AttachmentsInfo() {
    *this = ::std::move(from);
  }

  inline SharingLog_AttachmentsInfo& operator=(const SharingLog_AttachmentsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AttachmentsInfo& operator=(SharingLog_AttachmentsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AttachmentsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AttachmentsInfo* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AttachmentsInfo*>(
               &_SharingLog_AttachmentsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SharingLog_AttachmentsInfo& a, SharingLog_AttachmentsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AttachmentsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AttachmentsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AttachmentsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AttachmentsInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AttachmentsInfo& from);
  void MergeFrom(const SharingLog_AttachmentsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AttachmentsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo";
  }
  protected:
  explicit SharingLog_AttachmentsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextAttachmentFieldNumber = 1,
    kFileAttachmentFieldNumber = 2,
    kWifiCredentialsAttachmentFieldNumber = 4,
    kAppAttachmentFieldNumber = 5,
    kStreamAttachmentFieldNumber = 6,
    kRequiredAppFieldNumber = 3,
  };
  // repeated .nearby.sharing.analytics.proto.SharingLog.TextAttachment text_attachment = 1;
  int text_attachment_size() const;
  private:
  int _internal_text_attachment_size() const;
  public:
  void clear_text_attachment();
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* mutable_text_attachment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >*
      mutable_text_attachment();
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TextAttachment& _internal_text_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* _internal_add_text_attachment();
  public:
  const ::nearby::sharing::analytics::proto::SharingLog_TextAttachment& text_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* add_text_attachment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >&
      text_attachment() const;

  // repeated .nearby.sharing.analytics.proto.SharingLog.FileAttachment file_attachment = 2;
  int file_attachment_size() const;
  private:
  int _internal_file_attachment_size() const;
  public:
  void clear_file_attachment();
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* mutable_file_attachment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >*
      mutable_file_attachment();
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_FileAttachment& _internal_file_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* _internal_add_file_attachment();
  public:
  const ::nearby::sharing::analytics::proto::SharingLog_FileAttachment& file_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* add_file_attachment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >&
      file_attachment() const;

  // repeated .nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment wifi_credentials_attachment = 4;
  int wifi_credentials_attachment_size() const;
  private:
  int _internal_wifi_credentials_attachment_size() const;
  public:
  void clear_wifi_credentials_attachment();
  ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* mutable_wifi_credentials_attachment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >*
      mutable_wifi_credentials_attachment();
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment& _internal_wifi_credentials_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* _internal_add_wifi_credentials_attachment();
  public:
  const ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment& wifi_credentials_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* add_wifi_credentials_attachment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >&
      wifi_credentials_attachment() const;

  // repeated .nearby.sharing.analytics.proto.SharingLog.AppAttachment app_attachment = 5;
  int app_attachment_size() const;
  private:
  int _internal_app_attachment_size() const;
  public:
  void clear_app_attachment();
  ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* mutable_app_attachment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >*
      mutable_app_attachment();
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AppAttachment& _internal_app_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* _internal_add_app_attachment();
  public:
  const ::nearby::sharing::analytics::proto::SharingLog_AppAttachment& app_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* add_app_attachment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >&
      app_attachment() const;

  // repeated .nearby.sharing.analytics.proto.SharingLog.StreamAttachment stream_attachment = 6;
  int stream_attachment_size() const;
  private:
  int _internal_stream_attachment_size() const;
  public:
  void clear_stream_attachment();
  ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* mutable_stream_attachment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >*
      mutable_stream_attachment();
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment& _internal_stream_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* _internal_add_stream_attachment();
  public:
  const ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment& stream_attachment(int index) const;
  ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* add_stream_attachment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >&
      stream_attachment() const;

  // optional string required_app = 3;
  bool has_required_app() const;
  private:
  bool _internal_has_required_app() const;
  public:
  void clear_required_app();
  const std::string& required_app() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_required_app(ArgT0&& arg0, ArgT... args);
  std::string* mutable_required_app();
  PROTOBUF_NODISCARD std::string* release_required_app();
  void set_allocated_required_app(std::string* required_app);
  private:
  const std::string& _internal_required_app() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_app(const std::string& value);
  std::string* _internal_mutable_required_app();
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment > text_attachment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment > file_attachment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment > wifi_credentials_attachment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment > app_attachment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment > stream_attachment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_app_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_TextAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.TextAttachment) */ {
 public:
  inline SharingLog_TextAttachment() : SharingLog_TextAttachment(nullptr) {}
  ~SharingLog_TextAttachment() override;
  explicit constexpr SharingLog_TextAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_TextAttachment(const SharingLog_TextAttachment& from);
  SharingLog_TextAttachment(SharingLog_TextAttachment&& from) noexcept
    : SharingLog_TextAttachment() {
    *this = ::std::move(from);
  }

  inline SharingLog_TextAttachment& operator=(const SharingLog_TextAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_TextAttachment& operator=(SharingLog_TextAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_TextAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_TextAttachment* internal_default_instance() {
    return reinterpret_cast<const SharingLog_TextAttachment*>(
               &_SharingLog_TextAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SharingLog_TextAttachment& a, SharingLog_TextAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_TextAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_TextAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_TextAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_TextAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_TextAttachment& from);
  void MergeFrom(const SharingLog_TextAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_TextAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.TextAttachment";
  }
  protected:
  explicit SharingLog_TextAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingLog_TextAttachment_Type Type;
  static constexpr Type UNKNOWN_TEXT_TYPE =
    SharingLog_TextAttachment_Type_UNKNOWN_TEXT_TYPE;
  static constexpr Type URL =
    SharingLog_TextAttachment_Type_URL;
  static constexpr Type ADDRESS =
    SharingLog_TextAttachment_Type_ADDRESS;
  static constexpr Type PHONE_NUMBER =
    SharingLog_TextAttachment_Type_PHONE_NUMBER;
  static inline bool Type_IsValid(int value) {
    return SharingLog_TextAttachment_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SharingLog_TextAttachment_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SharingLog_TextAttachment_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SharingLog_TextAttachment_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SharingLog_TextAttachment_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SharingLog_TextAttachment_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeBytesFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSourceTypeFieldNumber = 4,
    kBatchIdFieldNumber = 3,
  };
  // optional int64 size_bytes = 2;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.TextAttachment.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type type() const;
  void set_type(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type value);
  private:
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type _internal_type() const;
  void _internal_set_type(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::location::nearby::proto::sharing::AttachmentSourceType source_type() const;
  void set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  private:
  ::location::nearby::proto::sharing::AttachmentSourceType _internal_source_type() const;
  void _internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  public:

  // optional int64 batch_id = 3;
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  int64_t batch_id() const;
  void set_batch_id(int64_t value);
  private:
  int64_t _internal_batch_id() const;
  void _internal_set_batch_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.TextAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t size_bytes_;
  int type_;
  int source_type_;
  int64_t batch_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_FileAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.FileAttachment) */ {
 public:
  inline SharingLog_FileAttachment() : SharingLog_FileAttachment(nullptr) {}
  ~SharingLog_FileAttachment() override;
  explicit constexpr SharingLog_FileAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_FileAttachment(const SharingLog_FileAttachment& from);
  SharingLog_FileAttachment(SharingLog_FileAttachment&& from) noexcept
    : SharingLog_FileAttachment() {
    *this = ::std::move(from);
  }

  inline SharingLog_FileAttachment& operator=(const SharingLog_FileAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_FileAttachment& operator=(SharingLog_FileAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_FileAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_FileAttachment* internal_default_instance() {
    return reinterpret_cast<const SharingLog_FileAttachment*>(
               &_SharingLog_FileAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SharingLog_FileAttachment& a, SharingLog_FileAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_FileAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_FileAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_FileAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_FileAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_FileAttachment& from);
  void MergeFrom(const SharingLog_FileAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_FileAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.FileAttachment";
  }
  protected:
  explicit SharingLog_FileAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingLog_FileAttachment_Type Type;
  static constexpr Type UNKNOWN_FILE_TYPE =
    SharingLog_FileAttachment_Type_UNKNOWN_FILE_TYPE;
  static constexpr Type IMAGE =
    SharingLog_FileAttachment_Type_IMAGE;
  static constexpr Type VIDEO =
    SharingLog_FileAttachment_Type_VIDEO;
  static constexpr Type ANDROID_APP =
    SharingLog_FileAttachment_Type_ANDROID_APP;
  static constexpr Type AUDIO =
    SharingLog_FileAttachment_Type_AUDIO;
  static constexpr Type DOCUMENT =
    SharingLog_FileAttachment_Type_DOCUMENT;
  static inline bool Type_IsValid(int value) {
    return SharingLog_FileAttachment_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SharingLog_FileAttachment_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SharingLog_FileAttachment_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SharingLog_FileAttachment_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SharingLog_FileAttachment_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SharingLog_FileAttachment_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeBytesFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSourceTypeFieldNumber = 6,
    kOffsetBytesFieldNumber = 4,
    kBatchIdFieldNumber = 5,
  };
  // optional int64 size_bytes = 2;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.FileAttachment.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type type() const;
  void set_type(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type value);
  private:
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type _internal_type() const;
  void _internal_set_type(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 6;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::location::nearby::proto::sharing::AttachmentSourceType source_type() const;
  void set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  private:
  ::location::nearby::proto::sharing::AttachmentSourceType _internal_source_type() const;
  void _internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  public:

  // optional int64 offset_bytes = 4;
  bool has_offset_bytes() const;
  private:
  bool _internal_has_offset_bytes() const;
  public:
  void clear_offset_bytes();
  int64_t offset_bytes() const;
  void set_offset_bytes(int64_t value);
  private:
  int64_t _internal_offset_bytes() const;
  void _internal_set_offset_bytes(int64_t value);
  public:

  // optional int64 batch_id = 5;
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  int64_t batch_id() const;
  void set_batch_id(int64_t value);
  private:
  int64_t _internal_batch_id() const;
  void _internal_set_batch_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.FileAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t size_bytes_;
  int type_;
  int source_type_;
  int64_t offset_bytes_;
  int64_t batch_id_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_WifiCredentialsAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment) */ {
 public:
  inline SharingLog_WifiCredentialsAttachment() : SharingLog_WifiCredentialsAttachment(nullptr) {}
  ~SharingLog_WifiCredentialsAttachment() override;
  explicit constexpr SharingLog_WifiCredentialsAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_WifiCredentialsAttachment(const SharingLog_WifiCredentialsAttachment& from);
  SharingLog_WifiCredentialsAttachment(SharingLog_WifiCredentialsAttachment&& from) noexcept
    : SharingLog_WifiCredentialsAttachment() {
    *this = ::std::move(from);
  }

  inline SharingLog_WifiCredentialsAttachment& operator=(const SharingLog_WifiCredentialsAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_WifiCredentialsAttachment& operator=(SharingLog_WifiCredentialsAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_WifiCredentialsAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_WifiCredentialsAttachment* internal_default_instance() {
    return reinterpret_cast<const SharingLog_WifiCredentialsAttachment*>(
               &_SharingLog_WifiCredentialsAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SharingLog_WifiCredentialsAttachment& a, SharingLog_WifiCredentialsAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_WifiCredentialsAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_WifiCredentialsAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_WifiCredentialsAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_WifiCredentialsAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_WifiCredentialsAttachment& from);
  void MergeFrom(const SharingLog_WifiCredentialsAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_WifiCredentialsAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment";
  }
  protected:
  explicit SharingLog_WifiCredentialsAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 2,
    kSecurityTypeFieldNumber = 1,
    kSourceTypeFieldNumber = 3,
  };
  // optional int64 batch_id = 2;
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  int64_t batch_id() const;
  void set_batch_id(int64_t value);
  private:
  int64_t _internal_batch_id() const;
  void _internal_set_batch_id(int64_t value);
  public:

  // optional int32 security_type = 1;
  bool has_security_type() const;
  private:
  bool _internal_has_security_type() const;
  public:
  void clear_security_type();
  int32_t security_type() const;
  void set_security_type(int32_t value);
  private:
  int32_t _internal_security_type() const;
  void _internal_set_security_type(int32_t value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::location::nearby::proto::sharing::AttachmentSourceType source_type() const;
  void set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  private:
  ::location::nearby::proto::sharing::AttachmentSourceType _internal_source_type() const;
  void _internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t batch_id_;
  int32_t security_type_;
  int source_type_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AppAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AppAttachment) */ {
 public:
  inline SharingLog_AppAttachment() : SharingLog_AppAttachment(nullptr) {}
  ~SharingLog_AppAttachment() override;
  explicit constexpr SharingLog_AppAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AppAttachment(const SharingLog_AppAttachment& from);
  SharingLog_AppAttachment(SharingLog_AppAttachment&& from) noexcept
    : SharingLog_AppAttachment() {
    *this = ::std::move(from);
  }

  inline SharingLog_AppAttachment& operator=(const SharingLog_AppAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AppAttachment& operator=(SharingLog_AppAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AppAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AppAttachment* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AppAttachment*>(
               &_SharingLog_AppAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SharingLog_AppAttachment& a, SharingLog_AppAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AppAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AppAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AppAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AppAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AppAttachment& from);
  void MergeFrom(const SharingLog_AppAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AppAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AppAttachment";
  }
  protected:
  explicit SharingLog_AppAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kBatchIdFieldNumber = 3,
    kSourceTypeFieldNumber = 4,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  private:
  bool _internal_has_package_name() const;
  public:
  void clear_package_name();
  const std::string& package_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_name();
  PROTOBUF_NODISCARD std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // optional int64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int64 batch_id = 3;
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  int64_t batch_id() const;
  void set_batch_id(int64_t value);
  private:
  int64_t _internal_batch_id() const;
  void _internal_set_batch_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::location::nearby::proto::sharing::AttachmentSourceType source_type() const;
  void set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  private:
  ::location::nearby::proto::sharing::AttachmentSourceType _internal_source_type() const;
  void _internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AppAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  int64_t size_;
  int64_t batch_id_;
  int source_type_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_StreamAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.StreamAttachment) */ {
 public:
  inline SharingLog_StreamAttachment() : SharingLog_StreamAttachment(nullptr) {}
  ~SharingLog_StreamAttachment() override;
  explicit constexpr SharingLog_StreamAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_StreamAttachment(const SharingLog_StreamAttachment& from);
  SharingLog_StreamAttachment(SharingLog_StreamAttachment&& from) noexcept
    : SharingLog_StreamAttachment() {
    *this = ::std::move(from);
  }

  inline SharingLog_StreamAttachment& operator=(const SharingLog_StreamAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_StreamAttachment& operator=(SharingLog_StreamAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_StreamAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_StreamAttachment* internal_default_instance() {
    return reinterpret_cast<const SharingLog_StreamAttachment*>(
               &_SharingLog_StreamAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SharingLog_StreamAttachment& a, SharingLog_StreamAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_StreamAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_StreamAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_StreamAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_StreamAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_StreamAttachment& from);
  void MergeFrom(const SharingLog_StreamAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_StreamAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.StreamAttachment";
  }
  protected:
  explicit SharingLog_StreamAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kBatchIdFieldNumber = 2,
    kSourceTypeFieldNumber = 3,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  private:
  bool _internal_has_package_name() const;
  public:
  void clear_package_name();
  const std::string& package_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_name();
  PROTOBUF_NODISCARD std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // optional int64 batch_id = 2;
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  int64_t batch_id() const;
  void set_batch_id(int64_t value);
  private:
  int64_t _internal_batch_id() const;
  void _internal_set_batch_id(int64_t value);
  public:

  // optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::location::nearby::proto::sharing::AttachmentSourceType source_type() const;
  void set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  private:
  ::location::nearby::proto::sharing::AttachmentSourceType _internal_source_type() const;
  void _internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.StreamAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  int64_t batch_id_;
  int source_type_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_AppCrash final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.AppCrash) */ {
 public:
  inline SharingLog_AppCrash() : SharingLog_AppCrash(nullptr) {}
  ~SharingLog_AppCrash() override;
  explicit constexpr SharingLog_AppCrash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_AppCrash(const SharingLog_AppCrash& from);
  SharingLog_AppCrash(SharingLog_AppCrash&& from) noexcept
    : SharingLog_AppCrash() {
    *this = ::std::move(from);
  }

  inline SharingLog_AppCrash& operator=(const SharingLog_AppCrash& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_AppCrash& operator=(SharingLog_AppCrash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_AppCrash& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_AppCrash* internal_default_instance() {
    return reinterpret_cast<const SharingLog_AppCrash*>(
               &_SharingLog_AppCrash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SharingLog_AppCrash& a, SharingLog_AppCrash& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_AppCrash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_AppCrash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_AppCrash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_AppCrash>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_AppCrash& from);
  void MergeFrom(const SharingLog_AppCrash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_AppCrash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.AppCrash";
  }
  protected:
  explicit SharingLog_AppCrash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrashReasonFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.AppCrashReason crash_reason = 1;
  bool has_crash_reason() const;
  private:
  bool _internal_has_crash_reason() const;
  public:
  void clear_crash_reason();
  ::location::nearby::proto::sharing::AppCrashReason crash_reason() const;
  void set_crash_reason(::location::nearby::proto::sharing::AppCrashReason value);
  private:
  ::location::nearby::proto::sharing::AppCrashReason _internal_crash_reason() const;
  void _internal_set_crash_reason(::location::nearby::proto::sharing::AppCrashReason value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.AppCrash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int crash_reason_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SetupWizard final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SetupWizard) */ {
 public:
  inline SharingLog_SetupWizard() : SharingLog_SetupWizard(nullptr) {}
  ~SharingLog_SetupWizard() override;
  explicit constexpr SharingLog_SetupWizard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SetupWizard(const SharingLog_SetupWizard& from);
  SharingLog_SetupWizard(SharingLog_SetupWizard&& from) noexcept
    : SharingLog_SetupWizard() {
    *this = ::std::move(from);
  }

  inline SharingLog_SetupWizard& operator=(const SharingLog_SetupWizard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SetupWizard& operator=(SharingLog_SetupWizard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SetupWizard& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SetupWizard* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SetupWizard*>(
               &_SharingLog_SetupWizard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SharingLog_SetupWizard& a, SharingLog_SetupWizard& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SetupWizard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SetupWizard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SetupWizard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SetupWizard>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SetupWizard& from);
  void MergeFrom(const SharingLog_SetupWizard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SetupWizard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SetupWizard";
  }
  protected:
  explicit SharingLog_SetupWizard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.Visibility visibility = 1;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::location::nearby::proto::sharing::Visibility visibility() const;
  void set_visibility(::location::nearby::proto::sharing::Visibility value);
  private:
  ::location::nearby::proto::sharing::Visibility _internal_visibility() const;
  void _internal_set_visibility(::location::nearby::proto::sharing::Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SetupWizard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int visibility_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendDesktopNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification) */ {
 public:
  inline SharingLog_SendDesktopNotification() : SharingLog_SendDesktopNotification(nullptr) {}
  ~SharingLog_SendDesktopNotification() override;
  explicit constexpr SharingLog_SendDesktopNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendDesktopNotification(const SharingLog_SendDesktopNotification& from);
  SharingLog_SendDesktopNotification(SharingLog_SendDesktopNotification&& from) noexcept
    : SharingLog_SendDesktopNotification() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendDesktopNotification& operator=(const SharingLog_SendDesktopNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendDesktopNotification& operator=(SharingLog_SendDesktopNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendDesktopNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendDesktopNotification* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendDesktopNotification*>(
               &_SharingLog_SendDesktopNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SharingLog_SendDesktopNotification& a, SharingLog_SendDesktopNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendDesktopNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendDesktopNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendDesktopNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendDesktopNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendDesktopNotification& from);
  void MergeFrom(const SharingLog_SendDesktopNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendDesktopNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification";
  }
  protected:
  explicit SharingLog_SendDesktopNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.DesktopNotification event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::location::nearby::proto::sharing::DesktopNotification event() const;
  void set_event(::location::nearby::proto::sharing::DesktopNotification value);
  private:
  ::location::nearby::proto::sharing::DesktopNotification _internal_event() const;
  void _internal_set_event(::location::nearby::proto::sharing::DesktopNotification value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog_SendDesktopTransferEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent) */ {
 public:
  inline SharingLog_SendDesktopTransferEvent() : SharingLog_SendDesktopTransferEvent(nullptr) {}
  ~SharingLog_SendDesktopTransferEvent() override;
  explicit constexpr SharingLog_SendDesktopTransferEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog_SendDesktopTransferEvent(const SharingLog_SendDesktopTransferEvent& from);
  SharingLog_SendDesktopTransferEvent(SharingLog_SendDesktopTransferEvent&& from) noexcept
    : SharingLog_SendDesktopTransferEvent() {
    *this = ::std::move(from);
  }

  inline SharingLog_SendDesktopTransferEvent& operator=(const SharingLog_SendDesktopTransferEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog_SendDesktopTransferEvent& operator=(SharingLog_SendDesktopTransferEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog_SendDesktopTransferEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog_SendDesktopTransferEvent* internal_default_instance() {
    return reinterpret_cast<const SharingLog_SendDesktopTransferEvent*>(
               &_SharingLog_SendDesktopTransferEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SharingLog_SendDesktopTransferEvent& a, SharingLog_SendDesktopTransferEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog_SendDesktopTransferEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog_SendDesktopTransferEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog_SendDesktopTransferEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog_SendDesktopTransferEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog_SendDesktopTransferEvent& from);
  void MergeFrom(const SharingLog_SendDesktopTransferEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog_SendDesktopTransferEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent";
  }
  protected:
  explicit SharingLog_SendDesktopTransferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // optional .location.nearby.proto.sharing.DesktopTransferEventType event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::location::nearby::proto::sharing::DesktopTransferEventType event() const;
  void set_event(::location::nearby::proto::sharing::DesktopTransferEventType value);
  private:
  ::location::nearby::proto::sharing::DesktopTransferEventType _internal_event() const;
  void _internal_set_event(::location::nearby::proto::sharing::DesktopTransferEventType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// -------------------------------------------------------------------

class SharingLog final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.analytics.proto.SharingLog) */ {
 public:
  inline SharingLog() : SharingLog(nullptr) {}
  ~SharingLog() override;
  explicit constexpr SharingLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingLog(const SharingLog& from);
  SharingLog(SharingLog&& from) noexcept
    : SharingLog() {
    *this = ::std::move(from);
  }

  inline SharingLog& operator=(const SharingLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingLog& operator=(SharingLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingLog* internal_default_instance() {
    return reinterpret_cast<const SharingLog*>(
               &_SharingLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SharingLog& a, SharingLog& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingLog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingLog& from);
  void MergeFrom(const SharingLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.sharing.analytics.proto.SharingLog";
  }
  protected:
  explicit SharingLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingLog_AppInfo AppInfo;
  typedef SharingLog_DeviceSettings DeviceSettings;
  typedef SharingLog_PreferencesUsage PreferencesUsage;
  typedef SharingLog_UnknownEvent UnknownEvent;
  typedef SharingLog_EstablishConnection EstablishConnection;
  typedef SharingLog_AcceptAgreements AcceptAgreements;
  typedef SharingLog_DeclineAgreements DeclineAgreements;
  typedef SharingLog_EnableNearbySharing EnableNearbySharing;
  typedef SharingLog_SetAccount SetAccount;
  typedef SharingLog_SetVisibility SetVisibility;
  typedef SharingLog_SetDataUsage SetDataUsage;
  typedef SharingLog_ScanForShareTargetsStart ScanForShareTargetsStart;
  typedef SharingLog_ScanForShareTargetsEnd ScanForShareTargetsEnd;
  typedef SharingLog_AdvertiseDevicePresenceStart AdvertiseDevicePresenceStart;
  typedef SharingLog_AdvertiseDevicePresenceEnd AdvertiseDevicePresenceEnd;
  typedef SharingLog_SendFastInitialization SendFastInitialization;
  typedef SharingLog_ReceiveFastInitialization ReceiveFastInitialization;
  typedef SharingLog_DismissFastInitialization DismissFastInitialization;
  typedef SharingLog_AutoDismissFastInitialization AutoDismissFastInitialization;
  typedef SharingLog_EventMetadata EventMetadata;
  typedef SharingLog_DiscoverShareTarget DiscoverShareTarget;
  typedef SharingLog_ParsingFailedEndpointId ParsingFailedEndpointId;
  typedef SharingLog_DescribeAttachments DescribeAttachments;
  typedef SharingLog_SendIntroduction SendIntroduction;
  typedef SharingLog_ReceiveIntroduction ReceiveIntroduction;
  typedef SharingLog_RespondToIntroduction RespondToIntroduction;
  typedef SharingLog_SendAttachmentsStart SendAttachmentsStart;
  typedef SharingLog_SendAttachmentsEnd SendAttachmentsEnd;
  typedef SharingLog_ReceiveAttachmentsStart ReceiveAttachmentsStart;
  typedef SharingLog_ReceiveAttachmentsEnd ReceiveAttachmentsEnd;
  typedef SharingLog_CancelConnection CancelConnection;
  typedef SharingLog_CancelSendingAttachments CancelSendingAttachments;
  typedef SharingLog_CancelReceivingAttachments CancelReceivingAttachments;
  typedef SharingLog_ProcessReceivedAttachmentsEnd ProcessReceivedAttachmentsEnd;
  typedef SharingLog_OpenReceivedAttachments OpenReceivedAttachments;
  typedef SharingLog_LaunchSetupActivity LaunchSetupActivity;
  typedef SharingLog_AddContact AddContact;
  typedef SharingLog_RemoveContact RemoveContact;
  typedef SharingLog_FastShareServerResponse FastShareServerResponse;
  typedef SharingLog_SendStart SendStart;
  typedef SharingLog_AcceptFastInitialization AcceptFastInitialization;
  typedef SharingLog_LaunchActivity LaunchActivity;
  typedef SharingLog_DismissPrivacyNotification DismissPrivacyNotification;
  typedef SharingLog_TapPrivacyNotification TapPrivacyNotification;
  typedef SharingLog_TapHelp TapHelp;
  typedef SharingLog_TapFeedback TapFeedback;
  typedef SharingLog_AddQuickSettingsTile AddQuickSettingsTile;
  typedef SharingLog_RemoveQuickSettingsTile RemoveQuickSettingsTile;
  typedef SharingLog_LaunchPhoneConsent LaunchPhoneConsent;
  typedef SharingLog_DisplayPhoneConsent DisplayPhoneConsent;
  typedef SharingLog_TapQuickSettingsTile TapQuickSettingsTile;
  typedef SharingLog_TapQuickSettingsFileShare TapQuickSettingsFileShare;
  typedef SharingLog_DisplayPrivacyNotification DisplayPrivacyNotification;
  typedef SharingLog_DefaultOptIn DefaultOptIn;
  typedef SharingLog_SetDeviceName SetDeviceName;
  typedef SharingLog_RequestSettingPermissions RequestSettingPermissions;
  typedef SharingLog_LaunchConsent LaunchConsent;
  typedef SharingLog_InstallAPKStatus InstallAPKStatus;
  typedef SharingLog_VerifyAPKStatus VerifyAPKStatus;
  typedef SharingLog_ToggleShowNotification ToggleShowNotification;
  typedef SharingLog_DecryptCertificateFailure DecryptCertificateFailure;
  typedef SharingLog_ShowAllowPermissionAutoAccess ShowAllowPermissionAutoAccess;
  typedef SharingLog_TapQrCode TapQrCode;
  typedef SharingLog_QrCodeLinkShown QrCodeLinkShown;
  typedef SharingLog_FastInitDiscoverDevice FastInitDiscoverDevice;
  typedef SharingLog_ShareTargetInfo ShareTargetInfo;
  typedef SharingLog_AttachmentsInfo AttachmentsInfo;
  typedef SharingLog_TextAttachment TextAttachment;
  typedef SharingLog_FileAttachment FileAttachment;
  typedef SharingLog_WifiCredentialsAttachment WifiCredentialsAttachment;
  typedef SharingLog_AppAttachment AppAttachment;
  typedef SharingLog_StreamAttachment StreamAttachment;
  typedef SharingLog_AppCrash AppCrash;
  typedef SharingLog_SetupWizard SetupWizard;
  typedef SharingLog_SendDesktopNotification SendDesktopNotification;
  typedef SharingLog_SendDesktopTransferEvent SendDesktopTransferEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 32,
    kFilesMigrationPhaseFieldNumber = 50,
    kAppVersionFieldNumber = 57,
    kUnknownEventFieldNumber = 2,
    kAcceptAgreementsFieldNumber = 3,
    kEnableNearbySharingFieldNumber = 4,
    kSetVisibilityFieldNumber = 5,
    kDescribeAttachmentsFieldNumber = 6,
    kScanForShareTargetsStartFieldNumber = 7,
    kScanForShareTargetsEndFieldNumber = 8,
    kAdvertiseDevicePresenceStartFieldNumber = 9,
    kAdvertiseDevicePresenceEndFieldNumber = 10,
    kSendInitializationFieldNumber = 11,
    kReceiveInitializationFieldNumber = 12,
    kDiscoverShareTargetFieldNumber = 13,
    kSendIntroductionFieldNumber = 14,
    kReceiveIntroductionFieldNumber = 15,
    kRespondIntroductionFieldNumber = 16,
    kSendAttachmentsStartFieldNumber = 17,
    kSendAttachmentsEndFieldNumber = 18,
    kReceiveAttachmentsStartFieldNumber = 19,
    kReceiveAttachmentsEndFieldNumber = 20,
    kCancelSendingAttachmentsFieldNumber = 21,
    kCancelReceivingAttachmentsFieldNumber = 22,
    kOpenReceivedAttachmentsFieldNumber = 23,
    kLaunchActivityFieldNumber = 24,
    kAddContactFieldNumber = 25,
    kRemoveContactFieldNumber = 26,
    kFastShareServerResponseFieldNumber = 28,
    kSendStartFieldNumber = 29,
    kAcceptFastInitializationFieldNumber = 30,
    kSetDataUsageFieldNumber = 31,
    kDismissFastInitializationFieldNumber = 34,
    kCancelConnectionFieldNumber = 35,
    kDismissPrivacyNotificationFieldNumber = 36,
    kTapPrivacyNotificationFieldNumber = 37,
    kTapHelpFieldNumber = 38,
    kTapFeedbackFieldNumber = 39,
    kAddQuickSettingsTileFieldNumber = 40,
    kRemoveQuickSettingsTileFieldNumber = 41,
    kLaunchPhoneConsentFieldNumber = 42,
    kTapQuickSettingsTileFieldNumber = 43,
    kInstallApkStatusFieldNumber = 44,
    kVerifyApkStatusFieldNumber = 45,
    kLaunchConsentFieldNumber = 46,
    kProcessReceivedAttachmentsEndFieldNumber = 47,
    kToggleShowNotificationFieldNumber = 48,
    kSetDeviceNameFieldNumber = 49,
    kDeclineAgreementsFieldNumber = 51,
    kRequestSettingPermissionsFieldNumber = 52,
    kDeviceSettingsFieldNumber = 53,
    kEstablishConnectionFieldNumber = 54,
    kAutoDismissFastInitializationFieldNumber = 55,
    kEventMetadataFieldNumber = 56,
    kAppCrashFieldNumber = 58,
    kTapQuickSettingsFileShareFieldNumber = 59,
    kAppInfoFieldNumber = 60,
    kDisplayPrivacyNotificationFieldNumber = 61,
    kDisplayPhoneConsentFieldNumber = 62,
    kPreferencesUsageFieldNumber = 63,
    kDefaultOptInFieldNumber = 64,
    kSetupWizardFieldNumber = 65,
    kTapQrCodeFieldNumber = 66,
    kQrCodeLinkShownFieldNumber = 67,
    kParsingFailedEndpointIdFieldNumber = 68,
    kFastInitDiscoverDeviceFieldNumber = 69,
    kSendDesktopNotificationFieldNumber = 70,
    kSendDesktopTransferEventFieldNumber = 72,
    kSetAccountFieldNumber = 73,
    kDecryptCertificateFailureFieldNumber = 74,
    kShowAllowPermissionAutoAccessFieldNumber = 75,
    kEventTypeFieldNumber = 1,
    kLogSourceFieldNumber = 27,
    kEventCategoryFieldNumber = 33,
  };
  // optional string version = 32;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string files_migration_phase = 50;
  bool has_files_migration_phase() const;
  private:
  bool _internal_has_files_migration_phase() const;
  public:
  void clear_files_migration_phase();
  const std::string& files_migration_phase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_files_migration_phase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_files_migration_phase();
  PROTOBUF_NODISCARD std::string* release_files_migration_phase();
  void set_allocated_files_migration_phase(std::string* files_migration_phase);
  private:
  const std::string& _internal_files_migration_phase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_files_migration_phase(const std::string& value);
  std::string* _internal_mutable_files_migration_phase();
  public:

  // optional string app_version = 57 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_app_version() const;
  private:
  bool _internal_has_app_version() const;
  public:
  PROTOBUF_DEPRECATED void clear_app_version();
  PROTOBUF_DEPRECATED const std::string& app_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_app_version(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_app_version();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_app_version();
  PROTOBUF_DEPRECATED void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // optional .nearby.sharing.analytics.proto.SharingLog.UnknownEvent unknown_event = 2;
  bool has_unknown_event() const;
  private:
  bool _internal_has_unknown_event() const;
  public:
  void clear_unknown_event();
  const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent& unknown_event() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* release_unknown_event();
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* mutable_unknown_event();
  void set_allocated_unknown_event(::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unknown_event);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent& _internal_unknown_event() const;
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* _internal_mutable_unknown_event();
  public:
  void unsafe_arena_set_allocated_unknown_event(
      ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unknown_event);
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unsafe_arena_release_unknown_event();

  // optional .nearby.sharing.analytics.proto.SharingLog.AcceptAgreements accept_agreements = 3;
  bool has_accept_agreements() const;
  private:
  bool _internal_has_accept_agreements() const;
  public:
  void clear_accept_agreements();
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements& accept_agreements() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* release_accept_agreements();
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* mutable_accept_agreements();
  void set_allocated_accept_agreements(::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* accept_agreements);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements& _internal_accept_agreements() const;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* _internal_mutable_accept_agreements();
  public:
  void unsafe_arena_set_allocated_accept_agreements(
      ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* accept_agreements);
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* unsafe_arena_release_accept_agreements();

  // optional .nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing enable_nearby_sharing = 4;
  bool has_enable_nearby_sharing() const;
  private:
  bool _internal_has_enable_nearby_sharing() const;
  public:
  void clear_enable_nearby_sharing();
  const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing& enable_nearby_sharing() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* release_enable_nearby_sharing();
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* mutable_enable_nearby_sharing();
  void set_allocated_enable_nearby_sharing(::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* enable_nearby_sharing);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing& _internal_enable_nearby_sharing() const;
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* _internal_mutable_enable_nearby_sharing();
  public:
  void unsafe_arena_set_allocated_enable_nearby_sharing(
      ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* enable_nearby_sharing);
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* unsafe_arena_release_enable_nearby_sharing();

  // optional .nearby.sharing.analytics.proto.SharingLog.SetVisibility set_visibility = 5;
  bool has_set_visibility() const;
  private:
  bool _internal_has_set_visibility() const;
  public:
  void clear_set_visibility();
  const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility& set_visibility() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* release_set_visibility();
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* mutable_set_visibility();
  void set_allocated_set_visibility(::nearby::sharing::analytics::proto::SharingLog_SetVisibility* set_visibility);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility& _internal_set_visibility() const;
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* _internal_mutable_set_visibility();
  public:
  void unsafe_arena_set_allocated_set_visibility(
      ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* set_visibility);
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* unsafe_arena_release_set_visibility();

  // optional .nearby.sharing.analytics.proto.SharingLog.DescribeAttachments describe_attachments = 6;
  bool has_describe_attachments() const;
  private:
  bool _internal_has_describe_attachments() const;
  public:
  void clear_describe_attachments();
  const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments& describe_attachments() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* release_describe_attachments();
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* mutable_describe_attachments();
  void set_allocated_describe_attachments(::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* describe_attachments);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments& _internal_describe_attachments() const;
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* _internal_mutable_describe_attachments();
  public:
  void unsafe_arena_set_allocated_describe_attachments(
      ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* describe_attachments);
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* unsafe_arena_release_describe_attachments();

  // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart scan_for_share_targets_start = 7;
  bool has_scan_for_share_targets_start() const;
  private:
  bool _internal_has_scan_for_share_targets_start() const;
  public:
  void clear_scan_for_share_targets_start();
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart& scan_for_share_targets_start() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* release_scan_for_share_targets_start();
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* mutable_scan_for_share_targets_start();
  void set_allocated_scan_for_share_targets_start(::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* scan_for_share_targets_start);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart& _internal_scan_for_share_targets_start() const;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* _internal_mutable_scan_for_share_targets_start();
  public:
  void unsafe_arena_set_allocated_scan_for_share_targets_start(
      ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* scan_for_share_targets_start);
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* unsafe_arena_release_scan_for_share_targets_start();

  // optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd scan_for_share_targets_end = 8;
  bool has_scan_for_share_targets_end() const;
  private:
  bool _internal_has_scan_for_share_targets_end() const;
  public:
  void clear_scan_for_share_targets_end();
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd& scan_for_share_targets_end() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* release_scan_for_share_targets_end();
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* mutable_scan_for_share_targets_end();
  void set_allocated_scan_for_share_targets_end(::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* scan_for_share_targets_end);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd& _internal_scan_for_share_targets_end() const;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* _internal_mutable_scan_for_share_targets_end();
  public:
  void unsafe_arena_set_allocated_scan_for_share_targets_end(
      ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* scan_for_share_targets_end);
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* unsafe_arena_release_scan_for_share_targets_end();

  // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart advertise_device_presence_start = 9;
  bool has_advertise_device_presence_start() const;
  private:
  bool _internal_has_advertise_device_presence_start() const;
  public:
  void clear_advertise_device_presence_start();
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart& advertise_device_presence_start() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* release_advertise_device_presence_start();
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* mutable_advertise_device_presence_start();
  void set_allocated_advertise_device_presence_start(::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* advertise_device_presence_start);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart& _internal_advertise_device_presence_start() const;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* _internal_mutable_advertise_device_presence_start();
  public:
  void unsafe_arena_set_allocated_advertise_device_presence_start(
      ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* advertise_device_presence_start);
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* unsafe_arena_release_advertise_device_presence_start();

  // optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd advertise_device_presence_end = 10;
  bool has_advertise_device_presence_end() const;
  private:
  bool _internal_has_advertise_device_presence_end() const;
  public:
  void clear_advertise_device_presence_end();
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd& advertise_device_presence_end() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* release_advertise_device_presence_end();
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* mutable_advertise_device_presence_end();
  void set_allocated_advertise_device_presence_end(::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* advertise_device_presence_end);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd& _internal_advertise_device_presence_end() const;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* _internal_mutable_advertise_device_presence_end();
  public:
  void unsafe_arena_set_allocated_advertise_device_presence_end(
      ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* advertise_device_presence_end);
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* unsafe_arena_release_advertise_device_presence_end();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendFastInitialization send_initialization = 11;
  bool has_send_initialization() const;
  private:
  bool _internal_has_send_initialization() const;
  public:
  void clear_send_initialization();
  const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization& send_initialization() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* release_send_initialization();
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* mutable_send_initialization();
  void set_allocated_send_initialization(::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* send_initialization);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization& _internal_send_initialization() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* _internal_mutable_send_initialization();
  public:
  void unsafe_arena_set_allocated_send_initialization(
      ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* send_initialization);
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* unsafe_arena_release_send_initialization();

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization receive_initialization = 12;
  bool has_receive_initialization() const;
  private:
  bool _internal_has_receive_initialization() const;
  public:
  void clear_receive_initialization();
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization& receive_initialization() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* release_receive_initialization();
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* mutable_receive_initialization();
  void set_allocated_receive_initialization(::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* receive_initialization);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization& _internal_receive_initialization() const;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* _internal_mutable_receive_initialization();
  public:
  void unsafe_arena_set_allocated_receive_initialization(
      ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* receive_initialization);
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* unsafe_arena_release_receive_initialization();

  // optional .nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget discover_share_target = 13;
  bool has_discover_share_target() const;
  private:
  bool _internal_has_discover_share_target() const;
  public:
  void clear_discover_share_target();
  const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget& discover_share_target() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* release_discover_share_target();
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* mutable_discover_share_target();
  void set_allocated_discover_share_target(::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* discover_share_target);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget& _internal_discover_share_target() const;
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* _internal_mutable_discover_share_target();
  public:
  void unsafe_arena_set_allocated_discover_share_target(
      ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* discover_share_target);
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* unsafe_arena_release_discover_share_target();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendIntroduction send_introduction = 14;
  bool has_send_introduction() const;
  private:
  bool _internal_has_send_introduction() const;
  public:
  void clear_send_introduction();
  const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction& send_introduction() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* release_send_introduction();
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* mutable_send_introduction();
  void set_allocated_send_introduction(::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* send_introduction);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction& _internal_send_introduction() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* _internal_mutable_send_introduction();
  public:
  void unsafe_arena_set_allocated_send_introduction(
      ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* send_introduction);
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* unsafe_arena_release_send_introduction();

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction receive_introduction = 15;
  bool has_receive_introduction() const;
  private:
  bool _internal_has_receive_introduction() const;
  public:
  void clear_receive_introduction();
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction& receive_introduction() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* release_receive_introduction();
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* mutable_receive_introduction();
  void set_allocated_receive_introduction(::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* receive_introduction);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction& _internal_receive_introduction() const;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* _internal_mutable_receive_introduction();
  public:
  void unsafe_arena_set_allocated_receive_introduction(
      ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* receive_introduction);
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* unsafe_arena_release_receive_introduction();

  // optional .nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction respond_introduction = 16;
  bool has_respond_introduction() const;
  private:
  bool _internal_has_respond_introduction() const;
  public:
  void clear_respond_introduction();
  const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction& respond_introduction() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* release_respond_introduction();
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* mutable_respond_introduction();
  void set_allocated_respond_introduction(::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* respond_introduction);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction& _internal_respond_introduction() const;
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* _internal_mutable_respond_introduction();
  public:
  void unsafe_arena_set_allocated_respond_introduction(
      ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* respond_introduction);
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* unsafe_arena_release_respond_introduction();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart send_attachments_start = 17;
  bool has_send_attachments_start() const;
  private:
  bool _internal_has_send_attachments_start() const;
  public:
  void clear_send_attachments_start();
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart& send_attachments_start() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* release_send_attachments_start();
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* mutable_send_attachments_start();
  void set_allocated_send_attachments_start(::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* send_attachments_start);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart& _internal_send_attachments_start() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* _internal_mutable_send_attachments_start();
  public:
  void unsafe_arena_set_allocated_send_attachments_start(
      ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* send_attachments_start);
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* unsafe_arena_release_send_attachments_start();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd send_attachments_end = 18;
  bool has_send_attachments_end() const;
  private:
  bool _internal_has_send_attachments_end() const;
  public:
  void clear_send_attachments_end();
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd& send_attachments_end() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* release_send_attachments_end();
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* mutable_send_attachments_end();
  void set_allocated_send_attachments_end(::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* send_attachments_end);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd& _internal_send_attachments_end() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* _internal_mutable_send_attachments_end();
  public:
  void unsafe_arena_set_allocated_send_attachments_end(
      ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* send_attachments_end);
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* unsafe_arena_release_send_attachments_end();

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart receive_attachments_start = 19;
  bool has_receive_attachments_start() const;
  private:
  bool _internal_has_receive_attachments_start() const;
  public:
  void clear_receive_attachments_start();
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart& receive_attachments_start() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* release_receive_attachments_start();
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* mutable_receive_attachments_start();
  void set_allocated_receive_attachments_start(::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* receive_attachments_start);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart& _internal_receive_attachments_start() const;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* _internal_mutable_receive_attachments_start();
  public:
  void unsafe_arena_set_allocated_receive_attachments_start(
      ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* receive_attachments_start);
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* unsafe_arena_release_receive_attachments_start();

  // optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd receive_attachments_end = 20;
  bool has_receive_attachments_end() const;
  private:
  bool _internal_has_receive_attachments_end() const;
  public:
  void clear_receive_attachments_end();
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd& receive_attachments_end() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* release_receive_attachments_end();
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* mutable_receive_attachments_end();
  void set_allocated_receive_attachments_end(::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* receive_attachments_end);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd& _internal_receive_attachments_end() const;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* _internal_mutable_receive_attachments_end();
  public:
  void unsafe_arena_set_allocated_receive_attachments_end(
      ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* receive_attachments_end);
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* unsafe_arena_release_receive_attachments_end();

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments cancel_sending_attachments = 21;
  bool has_cancel_sending_attachments() const;
  private:
  bool _internal_has_cancel_sending_attachments() const;
  public:
  void clear_cancel_sending_attachments();
  const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments& cancel_sending_attachments() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* release_cancel_sending_attachments();
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* mutable_cancel_sending_attachments();
  void set_allocated_cancel_sending_attachments(::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* cancel_sending_attachments);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments& _internal_cancel_sending_attachments() const;
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* _internal_mutable_cancel_sending_attachments();
  public:
  void unsafe_arena_set_allocated_cancel_sending_attachments(
      ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* cancel_sending_attachments);
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* unsafe_arena_release_cancel_sending_attachments();

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments cancel_receiving_attachments = 22;
  bool has_cancel_receiving_attachments() const;
  private:
  bool _internal_has_cancel_receiving_attachments() const;
  public:
  void clear_cancel_receiving_attachments();
  const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments& cancel_receiving_attachments() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* release_cancel_receiving_attachments();
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* mutable_cancel_receiving_attachments();
  void set_allocated_cancel_receiving_attachments(::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* cancel_receiving_attachments);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments& _internal_cancel_receiving_attachments() const;
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* _internal_mutable_cancel_receiving_attachments();
  public:
  void unsafe_arena_set_allocated_cancel_receiving_attachments(
      ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* cancel_receiving_attachments);
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* unsafe_arena_release_cancel_receiving_attachments();

  // optional .nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments open_received_attachments = 23;
  bool has_open_received_attachments() const;
  private:
  bool _internal_has_open_received_attachments() const;
  public:
  void clear_open_received_attachments();
  const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments& open_received_attachments() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* release_open_received_attachments();
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* mutable_open_received_attachments();
  void set_allocated_open_received_attachments(::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* open_received_attachments);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments& _internal_open_received_attachments() const;
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* _internal_mutable_open_received_attachments();
  public:
  void unsafe_arena_set_allocated_open_received_attachments(
      ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* open_received_attachments);
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* unsafe_arena_release_open_received_attachments();

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchActivity launch_activity = 24;
  bool has_launch_activity() const;
  private:
  bool _internal_has_launch_activity() const;
  public:
  void clear_launch_activity();
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity& launch_activity() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* release_launch_activity();
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* mutable_launch_activity();
  void set_allocated_launch_activity(::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* launch_activity);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity& _internal_launch_activity() const;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* _internal_mutable_launch_activity();
  public:
  void unsafe_arena_set_allocated_launch_activity(
      ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* launch_activity);
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* unsafe_arena_release_launch_activity();

  // optional .nearby.sharing.analytics.proto.SharingLog.AddContact add_contact = 25;
  bool has_add_contact() const;
  private:
  bool _internal_has_add_contact() const;
  public:
  void clear_add_contact();
  const ::nearby::sharing::analytics::proto::SharingLog_AddContact& add_contact() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AddContact* release_add_contact();
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* mutable_add_contact();
  void set_allocated_add_contact(::nearby::sharing::analytics::proto::SharingLog_AddContact* add_contact);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AddContact& _internal_add_contact() const;
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* _internal_mutable_add_contact();
  public:
  void unsafe_arena_set_allocated_add_contact(
      ::nearby::sharing::analytics::proto::SharingLog_AddContact* add_contact);
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* unsafe_arena_release_add_contact();

  // optional .nearby.sharing.analytics.proto.SharingLog.RemoveContact remove_contact = 26;
  bool has_remove_contact() const;
  private:
  bool _internal_has_remove_contact() const;
  public:
  void clear_remove_contact();
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact& remove_contact() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* release_remove_contact();
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* mutable_remove_contact();
  void set_allocated_remove_contact(::nearby::sharing::analytics::proto::SharingLog_RemoveContact* remove_contact);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact& _internal_remove_contact() const;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* _internal_mutable_remove_contact();
  public:
  void unsafe_arena_set_allocated_remove_contact(
      ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* remove_contact);
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* unsafe_arena_release_remove_contact();

  // optional .nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse fast_share_server_response = 28;
  bool has_fast_share_server_response() const;
  private:
  bool _internal_has_fast_share_server_response() const;
  public:
  void clear_fast_share_server_response();
  const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse& fast_share_server_response() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* release_fast_share_server_response();
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* mutable_fast_share_server_response();
  void set_allocated_fast_share_server_response(::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* fast_share_server_response);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse& _internal_fast_share_server_response() const;
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* _internal_mutable_fast_share_server_response();
  public:
  void unsafe_arena_set_allocated_fast_share_server_response(
      ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* fast_share_server_response);
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* unsafe_arena_release_fast_share_server_response();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendStart send_start = 29;
  bool has_send_start() const;
  private:
  bool _internal_has_send_start() const;
  public:
  void clear_send_start();
  const ::nearby::sharing::analytics::proto::SharingLog_SendStart& send_start() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendStart* release_send_start();
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* mutable_send_start();
  void set_allocated_send_start(::nearby::sharing::analytics::proto::SharingLog_SendStart* send_start);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendStart& _internal_send_start() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* _internal_mutable_send_start();
  public:
  void unsafe_arena_set_allocated_send_start(
      ::nearby::sharing::analytics::proto::SharingLog_SendStart* send_start);
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* unsafe_arena_release_send_start();

  // optional .nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization accept_fast_initialization = 30;
  bool has_accept_fast_initialization() const;
  private:
  bool _internal_has_accept_fast_initialization() const;
  public:
  void clear_accept_fast_initialization();
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization& accept_fast_initialization() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* release_accept_fast_initialization();
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* mutable_accept_fast_initialization();
  void set_allocated_accept_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* accept_fast_initialization);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization& _internal_accept_fast_initialization() const;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* _internal_mutable_accept_fast_initialization();
  public:
  void unsafe_arena_set_allocated_accept_fast_initialization(
      ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* accept_fast_initialization);
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* unsafe_arena_release_accept_fast_initialization();

  // optional .nearby.sharing.analytics.proto.SharingLog.SetDataUsage set_data_usage = 31;
  bool has_set_data_usage() const;
  private:
  bool _internal_has_set_data_usage() const;
  public:
  void clear_set_data_usage();
  const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage& set_data_usage() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* release_set_data_usage();
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* mutable_set_data_usage();
  void set_allocated_set_data_usage(::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* set_data_usage);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage& _internal_set_data_usage() const;
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* _internal_mutable_set_data_usage();
  public:
  void unsafe_arena_set_allocated_set_data_usage(
      ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* set_data_usage);
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* unsafe_arena_release_set_data_usage();

  // optional .nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization dismiss_fast_initialization = 34;
  bool has_dismiss_fast_initialization() const;
  private:
  bool _internal_has_dismiss_fast_initialization() const;
  public:
  void clear_dismiss_fast_initialization();
  const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization& dismiss_fast_initialization() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* release_dismiss_fast_initialization();
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* mutable_dismiss_fast_initialization();
  void set_allocated_dismiss_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* dismiss_fast_initialization);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization& _internal_dismiss_fast_initialization() const;
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* _internal_mutable_dismiss_fast_initialization();
  public:
  void unsafe_arena_set_allocated_dismiss_fast_initialization(
      ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* dismiss_fast_initialization);
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* unsafe_arena_release_dismiss_fast_initialization();

  // optional .nearby.sharing.analytics.proto.SharingLog.CancelConnection cancel_connection = 35;
  bool has_cancel_connection() const;
  private:
  bool _internal_has_cancel_connection() const;
  public:
  void clear_cancel_connection();
  const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection& cancel_connection() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* release_cancel_connection();
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* mutable_cancel_connection();
  void set_allocated_cancel_connection(::nearby::sharing::analytics::proto::SharingLog_CancelConnection* cancel_connection);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection& _internal_cancel_connection() const;
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* _internal_mutable_cancel_connection();
  public:
  void unsafe_arena_set_allocated_cancel_connection(
      ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* cancel_connection);
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* unsafe_arena_release_cancel_connection();

  // optional .nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification dismiss_privacy_notification = 36;
  bool has_dismiss_privacy_notification() const;
  private:
  bool _internal_has_dismiss_privacy_notification() const;
  public:
  void clear_dismiss_privacy_notification();
  const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification& dismiss_privacy_notification() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* release_dismiss_privacy_notification();
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* mutable_dismiss_privacy_notification();
  void set_allocated_dismiss_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* dismiss_privacy_notification);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification& _internal_dismiss_privacy_notification() const;
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* _internal_mutable_dismiss_privacy_notification();
  public:
  void unsafe_arena_set_allocated_dismiss_privacy_notification(
      ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* dismiss_privacy_notification);
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* unsafe_arena_release_dismiss_privacy_notification();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification tap_privacy_notification = 37;
  bool has_tap_privacy_notification() const;
  private:
  bool _internal_has_tap_privacy_notification() const;
  public:
  void clear_tap_privacy_notification();
  const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification& tap_privacy_notification() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* release_tap_privacy_notification();
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* mutable_tap_privacy_notification();
  void set_allocated_tap_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* tap_privacy_notification);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification& _internal_tap_privacy_notification() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* _internal_mutable_tap_privacy_notification();
  public:
  void unsafe_arena_set_allocated_tap_privacy_notification(
      ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* tap_privacy_notification);
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* unsafe_arena_release_tap_privacy_notification();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapHelp tap_help = 38;
  bool has_tap_help() const;
  private:
  bool _internal_has_tap_help() const;
  public:
  void clear_tap_help();
  const ::nearby::sharing::analytics::proto::SharingLog_TapHelp& tap_help() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapHelp* release_tap_help();
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* mutable_tap_help();
  void set_allocated_tap_help(::nearby::sharing::analytics::proto::SharingLog_TapHelp* tap_help);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapHelp& _internal_tap_help() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* _internal_mutable_tap_help();
  public:
  void unsafe_arena_set_allocated_tap_help(
      ::nearby::sharing::analytics::proto::SharingLog_TapHelp* tap_help);
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* unsafe_arena_release_tap_help();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapFeedback tap_feedback = 39;
  bool has_tap_feedback() const;
  private:
  bool _internal_has_tap_feedback() const;
  public:
  void clear_tap_feedback();
  const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback& tap_feedback() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* release_tap_feedback();
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* mutable_tap_feedback();
  void set_allocated_tap_feedback(::nearby::sharing::analytics::proto::SharingLog_TapFeedback* tap_feedback);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback& _internal_tap_feedback() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* _internal_mutable_tap_feedback();
  public:
  void unsafe_arena_set_allocated_tap_feedback(
      ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* tap_feedback);
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* unsafe_arena_release_tap_feedback();

  // optional .nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile add_quick_settings_tile = 40;
  bool has_add_quick_settings_tile() const;
  private:
  bool _internal_has_add_quick_settings_tile() const;
  public:
  void clear_add_quick_settings_tile();
  const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile& add_quick_settings_tile() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* release_add_quick_settings_tile();
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* mutable_add_quick_settings_tile();
  void set_allocated_add_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* add_quick_settings_tile);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile& _internal_add_quick_settings_tile() const;
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* _internal_mutable_add_quick_settings_tile();
  public:
  void unsafe_arena_set_allocated_add_quick_settings_tile(
      ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* add_quick_settings_tile);
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* unsafe_arena_release_add_quick_settings_tile();

  // optional .nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile remove_quick_settings_tile = 41;
  bool has_remove_quick_settings_tile() const;
  private:
  bool _internal_has_remove_quick_settings_tile() const;
  public:
  void clear_remove_quick_settings_tile();
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile& remove_quick_settings_tile() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* release_remove_quick_settings_tile();
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* mutable_remove_quick_settings_tile();
  void set_allocated_remove_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* remove_quick_settings_tile);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile& _internal_remove_quick_settings_tile() const;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* _internal_mutable_remove_quick_settings_tile();
  public:
  void unsafe_arena_set_allocated_remove_quick_settings_tile(
      ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* remove_quick_settings_tile);
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* unsafe_arena_release_remove_quick_settings_tile();

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent launch_phone_consent = 42;
  bool has_launch_phone_consent() const;
  private:
  bool _internal_has_launch_phone_consent() const;
  public:
  void clear_launch_phone_consent();
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent& launch_phone_consent() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* release_launch_phone_consent();
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* mutable_launch_phone_consent();
  void set_allocated_launch_phone_consent(::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* launch_phone_consent);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent& _internal_launch_phone_consent() const;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* _internal_mutable_launch_phone_consent();
  public:
  void unsafe_arena_set_allocated_launch_phone_consent(
      ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* launch_phone_consent);
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* unsafe_arena_release_launch_phone_consent();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile tap_quick_settings_tile = 43;
  bool has_tap_quick_settings_tile() const;
  private:
  bool _internal_has_tap_quick_settings_tile() const;
  public:
  void clear_tap_quick_settings_tile();
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile& tap_quick_settings_tile() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* release_tap_quick_settings_tile();
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* mutable_tap_quick_settings_tile();
  void set_allocated_tap_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* tap_quick_settings_tile);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile& _internal_tap_quick_settings_tile() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* _internal_mutable_tap_quick_settings_tile();
  public:
  void unsafe_arena_set_allocated_tap_quick_settings_tile(
      ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* tap_quick_settings_tile);
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* unsafe_arena_release_tap_quick_settings_tile();

  // optional .nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus install_apk_status = 44;
  bool has_install_apk_status() const;
  private:
  bool _internal_has_install_apk_status() const;
  public:
  void clear_install_apk_status();
  const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus& install_apk_status() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* release_install_apk_status();
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* mutable_install_apk_status();
  void set_allocated_install_apk_status(::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* install_apk_status);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus& _internal_install_apk_status() const;
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* _internal_mutable_install_apk_status();
  public:
  void unsafe_arena_set_allocated_install_apk_status(
      ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* install_apk_status);
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* unsafe_arena_release_install_apk_status();

  // optional .nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus verify_apk_status = 45;
  bool has_verify_apk_status() const;
  private:
  bool _internal_has_verify_apk_status() const;
  public:
  void clear_verify_apk_status();
  const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus& verify_apk_status() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* release_verify_apk_status();
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* mutable_verify_apk_status();
  void set_allocated_verify_apk_status(::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* verify_apk_status);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus& _internal_verify_apk_status() const;
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* _internal_mutable_verify_apk_status();
  public:
  void unsafe_arena_set_allocated_verify_apk_status(
      ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* verify_apk_status);
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* unsafe_arena_release_verify_apk_status();

  // optional .nearby.sharing.analytics.proto.SharingLog.LaunchConsent launch_consent = 46;
  bool has_launch_consent() const;
  private:
  bool _internal_has_launch_consent() const;
  public:
  void clear_launch_consent();
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent& launch_consent() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* release_launch_consent();
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* mutable_launch_consent();
  void set_allocated_launch_consent(::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* launch_consent);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent& _internal_launch_consent() const;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* _internal_mutable_launch_consent();
  public:
  void unsafe_arena_set_allocated_launch_consent(
      ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* launch_consent);
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* unsafe_arena_release_launch_consent();

  // optional .nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd process_received_attachments_end = 47;
  bool has_process_received_attachments_end() const;
  private:
  bool _internal_has_process_received_attachments_end() const;
  public:
  void clear_process_received_attachments_end();
  const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd& process_received_attachments_end() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* release_process_received_attachments_end();
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* mutable_process_received_attachments_end();
  void set_allocated_process_received_attachments_end(::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* process_received_attachments_end);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd& _internal_process_received_attachments_end() const;
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* _internal_mutable_process_received_attachments_end();
  public:
  void unsafe_arena_set_allocated_process_received_attachments_end(
      ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* process_received_attachments_end);
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* unsafe_arena_release_process_received_attachments_end();

  // optional .nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification toggle_show_notification = 48;
  bool has_toggle_show_notification() const;
  private:
  bool _internal_has_toggle_show_notification() const;
  public:
  void clear_toggle_show_notification();
  const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification& toggle_show_notification() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* release_toggle_show_notification();
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* mutable_toggle_show_notification();
  void set_allocated_toggle_show_notification(::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* toggle_show_notification);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification& _internal_toggle_show_notification() const;
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* _internal_mutable_toggle_show_notification();
  public:
  void unsafe_arena_set_allocated_toggle_show_notification(
      ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* toggle_show_notification);
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* unsafe_arena_release_toggle_show_notification();

  // optional .nearby.sharing.analytics.proto.SharingLog.SetDeviceName set_device_name = 49;
  bool has_set_device_name() const;
  private:
  bool _internal_has_set_device_name() const;
  public:
  void clear_set_device_name();
  const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName& set_device_name() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* release_set_device_name();
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* mutable_set_device_name();
  void set_allocated_set_device_name(::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* set_device_name);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName& _internal_set_device_name() const;
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* _internal_mutable_set_device_name();
  public:
  void unsafe_arena_set_allocated_set_device_name(
      ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* set_device_name);
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* unsafe_arena_release_set_device_name();

  // optional .nearby.sharing.analytics.proto.SharingLog.DeclineAgreements decline_agreements = 51;
  bool has_decline_agreements() const;
  private:
  bool _internal_has_decline_agreements() const;
  public:
  void clear_decline_agreements();
  const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements& decline_agreements() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* release_decline_agreements();
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* mutable_decline_agreements();
  void set_allocated_decline_agreements(::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* decline_agreements);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements& _internal_decline_agreements() const;
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* _internal_mutable_decline_agreements();
  public:
  void unsafe_arena_set_allocated_decline_agreements(
      ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* decline_agreements);
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* unsafe_arena_release_decline_agreements();

  // optional .nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions request_setting_permissions = 52;
  bool has_request_setting_permissions() const;
  private:
  bool _internal_has_request_setting_permissions() const;
  public:
  void clear_request_setting_permissions();
  const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions& request_setting_permissions() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* release_request_setting_permissions();
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* mutable_request_setting_permissions();
  void set_allocated_request_setting_permissions(::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* request_setting_permissions);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions& _internal_request_setting_permissions() const;
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* _internal_mutable_request_setting_permissions();
  public:
  void unsafe_arena_set_allocated_request_setting_permissions(
      ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* request_setting_permissions);
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* unsafe_arena_release_request_setting_permissions();

  // optional .nearby.sharing.analytics.proto.SharingLog.DeviceSettings device_settings = 53;
  bool has_device_settings() const;
  private:
  bool _internal_has_device_settings() const;
  public:
  void clear_device_settings();
  const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings& device_settings() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* release_device_settings();
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* mutable_device_settings();
  void set_allocated_device_settings(::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* device_settings);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings& _internal_device_settings() const;
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* _internal_mutable_device_settings();
  public:
  void unsafe_arena_set_allocated_device_settings(
      ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* device_settings);
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* unsafe_arena_release_device_settings();

  // optional .nearby.sharing.analytics.proto.SharingLog.EstablishConnection establish_connection = 54;
  bool has_establish_connection() const;
  private:
  bool _internal_has_establish_connection() const;
  public:
  void clear_establish_connection();
  const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection& establish_connection() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* release_establish_connection();
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* mutable_establish_connection();
  void set_allocated_establish_connection(::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* establish_connection);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection& _internal_establish_connection() const;
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* _internal_mutable_establish_connection();
  public:
  void unsafe_arena_set_allocated_establish_connection(
      ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* establish_connection);
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* unsafe_arena_release_establish_connection();

  // optional .nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization auto_dismiss_fast_initialization = 55;
  bool has_auto_dismiss_fast_initialization() const;
  private:
  bool _internal_has_auto_dismiss_fast_initialization() const;
  public:
  void clear_auto_dismiss_fast_initialization();
  const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization& auto_dismiss_fast_initialization() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* release_auto_dismiss_fast_initialization();
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* mutable_auto_dismiss_fast_initialization();
  void set_allocated_auto_dismiss_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* auto_dismiss_fast_initialization);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization& _internal_auto_dismiss_fast_initialization() const;
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* _internal_mutable_auto_dismiss_fast_initialization();
  public:
  void unsafe_arena_set_allocated_auto_dismiss_fast_initialization(
      ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* auto_dismiss_fast_initialization);
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* unsafe_arena_release_auto_dismiss_fast_initialization();

  // optional .nearby.sharing.analytics.proto.SharingLog.EventMetadata event_metadata = 56;
  bool has_event_metadata() const;
  private:
  bool _internal_has_event_metadata() const;
  public:
  void clear_event_metadata();
  const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata& event_metadata() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* release_event_metadata();
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* mutable_event_metadata();
  void set_allocated_event_metadata(::nearby::sharing::analytics::proto::SharingLog_EventMetadata* event_metadata);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata& _internal_event_metadata() const;
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* _internal_mutable_event_metadata();
  public:
  void unsafe_arena_set_allocated_event_metadata(
      ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* event_metadata);
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* unsafe_arena_release_event_metadata();

  // optional .nearby.sharing.analytics.proto.SharingLog.AppCrash app_crash = 58;
  bool has_app_crash() const;
  private:
  bool _internal_has_app_crash() const;
  public:
  void clear_app_crash();
  const ::nearby::sharing::analytics::proto::SharingLog_AppCrash& app_crash() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AppCrash* release_app_crash();
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* mutable_app_crash();
  void set_allocated_app_crash(::nearby::sharing::analytics::proto::SharingLog_AppCrash* app_crash);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AppCrash& _internal_app_crash() const;
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* _internal_mutable_app_crash();
  public:
  void unsafe_arena_set_allocated_app_crash(
      ::nearby::sharing::analytics::proto::SharingLog_AppCrash* app_crash);
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* unsafe_arena_release_app_crash();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare tap_quick_settings_file_share = 59;
  bool has_tap_quick_settings_file_share() const;
  private:
  bool _internal_has_tap_quick_settings_file_share() const;
  public:
  void clear_tap_quick_settings_file_share();
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare& tap_quick_settings_file_share() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* release_tap_quick_settings_file_share();
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* mutable_tap_quick_settings_file_share();
  void set_allocated_tap_quick_settings_file_share(::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* tap_quick_settings_file_share);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare& _internal_tap_quick_settings_file_share() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* _internal_mutable_tap_quick_settings_file_share();
  public:
  void unsafe_arena_set_allocated_tap_quick_settings_file_share(
      ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* tap_quick_settings_file_share);
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* unsafe_arena_release_tap_quick_settings_file_share();

  // optional .nearby.sharing.analytics.proto.SharingLog.AppInfo app_info = 60;
  bool has_app_info() const;
  private:
  bool _internal_has_app_info() const;
  public:
  void clear_app_info();
  const ::nearby::sharing::analytics::proto::SharingLog_AppInfo& app_info() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_AppInfo* release_app_info();
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* mutable_app_info();
  void set_allocated_app_info(::nearby::sharing::analytics::proto::SharingLog_AppInfo* app_info);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_AppInfo& _internal_app_info() const;
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* _internal_mutable_app_info();
  public:
  void unsafe_arena_set_allocated_app_info(
      ::nearby::sharing::analytics::proto::SharingLog_AppInfo* app_info);
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* unsafe_arena_release_app_info();

  // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification display_privacy_notification = 61;
  bool has_display_privacy_notification() const;
  private:
  bool _internal_has_display_privacy_notification() const;
  public:
  void clear_display_privacy_notification();
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification& display_privacy_notification() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* release_display_privacy_notification();
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* mutable_display_privacy_notification();
  void set_allocated_display_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* display_privacy_notification);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification& _internal_display_privacy_notification() const;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* _internal_mutable_display_privacy_notification();
  public:
  void unsafe_arena_set_allocated_display_privacy_notification(
      ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* display_privacy_notification);
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* unsafe_arena_release_display_privacy_notification();

  // optional .nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent display_phone_consent = 62;
  bool has_display_phone_consent() const;
  private:
  bool _internal_has_display_phone_consent() const;
  public:
  void clear_display_phone_consent();
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent& display_phone_consent() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* release_display_phone_consent();
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* mutable_display_phone_consent();
  void set_allocated_display_phone_consent(::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* display_phone_consent);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent& _internal_display_phone_consent() const;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* _internal_mutable_display_phone_consent();
  public:
  void unsafe_arena_set_allocated_display_phone_consent(
      ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* display_phone_consent);
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* unsafe_arena_release_display_phone_consent();

  // optional .nearby.sharing.analytics.proto.SharingLog.PreferencesUsage preferences_usage = 63;
  bool has_preferences_usage() const;
  private:
  bool _internal_has_preferences_usage() const;
  public:
  void clear_preferences_usage();
  const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage& preferences_usage() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* release_preferences_usage();
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* mutable_preferences_usage();
  void set_allocated_preferences_usage(::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* preferences_usage);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage& _internal_preferences_usage() const;
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* _internal_mutable_preferences_usage();
  public:
  void unsafe_arena_set_allocated_preferences_usage(
      ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* preferences_usage);
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* unsafe_arena_release_preferences_usage();

  // optional .nearby.sharing.analytics.proto.SharingLog.DefaultOptIn default_opt_in = 64;
  bool has_default_opt_in() const;
  private:
  bool _internal_has_default_opt_in() const;
  public:
  void clear_default_opt_in();
  const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn& default_opt_in() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* release_default_opt_in();
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* mutable_default_opt_in();
  void set_allocated_default_opt_in(::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* default_opt_in);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn& _internal_default_opt_in() const;
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* _internal_mutable_default_opt_in();
  public:
  void unsafe_arena_set_allocated_default_opt_in(
      ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* default_opt_in);
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* unsafe_arena_release_default_opt_in();

  // optional .nearby.sharing.analytics.proto.SharingLog.SetupWizard setup_wizard = 65;
  bool has_setup_wizard() const;
  private:
  bool _internal_has_setup_wizard() const;
  public:
  void clear_setup_wizard();
  const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard& setup_wizard() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* release_setup_wizard();
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* mutable_setup_wizard();
  void set_allocated_setup_wizard(::nearby::sharing::analytics::proto::SharingLog_SetupWizard* setup_wizard);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard& _internal_setup_wizard() const;
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* _internal_mutable_setup_wizard();
  public:
  void unsafe_arena_set_allocated_setup_wizard(
      ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* setup_wizard);
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* unsafe_arena_release_setup_wizard();

  // optional .nearby.sharing.analytics.proto.SharingLog.TapQrCode tap_qr_code = 66;
  bool has_tap_qr_code() const;
  private:
  bool _internal_has_tap_qr_code() const;
  public:
  void clear_tap_qr_code();
  const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode& tap_qr_code() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* release_tap_qr_code();
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* mutable_tap_qr_code();
  void set_allocated_tap_qr_code(::nearby::sharing::analytics::proto::SharingLog_TapQrCode* tap_qr_code);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode& _internal_tap_qr_code() const;
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* _internal_mutable_tap_qr_code();
  public:
  void unsafe_arena_set_allocated_tap_qr_code(
      ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* tap_qr_code);
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* unsafe_arena_release_tap_qr_code();

  // optional .nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown qr_code_link_shown = 67;
  bool has_qr_code_link_shown() const;
  private:
  bool _internal_has_qr_code_link_shown() const;
  public:
  void clear_qr_code_link_shown();
  const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown& qr_code_link_shown() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* release_qr_code_link_shown();
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* mutable_qr_code_link_shown();
  void set_allocated_qr_code_link_shown(::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* qr_code_link_shown);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown& _internal_qr_code_link_shown() const;
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* _internal_mutable_qr_code_link_shown();
  public:
  void unsafe_arena_set_allocated_qr_code_link_shown(
      ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* qr_code_link_shown);
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* unsafe_arena_release_qr_code_link_shown();

  // optional .nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId parsing_failed_endpoint_id = 68;
  bool has_parsing_failed_endpoint_id() const;
  private:
  bool _internal_has_parsing_failed_endpoint_id() const;
  public:
  void clear_parsing_failed_endpoint_id();
  const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId& parsing_failed_endpoint_id() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* release_parsing_failed_endpoint_id();
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* mutable_parsing_failed_endpoint_id();
  void set_allocated_parsing_failed_endpoint_id(::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* parsing_failed_endpoint_id);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId& _internal_parsing_failed_endpoint_id() const;
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* _internal_mutable_parsing_failed_endpoint_id();
  public:
  void unsafe_arena_set_allocated_parsing_failed_endpoint_id(
      ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* parsing_failed_endpoint_id);
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* unsafe_arena_release_parsing_failed_endpoint_id();

  // optional .nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice fast_init_discover_device = 69;
  bool has_fast_init_discover_device() const;
  private:
  bool _internal_has_fast_init_discover_device() const;
  public:
  void clear_fast_init_discover_device();
  const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice& fast_init_discover_device() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* release_fast_init_discover_device();
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* mutable_fast_init_discover_device();
  void set_allocated_fast_init_discover_device(::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* fast_init_discover_device);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice& _internal_fast_init_discover_device() const;
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* _internal_mutable_fast_init_discover_device();
  public:
  void unsafe_arena_set_allocated_fast_init_discover_device(
      ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* fast_init_discover_device);
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* unsafe_arena_release_fast_init_discover_device();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification send_desktop_notification = 70;
  bool has_send_desktop_notification() const;
  private:
  bool _internal_has_send_desktop_notification() const;
  public:
  void clear_send_desktop_notification();
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification& send_desktop_notification() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* release_send_desktop_notification();
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* mutable_send_desktop_notification();
  void set_allocated_send_desktop_notification(::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* send_desktop_notification);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification& _internal_send_desktop_notification() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* _internal_mutable_send_desktop_notification();
  public:
  void unsafe_arena_set_allocated_send_desktop_notification(
      ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* send_desktop_notification);
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* unsafe_arena_release_send_desktop_notification();

  // optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent send_desktop_transfer_event = 72;
  bool has_send_desktop_transfer_event() const;
  private:
  bool _internal_has_send_desktop_transfer_event() const;
  public:
  void clear_send_desktop_transfer_event();
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent& send_desktop_transfer_event() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* release_send_desktop_transfer_event();
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* mutable_send_desktop_transfer_event();
  void set_allocated_send_desktop_transfer_event(::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* send_desktop_transfer_event);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent& _internal_send_desktop_transfer_event() const;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* _internal_mutable_send_desktop_transfer_event();
  public:
  void unsafe_arena_set_allocated_send_desktop_transfer_event(
      ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* send_desktop_transfer_event);
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* unsafe_arena_release_send_desktop_transfer_event();

  // optional .nearby.sharing.analytics.proto.SharingLog.SetAccount set_account = 73;
  bool has_set_account() const;
  private:
  bool _internal_has_set_account() const;
  public:
  void clear_set_account();
  const ::nearby::sharing::analytics::proto::SharingLog_SetAccount& set_account() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_SetAccount* release_set_account();
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* mutable_set_account();
  void set_allocated_set_account(::nearby::sharing::analytics::proto::SharingLog_SetAccount* set_account);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_SetAccount& _internal_set_account() const;
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* _internal_mutable_set_account();
  public:
  void unsafe_arena_set_allocated_set_account(
      ::nearby::sharing::analytics::proto::SharingLog_SetAccount* set_account);
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* unsafe_arena_release_set_account();

  // optional .nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure decrypt_certificate_failure = 74;
  bool has_decrypt_certificate_failure() const;
  private:
  bool _internal_has_decrypt_certificate_failure() const;
  public:
  void clear_decrypt_certificate_failure();
  const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure& decrypt_certificate_failure() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* release_decrypt_certificate_failure();
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* mutable_decrypt_certificate_failure();
  void set_allocated_decrypt_certificate_failure(::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* decrypt_certificate_failure);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure& _internal_decrypt_certificate_failure() const;
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* _internal_mutable_decrypt_certificate_failure();
  public:
  void unsafe_arena_set_allocated_decrypt_certificate_failure(
      ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* decrypt_certificate_failure);
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* unsafe_arena_release_decrypt_certificate_failure();

  // optional .nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess show_allow_permission_auto_access = 75;
  bool has_show_allow_permission_auto_access() const;
  private:
  bool _internal_has_show_allow_permission_auto_access() const;
  public:
  void clear_show_allow_permission_auto_access();
  const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess& show_allow_permission_auto_access() const;
  PROTOBUF_NODISCARD ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* release_show_allow_permission_auto_access();
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* mutable_show_allow_permission_auto_access();
  void set_allocated_show_allow_permission_auto_access(::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* show_allow_permission_auto_access);
  private:
  const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess& _internal_show_allow_permission_auto_access() const;
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* _internal_mutable_show_allow_permission_auto_access();
  public:
  void unsafe_arena_set_allocated_show_allow_permission_auto_access(
      ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* show_allow_permission_auto_access);
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* unsafe_arena_release_show_allow_permission_auto_access();

  // optional .location.nearby.proto.sharing.EventType event_type = 1;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::location::nearby::proto::sharing::EventType event_type() const;
  void set_event_type(::location::nearby::proto::sharing::EventType value);
  private:
  ::location::nearby::proto::sharing::EventType _internal_event_type() const;
  void _internal_set_event_type(::location::nearby::proto::sharing::EventType value);
  public:

  // optional .location.nearby.proto.sharing.LogSource log_source = 27;
  bool has_log_source() const;
  private:
  bool _internal_has_log_source() const;
  public:
  void clear_log_source();
  ::location::nearby::proto::sharing::LogSource log_source() const;
  void set_log_source(::location::nearby::proto::sharing::LogSource value);
  private:
  ::location::nearby::proto::sharing::LogSource _internal_log_source() const;
  void _internal_set_log_source(::location::nearby::proto::sharing::LogSource value);
  public:

  // optional .location.nearby.proto.sharing.EventCategory event_category = 33;
  bool has_event_category() const;
  private:
  bool _internal_has_event_category() const;
  public:
  void clear_event_category();
  ::location::nearby::proto::sharing::EventCategory event_category() const;
  void set_event_category(::location::nearby::proto::sharing::EventCategory value);
  private:
  ::location::nearby::proto::sharing::EventCategory _internal_event_category() const;
  void _internal_set_event_category(::location::nearby::proto::sharing::EventCategory value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.sharing.analytics.proto.SharingLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr files_migration_phase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unknown_event_;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* accept_agreements_;
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* enable_nearby_sharing_;
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* set_visibility_;
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* describe_attachments_;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* scan_for_share_targets_start_;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* scan_for_share_targets_end_;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* advertise_device_presence_start_;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* advertise_device_presence_end_;
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* send_initialization_;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* receive_initialization_;
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* discover_share_target_;
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* send_introduction_;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* receive_introduction_;
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* respond_introduction_;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* send_attachments_start_;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* send_attachments_end_;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* receive_attachments_start_;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* receive_attachments_end_;
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* cancel_sending_attachments_;
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* cancel_receiving_attachments_;
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* open_received_attachments_;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* launch_activity_;
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* add_contact_;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* remove_contact_;
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* fast_share_server_response_;
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* send_start_;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* accept_fast_initialization_;
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* set_data_usage_;
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* dismiss_fast_initialization_;
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* cancel_connection_;
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* dismiss_privacy_notification_;
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* tap_privacy_notification_;
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* tap_help_;
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* tap_feedback_;
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* add_quick_settings_tile_;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* remove_quick_settings_tile_;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* launch_phone_consent_;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* tap_quick_settings_tile_;
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* install_apk_status_;
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* verify_apk_status_;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* launch_consent_;
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* process_received_attachments_end_;
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* toggle_show_notification_;
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* set_device_name_;
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* decline_agreements_;
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* request_setting_permissions_;
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* device_settings_;
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* establish_connection_;
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* auto_dismiss_fast_initialization_;
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* event_metadata_;
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* app_crash_;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* tap_quick_settings_file_share_;
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* app_info_;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* display_privacy_notification_;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* display_phone_consent_;
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* preferences_usage_;
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* default_opt_in_;
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* setup_wizard_;
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* tap_qr_code_;
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* qr_code_link_shown_;
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* parsing_failed_endpoint_id_;
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* fast_init_discover_device_;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* send_desktop_notification_;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* send_desktop_transfer_event_;
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* set_account_;
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* decrypt_certificate_failure_;
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* show_allow_permission_auto_access_;
  int event_type_;
  int log_source_;
  int event_category_;
  friend struct ::TableStruct_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharingLog_AppInfo

// optional string app_version = 1;
inline bool SharingLog_AppInfo::_internal_has_app_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AppInfo::has_app_version() const {
  return _internal_has_app_version();
}
inline void SharingLog_AppInfo::clear_app_version() {
  app_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_AppInfo::app_version() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_version)
  return _internal_app_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AppInfo::set_app_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_version)
}
inline std::string* SharingLog_AppInfo::mutable_app_version() {
  std::string* _s = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_version)
  return _s;
}
inline const std::string& SharingLog_AppInfo::_internal_app_version() const {
  return app_version_.Get();
}
inline void SharingLog_AppInfo::_internal_set_app_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::_internal_mutable_app_version() {
  _has_bits_[0] |= 0x00000001u;
  return app_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::release_app_version() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_version)
  if (!_internal_has_app_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AppInfo::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_version)
}

// optional string app_language = 2;
inline bool SharingLog_AppInfo::_internal_has_app_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_AppInfo::has_app_language() const {
  return _internal_has_app_language();
}
inline void SharingLog_AppInfo::clear_app_language() {
  app_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingLog_AppInfo::app_language() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_language)
  return _internal_app_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AppInfo::set_app_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 app_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_language)
}
inline std::string* SharingLog_AppInfo::mutable_app_language() {
  std::string* _s = _internal_mutable_app_language();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_language)
  return _s;
}
inline const std::string& SharingLog_AppInfo::_internal_app_language() const {
  return app_language_.Get();
}
inline void SharingLog_AppInfo::_internal_set_app_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::_internal_mutable_app_language() {
  _has_bits_[0] |= 0x00000002u;
  return app_language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::release_app_language() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_language)
  if (!_internal_has_app_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = app_language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AppInfo::set_allocated_app_language(std::string* app_language) {
  if (app_language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AppInfo.app_language)
}

// optional string update_track = 3;
inline bool SharingLog_AppInfo::_internal_has_update_track() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_AppInfo::has_update_track() const {
  return _internal_has_update_track();
}
inline void SharingLog_AppInfo::clear_update_track() {
  update_track_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SharingLog_AppInfo::update_track() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppInfo.update_track)
  return _internal_update_track();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AppInfo::set_update_track(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 update_track_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppInfo.update_track)
}
inline std::string* SharingLog_AppInfo::mutable_update_track() {
  std::string* _s = _internal_mutable_update_track();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AppInfo.update_track)
  return _s;
}
inline const std::string& SharingLog_AppInfo::_internal_update_track() const {
  return update_track_.Get();
}
inline void SharingLog_AppInfo::_internal_set_update_track(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  update_track_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::_internal_mutable_update_track() {
  _has_bits_[0] |= 0x00000004u;
  return update_track_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AppInfo::release_update_track() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AppInfo.update_track)
  if (!_internal_has_update_track()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = update_track_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_track_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AppInfo::set_allocated_update_track(std::string* update_track) {
  if (update_track != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  update_track_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_track,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_track_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AppInfo.update_track)
}

// -------------------------------------------------------------------

// SharingLog_DeviceSettings

// optional .location.nearby.proto.sharing.Visibility visibility = 1;
inline bool SharingLog_DeviceSettings::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_visibility() const {
  return _internal_has_visibility();
}
inline void SharingLog_DeviceSettings::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_DeviceSettings::_internal_visibility() const {
  return static_cast< ::location::nearby::proto::sharing::Visibility >(visibility_);
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_DeviceSettings::visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.visibility)
  return _internal_visibility();
}
inline void SharingLog_DeviceSettings::_internal_set_visibility(::location::nearby::proto::sharing::Visibility value) {
  assert(::location::nearby::proto::sharing::Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  visibility_ = value;
}
inline void SharingLog_DeviceSettings::set_visibility(::location::nearby::proto::sharing::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.visibility)
}

// optional .location.nearby.proto.sharing.DataUsage data_usage = 2;
inline bool SharingLog_DeviceSettings::_internal_has_data_usage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_data_usage() const {
  return _internal_has_data_usage();
}
inline void SharingLog_DeviceSettings::clear_data_usage() {
  data_usage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_DeviceSettings::_internal_data_usage() const {
  return static_cast< ::location::nearby::proto::sharing::DataUsage >(data_usage_);
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_DeviceSettings::data_usage() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.data_usage)
  return _internal_data_usage();
}
inline void SharingLog_DeviceSettings::_internal_set_data_usage(::location::nearby::proto::sharing::DataUsage value) {
  assert(::location::nearby::proto::sharing::DataUsage_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  data_usage_ = value;
}
inline void SharingLog_DeviceSettings::set_data_usage(::location::nearby::proto::sharing::DataUsage value) {
  _internal_set_data_usage(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.data_usage)
}

// optional int32 device_name_size = 3;
inline bool SharingLog_DeviceSettings::_internal_has_device_name_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_device_name_size() const {
  return _internal_has_device_name_size();
}
inline void SharingLog_DeviceSettings::clear_device_name_size() {
  device_name_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingLog_DeviceSettings::_internal_device_name_size() const {
  return device_name_size_;
}
inline int32_t SharingLog_DeviceSettings::device_name_size() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.device_name_size)
  return _internal_device_name_size();
}
inline void SharingLog_DeviceSettings::_internal_set_device_name_size(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_size_ = value;
}
inline void SharingLog_DeviceSettings::set_device_name_size(int32_t value) {
  _internal_set_device_name_size(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.device_name_size)
}

// optional bool is_show_notification_enabled = 4;
inline bool SharingLog_DeviceSettings::_internal_has_is_show_notification_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_is_show_notification_enabled() const {
  return _internal_has_is_show_notification_enabled();
}
inline void SharingLog_DeviceSettings::clear_is_show_notification_enabled() {
  is_show_notification_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SharingLog_DeviceSettings::_internal_is_show_notification_enabled() const {
  return is_show_notification_enabled_;
}
inline bool SharingLog_DeviceSettings::is_show_notification_enabled() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_show_notification_enabled)
  return _internal_is_show_notification_enabled();
}
inline void SharingLog_DeviceSettings::_internal_set_is_show_notification_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_show_notification_enabled_ = value;
}
inline void SharingLog_DeviceSettings::set_is_show_notification_enabled(bool value) {
  _internal_set_is_show_notification_enabled(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_show_notification_enabled)
}

// optional bool is_bt_enabled = 5;
inline bool SharingLog_DeviceSettings::_internal_has_is_bt_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_is_bt_enabled() const {
  return _internal_has_is_bt_enabled();
}
inline void SharingLog_DeviceSettings::clear_is_bt_enabled() {
  is_bt_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SharingLog_DeviceSettings::_internal_is_bt_enabled() const {
  return is_bt_enabled_;
}
inline bool SharingLog_DeviceSettings::is_bt_enabled() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_bt_enabled)
  return _internal_is_bt_enabled();
}
inline void SharingLog_DeviceSettings::_internal_set_is_bt_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_bt_enabled_ = value;
}
inline void SharingLog_DeviceSettings::set_is_bt_enabled(bool value) {
  _internal_set_is_bt_enabled(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_bt_enabled)
}

// optional bool is_location_enabled = 6;
inline bool SharingLog_DeviceSettings::_internal_has_is_location_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_is_location_enabled() const {
  return _internal_has_is_location_enabled();
}
inline void SharingLog_DeviceSettings::clear_is_location_enabled() {
  is_location_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SharingLog_DeviceSettings::_internal_is_location_enabled() const {
  return is_location_enabled_;
}
inline bool SharingLog_DeviceSettings::is_location_enabled() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_location_enabled)
  return _internal_is_location_enabled();
}
inline void SharingLog_DeviceSettings::_internal_set_is_location_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_location_enabled_ = value;
}
inline void SharingLog_DeviceSettings::set_is_location_enabled(bool value) {
  _internal_set_is_location_enabled(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_location_enabled)
}

// optional bool is_wifi_enabled = 7;
inline bool SharingLog_DeviceSettings::_internal_has_is_wifi_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_DeviceSettings::has_is_wifi_enabled() const {
  return _internal_has_is_wifi_enabled();
}
inline void SharingLog_DeviceSettings::clear_is_wifi_enabled() {
  is_wifi_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SharingLog_DeviceSettings::_internal_is_wifi_enabled() const {
  return is_wifi_enabled_;
}
inline bool SharingLog_DeviceSettings::is_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_wifi_enabled)
  return _internal_is_wifi_enabled();
}
inline void SharingLog_DeviceSettings::_internal_set_is_wifi_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_wifi_enabled_ = value;
}
inline void SharingLog_DeviceSettings::set_is_wifi_enabled(bool value) {
  _internal_set_is_wifi_enabled(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DeviceSettings.is_wifi_enabled)
}

// -------------------------------------------------------------------

// SharingLog_PreferencesUsage

// optional .location.nearby.proto.sharing.PreferencesAction action = 1;
inline bool SharingLog_PreferencesUsage::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_PreferencesUsage::has_action() const {
  return _internal_has_action();
}
inline void SharingLog_PreferencesUsage::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::_internal_action() const {
  return static_cast< ::location::nearby::proto::sharing::PreferencesAction >(action_);
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::action() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.action)
  return _internal_action();
}
inline void SharingLog_PreferencesUsage::_internal_set_action(::location::nearby::proto::sharing::PreferencesAction value) {
  assert(::location::nearby::proto::sharing::PreferencesAction_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  action_ = value;
}
inline void SharingLog_PreferencesUsage::set_action(::location::nearby::proto::sharing::PreferencesAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.action)
}

// optional .location.nearby.proto.sharing.PreferencesActionStatus action_status = 2;
inline bool SharingLog_PreferencesUsage::_internal_has_action_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_PreferencesUsage::has_action_status() const {
  return _internal_has_action_status();
}
inline void SharingLog_PreferencesUsage::clear_action_status() {
  action_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::PreferencesActionStatus SharingLog_PreferencesUsage::_internal_action_status() const {
  return static_cast< ::location::nearby::proto::sharing::PreferencesActionStatus >(action_status_);
}
inline ::location::nearby::proto::sharing::PreferencesActionStatus SharingLog_PreferencesUsage::action_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.action_status)
  return _internal_action_status();
}
inline void SharingLog_PreferencesUsage::_internal_set_action_status(::location::nearby::proto::sharing::PreferencesActionStatus value) {
  assert(::location::nearby::proto::sharing::PreferencesActionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_status_ = value;
}
inline void SharingLog_PreferencesUsage::set_action_status(::location::nearby::proto::sharing::PreferencesActionStatus value) {
  _internal_set_action_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.action_status)
}

// optional .location.nearby.proto.sharing.PreferencesAction prev_sub_action = 3;
inline bool SharingLog_PreferencesUsage::_internal_has_prev_sub_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_PreferencesUsage::has_prev_sub_action() const {
  return _internal_has_prev_sub_action();
}
inline void SharingLog_PreferencesUsage::clear_prev_sub_action() {
  prev_sub_action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::_internal_prev_sub_action() const {
  return static_cast< ::location::nearby::proto::sharing::PreferencesAction >(prev_sub_action_);
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::prev_sub_action() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.prev_sub_action)
  return _internal_prev_sub_action();
}
inline void SharingLog_PreferencesUsage::_internal_set_prev_sub_action(::location::nearby::proto::sharing::PreferencesAction value) {
  assert(::location::nearby::proto::sharing::PreferencesAction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  prev_sub_action_ = value;
}
inline void SharingLog_PreferencesUsage::set_prev_sub_action(::location::nearby::proto::sharing::PreferencesAction value) {
  _internal_set_prev_sub_action(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.prev_sub_action)
}

// optional .location.nearby.proto.sharing.PreferencesAction next_sub_action = 4;
inline bool SharingLog_PreferencesUsage::_internal_has_next_sub_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_PreferencesUsage::has_next_sub_action() const {
  return _internal_has_next_sub_action();
}
inline void SharingLog_PreferencesUsage::clear_next_sub_action() {
  next_sub_action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::_internal_next_sub_action() const {
  return static_cast< ::location::nearby::proto::sharing::PreferencesAction >(next_sub_action_);
}
inline ::location::nearby::proto::sharing::PreferencesAction SharingLog_PreferencesUsage::next_sub_action() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.next_sub_action)
  return _internal_next_sub_action();
}
inline void SharingLog_PreferencesUsage::_internal_set_next_sub_action(::location::nearby::proto::sharing::PreferencesAction value) {
  assert(::location::nearby::proto::sharing::PreferencesAction_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  next_sub_action_ = value;
}
inline void SharingLog_PreferencesUsage::set_next_sub_action(::location::nearby::proto::sharing::PreferencesAction value) {
  _internal_set_next_sub_action(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.PreferencesUsage.next_sub_action)
}

// -------------------------------------------------------------------

// SharingLog_UnknownEvent

// -------------------------------------------------------------------

// SharingLog_EstablishConnection

// optional .location.nearby.proto.sharing.EstablishConnectionStatus status = 1;
inline bool SharingLog_EstablishConnection::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_EstablishConnection::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::EstablishConnectionStatus SharingLog_EstablishConnection::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::EstablishConnectionStatus >(status_);
}
inline ::location::nearby::proto::sharing::EstablishConnectionStatus SharingLog_EstablishConnection::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.status)
  return _internal_status();
}
inline void SharingLog_EstablishConnection::_internal_set_status(::location::nearby::proto::sharing::EstablishConnectionStatus value) {
  assert(::location::nearby::proto::sharing::EstablishConnectionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void SharingLog_EstablishConnection::set_status(::location::nearby::proto::sharing::EstablishConnectionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.status)
}

// optional int64 session_id = 2;
inline bool SharingLog_EstablishConnection::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_EstablishConnection::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_EstablishConnection::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_EstablishConnection::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.session_id)
  return _internal_session_id();
}
inline void SharingLog_EstablishConnection::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void SharingLog_EstablishConnection::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.session_id)
}

// optional int32 transfer_position = 3;
inline bool SharingLog_EstablishConnection::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_EstablishConnection::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t SharingLog_EstablishConnection::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_EstablishConnection::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_EstablishConnection::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  transfer_position_ = value;
}
inline void SharingLog_EstablishConnection::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.transfer_position)
}

// optional int32 concurrent_connections = 4;
inline bool SharingLog_EstablishConnection::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_EstablishConnection::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t SharingLog_EstablishConnection::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_EstablishConnection::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_EstablishConnection::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  concurrent_connections_ = value;
}
inline void SharingLog_EstablishConnection::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.concurrent_connections)
}

// optional int64 duration_millis = 5;
inline bool SharingLog_EstablishConnection::_internal_has_duration_millis() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_duration_millis() const {
  return _internal_has_duration_millis();
}
inline void SharingLog_EstablishConnection::clear_duration_millis() {
  duration_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t SharingLog_EstablishConnection::_internal_duration_millis() const {
  return duration_millis_;
}
inline int64_t SharingLog_EstablishConnection::duration_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.duration_millis)
  return _internal_duration_millis();
}
inline void SharingLog_EstablishConnection::_internal_set_duration_millis(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  duration_millis_ = value;
}
inline void SharingLog_EstablishConnection::set_duration_millis(int64_t value) {
  _internal_set_duration_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.duration_millis)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 6;
inline bool SharingLog_EstablishConnection::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_EstablishConnection::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_EstablishConnection::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_EstablishConnection::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_EstablishConnection::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_EstablishConnection::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_EstablishConnection::release_share_target_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_EstablishConnection::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.share_target_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_EstablishConnection::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000002u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_EstablishConnection::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.share_target_info)
  return _msg;
}
inline void SharingLog_EstablishConnection::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.share_target_info)
}

// optional string referrer_name = 7;
inline bool SharingLog_EstablishConnection::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_EstablishConnection::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_EstablishConnection::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_EstablishConnection::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.referrer_name)
}
inline std::string* SharingLog_EstablishConnection::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.referrer_name)
  return _s;
}
inline const std::string& SharingLog_EstablishConnection::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_EstablishConnection::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_EstablishConnection::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_EstablishConnection::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_EstablishConnection::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.referrer_name)
}

// optional bool qr_code_flow = 8;
inline bool SharingLog_EstablishConnection::_internal_has_qr_code_flow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_qr_code_flow() const {
  return _internal_has_qr_code_flow();
}
inline void SharingLog_EstablishConnection::clear_qr_code_flow() {
  qr_code_flow_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SharingLog_EstablishConnection::_internal_qr_code_flow() const {
  return qr_code_flow_;
}
inline bool SharingLog_EstablishConnection::qr_code_flow() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.qr_code_flow)
  return _internal_qr_code_flow();
}
inline void SharingLog_EstablishConnection::_internal_set_qr_code_flow(bool value) {
  _has_bits_[0] |= 0x00000080u;
  qr_code_flow_ = value;
}
inline void SharingLog_EstablishConnection::set_qr_code_flow(bool value) {
  _internal_set_qr_code_flow(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.qr_code_flow)
}

// optional bool is_incoming_connection = 9;
inline bool SharingLog_EstablishConnection::_internal_has_is_incoming_connection() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SharingLog_EstablishConnection::has_is_incoming_connection() const {
  return _internal_has_is_incoming_connection();
}
inline void SharingLog_EstablishConnection::clear_is_incoming_connection() {
  is_incoming_connection_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SharingLog_EstablishConnection::_internal_is_incoming_connection() const {
  return is_incoming_connection_;
}
inline bool SharingLog_EstablishConnection::is_incoming_connection() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.is_incoming_connection)
  return _internal_is_incoming_connection();
}
inline void SharingLog_EstablishConnection::_internal_set_is_incoming_connection(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_incoming_connection_ = value;
}
inline void SharingLog_EstablishConnection::set_is_incoming_connection(bool value) {
  _internal_set_is_incoming_connection(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EstablishConnection.is_incoming_connection)
}

// -------------------------------------------------------------------

// SharingLog_AcceptAgreements

// -------------------------------------------------------------------

// SharingLog_DeclineAgreements

// -------------------------------------------------------------------

// SharingLog_EnableNearbySharing

// optional .location.nearby.proto.sharing.NearbySharingStatus status = 1;
inline bool SharingLog_EnableNearbySharing::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_EnableNearbySharing::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_EnableNearbySharing::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::NearbySharingStatus SharingLog_EnableNearbySharing::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::NearbySharingStatus >(status_);
}
inline ::location::nearby::proto::sharing::NearbySharingStatus SharingLog_EnableNearbySharing::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing.status)
  return _internal_status();
}
inline void SharingLog_EnableNearbySharing::_internal_set_status(::location::nearby::proto::sharing::NearbySharingStatus value) {
  assert(::location::nearby::proto::sharing::NearbySharingStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SharingLog_EnableNearbySharing::set_status(::location::nearby::proto::sharing::NearbySharingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing.status)
}

// optional bool has_opted_in = 2;
inline bool SharingLog_EnableNearbySharing::_internal_has_has_opted_in() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_EnableNearbySharing::has_has_opted_in() const {
  return _internal_has_has_opted_in();
}
inline void SharingLog_EnableNearbySharing::clear_has_opted_in() {
  has_opted_in_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_EnableNearbySharing::_internal_has_opted_in() const {
  return has_opted_in_;
}
inline bool SharingLog_EnableNearbySharing::has_opted_in() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing.has_opted_in)
  return _internal_has_opted_in();
}
inline void SharingLog_EnableNearbySharing::_internal_set_has_opted_in(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_opted_in_ = value;
}
inline void SharingLog_EnableNearbySharing::set_has_opted_in(bool value) {
  _internal_set_has_opted_in(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing.has_opted_in)
}

// -------------------------------------------------------------------

// SharingLog_SetAccount

// optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
inline bool SharingLog_SetAccount::_internal_has_activity_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SetAccount::has_activity_name() const {
  return _internal_has_activity_name();
}
inline void SharingLog_SetAccount::clear_activity_name() {
  activity_name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_SetAccount::_internal_activity_name() const {
  return static_cast< ::location::nearby::proto::sharing::ActivityName >(activity_name_);
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_SetAccount::activity_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetAccount.activity_name)
  return _internal_activity_name();
}
inline void SharingLog_SetAccount::_internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  assert(::location::nearby::proto::sharing::ActivityName_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  activity_name_ = value;
}
inline void SharingLog_SetAccount::set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  _internal_set_activity_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetAccount.activity_name)
}

// -------------------------------------------------------------------

// SharingLog_SetVisibility

// optional .location.nearby.proto.sharing.Visibility visibility = 1;
inline bool SharingLog_SetVisibility::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SetVisibility::has_visibility() const {
  return _internal_has_visibility();
}
inline void SharingLog_SetVisibility::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetVisibility::_internal_visibility() const {
  return static_cast< ::location::nearby::proto::sharing::Visibility >(visibility_);
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetVisibility::visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetVisibility.visibility)
  return _internal_visibility();
}
inline void SharingLog_SetVisibility::_internal_set_visibility(::location::nearby::proto::sharing::Visibility value) {
  assert(::location::nearby::proto::sharing::Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  visibility_ = value;
}
inline void SharingLog_SetVisibility::set_visibility(::location::nearby::proto::sharing::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetVisibility.visibility)
}

// optional .location.nearby.proto.sharing.Visibility source_visibility = 2;
inline bool SharingLog_SetVisibility::_internal_has_source_visibility() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_SetVisibility::has_source_visibility() const {
  return _internal_has_source_visibility();
}
inline void SharingLog_SetVisibility::clear_source_visibility() {
  source_visibility_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetVisibility::_internal_source_visibility() const {
  return static_cast< ::location::nearby::proto::sharing::Visibility >(source_visibility_);
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetVisibility::source_visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetVisibility.source_visibility)
  return _internal_source_visibility();
}
inline void SharingLog_SetVisibility::_internal_set_source_visibility(::location::nearby::proto::sharing::Visibility value) {
  assert(::location::nearby::proto::sharing::Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  source_visibility_ = value;
}
inline void SharingLog_SetVisibility::set_source_visibility(::location::nearby::proto::sharing::Visibility value) {
  _internal_set_source_visibility(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetVisibility.source_visibility)
}

// optional int64 duration_millis = 3;
inline bool SharingLog_SetVisibility::_internal_has_duration_millis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_SetVisibility::has_duration_millis() const {
  return _internal_has_duration_millis();
}
inline void SharingLog_SetVisibility::clear_duration_millis() {
  duration_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_SetVisibility::_internal_duration_millis() const {
  return duration_millis_;
}
inline int64_t SharingLog_SetVisibility::duration_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetVisibility.duration_millis)
  return _internal_duration_millis();
}
inline void SharingLog_SetVisibility::_internal_set_duration_millis(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  duration_millis_ = value;
}
inline void SharingLog_SetVisibility::set_duration_millis(int64_t value) {
  _internal_set_duration_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetVisibility.duration_millis)
}

// optional .location.nearby.proto.sharing.ActivityName source_activity_name = 4;
inline bool SharingLog_SetVisibility::_internal_has_source_activity_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_SetVisibility::has_source_activity_name() const {
  return _internal_has_source_activity_name();
}
inline void SharingLog_SetVisibility::clear_source_activity_name() {
  source_activity_name_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_SetVisibility::_internal_source_activity_name() const {
  return static_cast< ::location::nearby::proto::sharing::ActivityName >(source_activity_name_);
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_SetVisibility::source_activity_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetVisibility.source_activity_name)
  return _internal_source_activity_name();
}
inline void SharingLog_SetVisibility::_internal_set_source_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  assert(::location::nearby::proto::sharing::ActivityName_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  source_activity_name_ = value;
}
inline void SharingLog_SetVisibility::set_source_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  _internal_set_source_activity_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetVisibility.source_activity_name)
}

// -------------------------------------------------------------------

// SharingLog_SetDataUsage

// optional .location.nearby.proto.sharing.DataUsage original_preference = 1;
inline bool SharingLog_SetDataUsage::_internal_has_original_preference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SetDataUsage::has_original_preference() const {
  return _internal_has_original_preference();
}
inline void SharingLog_SetDataUsage::clear_original_preference() {
  original_preference_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_SetDataUsage::_internal_original_preference() const {
  return static_cast< ::location::nearby::proto::sharing::DataUsage >(original_preference_);
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_SetDataUsage::original_preference() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetDataUsage.original_preference)
  return _internal_original_preference();
}
inline void SharingLog_SetDataUsage::_internal_set_original_preference(::location::nearby::proto::sharing::DataUsage value) {
  assert(::location::nearby::proto::sharing::DataUsage_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  original_preference_ = value;
}
inline void SharingLog_SetDataUsage::set_original_preference(::location::nearby::proto::sharing::DataUsage value) {
  _internal_set_original_preference(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetDataUsage.original_preference)
}

// optional .location.nearby.proto.sharing.DataUsage preference = 2;
inline bool SharingLog_SetDataUsage::_internal_has_preference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_SetDataUsage::has_preference() const {
  return _internal_has_preference();
}
inline void SharingLog_SetDataUsage::clear_preference() {
  preference_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_SetDataUsage::_internal_preference() const {
  return static_cast< ::location::nearby::proto::sharing::DataUsage >(preference_);
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_SetDataUsage::preference() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetDataUsage.preference)
  return _internal_preference();
}
inline void SharingLog_SetDataUsage::_internal_set_preference(::location::nearby::proto::sharing::DataUsage value) {
  assert(::location::nearby::proto::sharing::DataUsage_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  preference_ = value;
}
inline void SharingLog_SetDataUsage::set_preference(::location::nearby::proto::sharing::DataUsage value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetDataUsage.preference)
}

// -------------------------------------------------------------------

// SharingLog_ScanForShareTargetsStart

// optional int64 session_id = 1;
inline bool SharingLog_ScanForShareTargetsStart::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsStart::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ScanForShareTargetsStart::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_ScanForShareTargetsStart::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ScanForShareTargetsStart::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.session_id)
  return _internal_session_id();
}
inline void SharingLog_ScanForShareTargetsStart::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_ScanForShareTargetsStart::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.session_id)
}

// optional .location.nearby.proto.sharing.SessionStatus status = 2;
inline bool SharingLog_ScanForShareTargetsStart::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsStart::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_ScanForShareTargetsStart::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::SessionStatus SharingLog_ScanForShareTargetsStart::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::SessionStatus >(status_);
}
inline ::location::nearby::proto::sharing::SessionStatus SharingLog_ScanForShareTargetsStart::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.status)
  return _internal_status();
}
inline void SharingLog_ScanForShareTargetsStart::_internal_set_status(::location::nearby::proto::sharing::SessionStatus value) {
  assert(::location::nearby::proto::sharing::SessionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void SharingLog_ScanForShareTargetsStart::set_status(::location::nearby::proto::sharing::SessionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.status)
}

// optional .location.nearby.proto.sharing.ScanType scan_type = 3;
inline bool SharingLog_ScanForShareTargetsStart::_internal_has_scan_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsStart::has_scan_type() const {
  return _internal_has_scan_type();
}
inline void SharingLog_ScanForShareTargetsStart::clear_scan_type() {
  scan_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_ScanForShareTargetsStart::_internal_scan_type() const {
  return static_cast< ::location::nearby::proto::sharing::ScanType >(scan_type_);
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_ScanForShareTargetsStart::scan_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.scan_type)
  return _internal_scan_type();
}
inline void SharingLog_ScanForShareTargetsStart::_internal_set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  assert(::location::nearby::proto::sharing::ScanType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  scan_type_ = value;
}
inline void SharingLog_ScanForShareTargetsStart::set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  _internal_set_scan_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.scan_type)
}

// optional int64 flow_id = 4;
inline bool SharingLog_ScanForShareTargetsStart::_internal_has_flow_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsStart::has_flow_id() const {
  return _internal_has_flow_id();
}
inline void SharingLog_ScanForShareTargetsStart::clear_flow_id() {
  flow_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_ScanForShareTargetsStart::_internal_flow_id() const {
  return flow_id_;
}
inline int64_t SharingLog_ScanForShareTargetsStart::flow_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.flow_id)
  return _internal_flow_id();
}
inline void SharingLog_ScanForShareTargetsStart::_internal_set_flow_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  flow_id_ = value;
}
inline void SharingLog_ScanForShareTargetsStart::set_flow_id(int64_t value) {
  _internal_set_flow_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.flow_id)
}

// optional string referrer_name = 5;
inline bool SharingLog_ScanForShareTargetsStart::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsStart::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_ScanForShareTargetsStart::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_ScanForShareTargetsStart::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_ScanForShareTargetsStart::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.referrer_name)
}
inline std::string* SharingLog_ScanForShareTargetsStart::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.referrer_name)
  return _s;
}
inline const std::string& SharingLog_ScanForShareTargetsStart::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_ScanForShareTargetsStart::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_ScanForShareTargetsStart::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_ScanForShareTargetsStart::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_ScanForShareTargetsStart::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart.referrer_name)
}

// -------------------------------------------------------------------

// SharingLog_ScanForShareTargetsEnd

// optional int64 session_id = 1;
inline bool SharingLog_ScanForShareTargetsEnd::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ScanForShareTargetsEnd::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ScanForShareTargetsEnd::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_ScanForShareTargetsEnd::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ScanForShareTargetsEnd::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd.session_id)
  return _internal_session_id();
}
inline void SharingLog_ScanForShareTargetsEnd::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void SharingLog_ScanForShareTargetsEnd::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd.session_id)
}

// -------------------------------------------------------------------

// SharingLog_AdvertiseDevicePresenceStart

// optional int64 session_id = 1 [deprecated = true];
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_AdvertiseDevicePresenceStart::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_AdvertiseDevicePresenceStart::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.session_id)
  return _internal_session_id();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.session_id)
}

// optional .location.nearby.proto.sharing.Visibility visibility = 2;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_visibility() const {
  return _internal_has_visibility();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_AdvertiseDevicePresenceStart::_internal_visibility() const {
  return static_cast< ::location::nearby::proto::sharing::Visibility >(visibility_);
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_AdvertiseDevicePresenceStart::visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.visibility)
  return _internal_visibility();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_visibility(::location::nearby::proto::sharing::Visibility value) {
  assert(::location::nearby::proto::sharing::Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  visibility_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_visibility(::location::nearby::proto::sharing::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.visibility)
}

// optional .location.nearby.proto.sharing.SessionStatus status = 3;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::SessionStatus SharingLog_AdvertiseDevicePresenceStart::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::SessionStatus >(status_);
}
inline ::location::nearby::proto::sharing::SessionStatus SharingLog_AdvertiseDevicePresenceStart::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.status)
  return _internal_status();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_status(::location::nearby::proto::sharing::SessionStatus value) {
  assert(::location::nearby::proto::sharing::SessionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_status(::location::nearby::proto::sharing::SessionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.status)
}

// optional .location.nearby.proto.sharing.DataUsage data_usage = 4;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_data_usage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_data_usage() const {
  return _internal_has_data_usage();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_data_usage() {
  data_usage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_AdvertiseDevicePresenceStart::_internal_data_usage() const {
  return static_cast< ::location::nearby::proto::sharing::DataUsage >(data_usage_);
}
inline ::location::nearby::proto::sharing::DataUsage SharingLog_AdvertiseDevicePresenceStart::data_usage() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.data_usage)
  return _internal_data_usage();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_data_usage(::location::nearby::proto::sharing::DataUsage value) {
  assert(::location::nearby::proto::sharing::DataUsage_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  data_usage_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_data_usage(::location::nearby::proto::sharing::DataUsage value) {
  _internal_set_data_usage(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.data_usage)
}

// optional int32 device_name_size = 5 [deprecated = true];
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_device_name_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_device_name_size() const {
  return _internal_has_device_name_size();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_device_name_size() {
  device_name_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t SharingLog_AdvertiseDevicePresenceStart::_internal_device_name_size() const {
  return device_name_size_;
}
inline int32_t SharingLog_AdvertiseDevicePresenceStart::device_name_size() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.device_name_size)
  return _internal_device_name_size();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_device_name_size(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  device_name_size_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_device_name_size(int32_t value) {
  _internal_set_device_name_size(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.device_name_size)
}

// optional string referrer_name = 6;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_AdvertiseDevicePresenceStart::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AdvertiseDevicePresenceStart::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.referrer_name)
}
inline std::string* SharingLog_AdvertiseDevicePresenceStart::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.referrer_name)
  return _s;
}
inline const std::string& SharingLog_AdvertiseDevicePresenceStart::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AdvertiseDevicePresenceStart::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AdvertiseDevicePresenceStart::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.referrer_name)
}

// optional .location.nearby.proto.sharing.AdvertisingMode advertising_mode = 7;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_advertising_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_advertising_mode() const {
  return _internal_has_advertising_mode();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_advertising_mode() {
  advertising_mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::location::nearby::proto::sharing::AdvertisingMode SharingLog_AdvertiseDevicePresenceStart::_internal_advertising_mode() const {
  return static_cast< ::location::nearby::proto::sharing::AdvertisingMode >(advertising_mode_);
}
inline ::location::nearby::proto::sharing::AdvertisingMode SharingLog_AdvertiseDevicePresenceStart::advertising_mode() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.advertising_mode)
  return _internal_advertising_mode();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_advertising_mode(::location::nearby::proto::sharing::AdvertisingMode value) {
  assert(::location::nearby::proto::sharing::AdvertisingMode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  advertising_mode_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_advertising_mode(::location::nearby::proto::sharing::AdvertisingMode value) {
  _internal_set_advertising_mode(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.advertising_mode)
}

// optional bool qr_code_flow = 8;
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_has_qr_code_flow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::has_qr_code_flow() const {
  return _internal_has_qr_code_flow();
}
inline void SharingLog_AdvertiseDevicePresenceStart::clear_qr_code_flow() {
  qr_code_flow_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::_internal_qr_code_flow() const {
  return qr_code_flow_;
}
inline bool SharingLog_AdvertiseDevicePresenceStart::qr_code_flow() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.qr_code_flow)
  return _internal_qr_code_flow();
}
inline void SharingLog_AdvertiseDevicePresenceStart::_internal_set_qr_code_flow(bool value) {
  _has_bits_[0] |= 0x00000080u;
  qr_code_flow_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceStart::set_qr_code_flow(bool value) {
  _internal_set_qr_code_flow(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart.qr_code_flow)
}

// -------------------------------------------------------------------

// SharingLog_AdvertiseDevicePresenceEnd

// optional int64 session_id = 1 [deprecated = true];
inline bool SharingLog_AdvertiseDevicePresenceEnd::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AdvertiseDevicePresenceEnd::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_AdvertiseDevicePresenceEnd::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_AdvertiseDevicePresenceEnd::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_AdvertiseDevicePresenceEnd::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd.session_id)
  return _internal_session_id();
}
inline void SharingLog_AdvertiseDevicePresenceEnd::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void SharingLog_AdvertiseDevicePresenceEnd::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd.session_id)
}

// -------------------------------------------------------------------

// SharingLog_SendFastInitialization

// -------------------------------------------------------------------

// SharingLog_ReceiveFastInitialization

// optional int64 time_elapse_since_screen_unlock_millis = 1;
inline bool SharingLog_ReceiveFastInitialization::_internal_has_time_elapse_since_screen_unlock_millis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ReceiveFastInitialization::has_time_elapse_since_screen_unlock_millis() const {
  return _internal_has_time_elapse_since_screen_unlock_millis();
}
inline void SharingLog_ReceiveFastInitialization::clear_time_elapse_since_screen_unlock_millis() {
  time_elapse_since_screen_unlock_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_ReceiveFastInitialization::_internal_time_elapse_since_screen_unlock_millis() const {
  return time_elapse_since_screen_unlock_millis_;
}
inline int64_t SharingLog_ReceiveFastInitialization::time_elapse_since_screen_unlock_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.time_elapse_since_screen_unlock_millis)
  return _internal_time_elapse_since_screen_unlock_millis();
}
inline void SharingLog_ReceiveFastInitialization::_internal_set_time_elapse_since_screen_unlock_millis(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_elapse_since_screen_unlock_millis_ = value;
}
inline void SharingLog_ReceiveFastInitialization::set_time_elapse_since_screen_unlock_millis(int64_t value) {
  _internal_set_time_elapse_since_screen_unlock_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.time_elapse_since_screen_unlock_millis)
}

// optional bool notifications_enabled = 2;
inline bool SharingLog_ReceiveFastInitialization::_internal_has_notifications_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ReceiveFastInitialization::has_notifications_enabled() const {
  return _internal_has_notifications_enabled();
}
inline void SharingLog_ReceiveFastInitialization::clear_notifications_enabled() {
  notifications_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_ReceiveFastInitialization::_internal_notifications_enabled() const {
  return notifications_enabled_;
}
inline bool SharingLog_ReceiveFastInitialization::notifications_enabled() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.notifications_enabled)
  return _internal_notifications_enabled();
}
inline void SharingLog_ReceiveFastInitialization::_internal_set_notifications_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  notifications_enabled_ = value;
}
inline void SharingLog_ReceiveFastInitialization::set_notifications_enabled(bool value) {
  _internal_set_notifications_enabled(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.notifications_enabled)
}

// optional bool notifications_filtered = 3;
inline bool SharingLog_ReceiveFastInitialization::_internal_has_notifications_filtered() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ReceiveFastInitialization::has_notifications_filtered() const {
  return _internal_has_notifications_filtered();
}
inline void SharingLog_ReceiveFastInitialization::clear_notifications_filtered() {
  notifications_filtered_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SharingLog_ReceiveFastInitialization::_internal_notifications_filtered() const {
  return notifications_filtered_;
}
inline bool SharingLog_ReceiveFastInitialization::notifications_filtered() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.notifications_filtered)
  return _internal_notifications_filtered();
}
inline void SharingLog_ReceiveFastInitialization::_internal_set_notifications_filtered(bool value) {
  _has_bits_[0] |= 0x00000004u;
  notifications_filtered_ = value;
}
inline void SharingLog_ReceiveFastInitialization::set_notifications_filtered(bool value) {
  _internal_set_notifications_filtered(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization.notifications_filtered)
}

// -------------------------------------------------------------------

// SharingLog_DismissFastInitialization

// -------------------------------------------------------------------

// SharingLog_AutoDismissFastInitialization

// -------------------------------------------------------------------

// SharingLog_EventMetadata

// optional .location.nearby.proto.sharing.SharingUseCase use_case = 1;
inline bool SharingLog_EventMetadata::_internal_has_use_case() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_use_case() const {
  return _internal_has_use_case();
}
inline void SharingLog_EventMetadata::clear_use_case() {
  use_case_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::SharingUseCase SharingLog_EventMetadata::_internal_use_case() const {
  return static_cast< ::location::nearby::proto::sharing::SharingUseCase >(use_case_);
}
inline ::location::nearby::proto::sharing::SharingUseCase SharingLog_EventMetadata::use_case() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.use_case)
  return _internal_use_case();
}
inline void SharingLog_EventMetadata::_internal_set_use_case(::location::nearby::proto::sharing::SharingUseCase value) {
  assert(::location::nearby::proto::sharing::SharingUseCase_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  use_case_ = value;
}
inline void SharingLog_EventMetadata::set_use_case(::location::nearby::proto::sharing::SharingUseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.use_case)
}

// optional bool initial_opt_in = 2;
inline bool SharingLog_EventMetadata::_internal_has_initial_opt_in() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_initial_opt_in() const {
  return _internal_has_initial_opt_in();
}
inline void SharingLog_EventMetadata::clear_initial_opt_in() {
  initial_opt_in_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_EventMetadata::_internal_initial_opt_in() const {
  return initial_opt_in_;
}
inline bool SharingLog_EventMetadata::initial_opt_in() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.initial_opt_in)
  return _internal_initial_opt_in();
}
inline void SharingLog_EventMetadata::_internal_set_initial_opt_in(bool value) {
  _has_bits_[0] |= 0x00000002u;
  initial_opt_in_ = value;
}
inline void SharingLog_EventMetadata::set_initial_opt_in(bool value) {
  _internal_set_initial_opt_in(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.initial_opt_in)
}

// optional bool opt_in = 3;
inline bool SharingLog_EventMetadata::_internal_has_opt_in() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_opt_in() const {
  return _internal_has_opt_in();
}
inline void SharingLog_EventMetadata::clear_opt_in() {
  opt_in_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SharingLog_EventMetadata::_internal_opt_in() const {
  return opt_in_;
}
inline bool SharingLog_EventMetadata::opt_in() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.opt_in)
  return _internal_opt_in();
}
inline void SharingLog_EventMetadata::_internal_set_opt_in(bool value) {
  _has_bits_[0] |= 0x00000004u;
  opt_in_ = value;
}
inline void SharingLog_EventMetadata::set_opt_in(bool value) {
  _internal_set_opt_in(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.opt_in)
}

// optional bool initial_enable_status = 4;
inline bool SharingLog_EventMetadata::_internal_has_initial_enable_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_initial_enable_status() const {
  return _internal_has_initial_enable_status();
}
inline void SharingLog_EventMetadata::clear_initial_enable_status() {
  initial_enable_status_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SharingLog_EventMetadata::_internal_initial_enable_status() const {
  return initial_enable_status_;
}
inline bool SharingLog_EventMetadata::initial_enable_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.initial_enable_status)
  return _internal_initial_enable_status();
}
inline void SharingLog_EventMetadata::_internal_set_initial_enable_status(bool value) {
  _has_bits_[0] |= 0x00000008u;
  initial_enable_status_ = value;
}
inline void SharingLog_EventMetadata::set_initial_enable_status(bool value) {
  _internal_set_initial_enable_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.initial_enable_status)
}

// optional int64 flow_id = 5;
inline bool SharingLog_EventMetadata::_internal_has_flow_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_flow_id() const {
  return _internal_has_flow_id();
}
inline void SharingLog_EventMetadata::clear_flow_id() {
  flow_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_EventMetadata::_internal_flow_id() const {
  return flow_id_;
}
inline int64_t SharingLog_EventMetadata::flow_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.flow_id)
  return _internal_flow_id();
}
inline void SharingLog_EventMetadata::_internal_set_flow_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  flow_id_ = value;
}
inline void SharingLog_EventMetadata::set_flow_id(int64_t value) {
  _internal_set_flow_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.flow_id)
}

// optional int64 session_id = 6;
inline bool SharingLog_EventMetadata::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_EventMetadata::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t SharingLog_EventMetadata::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_EventMetadata::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.session_id)
  return _internal_session_id();
}
inline void SharingLog_EventMetadata::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  session_id_ = value;
}
inline void SharingLog_EventMetadata::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.session_id)
}

// optional int32 vendor_id = 7;
inline bool SharingLog_EventMetadata::_internal_has_vendor_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_EventMetadata::has_vendor_id() const {
  return _internal_has_vendor_id();
}
inline void SharingLog_EventMetadata::clear_vendor_id() {
  vendor_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t SharingLog_EventMetadata::_internal_vendor_id() const {
  return vendor_id_;
}
inline int32_t SharingLog_EventMetadata::vendor_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.EventMetadata.vendor_id)
  return _internal_vendor_id();
}
inline void SharingLog_EventMetadata::_internal_set_vendor_id(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  vendor_id_ = value;
}
inline void SharingLog_EventMetadata::set_vendor_id(int32_t value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.EventMetadata.vendor_id)
}

// -------------------------------------------------------------------

// SharingLog_DiscoverShareTarget

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
inline bool SharingLog_DiscoverShareTarget::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_DiscoverShareTarget::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_DiscoverShareTarget::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_DiscoverShareTarget::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_DiscoverShareTarget::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_DiscoverShareTarget::release_share_target_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_DiscoverShareTarget::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.share_target_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_DiscoverShareTarget::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000002u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_DiscoverShareTarget::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.share_target_info)
  return _msg;
}
inline void SharingLog_DiscoverShareTarget::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.share_target_info)
}

// optional .google.protobuf.Duration duration_since_scanning = 2;
inline bool SharingLog_DiscoverShareTarget::_internal_has_duration_since_scanning() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || duration_since_scanning_ != nullptr);
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_duration_since_scanning() const {
  return _internal_has_duration_since_scanning();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_DiscoverShareTarget::_internal_duration_since_scanning() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_since_scanning_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_DiscoverShareTarget::duration_since_scanning() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.duration_since_scanning)
  return _internal_duration_since_scanning();
}
inline void SharingLog_DiscoverShareTarget::unsafe_arena_set_allocated_duration_since_scanning(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning_);
  }
  duration_since_scanning_ = duration_since_scanning;
  if (duration_since_scanning) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.duration_since_scanning)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_DiscoverShareTarget::release_duration_since_scanning() {
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_scanning_;
  duration_since_scanning_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_DiscoverShareTarget::unsafe_arena_release_duration_since_scanning() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.duration_since_scanning)
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_scanning_;
  duration_since_scanning_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_DiscoverShareTarget::_internal_mutable_duration_since_scanning() {
  _has_bits_[0] |= 0x00000004u;
  if (duration_since_scanning_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_since_scanning_ = p;
  }
  return duration_since_scanning_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_DiscoverShareTarget::mutable_duration_since_scanning() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration_since_scanning();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.duration_since_scanning)
  return _msg;
}
inline void SharingLog_DiscoverShareTarget::set_allocated_duration_since_scanning(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning_);
  }
  if (duration_since_scanning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning));
    if (message_arena != submessage_arena) {
      duration_since_scanning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_since_scanning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  duration_since_scanning_ = duration_since_scanning;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.duration_since_scanning)
}

// optional int64 session_id = 3;
inline bool SharingLog_DiscoverShareTarget::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_DiscoverShareTarget::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SharingLog_DiscoverShareTarget::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_DiscoverShareTarget::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.session_id)
  return _internal_session_id();
}
inline void SharingLog_DiscoverShareTarget::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  session_id_ = value;
}
inline void SharingLog_DiscoverShareTarget::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.session_id)
}

// optional int64 flow_id = 4;
inline bool SharingLog_DiscoverShareTarget::_internal_has_flow_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_flow_id() const {
  return _internal_has_flow_id();
}
inline void SharingLog_DiscoverShareTarget::clear_flow_id() {
  flow_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_DiscoverShareTarget::_internal_flow_id() const {
  return flow_id_;
}
inline int64_t SharingLog_DiscoverShareTarget::flow_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.flow_id)
  return _internal_flow_id();
}
inline void SharingLog_DiscoverShareTarget::_internal_set_flow_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  flow_id_ = value;
}
inline void SharingLog_DiscoverShareTarget::set_flow_id(int64_t value) {
  _internal_set_flow_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.flow_id)
}

// optional string referrer_name = 5;
inline bool SharingLog_DiscoverShareTarget::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_DiscoverShareTarget::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_DiscoverShareTarget::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_DiscoverShareTarget::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.referrer_name)
}
inline std::string* SharingLog_DiscoverShareTarget::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.referrer_name)
  return _s;
}
inline const std::string& SharingLog_DiscoverShareTarget::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_DiscoverShareTarget::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_DiscoverShareTarget::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_DiscoverShareTarget::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_DiscoverShareTarget::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.referrer_name)
}

// optional int64 latency_since_activity_start_millis = 6 [default = -1];
inline bool SharingLog_DiscoverShareTarget::_internal_has_latency_since_activity_start_millis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_latency_since_activity_start_millis() const {
  return _internal_has_latency_since_activity_start_millis();
}
inline void SharingLog_DiscoverShareTarget::clear_latency_since_activity_start_millis() {
  latency_since_activity_start_millis_ = int64_t{-1};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t SharingLog_DiscoverShareTarget::_internal_latency_since_activity_start_millis() const {
  return latency_since_activity_start_millis_;
}
inline int64_t SharingLog_DiscoverShareTarget::latency_since_activity_start_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.latency_since_activity_start_millis)
  return _internal_latency_since_activity_start_millis();
}
inline void SharingLog_DiscoverShareTarget::_internal_set_latency_since_activity_start_millis(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  latency_since_activity_start_millis_ = value;
}
inline void SharingLog_DiscoverShareTarget::set_latency_since_activity_start_millis(int64_t value) {
  _internal_set_latency_since_activity_start_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.latency_since_activity_start_millis)
}

// optional .location.nearby.proto.sharing.ScanType scan_type = 7;
inline bool SharingLog_DiscoverShareTarget::_internal_has_scan_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_DiscoverShareTarget::has_scan_type() const {
  return _internal_has_scan_type();
}
inline void SharingLog_DiscoverShareTarget::clear_scan_type() {
  scan_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_DiscoverShareTarget::_internal_scan_type() const {
  return static_cast< ::location::nearby::proto::sharing::ScanType >(scan_type_);
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_DiscoverShareTarget::scan_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.scan_type)
  return _internal_scan_type();
}
inline void SharingLog_DiscoverShareTarget::_internal_set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  assert(::location::nearby::proto::sharing::ScanType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  scan_type_ = value;
}
inline void SharingLog_DiscoverShareTarget::set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  _internal_set_scan_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget.scan_type)
}

// -------------------------------------------------------------------

// SharingLog_ParsingFailedEndpointId

// optional string endpoint_id = 1;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_endpoint_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_endpoint_id() const {
  return _internal_has_endpoint_id();
}
inline void SharingLog_ParsingFailedEndpointId::clear_endpoint_id() {
  endpoint_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_ParsingFailedEndpointId::endpoint_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.endpoint_id)
  return _internal_endpoint_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_ParsingFailedEndpointId::set_endpoint_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 endpoint_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.endpoint_id)
}
inline std::string* SharingLog_ParsingFailedEndpointId::mutable_endpoint_id() {
  std::string* _s = _internal_mutable_endpoint_id();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.endpoint_id)
  return _s;
}
inline const std::string& SharingLog_ParsingFailedEndpointId::_internal_endpoint_id() const {
  return endpoint_id_.Get();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_endpoint_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  endpoint_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_ParsingFailedEndpointId::_internal_mutable_endpoint_id() {
  _has_bits_[0] |= 0x00000001u;
  return endpoint_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_ParsingFailedEndpointId::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.endpoint_id)
  if (!_internal_has_endpoint_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = endpoint_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (endpoint_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_ParsingFailedEndpointId::set_allocated_endpoint_id(std::string* endpoint_id) {
  if (endpoint_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  endpoint_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (endpoint_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.endpoint_id)
}

// optional .google.protobuf.Duration duration_since_scanning = 2;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_duration_since_scanning() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || duration_since_scanning_ != nullptr);
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_duration_since_scanning() const {
  return _internal_has_duration_since_scanning();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_ParsingFailedEndpointId::_internal_duration_since_scanning() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_since_scanning_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_ParsingFailedEndpointId::duration_since_scanning() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_scanning)
  return _internal_duration_since_scanning();
}
inline void SharingLog_ParsingFailedEndpointId::unsafe_arena_set_allocated_duration_since_scanning(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning_);
  }
  duration_since_scanning_ = duration_since_scanning;
  if (duration_since_scanning) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_scanning)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::release_duration_since_scanning() {
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_scanning_;
  duration_since_scanning_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::unsafe_arena_release_duration_since_scanning() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_scanning)
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_scanning_;
  duration_since_scanning_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::_internal_mutable_duration_since_scanning() {
  _has_bits_[0] |= 0x00000004u;
  if (duration_since_scanning_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_since_scanning_ = p;
  }
  return duration_since_scanning_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::mutable_duration_since_scanning() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration_since_scanning();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_scanning)
  return _msg;
}
inline void SharingLog_ParsingFailedEndpointId::set_allocated_duration_since_scanning(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_scanning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning_);
  }
  if (duration_since_scanning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_scanning));
    if (message_arena != submessage_arena) {
      duration_since_scanning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_since_scanning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  duration_since_scanning_ = duration_since_scanning;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_scanning)
}

// optional int64 session_id = 3;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ParsingFailedEndpointId::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_ParsingFailedEndpointId::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ParsingFailedEndpointId::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.session_id)
  return _internal_session_id();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  session_id_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.session_id)
}

// optional int64 flow_id = 4;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_flow_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_flow_id() const {
  return _internal_has_flow_id();
}
inline void SharingLog_ParsingFailedEndpointId::clear_flow_id() {
  flow_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t SharingLog_ParsingFailedEndpointId::_internal_flow_id() const {
  return flow_id_;
}
inline int64_t SharingLog_ParsingFailedEndpointId::flow_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.flow_id)
  return _internal_flow_id();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_flow_id(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  flow_id_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_flow_id(int64_t value) {
  _internal_set_flow_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.flow_id)
}

// optional string referrer_name = 5;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_ParsingFailedEndpointId::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingLog_ParsingFailedEndpointId::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_ParsingFailedEndpointId::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.referrer_name)
}
inline std::string* SharingLog_ParsingFailedEndpointId::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.referrer_name)
  return _s;
}
inline const std::string& SharingLog_ParsingFailedEndpointId::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_ParsingFailedEndpointId::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000002u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_ParsingFailedEndpointId::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_ParsingFailedEndpointId::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.referrer_name)
}

// optional int64 latency_since_activity_start_millis = 6 [default = -1];
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_latency_since_activity_start_millis() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_latency_since_activity_start_millis() const {
  return _internal_has_latency_since_activity_start_millis();
}
inline void SharingLog_ParsingFailedEndpointId::clear_latency_since_activity_start_millis() {
  latency_since_activity_start_millis_ = int64_t{-1};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t SharingLog_ParsingFailedEndpointId::_internal_latency_since_activity_start_millis() const {
  return latency_since_activity_start_millis_;
}
inline int64_t SharingLog_ParsingFailedEndpointId::latency_since_activity_start_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.latency_since_activity_start_millis)
  return _internal_latency_since_activity_start_millis();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_latency_since_activity_start_millis(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  latency_since_activity_start_millis_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_latency_since_activity_start_millis(int64_t value) {
  _internal_set_latency_since_activity_start_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.latency_since_activity_start_millis)
}

// optional .location.nearby.proto.sharing.ScanType scan_type = 7;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_scan_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_scan_type() const {
  return _internal_has_scan_type();
}
inline void SharingLog_ParsingFailedEndpointId::clear_scan_type() {
  scan_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_ParsingFailedEndpointId::_internal_scan_type() const {
  return static_cast< ::location::nearby::proto::sharing::ScanType >(scan_type_);
}
inline ::location::nearby::proto::sharing::ScanType SharingLog_ParsingFailedEndpointId::scan_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.scan_type)
  return _internal_scan_type();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  assert(::location::nearby::proto::sharing::ScanType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  scan_type_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_scan_type(::location::nearby::proto::sharing::ScanType value) {
  _internal_set_scan_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.scan_type)
}

// optional .google.protobuf.Duration duration_since_last_sync = 8;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_duration_since_last_sync() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || duration_since_last_sync_ != nullptr);
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_duration_since_last_sync() const {
  return _internal_has_duration_since_last_sync();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_ParsingFailedEndpointId::_internal_duration_since_last_sync() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_since_last_sync_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SharingLog_ParsingFailedEndpointId::duration_since_last_sync() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_last_sync)
  return _internal_duration_since_last_sync();
}
inline void SharingLog_ParsingFailedEndpointId::unsafe_arena_set_allocated_duration_since_last_sync(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_since_last_sync) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_last_sync_);
  }
  duration_since_last_sync_ = duration_since_last_sync;
  if (duration_since_last_sync) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_last_sync)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::release_duration_since_last_sync() {
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_last_sync_;
  duration_since_last_sync_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::unsafe_arena_release_duration_since_last_sync() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_last_sync)
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_since_last_sync_;
  duration_since_last_sync_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::_internal_mutable_duration_since_last_sync() {
  _has_bits_[0] |= 0x00000008u;
  if (duration_since_last_sync_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_since_last_sync_ = p;
  }
  return duration_since_last_sync_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SharingLog_ParsingFailedEndpointId::mutable_duration_since_last_sync() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration_since_last_sync();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_last_sync)
  return _msg;
}
inline void SharingLog_ParsingFailedEndpointId::set_allocated_duration_since_last_sync(::PROTOBUF_NAMESPACE_ID::Duration* duration_since_last_sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_last_sync_);
  }
  if (duration_since_last_sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_since_last_sync));
    if (message_arena != submessage_arena) {
      duration_since_last_sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_since_last_sync, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  duration_since_last_sync_ = duration_since_last_sync;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.duration_since_last_sync)
}

// optional .location.nearby.proto.sharing.ParsingFailedType parsing_failed_type = 9;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_parsing_failed_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_parsing_failed_type() const {
  return _internal_has_parsing_failed_type();
}
inline void SharingLog_ParsingFailedEndpointId::clear_parsing_failed_type() {
  parsing_failed_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::location::nearby::proto::sharing::ParsingFailedType SharingLog_ParsingFailedEndpointId::_internal_parsing_failed_type() const {
  return static_cast< ::location::nearby::proto::sharing::ParsingFailedType >(parsing_failed_type_);
}
inline ::location::nearby::proto::sharing::ParsingFailedType SharingLog_ParsingFailedEndpointId::parsing_failed_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.parsing_failed_type)
  return _internal_parsing_failed_type();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_parsing_failed_type(::location::nearby::proto::sharing::ParsingFailedType value) {
  assert(::location::nearby::proto::sharing::ParsingFailedType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  parsing_failed_type_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_parsing_failed_type(::location::nearby::proto::sharing::ParsingFailedType value) {
  _internal_set_parsing_failed_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.parsing_failed_type)
}

// optional .location.nearby.proto.sharing.DiscoveryMode discovery_mode = 10;
inline bool SharingLog_ParsingFailedEndpointId::_internal_has_discovery_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SharingLog_ParsingFailedEndpointId::has_discovery_mode() const {
  return _internal_has_discovery_mode();
}
inline void SharingLog_ParsingFailedEndpointId::clear_discovery_mode() {
  discovery_mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::location::nearby::proto::sharing::DiscoveryMode SharingLog_ParsingFailedEndpointId::_internal_discovery_mode() const {
  return static_cast< ::location::nearby::proto::sharing::DiscoveryMode >(discovery_mode_);
}
inline ::location::nearby::proto::sharing::DiscoveryMode SharingLog_ParsingFailedEndpointId::discovery_mode() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.discovery_mode)
  return _internal_discovery_mode();
}
inline void SharingLog_ParsingFailedEndpointId::_internal_set_discovery_mode(::location::nearby::proto::sharing::DiscoveryMode value) {
  assert(::location::nearby::proto::sharing::DiscoveryMode_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  discovery_mode_ = value;
}
inline void SharingLog_ParsingFailedEndpointId::set_discovery_mode(::location::nearby::proto::sharing::DiscoveryMode value) {
  _internal_set_discovery_mode(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId.discovery_mode)
}

// -------------------------------------------------------------------

// SharingLog_DescribeAttachments

// optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 1;
inline bool SharingLog_DescribeAttachments::_internal_has_attachments_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachments_info_ != nullptr);
  return value;
}
inline bool SharingLog_DescribeAttachments::has_attachments_info() const {
  return _internal_has_attachments_info();
}
inline void SharingLog_DescribeAttachments::clear_attachments_info() {
  if (attachments_info_ != nullptr) attachments_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_DescribeAttachments::_internal_attachments_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* p = attachments_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AttachmentsInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_DescribeAttachments::attachments_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments.attachments_info)
  return _internal_attachments_info();
}
inline void SharingLog_DescribeAttachments::unsafe_arena_set_allocated_attachments_info(
    ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachments_info_);
  }
  attachments_info_ = attachments_info;
  if (attachments_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments.attachments_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_DescribeAttachments::release_attachments_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_DescribeAttachments::unsafe_arena_release_attachments_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments.attachments_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_DescribeAttachments::_internal_mutable_attachments_info() {
  _has_bits_[0] |= 0x00000001u;
  if (attachments_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(GetArenaForAllocation());
    attachments_info_ = p;
  }
  return attachments_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_DescribeAttachments::mutable_attachments_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _msg = _internal_mutable_attachments_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments.attachments_info)
  return _msg;
}
inline void SharingLog_DescribeAttachments::set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachments_info_;
  }
  if (attachments_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>::GetOwningArena(attachments_info);
    if (message_arena != submessage_arena) {
      attachments_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachments_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachments_info_ = attachments_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.DescribeAttachments.attachments_info)
}

// -------------------------------------------------------------------

// SharingLog_SendIntroduction

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 1;
inline bool SharingLog_SendIntroduction::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_SendIntroduction::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_SendIntroduction::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendIntroduction::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendIntroduction::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_SendIntroduction::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendIntroduction::release_share_target_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendIntroduction::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.share_target_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendIntroduction::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000001u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendIntroduction::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.share_target_info)
  return _msg;
}
inline void SharingLog_SendIntroduction::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.share_target_info)
}

// optional int64 session_id = 2;
inline bool SharingLog_SendIntroduction::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_SendIntroduction::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_SendIntroduction::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_SendIntroduction::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_SendIntroduction::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.session_id)
  return _internal_session_id();
}
inline void SharingLog_SendIntroduction::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_SendIntroduction::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.session_id)
}

// optional int32 transfer_position = 3;
inline bool SharingLog_SendIntroduction::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_SendIntroduction::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_SendIntroduction::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingLog_SendIntroduction::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_SendIntroduction::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_SendIntroduction::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_position_ = value;
}
inline void SharingLog_SendIntroduction::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.transfer_position)
}

// optional int32 concurrent_connections = 4;
inline bool SharingLog_SendIntroduction::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_SendIntroduction::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_SendIntroduction::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SharingLog_SendIntroduction::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_SendIntroduction::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_SendIntroduction::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  concurrent_connections_ = value;
}
inline void SharingLog_SendIntroduction::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendIntroduction.concurrent_connections)
}

// -------------------------------------------------------------------

// SharingLog_ReceiveIntroduction

// optional int64 session_id = 1;
inline bool SharingLog_ReceiveIntroduction::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ReceiveIntroduction::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ReceiveIntroduction::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_ReceiveIntroduction::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ReceiveIntroduction::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.session_id)
  return _internal_session_id();
}
inline void SharingLog_ReceiveIntroduction::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void SharingLog_ReceiveIntroduction::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.session_id)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 2;
inline bool SharingLog_ReceiveIntroduction::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_ReceiveIntroduction::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_ReceiveIntroduction::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveIntroduction::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveIntroduction::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_ReceiveIntroduction::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveIntroduction::release_share_target_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveIntroduction::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.share_target_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveIntroduction::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000002u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveIntroduction::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.share_target_info)
  return _msg;
}
inline void SharingLog_ReceiveIntroduction::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.share_target_info)
}

// optional string referrer_name = 3;
inline bool SharingLog_ReceiveIntroduction::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ReceiveIntroduction::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_ReceiveIntroduction::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_ReceiveIntroduction::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_ReceiveIntroduction::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.referrer_name)
}
inline std::string* SharingLog_ReceiveIntroduction::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.referrer_name)
  return _s;
}
inline const std::string& SharingLog_ReceiveIntroduction::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_ReceiveIntroduction::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_ReceiveIntroduction::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_ReceiveIntroduction::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_ReceiveIntroduction::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction.referrer_name)
}

// -------------------------------------------------------------------

// SharingLog_RespondToIntroduction

// optional .location.nearby.proto.sharing.ResponseToIntroduction action = 1;
inline bool SharingLog_RespondToIntroduction::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_RespondToIntroduction::has_action() const {
  return _internal_has_action();
}
inline void SharingLog_RespondToIntroduction::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::ResponseToIntroduction SharingLog_RespondToIntroduction::_internal_action() const {
  return static_cast< ::location::nearby::proto::sharing::ResponseToIntroduction >(action_);
}
inline ::location::nearby::proto::sharing::ResponseToIntroduction SharingLog_RespondToIntroduction::action() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.action)
  return _internal_action();
}
inline void SharingLog_RespondToIntroduction::_internal_set_action(::location::nearby::proto::sharing::ResponseToIntroduction value) {
  assert(::location::nearby::proto::sharing::ResponseToIntroduction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void SharingLog_RespondToIntroduction::set_action(::location::nearby::proto::sharing::ResponseToIntroduction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.action)
}

// optional int64 session_id = 2;
inline bool SharingLog_RespondToIntroduction::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_RespondToIntroduction::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_RespondToIntroduction::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_RespondToIntroduction::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_RespondToIntroduction::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.session_id)
  return _internal_session_id();
}
inline void SharingLog_RespondToIntroduction::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void SharingLog_RespondToIntroduction::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.session_id)
}

// optional bool qr_code_flow = 3;
inline bool SharingLog_RespondToIntroduction::_internal_has_qr_code_flow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_RespondToIntroduction::has_qr_code_flow() const {
  return _internal_has_qr_code_flow();
}
inline void SharingLog_RespondToIntroduction::clear_qr_code_flow() {
  qr_code_flow_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SharingLog_RespondToIntroduction::_internal_qr_code_flow() const {
  return qr_code_flow_;
}
inline bool SharingLog_RespondToIntroduction::qr_code_flow() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.qr_code_flow)
  return _internal_qr_code_flow();
}
inline void SharingLog_RespondToIntroduction::_internal_set_qr_code_flow(bool value) {
  _has_bits_[0] |= 0x00000004u;
  qr_code_flow_ = value;
}
inline void SharingLog_RespondToIntroduction::set_qr_code_flow(bool value) {
  _internal_set_qr_code_flow(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction.qr_code_flow)
}

// -------------------------------------------------------------------

// SharingLog_SendAttachmentsStart

// optional int64 session_id = 1;
inline bool SharingLog_SendAttachmentsStart::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsStart::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_SendAttachmentsStart::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_SendAttachmentsStart::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_SendAttachmentsStart::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.session_id)
  return _internal_session_id();
}
inline void SharingLog_SendAttachmentsStart::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_SendAttachmentsStart::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.session_id)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
inline bool SharingLog_SendAttachmentsStart::_internal_has_attachments_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachments_info_ != nullptr);
  return value;
}
inline bool SharingLog_SendAttachmentsStart::has_attachments_info() const {
  return _internal_has_attachments_info();
}
inline void SharingLog_SendAttachmentsStart::clear_attachments_info() {
  if (attachments_info_ != nullptr) attachments_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_SendAttachmentsStart::_internal_attachments_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* p = attachments_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AttachmentsInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_SendAttachmentsStart::attachments_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.attachments_info)
  return _internal_attachments_info();
}
inline void SharingLog_SendAttachmentsStart::unsafe_arena_set_allocated_attachments_info(
    ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachments_info_);
  }
  attachments_info_ = attachments_info;
  if (attachments_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.attachments_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsStart::release_attachments_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsStart::unsafe_arena_release_attachments_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.attachments_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsStart::_internal_mutable_attachments_info() {
  _has_bits_[0] |= 0x00000001u;
  if (attachments_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(GetArenaForAllocation());
    attachments_info_ = p;
  }
  return attachments_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsStart::mutable_attachments_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _msg = _internal_mutable_attachments_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.attachments_info)
  return _msg;
}
inline void SharingLog_SendAttachmentsStart::set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachments_info_;
  }
  if (attachments_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>::GetOwningArena(attachments_info);
    if (message_arena != submessage_arena) {
      attachments_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachments_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachments_info_ = attachments_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.attachments_info)
}

// optional int32 transfer_position = 3;
inline bool SharingLog_SendAttachmentsStart::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsStart::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_SendAttachmentsStart::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingLog_SendAttachmentsStart::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_SendAttachmentsStart::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_SendAttachmentsStart::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_position_ = value;
}
inline void SharingLog_SendAttachmentsStart::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.transfer_position)
}

// optional int32 concurrent_connections = 4;
inline bool SharingLog_SendAttachmentsStart::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsStart::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_SendAttachmentsStart::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SharingLog_SendAttachmentsStart::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_SendAttachmentsStart::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_SendAttachmentsStart::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  concurrent_connections_ = value;
}
inline void SharingLog_SendAttachmentsStart::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.concurrent_connections)
}

// optional bool qr_code_flow = 5;
inline bool SharingLog_SendAttachmentsStart::_internal_has_qr_code_flow() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsStart::has_qr_code_flow() const {
  return _internal_has_qr_code_flow();
}
inline void SharingLog_SendAttachmentsStart::clear_qr_code_flow() {
  qr_code_flow_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SharingLog_SendAttachmentsStart::_internal_qr_code_flow() const {
  return qr_code_flow_;
}
inline bool SharingLog_SendAttachmentsStart::qr_code_flow() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.qr_code_flow)
  return _internal_qr_code_flow();
}
inline void SharingLog_SendAttachmentsStart::_internal_set_qr_code_flow(bool value) {
  _has_bits_[0] |= 0x00000010u;
  qr_code_flow_ = value;
}
inline void SharingLog_SendAttachmentsStart::set_qr_code_flow(bool value) {
  _internal_set_qr_code_flow(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart.qr_code_flow)
}

// -------------------------------------------------------------------

// SharingLog_SendAttachmentsEnd

// optional int64 session_id = 1;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_SendAttachmentsEnd::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SharingLog_SendAttachmentsEnd::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_SendAttachmentsEnd::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.session_id)
  return _internal_session_id();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  session_id_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.session_id)
}

// optional int64 sent_bytes = 2;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_sent_bytes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_sent_bytes() const {
  return _internal_has_sent_bytes();
}
inline void SharingLog_SendAttachmentsEnd::clear_sent_bytes() {
  sent_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_SendAttachmentsEnd::_internal_sent_bytes() const {
  return sent_bytes_;
}
inline int64_t SharingLog_SendAttachmentsEnd::sent_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.sent_bytes)
  return _internal_sent_bytes();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_sent_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  sent_bytes_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_sent_bytes(int64_t value) {
  _internal_set_sent_bytes(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.sent_bytes)
}

// optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_SendAttachmentsEnd::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::location::nearby::proto::sharing::AttachmentTransmissionStatus SharingLog_SendAttachmentsEnd::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentTransmissionStatus >(status_);
}
inline ::location::nearby::proto::sharing::AttachmentTransmissionStatus SharingLog_SendAttachmentsEnd::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.status)
  return _internal_status();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value) {
  assert(::location::nearby::proto::sharing::AttachmentTransmissionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.status)
}

// optional int32 transfer_position = 4;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_SendAttachmentsEnd::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t SharingLog_SendAttachmentsEnd::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_SendAttachmentsEnd::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  transfer_position_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.transfer_position)
}

// optional int32 concurrent_connections = 5;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_SendAttachmentsEnd::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t SharingLog_SendAttachmentsEnd::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_SendAttachmentsEnd::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  concurrent_connections_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.concurrent_connections)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 6;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_attachments_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || attachments_info_ != nullptr);
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_attachments_info() const {
  return _internal_has_attachments_info();
}
inline void SharingLog_SendAttachmentsEnd::clear_attachments_info() {
  if (attachments_info_ != nullptr) attachments_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_SendAttachmentsEnd::_internal_attachments_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* p = attachments_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AttachmentsInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_SendAttachmentsEnd::attachments_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.attachments_info)
  return _internal_attachments_info();
}
inline void SharingLog_SendAttachmentsEnd::unsafe_arena_set_allocated_attachments_info(
    ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachments_info_);
  }
  attachments_info_ = attachments_info;
  if (attachments_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.attachments_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsEnd::release_attachments_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsEnd::unsafe_arena_release_attachments_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.attachments_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsEnd::_internal_mutable_attachments_info() {
  _has_bits_[0] |= 0x00000002u;
  if (attachments_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(GetArenaForAllocation());
    attachments_info_ = p;
  }
  return attachments_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_SendAttachmentsEnd::mutable_attachments_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _msg = _internal_mutable_attachments_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.attachments_info)
  return _msg;
}
inline void SharingLog_SendAttachmentsEnd::set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachments_info_;
  }
  if (attachments_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>::GetOwningArena(attachments_info);
    if (message_arena != submessage_arena) {
      attachments_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachments_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attachments_info_ = attachments_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.attachments_info)
}

// optional int64 duration_millis = 7;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_duration_millis() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_duration_millis() const {
  return _internal_has_duration_millis();
}
inline void SharingLog_SendAttachmentsEnd::clear_duration_millis() {
  duration_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t SharingLog_SendAttachmentsEnd::_internal_duration_millis() const {
  return duration_millis_;
}
inline int64_t SharingLog_SendAttachmentsEnd::duration_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.duration_millis)
  return _internal_duration_millis();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_duration_millis(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  duration_millis_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_duration_millis(int64_t value) {
  _internal_set_duration_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.duration_millis)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 8;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_SendAttachmentsEnd::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendAttachmentsEnd::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendAttachmentsEnd::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_SendAttachmentsEnd::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendAttachmentsEnd::release_share_target_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendAttachmentsEnd::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.share_target_info)
  _has_bits_[0] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendAttachmentsEnd::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000004u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendAttachmentsEnd::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.share_target_info)
  return _msg;
}
inline void SharingLog_SendAttachmentsEnd::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.share_target_info)
}

// optional string referrer_name = 9;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_SendAttachmentsEnd::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_SendAttachmentsEnd::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_SendAttachmentsEnd::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.referrer_name)
}
inline std::string* SharingLog_SendAttachmentsEnd::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.referrer_name)
  return _s;
}
inline const std::string& SharingLog_SendAttachmentsEnd::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_SendAttachmentsEnd::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_SendAttachmentsEnd::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_SendAttachmentsEnd::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.referrer_name)
}

// optional .location.nearby.proto.sharing.ConnectionLayerStatus connection_layer_status = 10;
inline bool SharingLog_SendAttachmentsEnd::_internal_has_connection_layer_status() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SharingLog_SendAttachmentsEnd::has_connection_layer_status() const {
  return _internal_has_connection_layer_status();
}
inline void SharingLog_SendAttachmentsEnd::clear_connection_layer_status() {
  connection_layer_status_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::location::nearby::proto::sharing::ConnectionLayerStatus SharingLog_SendAttachmentsEnd::_internal_connection_layer_status() const {
  return static_cast< ::location::nearby::proto::sharing::ConnectionLayerStatus >(connection_layer_status_);
}
inline ::location::nearby::proto::sharing::ConnectionLayerStatus SharingLog_SendAttachmentsEnd::connection_layer_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.connection_layer_status)
  return _internal_connection_layer_status();
}
inline void SharingLog_SendAttachmentsEnd::_internal_set_connection_layer_status(::location::nearby::proto::sharing::ConnectionLayerStatus value) {
  assert(::location::nearby::proto::sharing::ConnectionLayerStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  connection_layer_status_ = value;
}
inline void SharingLog_SendAttachmentsEnd::set_connection_layer_status(::location::nearby::proto::sharing::ConnectionLayerStatus value) {
  _internal_set_connection_layer_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd.connection_layer_status)
}

// -------------------------------------------------------------------

// SharingLog_ReceiveAttachmentsStart

// optional int64 session_id = 1;
inline bool SharingLog_ReceiveAttachmentsStart::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ReceiveAttachmentsStart::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ReceiveAttachmentsStart::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_ReceiveAttachmentsStart::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ReceiveAttachmentsStart::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.session_id)
  return _internal_session_id();
}
inline void SharingLog_ReceiveAttachmentsStart::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void SharingLog_ReceiveAttachmentsStart::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.session_id)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 2;
inline bool SharingLog_ReceiveAttachmentsStart::_internal_has_attachments_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachments_info_ != nullptr);
  return value;
}
inline bool SharingLog_ReceiveAttachmentsStart::has_attachments_info() const {
  return _internal_has_attachments_info();
}
inline void SharingLog_ReceiveAttachmentsStart::clear_attachments_info() {
  if (attachments_info_ != nullptr) attachments_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_ReceiveAttachmentsStart::_internal_attachments_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* p = attachments_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AttachmentsInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_ReceiveAttachmentsStart::attachments_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.attachments_info)
  return _internal_attachments_info();
}
inline void SharingLog_ReceiveAttachmentsStart::unsafe_arena_set_allocated_attachments_info(
    ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachments_info_);
  }
  attachments_info_ = attachments_info;
  if (attachments_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.attachments_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_ReceiveAttachmentsStart::release_attachments_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_ReceiveAttachmentsStart::unsafe_arena_release_attachments_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.attachments_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_ReceiveAttachmentsStart::_internal_mutable_attachments_info() {
  _has_bits_[0] |= 0x00000001u;
  if (attachments_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(GetArenaForAllocation());
    attachments_info_ = p;
  }
  return attachments_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_ReceiveAttachmentsStart::mutable_attachments_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _msg = _internal_mutable_attachments_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.attachments_info)
  return _msg;
}
inline void SharingLog_ReceiveAttachmentsStart::set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachments_info_;
  }
  if (attachments_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>::GetOwningArena(attachments_info);
    if (message_arena != submessage_arena) {
      attachments_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachments_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachments_info_ = attachments_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.attachments_info)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 3;
inline bool SharingLog_ReceiveAttachmentsStart::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_ReceiveAttachmentsStart::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_ReceiveAttachmentsStart::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveAttachmentsStart::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveAttachmentsStart::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_ReceiveAttachmentsStart::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsStart::release_share_target_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsStart::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.share_target_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsStart::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000002u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsStart::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.share_target_info)
  return _msg;
}
inline void SharingLog_ReceiveAttachmentsStart::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart.share_target_info)
}

// -------------------------------------------------------------------

// SharingLog_ReceiveAttachmentsEnd

// optional int64 session_id = 1;
inline bool SharingLog_ReceiveAttachmentsEnd::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ReceiveAttachmentsEnd::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ReceiveAttachmentsEnd::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_ReceiveAttachmentsEnd::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ReceiveAttachmentsEnd::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.session_id)
  return _internal_session_id();
}
inline void SharingLog_ReceiveAttachmentsEnd::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void SharingLog_ReceiveAttachmentsEnd::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.session_id)
}

// optional int64 received_bytes = 2;
inline bool SharingLog_ReceiveAttachmentsEnd::_internal_has_received_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_ReceiveAttachmentsEnd::has_received_bytes() const {
  return _internal_has_received_bytes();
}
inline void SharingLog_ReceiveAttachmentsEnd::clear_received_bytes() {
  received_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SharingLog_ReceiveAttachmentsEnd::_internal_received_bytes() const {
  return received_bytes_;
}
inline int64_t SharingLog_ReceiveAttachmentsEnd::received_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.received_bytes)
  return _internal_received_bytes();
}
inline void SharingLog_ReceiveAttachmentsEnd::_internal_set_received_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  received_bytes_ = value;
}
inline void SharingLog_ReceiveAttachmentsEnd::set_received_bytes(int64_t value) {
  _internal_set_received_bytes(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.received_bytes)
}

// optional .location.nearby.proto.sharing.AttachmentTransmissionStatus status = 3;
inline bool SharingLog_ReceiveAttachmentsEnd::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_ReceiveAttachmentsEnd::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_ReceiveAttachmentsEnd::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::location::nearby::proto::sharing::AttachmentTransmissionStatus SharingLog_ReceiveAttachmentsEnd::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentTransmissionStatus >(status_);
}
inline ::location::nearby::proto::sharing::AttachmentTransmissionStatus SharingLog_ReceiveAttachmentsEnd::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.status)
  return _internal_status();
}
inline void SharingLog_ReceiveAttachmentsEnd::_internal_set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value) {
  assert(::location::nearby::proto::sharing::AttachmentTransmissionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void SharingLog_ReceiveAttachmentsEnd::set_status(::location::nearby::proto::sharing::AttachmentTransmissionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.status)
}

// optional string referrer_name = 4;
inline bool SharingLog_ReceiveAttachmentsEnd::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ReceiveAttachmentsEnd::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_ReceiveAttachmentsEnd::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_ReceiveAttachmentsEnd::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_ReceiveAttachmentsEnd::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.referrer_name)
}
inline std::string* SharingLog_ReceiveAttachmentsEnd::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.referrer_name)
  return _s;
}
inline const std::string& SharingLog_ReceiveAttachmentsEnd::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_ReceiveAttachmentsEnd::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_ReceiveAttachmentsEnd::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_ReceiveAttachmentsEnd::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_ReceiveAttachmentsEnd::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.referrer_name)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 5;
inline bool SharingLog_ReceiveAttachmentsEnd::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_ReceiveAttachmentsEnd::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_ReceiveAttachmentsEnd::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveAttachmentsEnd::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_ReceiveAttachmentsEnd::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_ReceiveAttachmentsEnd::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsEnd::release_share_target_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsEnd::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.share_target_info)
  _has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsEnd::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000002u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_ReceiveAttachmentsEnd::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.share_target_info)
  return _msg;
}
inline void SharingLog_ReceiveAttachmentsEnd::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd.share_target_info)
}

// -------------------------------------------------------------------

// SharingLog_CancelConnection

// optional int64 session_id = 1;
inline bool SharingLog_CancelConnection::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_CancelConnection::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_CancelConnection::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_CancelConnection::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_CancelConnection::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.CancelConnection.session_id)
  return _internal_session_id();
}
inline void SharingLog_CancelConnection::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void SharingLog_CancelConnection::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.CancelConnection.session_id)
}

// optional int32 transfer_position = 2;
inline bool SharingLog_CancelConnection::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_CancelConnection::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_CancelConnection::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SharingLog_CancelConnection::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_CancelConnection::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.CancelConnection.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_CancelConnection::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  transfer_position_ = value;
}
inline void SharingLog_CancelConnection::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.CancelConnection.transfer_position)
}

// optional int32 concurrent_connections = 3;
inline bool SharingLog_CancelConnection::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_CancelConnection::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_CancelConnection::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingLog_CancelConnection::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_CancelConnection::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.CancelConnection.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_CancelConnection::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  concurrent_connections_ = value;
}
inline void SharingLog_CancelConnection::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.CancelConnection.concurrent_connections)
}

// -------------------------------------------------------------------

// SharingLog_CancelSendingAttachments

// -------------------------------------------------------------------

// SharingLog_CancelReceivingAttachments

// -------------------------------------------------------------------

// SharingLog_ProcessReceivedAttachmentsEnd

// optional int64 session_id = 1;
inline bool SharingLog_ProcessReceivedAttachmentsEnd::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ProcessReceivedAttachmentsEnd::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_ProcessReceivedAttachmentsEnd::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_ProcessReceivedAttachmentsEnd::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd.session_id)
  return _internal_session_id();
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd.session_id)
}

// optional .location.nearby.proto.sharing.ProcessReceivedAttachmentsStatus status = 2;
inline bool SharingLog_ProcessReceivedAttachmentsEnd::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ProcessReceivedAttachmentsEnd::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus SharingLog_ProcessReceivedAttachmentsEnd::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus >(status_);
}
inline ::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus SharingLog_ProcessReceivedAttachmentsEnd::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd.status)
  return _internal_status();
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::_internal_set_status(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus value) {
  assert(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void SharingLog_ProcessReceivedAttachmentsEnd::set_status(::location::nearby::proto::sharing::ProcessReceivedAttachmentsStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd.status)
}

// -------------------------------------------------------------------

// SharingLog_OpenReceivedAttachments

// optional .nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo attachments_info = 3;
inline bool SharingLog_OpenReceivedAttachments::_internal_has_attachments_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachments_info_ != nullptr);
  return value;
}
inline bool SharingLog_OpenReceivedAttachments::has_attachments_info() const {
  return _internal_has_attachments_info();
}
inline void SharingLog_OpenReceivedAttachments::clear_attachments_info() {
  if (attachments_info_ != nullptr) attachments_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_OpenReceivedAttachments::_internal_attachments_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* p = attachments_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AttachmentsInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo& SharingLog_OpenReceivedAttachments::attachments_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.attachments_info)
  return _internal_attachments_info();
}
inline void SharingLog_OpenReceivedAttachments::unsafe_arena_set_allocated_attachments_info(
    ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachments_info_);
  }
  attachments_info_ = attachments_info;
  if (attachments_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.attachments_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_OpenReceivedAttachments::release_attachments_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_OpenReceivedAttachments::unsafe_arena_release_attachments_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.attachments_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* temp = attachments_info_;
  attachments_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_OpenReceivedAttachments::_internal_mutable_attachments_info() {
  _has_bits_[0] |= 0x00000001u;
  if (attachments_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>(GetArenaForAllocation());
    attachments_info_ = p;
  }
  return attachments_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* SharingLog_OpenReceivedAttachments::mutable_attachments_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* _msg = _internal_mutable_attachments_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.attachments_info)
  return _msg;
}
inline void SharingLog_OpenReceivedAttachments::set_allocated_attachments_info(::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo* attachments_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachments_info_;
  }
  if (attachments_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AttachmentsInfo>::GetOwningArena(attachments_info);
    if (message_arena != submessage_arena) {
      attachments_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachments_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachments_info_ = attachments_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.attachments_info)
}

// optional int64 session_id = 4;
inline bool SharingLog_OpenReceivedAttachments::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_OpenReceivedAttachments::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_OpenReceivedAttachments::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_OpenReceivedAttachments::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_OpenReceivedAttachments::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.session_id)
  return _internal_session_id();
}
inline void SharingLog_OpenReceivedAttachments::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_OpenReceivedAttachments::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments.session_id)
}

// -------------------------------------------------------------------

// SharingLog_LaunchSetupActivity

// -------------------------------------------------------------------

// SharingLog_AddContact

// optional bool was_phone_added = 1;
inline bool SharingLog_AddContact::_internal_has_was_phone_added() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AddContact::has_was_phone_added() const {
  return _internal_has_was_phone_added();
}
inline void SharingLog_AddContact::clear_was_phone_added() {
  was_phone_added_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SharingLog_AddContact::_internal_was_phone_added() const {
  return was_phone_added_;
}
inline bool SharingLog_AddContact::was_phone_added() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AddContact.was_phone_added)
  return _internal_was_phone_added();
}
inline void SharingLog_AddContact::_internal_set_was_phone_added(bool value) {
  _has_bits_[0] |= 0x00000001u;
  was_phone_added_ = value;
}
inline void SharingLog_AddContact::set_was_phone_added(bool value) {
  _internal_set_was_phone_added(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AddContact.was_phone_added)
}

// optional bool was_email_added = 2;
inline bool SharingLog_AddContact::_internal_has_was_email_added() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_AddContact::has_was_email_added() const {
  return _internal_has_was_email_added();
}
inline void SharingLog_AddContact::clear_was_email_added() {
  was_email_added_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_AddContact::_internal_was_email_added() const {
  return was_email_added_;
}
inline bool SharingLog_AddContact::was_email_added() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AddContact.was_email_added)
  return _internal_was_email_added();
}
inline void SharingLog_AddContact::_internal_set_was_email_added(bool value) {
  _has_bits_[0] |= 0x00000002u;
  was_email_added_ = value;
}
inline void SharingLog_AddContact::set_was_email_added(bool value) {
  _internal_set_was_email_added(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AddContact.was_email_added)
}

// -------------------------------------------------------------------

// SharingLog_RemoveContact

// optional bool was_phone_removed = 1;
inline bool SharingLog_RemoveContact::_internal_has_was_phone_removed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_RemoveContact::has_was_phone_removed() const {
  return _internal_has_was_phone_removed();
}
inline void SharingLog_RemoveContact::clear_was_phone_removed() {
  was_phone_removed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SharingLog_RemoveContact::_internal_was_phone_removed() const {
  return was_phone_removed_;
}
inline bool SharingLog_RemoveContact::was_phone_removed() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RemoveContact.was_phone_removed)
  return _internal_was_phone_removed();
}
inline void SharingLog_RemoveContact::_internal_set_was_phone_removed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  was_phone_removed_ = value;
}
inline void SharingLog_RemoveContact::set_was_phone_removed(bool value) {
  _internal_set_was_phone_removed(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RemoveContact.was_phone_removed)
}

// optional bool was_email_removed = 2;
inline bool SharingLog_RemoveContact::_internal_has_was_email_removed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_RemoveContact::has_was_email_removed() const {
  return _internal_has_was_email_removed();
}
inline void SharingLog_RemoveContact::clear_was_email_removed() {
  was_email_removed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_RemoveContact::_internal_was_email_removed() const {
  return was_email_removed_;
}
inline bool SharingLog_RemoveContact::was_email_removed() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RemoveContact.was_email_removed)
  return _internal_was_email_removed();
}
inline void SharingLog_RemoveContact::_internal_set_was_email_removed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  was_email_removed_ = value;
}
inline void SharingLog_RemoveContact::set_was_email_removed(bool value) {
  _internal_set_was_email_removed(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RemoveContact.was_email_removed)
}

// -------------------------------------------------------------------

// SharingLog_FastShareServerResponse

// optional .location.nearby.proto.sharing.ServerResponseState status = 1;
inline bool SharingLog_FastShareServerResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_FastShareServerResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::ServerResponseState SharingLog_FastShareServerResponse::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::ServerResponseState >(status_);
}
inline ::location::nearby::proto::sharing::ServerResponseState SharingLog_FastShareServerResponse::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.status)
  return _internal_status();
}
inline void SharingLog_FastShareServerResponse::_internal_set_status(::location::nearby::proto::sharing::ServerResponseState value) {
  assert(::location::nearby::proto::sharing::ServerResponseState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SharingLog_FastShareServerResponse::set_status(::location::nearby::proto::sharing::ServerResponseState value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.status)
}

// optional .location.nearby.proto.sharing.ServerActionName name = 2;
inline bool SharingLog_FastShareServerResponse::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_name() const {
  return _internal_has_name();
}
inline void SharingLog_FastShareServerResponse::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::ServerActionName SharingLog_FastShareServerResponse::_internal_name() const {
  return static_cast< ::location::nearby::proto::sharing::ServerActionName >(name_);
}
inline ::location::nearby::proto::sharing::ServerActionName SharingLog_FastShareServerResponse::name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.name)
  return _internal_name();
}
inline void SharingLog_FastShareServerResponse::_internal_set_name(::location::nearby::proto::sharing::ServerActionName value) {
  assert(::location::nearby::proto::sharing::ServerActionName_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
}
inline void SharingLog_FastShareServerResponse::set_name(::location::nearby::proto::sharing::ServerActionName value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.name)
}

// optional int64 latency_millis = 3;
inline bool SharingLog_FastShareServerResponse::_internal_has_latency_millis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_latency_millis() const {
  return _internal_has_latency_millis();
}
inline void SharingLog_FastShareServerResponse::clear_latency_millis() {
  latency_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_FastShareServerResponse::_internal_latency_millis() const {
  return latency_millis_;
}
inline int64_t SharingLog_FastShareServerResponse::latency_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.latency_millis)
  return _internal_latency_millis();
}
inline void SharingLog_FastShareServerResponse::_internal_set_latency_millis(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  latency_millis_ = value;
}
inline void SharingLog_FastShareServerResponse::set_latency_millis(int64_t value) {
  _internal_set_latency_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.latency_millis)
}

// optional .location.nearby.proto.sharing.SyncPurpose purpose = 4;
inline bool SharingLog_FastShareServerResponse::_internal_has_purpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_purpose() const {
  return _internal_has_purpose();
}
inline void SharingLog_FastShareServerResponse::clear_purpose() {
  purpose_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::SyncPurpose SharingLog_FastShareServerResponse::_internal_purpose() const {
  return static_cast< ::location::nearby::proto::sharing::SyncPurpose >(purpose_);
}
inline ::location::nearby::proto::sharing::SyncPurpose SharingLog_FastShareServerResponse::purpose() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.purpose)
  return _internal_purpose();
}
inline void SharingLog_FastShareServerResponse::_internal_set_purpose(::location::nearby::proto::sharing::SyncPurpose value) {
  assert(::location::nearby::proto::sharing::SyncPurpose_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  purpose_ = value;
}
inline void SharingLog_FastShareServerResponse::set_purpose(::location::nearby::proto::sharing::SyncPurpose value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.purpose)
}

// optional .location.nearby.proto.sharing.ClientRole requester = 5;
inline bool SharingLog_FastShareServerResponse::_internal_has_requester() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_requester() const {
  return _internal_has_requester();
}
inline void SharingLog_FastShareServerResponse::clear_requester() {
  requester_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::location::nearby::proto::sharing::ClientRole SharingLog_FastShareServerResponse::_internal_requester() const {
  return static_cast< ::location::nearby::proto::sharing::ClientRole >(requester_);
}
inline ::location::nearby::proto::sharing::ClientRole SharingLog_FastShareServerResponse::requester() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.requester)
  return _internal_requester();
}
inline void SharingLog_FastShareServerResponse::_internal_set_requester(::location::nearby::proto::sharing::ClientRole value) {
  assert(::location::nearby::proto::sharing::ClientRole_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  requester_ = value;
}
inline void SharingLog_FastShareServerResponse::set_requester(::location::nearby::proto::sharing::ClientRole value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.requester)
}

// optional .location.nearby.proto.sharing.DeviceType device_type = 6;
inline bool SharingLog_FastShareServerResponse::_internal_has_device_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_FastShareServerResponse::has_device_type() const {
  return _internal_has_device_type();
}
inline void SharingLog_FastShareServerResponse::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::location::nearby::proto::sharing::DeviceType SharingLog_FastShareServerResponse::_internal_device_type() const {
  return static_cast< ::location::nearby::proto::sharing::DeviceType >(device_type_);
}
inline ::location::nearby::proto::sharing::DeviceType SharingLog_FastShareServerResponse::device_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.device_type)
  return _internal_device_type();
}
inline void SharingLog_FastShareServerResponse::_internal_set_device_type(::location::nearby::proto::sharing::DeviceType value) {
  assert(::location::nearby::proto::sharing::DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  device_type_ = value;
}
inline void SharingLog_FastShareServerResponse::set_device_type(::location::nearby::proto::sharing::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse.device_type)
}

// -------------------------------------------------------------------

// SharingLog_SendStart

// optional int64 session_id = 1;
inline bool SharingLog_SendStart::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_SendStart::has_session_id() const {
  return _internal_has_session_id();
}
inline void SharingLog_SendStart::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_SendStart::_internal_session_id() const {
  return session_id_;
}
inline int64_t SharingLog_SendStart::session_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendStart.session_id)
  return _internal_session_id();
}
inline void SharingLog_SendStart::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void SharingLog_SendStart::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendStart.session_id)
}

// optional int32 transfer_position = 2;
inline bool SharingLog_SendStart::_internal_has_transfer_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_SendStart::has_transfer_position() const {
  return _internal_has_transfer_position();
}
inline void SharingLog_SendStart::clear_transfer_position() {
  transfer_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingLog_SendStart::_internal_transfer_position() const {
  return transfer_position_;
}
inline int32_t SharingLog_SendStart::transfer_position() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendStart.transfer_position)
  return _internal_transfer_position();
}
inline void SharingLog_SendStart::_internal_set_transfer_position(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_position_ = value;
}
inline void SharingLog_SendStart::set_transfer_position(int32_t value) {
  _internal_set_transfer_position(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendStart.transfer_position)
}

// optional int32 concurrent_connections = 3;
inline bool SharingLog_SendStart::_internal_has_concurrent_connections() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_SendStart::has_concurrent_connections() const {
  return _internal_has_concurrent_connections();
}
inline void SharingLog_SendStart::clear_concurrent_connections() {
  concurrent_connections_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SharingLog_SendStart::_internal_concurrent_connections() const {
  return concurrent_connections_;
}
inline int32_t SharingLog_SendStart::concurrent_connections() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendStart.concurrent_connections)
  return _internal_concurrent_connections();
}
inline void SharingLog_SendStart::_internal_set_concurrent_connections(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  concurrent_connections_ = value;
}
inline void SharingLog_SendStart::set_concurrent_connections(int32_t value) {
  _internal_set_concurrent_connections(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendStart.concurrent_connections)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo share_target_info = 4;
inline bool SharingLog_SendStart::_internal_has_share_target_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || share_target_info_ != nullptr);
  return value;
}
inline bool SharingLog_SendStart::has_share_target_info() const {
  return _internal_has_share_target_info();
}
inline void SharingLog_SendStart::clear_share_target_info() {
  if (share_target_info_ != nullptr) share_target_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendStart::_internal_share_target_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* p = share_target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShareTargetInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo& SharingLog_SendStart::share_target_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendStart.share_target_info)
  return _internal_share_target_info();
}
inline void SharingLog_SendStart::unsafe_arena_set_allocated_share_target_info(
    ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share_target_info_);
  }
  share_target_info_ = share_target_info;
  if (share_target_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendStart.share_target_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendStart::release_share_target_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendStart::unsafe_arena_release_share_target_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.SendStart.share_target_info)
  _has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* temp = share_target_info_;
  share_target_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendStart::_internal_mutable_share_target_info() {
  _has_bits_[0] |= 0x00000001u;
  if (share_target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>(GetArenaForAllocation());
    share_target_info_ = p;
  }
  return share_target_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* SharingLog_SendStart::mutable_share_target_info() {
  ::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* _msg = _internal_mutable_share_target_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.SendStart.share_target_info)
  return _msg;
}
inline void SharingLog_SendStart::set_allocated_share_target_info(::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo* share_target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete share_target_info_;
  }
  if (share_target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShareTargetInfo>::GetOwningArena(share_target_info);
    if (message_arena != submessage_arena) {
      share_target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share_target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  share_target_info_ = share_target_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.SendStart.share_target_info)
}

// -------------------------------------------------------------------

// SharingLog_AcceptFastInitialization

// -------------------------------------------------------------------

// SharingLog_LaunchActivity

// optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
inline bool SharingLog_LaunchActivity::_internal_has_activity_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_activity_name() const {
  return _internal_has_activity_name();
}
inline void SharingLog_LaunchActivity::clear_activity_name() {
  activity_name_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_LaunchActivity::_internal_activity_name() const {
  return static_cast< ::location::nearby::proto::sharing::ActivityName >(activity_name_);
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_LaunchActivity::activity_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.activity_name)
  return _internal_activity_name();
}
inline void SharingLog_LaunchActivity::_internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  assert(::location::nearby::proto::sharing::ActivityName_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  activity_name_ = value;
}
inline void SharingLog_LaunchActivity::set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  _internal_set_activity_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.activity_name)
}

// optional int64 duration_millis = 2;
inline bool SharingLog_LaunchActivity::_internal_has_duration_millis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_duration_millis() const {
  return _internal_has_duration_millis();
}
inline void SharingLog_LaunchActivity::clear_duration_millis() {
  duration_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_LaunchActivity::_internal_duration_millis() const {
  return duration_millis_;
}
inline int64_t SharingLog_LaunchActivity::duration_millis() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.duration_millis)
  return _internal_duration_millis();
}
inline void SharingLog_LaunchActivity::_internal_set_duration_millis(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  duration_millis_ = value;
}
inline void SharingLog_LaunchActivity::set_duration_millis(int64_t value) {
  _internal_set_duration_millis(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.duration_millis)
}

// optional string referrer_name = 3;
inline bool SharingLog_LaunchActivity::_internal_has_referrer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_referrer_name() const {
  return _internal_has_referrer_name();
}
inline void SharingLog_LaunchActivity::clear_referrer_name() {
  referrer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_LaunchActivity::referrer_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.referrer_name)
  return _internal_referrer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_LaunchActivity::set_referrer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.referrer_name)
}
inline std::string* SharingLog_LaunchActivity::mutable_referrer_name() {
  std::string* _s = _internal_mutable_referrer_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.referrer_name)
  return _s;
}
inline const std::string& SharingLog_LaunchActivity::_internal_referrer_name() const {
  return referrer_name_.Get();
}
inline void SharingLog_LaunchActivity::_internal_set_referrer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referrer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_LaunchActivity::_internal_mutable_referrer_name() {
  _has_bits_[0] |= 0x00000001u;
  return referrer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_LaunchActivity::release_referrer_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.referrer_name)
  if (!_internal_has_referrer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referrer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_LaunchActivity::set_allocated_referrer_name(std::string* referrer_name) {
  if (referrer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.referrer_name)
}

// optional bool previous_transfer_in_progress = 4;
inline bool SharingLog_LaunchActivity::_internal_has_previous_transfer_in_progress() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_previous_transfer_in_progress() const {
  return _internal_has_previous_transfer_in_progress();
}
inline void SharingLog_LaunchActivity::clear_previous_transfer_in_progress() {
  previous_transfer_in_progress_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SharingLog_LaunchActivity::_internal_previous_transfer_in_progress() const {
  return previous_transfer_in_progress_;
}
inline bool SharingLog_LaunchActivity::previous_transfer_in_progress() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.previous_transfer_in_progress)
  return _internal_previous_transfer_in_progress();
}
inline void SharingLog_LaunchActivity::_internal_set_previous_transfer_in_progress(bool value) {
  _has_bits_[0] |= 0x00000008u;
  previous_transfer_in_progress_ = value;
}
inline void SharingLog_LaunchActivity::set_previous_transfer_in_progress(bool value) {
  _internal_set_previous_transfer_in_progress(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.previous_transfer_in_progress)
}

// optional bool has_opted_in = 5;
inline bool SharingLog_LaunchActivity::_internal_has_has_opted_in() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_has_opted_in() const {
  return _internal_has_has_opted_in();
}
inline void SharingLog_LaunchActivity::clear_has_opted_in() {
  has_opted_in_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SharingLog_LaunchActivity::_internal_has_opted_in() const {
  return has_opted_in_;
}
inline bool SharingLog_LaunchActivity::has_opted_in() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.has_opted_in)
  return _internal_has_opted_in();
}
inline void SharingLog_LaunchActivity::_internal_set_has_opted_in(bool value) {
  _has_bits_[0] |= 0x00000010u;
  has_opted_in_ = value;
}
inline void SharingLog_LaunchActivity::set_has_opted_in(bool value) {
  _internal_set_has_opted_in(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.has_opted_in)
}

// optional .location.nearby.proto.sharing.ActivityName source_activity_name = 6;
inline bool SharingLog_LaunchActivity::_internal_has_source_activity_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_source_activity_name() const {
  return _internal_has_source_activity_name();
}
inline void SharingLog_LaunchActivity::clear_source_activity_name() {
  source_activity_name_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_LaunchActivity::_internal_source_activity_name() const {
  return static_cast< ::location::nearby::proto::sharing::ActivityName >(source_activity_name_);
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_LaunchActivity::source_activity_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.source_activity_name)
  return _internal_source_activity_name();
}
inline void SharingLog_LaunchActivity::_internal_set_source_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  assert(::location::nearby::proto::sharing::ActivityName_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  source_activity_name_ = value;
}
inline void SharingLog_LaunchActivity::set_source_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  _internal_set_source_activity_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.source_activity_name)
}

// optional bool is_finishing = 7;
inline bool SharingLog_LaunchActivity::_internal_has_is_finishing() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingLog_LaunchActivity::has_is_finishing() const {
  return _internal_has_is_finishing();
}
inline void SharingLog_LaunchActivity::clear_is_finishing() {
  is_finishing_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SharingLog_LaunchActivity::_internal_is_finishing() const {
  return is_finishing_;
}
inline bool SharingLog_LaunchActivity::is_finishing() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.is_finishing)
  return _internal_is_finishing();
}
inline void SharingLog_LaunchActivity::_internal_set_is_finishing(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_finishing_ = value;
}
inline void SharingLog_LaunchActivity::set_is_finishing(bool value) {
  _internal_set_is_finishing(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchActivity.is_finishing)
}

// -------------------------------------------------------------------

// SharingLog_DismissPrivacyNotification

// -------------------------------------------------------------------

// SharingLog_TapPrivacyNotification

// -------------------------------------------------------------------

// SharingLog_TapHelp

// -------------------------------------------------------------------

// SharingLog_TapFeedback

// -------------------------------------------------------------------

// SharingLog_AddQuickSettingsTile

// -------------------------------------------------------------------

// SharingLog_RemoveQuickSettingsTile

// -------------------------------------------------------------------

// SharingLog_LaunchPhoneConsent

// -------------------------------------------------------------------

// SharingLog_DisplayPhoneConsent

// -------------------------------------------------------------------

// SharingLog_TapQuickSettingsTile

// -------------------------------------------------------------------

// SharingLog_TapQuickSettingsFileShare

// -------------------------------------------------------------------

// SharingLog_DisplayPrivacyNotification

// -------------------------------------------------------------------

// SharingLog_DefaultOptIn

// -------------------------------------------------------------------

// SharingLog_SetDeviceName

// optional int32 device_name_size = 1;
inline bool SharingLog_SetDeviceName::_internal_has_device_name_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SetDeviceName::has_device_name_size() const {
  return _internal_has_device_name_size();
}
inline void SharingLog_SetDeviceName::clear_device_name_size() {
  device_name_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SharingLog_SetDeviceName::_internal_device_name_size() const {
  return device_name_size_;
}
inline int32_t SharingLog_SetDeviceName::device_name_size() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetDeviceName.device_name_size)
  return _internal_device_name_size();
}
inline void SharingLog_SetDeviceName::_internal_set_device_name_size(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_size_ = value;
}
inline void SharingLog_SetDeviceName::set_device_name_size(int32_t value) {
  _internal_set_device_name_size(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetDeviceName.device_name_size)
}

// -------------------------------------------------------------------

// SharingLog_RequestSettingPermissions

// optional .location.nearby.proto.sharing.PermissionRequestType permission_type = 1;
inline bool SharingLog_RequestSettingPermissions::_internal_has_permission_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_RequestSettingPermissions::has_permission_type() const {
  return _internal_has_permission_type();
}
inline void SharingLog_RequestSettingPermissions::clear_permission_type() {
  permission_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::PermissionRequestType SharingLog_RequestSettingPermissions::_internal_permission_type() const {
  return static_cast< ::location::nearby::proto::sharing::PermissionRequestType >(permission_type_);
}
inline ::location::nearby::proto::sharing::PermissionRequestType SharingLog_RequestSettingPermissions::permission_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions.permission_type)
  return _internal_permission_type();
}
inline void SharingLog_RequestSettingPermissions::_internal_set_permission_type(::location::nearby::proto::sharing::PermissionRequestType value) {
  assert(::location::nearby::proto::sharing::PermissionRequestType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  permission_type_ = value;
}
inline void SharingLog_RequestSettingPermissions::set_permission_type(::location::nearby::proto::sharing::PermissionRequestType value) {
  _internal_set_permission_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions.permission_type)
}

// optional .location.nearby.proto.sharing.PermissionRequestResult permission_request_result = 2;
inline bool SharingLog_RequestSettingPermissions::_internal_has_permission_request_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_RequestSettingPermissions::has_permission_request_result() const {
  return _internal_has_permission_request_result();
}
inline void SharingLog_RequestSettingPermissions::clear_permission_request_result() {
  permission_request_result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::PermissionRequestResult SharingLog_RequestSettingPermissions::_internal_permission_request_result() const {
  return static_cast< ::location::nearby::proto::sharing::PermissionRequestResult >(permission_request_result_);
}
inline ::location::nearby::proto::sharing::PermissionRequestResult SharingLog_RequestSettingPermissions::permission_request_result() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions.permission_request_result)
  return _internal_permission_request_result();
}
inline void SharingLog_RequestSettingPermissions::_internal_set_permission_request_result(::location::nearby::proto::sharing::PermissionRequestResult value) {
  assert(::location::nearby::proto::sharing::PermissionRequestResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  permission_request_result_ = value;
}
inline void SharingLog_RequestSettingPermissions::set_permission_request_result(::location::nearby::proto::sharing::PermissionRequestResult value) {
  _internal_set_permission_request_result(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions.permission_request_result)
}

// -------------------------------------------------------------------

// SharingLog_LaunchConsent

// optional .location.nearby.proto.sharing.ConsentType consent_type = 1;
inline bool SharingLog_LaunchConsent::_internal_has_consent_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_LaunchConsent::has_consent_type() const {
  return _internal_has_consent_type();
}
inline void SharingLog_LaunchConsent::clear_consent_type() {
  consent_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::ConsentType SharingLog_LaunchConsent::_internal_consent_type() const {
  return static_cast< ::location::nearby::proto::sharing::ConsentType >(consent_type_);
}
inline ::location::nearby::proto::sharing::ConsentType SharingLog_LaunchConsent::consent_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchConsent.consent_type)
  return _internal_consent_type();
}
inline void SharingLog_LaunchConsent::_internal_set_consent_type(::location::nearby::proto::sharing::ConsentType value) {
  assert(::location::nearby::proto::sharing::ConsentType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  consent_type_ = value;
}
inline void SharingLog_LaunchConsent::set_consent_type(::location::nearby::proto::sharing::ConsentType value) {
  _internal_set_consent_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchConsent.consent_type)
}

// optional .location.nearby.proto.sharing.ConsentAcceptanceStatus status = 2;
inline bool SharingLog_LaunchConsent::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_LaunchConsent::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_LaunchConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::ConsentAcceptanceStatus SharingLog_LaunchConsent::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::ConsentAcceptanceStatus >(status_);
}
inline ::location::nearby::proto::sharing::ConsentAcceptanceStatus SharingLog_LaunchConsent::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.LaunchConsent.status)
  return _internal_status();
}
inline void SharingLog_LaunchConsent::_internal_set_status(::location::nearby::proto::sharing::ConsentAcceptanceStatus value) {
  assert(::location::nearby::proto::sharing::ConsentAcceptanceStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void SharingLog_LaunchConsent::set_status(::location::nearby::proto::sharing::ConsentAcceptanceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.LaunchConsent.status)
}

// -------------------------------------------------------------------

// SharingLog_InstallAPKStatus

// repeated .location.nearby.proto.sharing.InstallAPKStatus status = 1 [packed = true];
inline int SharingLog_InstallAPKStatus::_internal_status_size() const {
  return status_.size();
}
inline int SharingLog_InstallAPKStatus::status_size() const {
  return _internal_status_size();
}
inline void SharingLog_InstallAPKStatus::clear_status() {
  status_.Clear();
}
inline ::location::nearby::proto::sharing::InstallAPKStatus SharingLog_InstallAPKStatus::_internal_status(int index) const {
  return static_cast< ::location::nearby::proto::sharing::InstallAPKStatus >(status_.Get(index));
}
inline ::location::nearby::proto::sharing::InstallAPKStatus SharingLog_InstallAPKStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.status)
  return _internal_status(index);
}
inline void SharingLog_InstallAPKStatus::set_status(int index, ::location::nearby::proto::sharing::InstallAPKStatus value) {
  assert(::location::nearby::proto::sharing::InstallAPKStatus_IsValid(value));
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.status)
}
inline void SharingLog_InstallAPKStatus::_internal_add_status(::location::nearby::proto::sharing::InstallAPKStatus value) {
  assert(::location::nearby::proto::sharing::InstallAPKStatus_IsValid(value));
  status_.Add(value);
}
inline void SharingLog_InstallAPKStatus::add_status(::location::nearby::proto::sharing::InstallAPKStatus value) {
  _internal_add_status(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SharingLog_InstallAPKStatus::status() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_InstallAPKStatus::_internal_mutable_status() {
  return &status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_InstallAPKStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.status)
  return _internal_mutable_status();
}

// repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
inline int SharingLog_InstallAPKStatus::_internal_source_size() const {
  return source_.size();
}
inline int SharingLog_InstallAPKStatus::source_size() const {
  return _internal_source_size();
}
inline void SharingLog_InstallAPKStatus::clear_source() {
  source_.Clear();
}
inline ::location::nearby::proto::sharing::ApkSource SharingLog_InstallAPKStatus::_internal_source(int index) const {
  return static_cast< ::location::nearby::proto::sharing::ApkSource >(source_.Get(index));
}
inline ::location::nearby::proto::sharing::ApkSource SharingLog_InstallAPKStatus::source(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.source)
  return _internal_source(index);
}
inline void SharingLog_InstallAPKStatus::set_source(int index, ::location::nearby::proto::sharing::ApkSource value) {
  assert(::location::nearby::proto::sharing::ApkSource_IsValid(value));
  source_.Set(index, value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.source)
}
inline void SharingLog_InstallAPKStatus::_internal_add_source(::location::nearby::proto::sharing::ApkSource value) {
  assert(::location::nearby::proto::sharing::ApkSource_IsValid(value));
  source_.Add(value);
}
inline void SharingLog_InstallAPKStatus::add_source(::location::nearby::proto::sharing::ApkSource value) {
  _internal_add_source(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.source)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SharingLog_InstallAPKStatus::source() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.source)
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_InstallAPKStatus::_internal_mutable_source() {
  return &source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_InstallAPKStatus::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus.source)
  return _internal_mutable_source();
}

// -------------------------------------------------------------------

// SharingLog_VerifyAPKStatus

// repeated .location.nearby.proto.sharing.VerifyAPKStatus status = 1 [packed = true];
inline int SharingLog_VerifyAPKStatus::_internal_status_size() const {
  return status_.size();
}
inline int SharingLog_VerifyAPKStatus::status_size() const {
  return _internal_status_size();
}
inline void SharingLog_VerifyAPKStatus::clear_status() {
  status_.Clear();
}
inline ::location::nearby::proto::sharing::VerifyAPKStatus SharingLog_VerifyAPKStatus::_internal_status(int index) const {
  return static_cast< ::location::nearby::proto::sharing::VerifyAPKStatus >(status_.Get(index));
}
inline ::location::nearby::proto::sharing::VerifyAPKStatus SharingLog_VerifyAPKStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.status)
  return _internal_status(index);
}
inline void SharingLog_VerifyAPKStatus::set_status(int index, ::location::nearby::proto::sharing::VerifyAPKStatus value) {
  assert(::location::nearby::proto::sharing::VerifyAPKStatus_IsValid(value));
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.status)
}
inline void SharingLog_VerifyAPKStatus::_internal_add_status(::location::nearby::proto::sharing::VerifyAPKStatus value) {
  assert(::location::nearby::proto::sharing::VerifyAPKStatus_IsValid(value));
  status_.Add(value);
}
inline void SharingLog_VerifyAPKStatus::add_status(::location::nearby::proto::sharing::VerifyAPKStatus value) {
  _internal_add_status(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SharingLog_VerifyAPKStatus::status() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_VerifyAPKStatus::_internal_mutable_status() {
  return &status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_VerifyAPKStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.status)
  return _internal_mutable_status();
}

// repeated .location.nearby.proto.sharing.ApkSource source = 2 [packed = true];
inline int SharingLog_VerifyAPKStatus::_internal_source_size() const {
  return source_.size();
}
inline int SharingLog_VerifyAPKStatus::source_size() const {
  return _internal_source_size();
}
inline void SharingLog_VerifyAPKStatus::clear_source() {
  source_.Clear();
}
inline ::location::nearby::proto::sharing::ApkSource SharingLog_VerifyAPKStatus::_internal_source(int index) const {
  return static_cast< ::location::nearby::proto::sharing::ApkSource >(source_.Get(index));
}
inline ::location::nearby::proto::sharing::ApkSource SharingLog_VerifyAPKStatus::source(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.source)
  return _internal_source(index);
}
inline void SharingLog_VerifyAPKStatus::set_source(int index, ::location::nearby::proto::sharing::ApkSource value) {
  assert(::location::nearby::proto::sharing::ApkSource_IsValid(value));
  source_.Set(index, value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.source)
}
inline void SharingLog_VerifyAPKStatus::_internal_add_source(::location::nearby::proto::sharing::ApkSource value) {
  assert(::location::nearby::proto::sharing::ApkSource_IsValid(value));
  source_.Add(value);
}
inline void SharingLog_VerifyAPKStatus::add_source(::location::nearby::proto::sharing::ApkSource value) {
  _internal_add_source(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.source)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SharingLog_VerifyAPKStatus::source() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.source)
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_VerifyAPKStatus::_internal_mutable_source() {
  return &source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingLog_VerifyAPKStatus::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus.source)
  return _internal_mutable_source();
}

// -------------------------------------------------------------------

// SharingLog_ToggleShowNotification

// optional .location.nearby.proto.sharing.ShowNotificationStatus previous_status = 1;
inline bool SharingLog_ToggleShowNotification::_internal_has_previous_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ToggleShowNotification::has_previous_status() const {
  return _internal_has_previous_status();
}
inline void SharingLog_ToggleShowNotification::clear_previous_status() {
  previous_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::ShowNotificationStatus SharingLog_ToggleShowNotification::_internal_previous_status() const {
  return static_cast< ::location::nearby::proto::sharing::ShowNotificationStatus >(previous_status_);
}
inline ::location::nearby::proto::sharing::ShowNotificationStatus SharingLog_ToggleShowNotification::previous_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification.previous_status)
  return _internal_previous_status();
}
inline void SharingLog_ToggleShowNotification::_internal_set_previous_status(::location::nearby::proto::sharing::ShowNotificationStatus value) {
  assert(::location::nearby::proto::sharing::ShowNotificationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  previous_status_ = value;
}
inline void SharingLog_ToggleShowNotification::set_previous_status(::location::nearby::proto::sharing::ShowNotificationStatus value) {
  _internal_set_previous_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification.previous_status)
}

// optional .location.nearby.proto.sharing.ShowNotificationStatus current_status = 2;
inline bool SharingLog_ToggleShowNotification::_internal_has_current_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ToggleShowNotification::has_current_status() const {
  return _internal_has_current_status();
}
inline void SharingLog_ToggleShowNotification::clear_current_status() {
  current_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::ShowNotificationStatus SharingLog_ToggleShowNotification::_internal_current_status() const {
  return static_cast< ::location::nearby::proto::sharing::ShowNotificationStatus >(current_status_);
}
inline ::location::nearby::proto::sharing::ShowNotificationStatus SharingLog_ToggleShowNotification::current_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification.current_status)
  return _internal_current_status();
}
inline void SharingLog_ToggleShowNotification::_internal_set_current_status(::location::nearby::proto::sharing::ShowNotificationStatus value) {
  assert(::location::nearby::proto::sharing::ShowNotificationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  current_status_ = value;
}
inline void SharingLog_ToggleShowNotification::set_current_status(::location::nearby::proto::sharing::ShowNotificationStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification.current_status)
}

// -------------------------------------------------------------------

// SharingLog_DecryptCertificateFailure

// optional .location.nearby.proto.sharing.DecryptCertificateFailureStatus status = 1;
inline bool SharingLog_DecryptCertificateFailure::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_DecryptCertificateFailure::has_status() const {
  return _internal_has_status();
}
inline void SharingLog_DecryptCertificateFailure::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::DecryptCertificateFailureStatus SharingLog_DecryptCertificateFailure::_internal_status() const {
  return static_cast< ::location::nearby::proto::sharing::DecryptCertificateFailureStatus >(status_);
}
inline ::location::nearby::proto::sharing::DecryptCertificateFailureStatus SharingLog_DecryptCertificateFailure::status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure.status)
  return _internal_status();
}
inline void SharingLog_DecryptCertificateFailure::_internal_set_status(::location::nearby::proto::sharing::DecryptCertificateFailureStatus value) {
  assert(::location::nearby::proto::sharing::DecryptCertificateFailureStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SharingLog_DecryptCertificateFailure::set_status(::location::nearby::proto::sharing::DecryptCertificateFailureStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure.status)
}

// -------------------------------------------------------------------

// SharingLog_ShowAllowPermissionAutoAccess

// optional .location.nearby.proto.sharing.ActivityName activity_name = 1;
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_has_activity_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::has_activity_name() const {
  return _internal_has_activity_name();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::clear_activity_name() {
  activity_name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_ShowAllowPermissionAutoAccess::_internal_activity_name() const {
  return static_cast< ::location::nearby::proto::sharing::ActivityName >(activity_name_);
}
inline ::location::nearby::proto::sharing::ActivityName SharingLog_ShowAllowPermissionAutoAccess::activity_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.activity_name)
  return _internal_activity_name();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::_internal_set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  assert(::location::nearby::proto::sharing::ActivityName_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  activity_name_ = value;
}
inline void SharingLog_ShowAllowPermissionAutoAccess::set_activity_name(::location::nearby::proto::sharing::ActivityName value) {
  _internal_set_activity_name(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.activity_name)
}

// optional bool allowed_auto_access = 2;
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_has_allowed_auto_access() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::has_allowed_auto_access() const {
  return _internal_has_allowed_auto_access();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::clear_allowed_auto_access() {
  allowed_auto_access_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_allowed_auto_access() const {
  return allowed_auto_access_;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::allowed_auto_access() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.allowed_auto_access)
  return _internal_allowed_auto_access();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::_internal_set_allowed_auto_access(bool value) {
  _has_bits_[0] |= 0x00000002u;
  allowed_auto_access_ = value;
}
inline void SharingLog_ShowAllowPermissionAutoAccess::set_allowed_auto_access(bool value) {
  _internal_set_allowed_auto_access(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.allowed_auto_access)
}

// optional bool is_wifi_missing = 3;
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_has_is_wifi_missing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::has_is_wifi_missing() const {
  return _internal_has_is_wifi_missing();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::clear_is_wifi_missing() {
  is_wifi_missing_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_is_wifi_missing() const {
  return is_wifi_missing_;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::is_wifi_missing() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.is_wifi_missing)
  return _internal_is_wifi_missing();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::_internal_set_is_wifi_missing(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_wifi_missing_ = value;
}
inline void SharingLog_ShowAllowPermissionAutoAccess::set_is_wifi_missing(bool value) {
  _internal_set_is_wifi_missing(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.is_wifi_missing)
}

// optional bool is_bt_missing = 4;
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_has_is_bt_missing() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::has_is_bt_missing() const {
  return _internal_has_is_bt_missing();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::clear_is_bt_missing() {
  is_bt_missing_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::_internal_is_bt_missing() const {
  return is_bt_missing_;
}
inline bool SharingLog_ShowAllowPermissionAutoAccess::is_bt_missing() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.is_bt_missing)
  return _internal_is_bt_missing();
}
inline void SharingLog_ShowAllowPermissionAutoAccess::_internal_set_is_bt_missing(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_bt_missing_ = value;
}
inline void SharingLog_ShowAllowPermissionAutoAccess::set_is_bt_missing(bool value) {
  _internal_set_is_bt_missing(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess.is_bt_missing)
}

// -------------------------------------------------------------------

// SharingLog_TapQrCode

// -------------------------------------------------------------------

// SharingLog_QrCodeLinkShown

// -------------------------------------------------------------------

// SharingLog_FastInitDiscoverDevice

// optional .location.nearby.proto.sharing.FastInitType fast_init_type = 2;
inline bool SharingLog_FastInitDiscoverDevice::_internal_has_fast_init_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_FastInitDiscoverDevice::has_fast_init_type() const {
  return _internal_has_fast_init_type();
}
inline void SharingLog_FastInitDiscoverDevice::clear_fast_init_type() {
  fast_init_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::FastInitType SharingLog_FastInitDiscoverDevice::_internal_fast_init_type() const {
  return static_cast< ::location::nearby::proto::sharing::FastInitType >(fast_init_type_);
}
inline ::location::nearby::proto::sharing::FastInitType SharingLog_FastInitDiscoverDevice::fast_init_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice.fast_init_type)
  return _internal_fast_init_type();
}
inline void SharingLog_FastInitDiscoverDevice::_internal_set_fast_init_type(::location::nearby::proto::sharing::FastInitType value) {
  assert(::location::nearby::proto::sharing::FastInitType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  fast_init_type_ = value;
}
inline void SharingLog_FastInitDiscoverDevice::set_fast_init_type(::location::nearby::proto::sharing::FastInitType value) {
  _internal_set_fast_init_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice.fast_init_type)
}

// optional .location.nearby.proto.sharing.FastInitState fast_init_state = 3;
inline bool SharingLog_FastInitDiscoverDevice::_internal_has_fast_init_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_FastInitDiscoverDevice::has_fast_init_state() const {
  return _internal_has_fast_init_state();
}
inline void SharingLog_FastInitDiscoverDevice::clear_fast_init_state() {
  fast_init_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::FastInitState SharingLog_FastInitDiscoverDevice::_internal_fast_init_state() const {
  return static_cast< ::location::nearby::proto::sharing::FastInitState >(fast_init_state_);
}
inline ::location::nearby::proto::sharing::FastInitState SharingLog_FastInitDiscoverDevice::fast_init_state() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice.fast_init_state)
  return _internal_fast_init_state();
}
inline void SharingLog_FastInitDiscoverDevice::_internal_set_fast_init_state(::location::nearby::proto::sharing::FastInitState value) {
  assert(::location::nearby::proto::sharing::FastInitState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fast_init_state_ = value;
}
inline void SharingLog_FastInitDiscoverDevice::set_fast_init_state(::location::nearby::proto::sharing::FastInitState value) {
  _internal_set_fast_init_state(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice.fast_init_state)
}

// -------------------------------------------------------------------

// SharingLog_ShareTargetInfo

// optional .location.nearby.proto.sharing.DeviceType device_type = 1;
inline bool SharingLog_ShareTargetInfo::_internal_has_device_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_ShareTargetInfo::has_device_type() const {
  return _internal_has_device_type();
}
inline void SharingLog_ShareTargetInfo::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::DeviceType SharingLog_ShareTargetInfo::_internal_device_type() const {
  return static_cast< ::location::nearby::proto::sharing::DeviceType >(device_type_);
}
inline ::location::nearby::proto::sharing::DeviceType SharingLog_ShareTargetInfo::device_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.device_type)
  return _internal_device_type();
}
inline void SharingLog_ShareTargetInfo::_internal_set_device_type(::location::nearby::proto::sharing::DeviceType value) {
  assert(::location::nearby::proto::sharing::DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  device_type_ = value;
}
inline void SharingLog_ShareTargetInfo::set_device_type(::location::nearby::proto::sharing::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.device_type)
}

// optional .location.nearby.proto.sharing.OSType os_type = 2;
inline bool SharingLog_ShareTargetInfo::_internal_has_os_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_ShareTargetInfo::has_os_type() const {
  return _internal_has_os_type();
}
inline void SharingLog_ShareTargetInfo::clear_os_type() {
  os_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::location::nearby::proto::sharing::OSType SharingLog_ShareTargetInfo::_internal_os_type() const {
  return static_cast< ::location::nearby::proto::sharing::OSType >(os_type_);
}
inline ::location::nearby::proto::sharing::OSType SharingLog_ShareTargetInfo::os_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.os_type)
  return _internal_os_type();
}
inline void SharingLog_ShareTargetInfo::_internal_set_os_type(::location::nearby::proto::sharing::OSType value) {
  assert(::location::nearby::proto::sharing::OSType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  os_type_ = value;
}
inline void SharingLog_ShareTargetInfo::set_os_type(::location::nearby::proto::sharing::OSType value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.os_type)
}

// optional .location.nearby.proto.sharing.DeviceRelationship device_relationship = 3;
inline bool SharingLog_ShareTargetInfo::_internal_has_device_relationship() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_ShareTargetInfo::has_device_relationship() const {
  return _internal_has_device_relationship();
}
inline void SharingLog_ShareTargetInfo::clear_device_relationship() {
  device_relationship_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::DeviceRelationship SharingLog_ShareTargetInfo::_internal_device_relationship() const {
  return static_cast< ::location::nearby::proto::sharing::DeviceRelationship >(device_relationship_);
}
inline ::location::nearby::proto::sharing::DeviceRelationship SharingLog_ShareTargetInfo::device_relationship() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.device_relationship)
  return _internal_device_relationship();
}
inline void SharingLog_ShareTargetInfo::_internal_set_device_relationship(::location::nearby::proto::sharing::DeviceRelationship value) {
  assert(::location::nearby::proto::sharing::DeviceRelationship_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  device_relationship_ = value;
}
inline void SharingLog_ShareTargetInfo::set_device_relationship(::location::nearby::proto::sharing::DeviceRelationship value) {
  _internal_set_device_relationship(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.ShareTargetInfo.device_relationship)
}

// -------------------------------------------------------------------

// SharingLog_AttachmentsInfo

// repeated .nearby.sharing.analytics.proto.SharingLog.TextAttachment text_attachment = 1;
inline int SharingLog_AttachmentsInfo::_internal_text_attachment_size() const {
  return text_attachment_.size();
}
inline int SharingLog_AttachmentsInfo::text_attachment_size() const {
  return _internal_text_attachment_size();
}
inline void SharingLog_AttachmentsInfo::clear_text_attachment() {
  text_attachment_.Clear();
}
inline ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* SharingLog_AttachmentsInfo::mutable_text_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.text_attachment)
  return text_attachment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >*
SharingLog_AttachmentsInfo::mutable_text_attachment() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.text_attachment)
  return &text_attachment_;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TextAttachment& SharingLog_AttachmentsInfo::_internal_text_attachment(int index) const {
  return text_attachment_.Get(index);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TextAttachment& SharingLog_AttachmentsInfo::text_attachment(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.text_attachment)
  return _internal_text_attachment(index);
}
inline ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* SharingLog_AttachmentsInfo::_internal_add_text_attachment() {
  return text_attachment_.Add();
}
inline ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* SharingLog_AttachmentsInfo::add_text_attachment() {
  ::nearby::sharing::analytics::proto::SharingLog_TextAttachment* _add = _internal_add_text_attachment();
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.text_attachment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment >&
SharingLog_AttachmentsInfo::text_attachment() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.text_attachment)
  return text_attachment_;
}

// repeated .nearby.sharing.analytics.proto.SharingLog.FileAttachment file_attachment = 2;
inline int SharingLog_AttachmentsInfo::_internal_file_attachment_size() const {
  return file_attachment_.size();
}
inline int SharingLog_AttachmentsInfo::file_attachment_size() const {
  return _internal_file_attachment_size();
}
inline void SharingLog_AttachmentsInfo::clear_file_attachment() {
  file_attachment_.Clear();
}
inline ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* SharingLog_AttachmentsInfo::mutable_file_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.file_attachment)
  return file_attachment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >*
SharingLog_AttachmentsInfo::mutable_file_attachment() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.file_attachment)
  return &file_attachment_;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FileAttachment& SharingLog_AttachmentsInfo::_internal_file_attachment(int index) const {
  return file_attachment_.Get(index);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FileAttachment& SharingLog_AttachmentsInfo::file_attachment(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.file_attachment)
  return _internal_file_attachment(index);
}
inline ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* SharingLog_AttachmentsInfo::_internal_add_file_attachment() {
  return file_attachment_.Add();
}
inline ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* SharingLog_AttachmentsInfo::add_file_attachment() {
  ::nearby::sharing::analytics::proto::SharingLog_FileAttachment* _add = _internal_add_file_attachment();
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.file_attachment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment >&
SharingLog_AttachmentsInfo::file_attachment() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.file_attachment)
  return file_attachment_;
}

// optional string required_app = 3;
inline bool SharingLog_AttachmentsInfo::_internal_has_required_app() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AttachmentsInfo::has_required_app() const {
  return _internal_has_required_app();
}
inline void SharingLog_AttachmentsInfo::clear_required_app() {
  required_app_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_AttachmentsInfo::required_app() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.required_app)
  return _internal_required_app();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AttachmentsInfo::set_required_app(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 required_app_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.required_app)
}
inline std::string* SharingLog_AttachmentsInfo::mutable_required_app() {
  std::string* _s = _internal_mutable_required_app();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.required_app)
  return _s;
}
inline const std::string& SharingLog_AttachmentsInfo::_internal_required_app() const {
  return required_app_.Get();
}
inline void SharingLog_AttachmentsInfo::_internal_set_required_app(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  required_app_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AttachmentsInfo::_internal_mutable_required_app() {
  _has_bits_[0] |= 0x00000001u;
  return required_app_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AttachmentsInfo::release_required_app() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.required_app)
  if (!_internal_has_required_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = required_app_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_app_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_app_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AttachmentsInfo::set_allocated_required_app(std::string* required_app) {
  if (required_app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_app_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_app,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_app_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_app_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.required_app)
}

// repeated .nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment wifi_credentials_attachment = 4;
inline int SharingLog_AttachmentsInfo::_internal_wifi_credentials_attachment_size() const {
  return wifi_credentials_attachment_.size();
}
inline int SharingLog_AttachmentsInfo::wifi_credentials_attachment_size() const {
  return _internal_wifi_credentials_attachment_size();
}
inline void SharingLog_AttachmentsInfo::clear_wifi_credentials_attachment() {
  wifi_credentials_attachment_.Clear();
}
inline ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* SharingLog_AttachmentsInfo::mutable_wifi_credentials_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.wifi_credentials_attachment)
  return wifi_credentials_attachment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >*
SharingLog_AttachmentsInfo::mutable_wifi_credentials_attachment() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.wifi_credentials_attachment)
  return &wifi_credentials_attachment_;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment& SharingLog_AttachmentsInfo::_internal_wifi_credentials_attachment(int index) const {
  return wifi_credentials_attachment_.Get(index);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment& SharingLog_AttachmentsInfo::wifi_credentials_attachment(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.wifi_credentials_attachment)
  return _internal_wifi_credentials_attachment(index);
}
inline ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* SharingLog_AttachmentsInfo::_internal_add_wifi_credentials_attachment() {
  return wifi_credentials_attachment_.Add();
}
inline ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* SharingLog_AttachmentsInfo::add_wifi_credentials_attachment() {
  ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment* _add = _internal_add_wifi_credentials_attachment();
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.wifi_credentials_attachment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_WifiCredentialsAttachment >&
SharingLog_AttachmentsInfo::wifi_credentials_attachment() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.wifi_credentials_attachment)
  return wifi_credentials_attachment_;
}

// repeated .nearby.sharing.analytics.proto.SharingLog.AppAttachment app_attachment = 5;
inline int SharingLog_AttachmentsInfo::_internal_app_attachment_size() const {
  return app_attachment_.size();
}
inline int SharingLog_AttachmentsInfo::app_attachment_size() const {
  return _internal_app_attachment_size();
}
inline void SharingLog_AttachmentsInfo::clear_app_attachment() {
  app_attachment_.Clear();
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* SharingLog_AttachmentsInfo::mutable_app_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.app_attachment)
  return app_attachment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >*
SharingLog_AttachmentsInfo::mutable_app_attachment() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.app_attachment)
  return &app_attachment_;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppAttachment& SharingLog_AttachmentsInfo::_internal_app_attachment(int index) const {
  return app_attachment_.Get(index);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppAttachment& SharingLog_AttachmentsInfo::app_attachment(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.app_attachment)
  return _internal_app_attachment(index);
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* SharingLog_AttachmentsInfo::_internal_add_app_attachment() {
  return app_attachment_.Add();
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* SharingLog_AttachmentsInfo::add_app_attachment() {
  ::nearby::sharing::analytics::proto::SharingLog_AppAttachment* _add = _internal_add_app_attachment();
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.app_attachment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_AppAttachment >&
SharingLog_AttachmentsInfo::app_attachment() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.app_attachment)
  return app_attachment_;
}

// repeated .nearby.sharing.analytics.proto.SharingLog.StreamAttachment stream_attachment = 6;
inline int SharingLog_AttachmentsInfo::_internal_stream_attachment_size() const {
  return stream_attachment_.size();
}
inline int SharingLog_AttachmentsInfo::stream_attachment_size() const {
  return _internal_stream_attachment_size();
}
inline void SharingLog_AttachmentsInfo::clear_stream_attachment() {
  stream_attachment_.Clear();
}
inline ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* SharingLog_AttachmentsInfo::mutable_stream_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.stream_attachment)
  return stream_attachment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >*
SharingLog_AttachmentsInfo::mutable_stream_attachment() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.stream_attachment)
  return &stream_attachment_;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment& SharingLog_AttachmentsInfo::_internal_stream_attachment(int index) const {
  return stream_attachment_.Get(index);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment& SharingLog_AttachmentsInfo::stream_attachment(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.stream_attachment)
  return _internal_stream_attachment(index);
}
inline ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* SharingLog_AttachmentsInfo::_internal_add_stream_attachment() {
  return stream_attachment_.Add();
}
inline ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* SharingLog_AttachmentsInfo::add_stream_attachment() {
  ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment* _add = _internal_add_stream_attachment();
  // @@protoc_insertion_point(field_add:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.stream_attachment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::analytics::proto::SharingLog_StreamAttachment >&
SharingLog_AttachmentsInfo::stream_attachment() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.analytics.proto.SharingLog.AttachmentsInfo.stream_attachment)
  return stream_attachment_;
}

// -------------------------------------------------------------------

// SharingLog_TextAttachment

// optional .nearby.sharing.analytics.proto.SharingLog.TextAttachment.Type type = 1;
inline bool SharingLog_TextAttachment::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_TextAttachment::has_type() const {
  return _internal_has_type();
}
inline void SharingLog_TextAttachment::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type SharingLog_TextAttachment::_internal_type() const {
  return static_cast< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type >(type_);
}
inline ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type SharingLog_TextAttachment::type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.TextAttachment.type)
  return _internal_type();
}
inline void SharingLog_TextAttachment::_internal_set_type(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type value) {
  assert(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void SharingLog_TextAttachment::set_type(::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.TextAttachment.type)
}

// optional int64 size_bytes = 2;
inline bool SharingLog_TextAttachment::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_TextAttachment::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void SharingLog_TextAttachment::clear_size_bytes() {
  size_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_TextAttachment::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t SharingLog_TextAttachment::size_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.TextAttachment.size_bytes)
  return _internal_size_bytes();
}
inline void SharingLog_TextAttachment::_internal_set_size_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  size_bytes_ = value;
}
inline void SharingLog_TextAttachment::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.TextAttachment.size_bytes)
}

// optional int64 batch_id = 3;
inline bool SharingLog_TextAttachment::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_TextAttachment::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void SharingLog_TextAttachment::clear_batch_id() {
  batch_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SharingLog_TextAttachment::_internal_batch_id() const {
  return batch_id_;
}
inline int64_t SharingLog_TextAttachment::batch_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.TextAttachment.batch_id)
  return _internal_batch_id();
}
inline void SharingLog_TextAttachment::_internal_set_batch_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  batch_id_ = value;
}
inline void SharingLog_TextAttachment::set_batch_id(int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.TextAttachment.batch_id)
}

// optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
inline bool SharingLog_TextAttachment::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_TextAttachment::has_source_type() const {
  return _internal_has_source_type();
}
inline void SharingLog_TextAttachment::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_TextAttachment::_internal_source_type() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentSourceType >(source_type_);
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_TextAttachment::source_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.TextAttachment.source_type)
  return _internal_source_type();
}
inline void SharingLog_TextAttachment::_internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  assert(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_type_ = value;
}
inline void SharingLog_TextAttachment::set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.TextAttachment.source_type)
}

// -------------------------------------------------------------------

// SharingLog_FileAttachment

// optional .nearby.sharing.analytics.proto.SharingLog.FileAttachment.Type type = 1;
inline bool SharingLog_FileAttachment::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_FileAttachment::has_type() const {
  return _internal_has_type();
}
inline void SharingLog_FileAttachment::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type SharingLog_FileAttachment::_internal_type() const {
  return static_cast< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type >(type_);
}
inline ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type SharingLog_FileAttachment::type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FileAttachment.type)
  return _internal_type();
}
inline void SharingLog_FileAttachment::_internal_set_type(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type value) {
  assert(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void SharingLog_FileAttachment::set_type(::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FileAttachment.type)
}

// optional int64 size_bytes = 2;
inline bool SharingLog_FileAttachment::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_FileAttachment::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void SharingLog_FileAttachment::clear_size_bytes() {
  size_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_FileAttachment::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t SharingLog_FileAttachment::size_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FileAttachment.size_bytes)
  return _internal_size_bytes();
}
inline void SharingLog_FileAttachment::_internal_set_size_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  size_bytes_ = value;
}
inline void SharingLog_FileAttachment::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FileAttachment.size_bytes)
}

// optional int64 offset_bytes = 4;
inline bool SharingLog_FileAttachment::_internal_has_offset_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_FileAttachment::has_offset_bytes() const {
  return _internal_has_offset_bytes();
}
inline void SharingLog_FileAttachment::clear_offset_bytes() {
  offset_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SharingLog_FileAttachment::_internal_offset_bytes() const {
  return offset_bytes_;
}
inline int64_t SharingLog_FileAttachment::offset_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FileAttachment.offset_bytes)
  return _internal_offset_bytes();
}
inline void SharingLog_FileAttachment::_internal_set_offset_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  offset_bytes_ = value;
}
inline void SharingLog_FileAttachment::set_offset_bytes(int64_t value) {
  _internal_set_offset_bytes(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FileAttachment.offset_bytes)
}

// optional int64 batch_id = 5;
inline bool SharingLog_FileAttachment::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingLog_FileAttachment::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void SharingLog_FileAttachment::clear_batch_id() {
  batch_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SharingLog_FileAttachment::_internal_batch_id() const {
  return batch_id_;
}
inline int64_t SharingLog_FileAttachment::batch_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FileAttachment.batch_id)
  return _internal_batch_id();
}
inline void SharingLog_FileAttachment::_internal_set_batch_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  batch_id_ = value;
}
inline void SharingLog_FileAttachment::set_batch_id(int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FileAttachment.batch_id)
}

// optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 6;
inline bool SharingLog_FileAttachment::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_FileAttachment::has_source_type() const {
  return _internal_has_source_type();
}
inline void SharingLog_FileAttachment::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_FileAttachment::_internal_source_type() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentSourceType >(source_type_);
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_FileAttachment::source_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.FileAttachment.source_type)
  return _internal_source_type();
}
inline void SharingLog_FileAttachment::_internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  assert(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_type_ = value;
}
inline void SharingLog_FileAttachment::set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.FileAttachment.source_type)
}

// -------------------------------------------------------------------

// SharingLog_WifiCredentialsAttachment

// optional int32 security_type = 1;
inline bool SharingLog_WifiCredentialsAttachment::_internal_has_security_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_WifiCredentialsAttachment::has_security_type() const {
  return _internal_has_security_type();
}
inline void SharingLog_WifiCredentialsAttachment::clear_security_type() {
  security_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SharingLog_WifiCredentialsAttachment::_internal_security_type() const {
  return security_type_;
}
inline int32_t SharingLog_WifiCredentialsAttachment::security_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.security_type)
  return _internal_security_type();
}
inline void SharingLog_WifiCredentialsAttachment::_internal_set_security_type(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  security_type_ = value;
}
inline void SharingLog_WifiCredentialsAttachment::set_security_type(int32_t value) {
  _internal_set_security_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.security_type)
}

// optional int64 batch_id = 2;
inline bool SharingLog_WifiCredentialsAttachment::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_WifiCredentialsAttachment::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void SharingLog_WifiCredentialsAttachment::clear_batch_id() {
  batch_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SharingLog_WifiCredentialsAttachment::_internal_batch_id() const {
  return batch_id_;
}
inline int64_t SharingLog_WifiCredentialsAttachment::batch_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.batch_id)
  return _internal_batch_id();
}
inline void SharingLog_WifiCredentialsAttachment::_internal_set_batch_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  batch_id_ = value;
}
inline void SharingLog_WifiCredentialsAttachment::set_batch_id(int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.batch_id)
}

// optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
inline bool SharingLog_WifiCredentialsAttachment::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_WifiCredentialsAttachment::has_source_type() const {
  return _internal_has_source_type();
}
inline void SharingLog_WifiCredentialsAttachment::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_WifiCredentialsAttachment::_internal_source_type() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentSourceType >(source_type_);
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_WifiCredentialsAttachment::source_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.source_type)
  return _internal_source_type();
}
inline void SharingLog_WifiCredentialsAttachment::_internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  assert(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_type_ = value;
}
inline void SharingLog_WifiCredentialsAttachment::set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.WifiCredentialsAttachment.source_type)
}

// -------------------------------------------------------------------

// SharingLog_AppAttachment

// optional string package_name = 1;
inline bool SharingLog_AppAttachment::_internal_has_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AppAttachment::has_package_name() const {
  return _internal_has_package_name();
}
inline void SharingLog_AppAttachment::clear_package_name() {
  package_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_AppAttachment::package_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppAttachment.package_name)
  return _internal_package_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_AppAttachment::set_package_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppAttachment.package_name)
}
inline std::string* SharingLog_AppAttachment::mutable_package_name() {
  std::string* _s = _internal_mutable_package_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.AppAttachment.package_name)
  return _s;
}
inline const std::string& SharingLog_AppAttachment::_internal_package_name() const {
  return package_name_.Get();
}
inline void SharingLog_AppAttachment::_internal_set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_AppAttachment::_internal_mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return package_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_AppAttachment::release_package_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.AppAttachment.package_name)
  if (!_internal_has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = package_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_AppAttachment::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.AppAttachment.package_name)
}

// optional int64 size = 2;
inline bool SharingLog_AppAttachment::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_AppAttachment::has_size() const {
  return _internal_has_size();
}
inline void SharingLog_AppAttachment::clear_size() {
  size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_AppAttachment::_internal_size() const {
  return size_;
}
inline int64_t SharingLog_AppAttachment::size() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppAttachment.size)
  return _internal_size();
}
inline void SharingLog_AppAttachment::_internal_set_size(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void SharingLog_AppAttachment::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppAttachment.size)
}

// optional int64 batch_id = 3;
inline bool SharingLog_AppAttachment::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_AppAttachment::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void SharingLog_AppAttachment::clear_batch_id() {
  batch_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SharingLog_AppAttachment::_internal_batch_id() const {
  return batch_id_;
}
inline int64_t SharingLog_AppAttachment::batch_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppAttachment.batch_id)
  return _internal_batch_id();
}
inline void SharingLog_AppAttachment::_internal_set_batch_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  batch_id_ = value;
}
inline void SharingLog_AppAttachment::set_batch_id(int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppAttachment.batch_id)
}

// optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 4;
inline bool SharingLog_AppAttachment::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingLog_AppAttachment::has_source_type() const {
  return _internal_has_source_type();
}
inline void SharingLog_AppAttachment::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_AppAttachment::_internal_source_type() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentSourceType >(source_type_);
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_AppAttachment::source_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppAttachment.source_type)
  return _internal_source_type();
}
inline void SharingLog_AppAttachment::_internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  assert(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  source_type_ = value;
}
inline void SharingLog_AppAttachment::set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppAttachment.source_type)
}

// -------------------------------------------------------------------

// SharingLog_StreamAttachment

// optional string package_name = 1;
inline bool SharingLog_StreamAttachment::_internal_has_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_StreamAttachment::has_package_name() const {
  return _internal_has_package_name();
}
inline void SharingLog_StreamAttachment::clear_package_name() {
  package_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog_StreamAttachment::package_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.package_name)
  return _internal_package_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog_StreamAttachment::set_package_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.package_name)
}
inline std::string* SharingLog_StreamAttachment::mutable_package_name() {
  std::string* _s = _internal_mutable_package_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.package_name)
  return _s;
}
inline const std::string& SharingLog_StreamAttachment::_internal_package_name() const {
  return package_name_.Get();
}
inline void SharingLog_StreamAttachment::_internal_set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog_StreamAttachment::_internal_mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return package_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog_StreamAttachment::release_package_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.package_name)
  if (!_internal_has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = package_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog_StreamAttachment::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.package_name)
}

// optional int64 batch_id = 2;
inline bool SharingLog_StreamAttachment::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog_StreamAttachment::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void SharingLog_StreamAttachment::clear_batch_id() {
  batch_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SharingLog_StreamAttachment::_internal_batch_id() const {
  return batch_id_;
}
inline int64_t SharingLog_StreamAttachment::batch_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.batch_id)
  return _internal_batch_id();
}
inline void SharingLog_StreamAttachment::_internal_set_batch_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  batch_id_ = value;
}
inline void SharingLog_StreamAttachment::set_batch_id(int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.batch_id)
}

// optional .location.nearby.proto.sharing.AttachmentSourceType source_type = 3;
inline bool SharingLog_StreamAttachment::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog_StreamAttachment::has_source_type() const {
  return _internal_has_source_type();
}
inline void SharingLog_StreamAttachment::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_StreamAttachment::_internal_source_type() const {
  return static_cast< ::location::nearby::proto::sharing::AttachmentSourceType >(source_type_);
}
inline ::location::nearby::proto::sharing::AttachmentSourceType SharingLog_StreamAttachment::source_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.source_type)
  return _internal_source_type();
}
inline void SharingLog_StreamAttachment::_internal_set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  assert(::location::nearby::proto::sharing::AttachmentSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_type_ = value;
}
inline void SharingLog_StreamAttachment::set_source_type(::location::nearby::proto::sharing::AttachmentSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.StreamAttachment.source_type)
}

// -------------------------------------------------------------------

// SharingLog_AppCrash

// optional .location.nearby.proto.sharing.AppCrashReason crash_reason = 1;
inline bool SharingLog_AppCrash::_internal_has_crash_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_AppCrash::has_crash_reason() const {
  return _internal_has_crash_reason();
}
inline void SharingLog_AppCrash::clear_crash_reason() {
  crash_reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::AppCrashReason SharingLog_AppCrash::_internal_crash_reason() const {
  return static_cast< ::location::nearby::proto::sharing::AppCrashReason >(crash_reason_);
}
inline ::location::nearby::proto::sharing::AppCrashReason SharingLog_AppCrash::crash_reason() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.AppCrash.crash_reason)
  return _internal_crash_reason();
}
inline void SharingLog_AppCrash::_internal_set_crash_reason(::location::nearby::proto::sharing::AppCrashReason value) {
  assert(::location::nearby::proto::sharing::AppCrashReason_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  crash_reason_ = value;
}
inline void SharingLog_AppCrash::set_crash_reason(::location::nearby::proto::sharing::AppCrashReason value) {
  _internal_set_crash_reason(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.AppCrash.crash_reason)
}

// -------------------------------------------------------------------

// SharingLog_SetupWizard

// optional .location.nearby.proto.sharing.Visibility visibility = 1;
inline bool SharingLog_SetupWizard::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SetupWizard::has_visibility() const {
  return _internal_has_visibility();
}
inline void SharingLog_SetupWizard::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetupWizard::_internal_visibility() const {
  return static_cast< ::location::nearby::proto::sharing::Visibility >(visibility_);
}
inline ::location::nearby::proto::sharing::Visibility SharingLog_SetupWizard::visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SetupWizard.visibility)
  return _internal_visibility();
}
inline void SharingLog_SetupWizard::_internal_set_visibility(::location::nearby::proto::sharing::Visibility value) {
  assert(::location::nearby::proto::sharing::Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  visibility_ = value;
}
inline void SharingLog_SetupWizard::set_visibility(::location::nearby::proto::sharing::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SetupWizard.visibility)
}

// -------------------------------------------------------------------

// SharingLog_SendDesktopNotification

// optional .location.nearby.proto.sharing.DesktopNotification event = 1;
inline bool SharingLog_SendDesktopNotification::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SendDesktopNotification::has_event() const {
  return _internal_has_event();
}
inline void SharingLog_SendDesktopNotification::clear_event() {
  event_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::DesktopNotification SharingLog_SendDesktopNotification::_internal_event() const {
  return static_cast< ::location::nearby::proto::sharing::DesktopNotification >(event_);
}
inline ::location::nearby::proto::sharing::DesktopNotification SharingLog_SendDesktopNotification::event() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification.event)
  return _internal_event();
}
inline void SharingLog_SendDesktopNotification::_internal_set_event(::location::nearby::proto::sharing::DesktopNotification value) {
  assert(::location::nearby::proto::sharing::DesktopNotification_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_ = value;
}
inline void SharingLog_SendDesktopNotification::set_event(::location::nearby::proto::sharing::DesktopNotification value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification.event)
}

// -------------------------------------------------------------------

// SharingLog_SendDesktopTransferEvent

// optional .location.nearby.proto.sharing.DesktopTransferEventType event = 1;
inline bool SharingLog_SendDesktopTransferEvent::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog_SendDesktopTransferEvent::has_event() const {
  return _internal_has_event();
}
inline void SharingLog_SendDesktopTransferEvent::clear_event() {
  event_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::location::nearby::proto::sharing::DesktopTransferEventType SharingLog_SendDesktopTransferEvent::_internal_event() const {
  return static_cast< ::location::nearby::proto::sharing::DesktopTransferEventType >(event_);
}
inline ::location::nearby::proto::sharing::DesktopTransferEventType SharingLog_SendDesktopTransferEvent::event() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent.event)
  return _internal_event();
}
inline void SharingLog_SendDesktopTransferEvent::_internal_set_event(::location::nearby::proto::sharing::DesktopTransferEventType value) {
  assert(::location::nearby::proto::sharing::DesktopTransferEventType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_ = value;
}
inline void SharingLog_SendDesktopTransferEvent::set_event(::location::nearby::proto::sharing::DesktopTransferEventType value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent.event)
}

// -------------------------------------------------------------------

// SharingLog

// optional .location.nearby.proto.sharing.EventType event_type = 1;
inline bool SharingLog::_internal_has_event_type() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool SharingLog::has_event_type() const {
  return _internal_has_event_type();
}
inline void SharingLog::clear_event_type() {
  event_type_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline ::location::nearby::proto::sharing::EventType SharingLog::_internal_event_type() const {
  return static_cast< ::location::nearby::proto::sharing::EventType >(event_type_);
}
inline ::location::nearby::proto::sharing::EventType SharingLog::event_type() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.event_type)
  return _internal_event_type();
}
inline void SharingLog::_internal_set_event_type(::location::nearby::proto::sharing::EventType value) {
  assert(::location::nearby::proto::sharing::EventType_IsValid(value));
  _has_bits_[2] |= 0x00000080u;
  event_type_ = value;
}
inline void SharingLog::set_event_type(::location::nearby::proto::sharing::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.event_type)
}

// optional .nearby.sharing.analytics.proto.SharingLog.UnknownEvent unknown_event = 2;
inline bool SharingLog::_internal_has_unknown_event() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || unknown_event_ != nullptr);
  return value;
}
inline bool SharingLog::has_unknown_event() const {
  return _internal_has_unknown_event();
}
inline void SharingLog::clear_unknown_event() {
  if (unknown_event_ != nullptr) unknown_event_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent& SharingLog::_internal_unknown_event() const {
  const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* p = unknown_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent&>(
      ::nearby::sharing::analytics::proto::_SharingLog_UnknownEvent_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent& SharingLog::unknown_event() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.unknown_event)
  return _internal_unknown_event();
}
inline void SharingLog::unsafe_arena_set_allocated_unknown_event(
    ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unknown_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unknown_event_);
  }
  unknown_event_ = unknown_event;
  if (unknown_event) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.unknown_event)
}
inline ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* SharingLog::release_unknown_event() {
  _has_bits_[0] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* temp = unknown_event_;
  unknown_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* SharingLog::unsafe_arena_release_unknown_event() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.unknown_event)
  _has_bits_[0] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* temp = unknown_event_;
  unknown_event_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* SharingLog::_internal_mutable_unknown_event() {
  _has_bits_[0] |= 0x00000008u;
  if (unknown_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_UnknownEvent>(GetArenaForAllocation());
    unknown_event_ = p;
  }
  return unknown_event_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* SharingLog::mutable_unknown_event() {
  ::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* _msg = _internal_mutable_unknown_event();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.unknown_event)
  return _msg;
}
inline void SharingLog::set_allocated_unknown_event(::nearby::sharing::analytics::proto::SharingLog_UnknownEvent* unknown_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unknown_event_;
  }
  if (unknown_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_UnknownEvent>::GetOwningArena(unknown_event);
    if (message_arena != submessage_arena) {
      unknown_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  unknown_event_ = unknown_event;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.unknown_event)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AcceptAgreements accept_agreements = 3;
inline bool SharingLog::_internal_has_accept_agreements() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || accept_agreements_ != nullptr);
  return value;
}
inline bool SharingLog::has_accept_agreements() const {
  return _internal_has_accept_agreements();
}
inline void SharingLog::clear_accept_agreements() {
  if (accept_agreements_ != nullptr) accept_agreements_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements& SharingLog::_internal_accept_agreements() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* p = accept_agreements_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AcceptAgreements_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements& SharingLog::accept_agreements() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.accept_agreements)
  return _internal_accept_agreements();
}
inline void SharingLog::unsafe_arena_set_allocated_accept_agreements(
    ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* accept_agreements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accept_agreements_);
  }
  accept_agreements_ = accept_agreements;
  if (accept_agreements) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.accept_agreements)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* SharingLog::release_accept_agreements() {
  _has_bits_[0] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* temp = accept_agreements_;
  accept_agreements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* SharingLog::unsafe_arena_release_accept_agreements() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.accept_agreements)
  _has_bits_[0] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* temp = accept_agreements_;
  accept_agreements_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* SharingLog::_internal_mutable_accept_agreements() {
  _has_bits_[0] |= 0x00000010u;
  if (accept_agreements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements>(GetArenaForAllocation());
    accept_agreements_ = p;
  }
  return accept_agreements_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* SharingLog::mutable_accept_agreements() {
  ::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* _msg = _internal_mutable_accept_agreements();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.accept_agreements)
  return _msg;
}
inline void SharingLog::set_allocated_accept_agreements(::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements* accept_agreements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accept_agreements_;
  }
  if (accept_agreements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AcceptAgreements>::GetOwningArena(accept_agreements);
    if (message_arena != submessage_arena) {
      accept_agreements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept_agreements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  accept_agreements_ = accept_agreements;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.accept_agreements)
}

// optional .nearby.sharing.analytics.proto.SharingLog.EnableNearbySharing enable_nearby_sharing = 4;
inline bool SharingLog::_internal_has_enable_nearby_sharing() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || enable_nearby_sharing_ != nullptr);
  return value;
}
inline bool SharingLog::has_enable_nearby_sharing() const {
  return _internal_has_enable_nearby_sharing();
}
inline void SharingLog::clear_enable_nearby_sharing() {
  if (enable_nearby_sharing_ != nullptr) enable_nearby_sharing_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing& SharingLog::_internal_enable_nearby_sharing() const {
  const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* p = enable_nearby_sharing_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing&>(
      ::nearby::sharing::analytics::proto::_SharingLog_EnableNearbySharing_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing& SharingLog::enable_nearby_sharing() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.enable_nearby_sharing)
  return _internal_enable_nearby_sharing();
}
inline void SharingLog::unsafe_arena_set_allocated_enable_nearby_sharing(
    ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* enable_nearby_sharing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_nearby_sharing_);
  }
  enable_nearby_sharing_ = enable_nearby_sharing;
  if (enable_nearby_sharing) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.enable_nearby_sharing)
}
inline ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* SharingLog::release_enable_nearby_sharing() {
  _has_bits_[0] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* temp = enable_nearby_sharing_;
  enable_nearby_sharing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* SharingLog::unsafe_arena_release_enable_nearby_sharing() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.enable_nearby_sharing)
  _has_bits_[0] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* temp = enable_nearby_sharing_;
  enable_nearby_sharing_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* SharingLog::_internal_mutable_enable_nearby_sharing() {
  _has_bits_[0] |= 0x00000020u;
  if (enable_nearby_sharing_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing>(GetArenaForAllocation());
    enable_nearby_sharing_ = p;
  }
  return enable_nearby_sharing_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* SharingLog::mutable_enable_nearby_sharing() {
  ::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* _msg = _internal_mutable_enable_nearby_sharing();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.enable_nearby_sharing)
  return _msg;
}
inline void SharingLog::set_allocated_enable_nearby_sharing(::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing* enable_nearby_sharing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enable_nearby_sharing_;
  }
  if (enable_nearby_sharing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_EnableNearbySharing>::GetOwningArena(enable_nearby_sharing);
    if (message_arena != submessage_arena) {
      enable_nearby_sharing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_nearby_sharing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  enable_nearby_sharing_ = enable_nearby_sharing;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.enable_nearby_sharing)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SetVisibility set_visibility = 5;
inline bool SharingLog::_internal_has_set_visibility() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || set_visibility_ != nullptr);
  return value;
}
inline bool SharingLog::has_set_visibility() const {
  return _internal_has_set_visibility();
}
inline void SharingLog::clear_set_visibility() {
  if (set_visibility_ != nullptr) set_visibility_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility& SharingLog::_internal_set_visibility() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* p = set_visibility_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SetVisibility_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetVisibility& SharingLog::set_visibility() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.set_visibility)
  return _internal_set_visibility();
}
inline void SharingLog::unsafe_arena_set_allocated_set_visibility(
    ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* set_visibility) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_visibility_);
  }
  set_visibility_ = set_visibility;
  if (set_visibility) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_visibility)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* SharingLog::release_set_visibility() {
  _has_bits_[0] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* temp = set_visibility_;
  set_visibility_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* SharingLog::unsafe_arena_release_set_visibility() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.set_visibility)
  _has_bits_[0] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* temp = set_visibility_;
  set_visibility_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* SharingLog::_internal_mutable_set_visibility() {
  _has_bits_[0] |= 0x00000040u;
  if (set_visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetVisibility>(GetArenaForAllocation());
    set_visibility_ = p;
  }
  return set_visibility_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* SharingLog::mutable_set_visibility() {
  ::nearby::sharing::analytics::proto::SharingLog_SetVisibility* _msg = _internal_mutable_set_visibility();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.set_visibility)
  return _msg;
}
inline void SharingLog::set_allocated_set_visibility(::nearby::sharing::analytics::proto::SharingLog_SetVisibility* set_visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_visibility_;
  }
  if (set_visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SetVisibility>::GetOwningArena(set_visibility);
    if (message_arena != submessage_arena) {
      set_visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_visibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  set_visibility_ = set_visibility;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_visibility)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DescribeAttachments describe_attachments = 6;
inline bool SharingLog::_internal_has_describe_attachments() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || describe_attachments_ != nullptr);
  return value;
}
inline bool SharingLog::has_describe_attachments() const {
  return _internal_has_describe_attachments();
}
inline void SharingLog::clear_describe_attachments() {
  if (describe_attachments_ != nullptr) describe_attachments_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments& SharingLog::_internal_describe_attachments() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* p = describe_attachments_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DescribeAttachments_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments& SharingLog::describe_attachments() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.describe_attachments)
  return _internal_describe_attachments();
}
inline void SharingLog::unsafe_arena_set_allocated_describe_attachments(
    ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* describe_attachments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(describe_attachments_);
  }
  describe_attachments_ = describe_attachments;
  if (describe_attachments) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.describe_attachments)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* SharingLog::release_describe_attachments() {
  _has_bits_[0] &= ~0x00000080u;
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* temp = describe_attachments_;
  describe_attachments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* SharingLog::unsafe_arena_release_describe_attachments() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.describe_attachments)
  _has_bits_[0] &= ~0x00000080u;
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* temp = describe_attachments_;
  describe_attachments_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* SharingLog::_internal_mutable_describe_attachments() {
  _has_bits_[0] |= 0x00000080u;
  if (describe_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments>(GetArenaForAllocation());
    describe_attachments_ = p;
  }
  return describe_attachments_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* SharingLog::mutable_describe_attachments() {
  ::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* _msg = _internal_mutable_describe_attachments();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.describe_attachments)
  return _msg;
}
inline void SharingLog::set_allocated_describe_attachments(::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments* describe_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete describe_attachments_;
  }
  if (describe_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DescribeAttachments>::GetOwningArena(describe_attachments);
    if (message_arena != submessage_arena) {
      describe_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, describe_attachments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  describe_attachments_ = describe_attachments;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.describe_attachments)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsStart scan_for_share_targets_start = 7;
inline bool SharingLog::_internal_has_scan_for_share_targets_start() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || scan_for_share_targets_start_ != nullptr);
  return value;
}
inline bool SharingLog::has_scan_for_share_targets_start() const {
  return _internal_has_scan_for_share_targets_start();
}
inline void SharingLog::clear_scan_for_share_targets_start() {
  if (scan_for_share_targets_start_ != nullptr) scan_for_share_targets_start_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart& SharingLog::_internal_scan_for_share_targets_start() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* p = scan_for_share_targets_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ScanForShareTargetsStart_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart& SharingLog::scan_for_share_targets_start() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_start)
  return _internal_scan_for_share_targets_start();
}
inline void SharingLog::unsafe_arena_set_allocated_scan_for_share_targets_start(
    ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* scan_for_share_targets_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_for_share_targets_start_);
  }
  scan_for_share_targets_start_ = scan_for_share_targets_start;
  if (scan_for_share_targets_start) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_start)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* SharingLog::release_scan_for_share_targets_start() {
  _has_bits_[0] &= ~0x00000100u;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* temp = scan_for_share_targets_start_;
  scan_for_share_targets_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* SharingLog::unsafe_arena_release_scan_for_share_targets_start() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_start)
  _has_bits_[0] &= ~0x00000100u;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* temp = scan_for_share_targets_start_;
  scan_for_share_targets_start_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* SharingLog::_internal_mutable_scan_for_share_targets_start() {
  _has_bits_[0] |= 0x00000100u;
  if (scan_for_share_targets_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart>(GetArenaForAllocation());
    scan_for_share_targets_start_ = p;
  }
  return scan_for_share_targets_start_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* SharingLog::mutable_scan_for_share_targets_start() {
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* _msg = _internal_mutable_scan_for_share_targets_start();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_start)
  return _msg;
}
inline void SharingLog::set_allocated_scan_for_share_targets_start(::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart* scan_for_share_targets_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scan_for_share_targets_start_;
  }
  if (scan_for_share_targets_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsStart>::GetOwningArena(scan_for_share_targets_start);
    if (message_arena != submessage_arena) {
      scan_for_share_targets_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_for_share_targets_start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  scan_for_share_targets_start_ = scan_for_share_targets_start;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_start)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ScanForShareTargetsEnd scan_for_share_targets_end = 8;
inline bool SharingLog::_internal_has_scan_for_share_targets_end() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || scan_for_share_targets_end_ != nullptr);
  return value;
}
inline bool SharingLog::has_scan_for_share_targets_end() const {
  return _internal_has_scan_for_share_targets_end();
}
inline void SharingLog::clear_scan_for_share_targets_end() {
  if (scan_for_share_targets_end_ != nullptr) scan_for_share_targets_end_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd& SharingLog::_internal_scan_for_share_targets_end() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* p = scan_for_share_targets_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ScanForShareTargetsEnd_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd& SharingLog::scan_for_share_targets_end() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_end)
  return _internal_scan_for_share_targets_end();
}
inline void SharingLog::unsafe_arena_set_allocated_scan_for_share_targets_end(
    ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* scan_for_share_targets_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_for_share_targets_end_);
  }
  scan_for_share_targets_end_ = scan_for_share_targets_end;
  if (scan_for_share_targets_end) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_end)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* SharingLog::release_scan_for_share_targets_end() {
  _has_bits_[0] &= ~0x00000200u;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* temp = scan_for_share_targets_end_;
  scan_for_share_targets_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* SharingLog::unsafe_arena_release_scan_for_share_targets_end() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_end)
  _has_bits_[0] &= ~0x00000200u;
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* temp = scan_for_share_targets_end_;
  scan_for_share_targets_end_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* SharingLog::_internal_mutable_scan_for_share_targets_end() {
  _has_bits_[0] |= 0x00000200u;
  if (scan_for_share_targets_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd>(GetArenaForAllocation());
    scan_for_share_targets_end_ = p;
  }
  return scan_for_share_targets_end_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* SharingLog::mutable_scan_for_share_targets_end() {
  ::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* _msg = _internal_mutable_scan_for_share_targets_end();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_end)
  return _msg;
}
inline void SharingLog::set_allocated_scan_for_share_targets_end(::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd* scan_for_share_targets_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scan_for_share_targets_end_;
  }
  if (scan_for_share_targets_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ScanForShareTargetsEnd>::GetOwningArena(scan_for_share_targets_end);
    if (message_arena != submessage_arena) {
      scan_for_share_targets_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_for_share_targets_end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  scan_for_share_targets_end_ = scan_for_share_targets_end;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.scan_for_share_targets_end)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceStart advertise_device_presence_start = 9;
inline bool SharingLog::_internal_has_advertise_device_presence_start() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || advertise_device_presence_start_ != nullptr);
  return value;
}
inline bool SharingLog::has_advertise_device_presence_start() const {
  return _internal_has_advertise_device_presence_start();
}
inline void SharingLog::clear_advertise_device_presence_start() {
  if (advertise_device_presence_start_ != nullptr) advertise_device_presence_start_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart& SharingLog::_internal_advertise_device_presence_start() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* p = advertise_device_presence_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AdvertiseDevicePresenceStart_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart& SharingLog::advertise_device_presence_start() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_start)
  return _internal_advertise_device_presence_start();
}
inline void SharingLog::unsafe_arena_set_allocated_advertise_device_presence_start(
    ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* advertise_device_presence_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advertise_device_presence_start_);
  }
  advertise_device_presence_start_ = advertise_device_presence_start;
  if (advertise_device_presence_start) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_start)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* SharingLog::release_advertise_device_presence_start() {
  _has_bits_[0] &= ~0x00000400u;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* temp = advertise_device_presence_start_;
  advertise_device_presence_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* SharingLog::unsafe_arena_release_advertise_device_presence_start() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_start)
  _has_bits_[0] &= ~0x00000400u;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* temp = advertise_device_presence_start_;
  advertise_device_presence_start_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* SharingLog::_internal_mutable_advertise_device_presence_start() {
  _has_bits_[0] |= 0x00000400u;
  if (advertise_device_presence_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart>(GetArenaForAllocation());
    advertise_device_presence_start_ = p;
  }
  return advertise_device_presence_start_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* SharingLog::mutable_advertise_device_presence_start() {
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* _msg = _internal_mutable_advertise_device_presence_start();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_start)
  return _msg;
}
inline void SharingLog::set_allocated_advertise_device_presence_start(::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart* advertise_device_presence_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete advertise_device_presence_start_;
  }
  if (advertise_device_presence_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceStart>::GetOwningArena(advertise_device_presence_start);
    if (message_arena != submessage_arena) {
      advertise_device_presence_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise_device_presence_start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  advertise_device_presence_start_ = advertise_device_presence_start;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_start)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AdvertiseDevicePresenceEnd advertise_device_presence_end = 10;
inline bool SharingLog::_internal_has_advertise_device_presence_end() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || advertise_device_presence_end_ != nullptr);
  return value;
}
inline bool SharingLog::has_advertise_device_presence_end() const {
  return _internal_has_advertise_device_presence_end();
}
inline void SharingLog::clear_advertise_device_presence_end() {
  if (advertise_device_presence_end_ != nullptr) advertise_device_presence_end_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd& SharingLog::_internal_advertise_device_presence_end() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* p = advertise_device_presence_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AdvertiseDevicePresenceEnd_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd& SharingLog::advertise_device_presence_end() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_end)
  return _internal_advertise_device_presence_end();
}
inline void SharingLog::unsafe_arena_set_allocated_advertise_device_presence_end(
    ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* advertise_device_presence_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advertise_device_presence_end_);
  }
  advertise_device_presence_end_ = advertise_device_presence_end;
  if (advertise_device_presence_end) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_end)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* SharingLog::release_advertise_device_presence_end() {
  _has_bits_[0] &= ~0x00000800u;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* temp = advertise_device_presence_end_;
  advertise_device_presence_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* SharingLog::unsafe_arena_release_advertise_device_presence_end() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_end)
  _has_bits_[0] &= ~0x00000800u;
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* temp = advertise_device_presence_end_;
  advertise_device_presence_end_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* SharingLog::_internal_mutable_advertise_device_presence_end() {
  _has_bits_[0] |= 0x00000800u;
  if (advertise_device_presence_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd>(GetArenaForAllocation());
    advertise_device_presence_end_ = p;
  }
  return advertise_device_presence_end_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* SharingLog::mutable_advertise_device_presence_end() {
  ::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* _msg = _internal_mutable_advertise_device_presence_end();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_end)
  return _msg;
}
inline void SharingLog::set_allocated_advertise_device_presence_end(::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd* advertise_device_presence_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete advertise_device_presence_end_;
  }
  if (advertise_device_presence_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AdvertiseDevicePresenceEnd>::GetOwningArena(advertise_device_presence_end);
    if (message_arena != submessage_arena) {
      advertise_device_presence_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise_device_presence_end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  advertise_device_presence_end_ = advertise_device_presence_end;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.advertise_device_presence_end)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendFastInitialization send_initialization = 11;
inline bool SharingLog::_internal_has_send_initialization() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || send_initialization_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_initialization() const {
  return _internal_has_send_initialization();
}
inline void SharingLog::clear_send_initialization() {
  if (send_initialization_ != nullptr) send_initialization_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization& SharingLog::_internal_send_initialization() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* p = send_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendFastInitialization_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization& SharingLog::send_initialization() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_initialization)
  return _internal_send_initialization();
}
inline void SharingLog::unsafe_arena_set_allocated_send_initialization(
    ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* send_initialization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_initialization_);
  }
  send_initialization_ = send_initialization;
  if (send_initialization) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_initialization)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* SharingLog::release_send_initialization() {
  _has_bits_[0] &= ~0x00001000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* temp = send_initialization_;
  send_initialization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* SharingLog::unsafe_arena_release_send_initialization() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_initialization)
  _has_bits_[0] &= ~0x00001000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* temp = send_initialization_;
  send_initialization_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* SharingLog::_internal_mutable_send_initialization() {
  _has_bits_[0] |= 0x00001000u;
  if (send_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization>(GetArenaForAllocation());
    send_initialization_ = p;
  }
  return send_initialization_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* SharingLog::mutable_send_initialization() {
  ::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* _msg = _internal_mutable_send_initialization();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_initialization)
  return _msg;
}
inline void SharingLog::set_allocated_send_initialization(::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization* send_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_initialization_;
  }
  if (send_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendFastInitialization>::GetOwningArena(send_initialization);
    if (message_arena != submessage_arena) {
      send_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_initialization, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  send_initialization_ = send_initialization;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_initialization)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ReceiveFastInitialization receive_initialization = 12;
inline bool SharingLog::_internal_has_receive_initialization() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || receive_initialization_ != nullptr);
  return value;
}
inline bool SharingLog::has_receive_initialization() const {
  return _internal_has_receive_initialization();
}
inline void SharingLog::clear_receive_initialization() {
  if (receive_initialization_ != nullptr) receive_initialization_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization& SharingLog::_internal_receive_initialization() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* p = receive_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ReceiveFastInitialization_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization& SharingLog::receive_initialization() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.receive_initialization)
  return _internal_receive_initialization();
}
inline void SharingLog::unsafe_arena_set_allocated_receive_initialization(
    ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* receive_initialization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_initialization_);
  }
  receive_initialization_ = receive_initialization;
  if (receive_initialization) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_initialization)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* SharingLog::release_receive_initialization() {
  _has_bits_[0] &= ~0x00002000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* temp = receive_initialization_;
  receive_initialization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* SharingLog::unsafe_arena_release_receive_initialization() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.receive_initialization)
  _has_bits_[0] &= ~0x00002000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* temp = receive_initialization_;
  receive_initialization_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* SharingLog::_internal_mutable_receive_initialization() {
  _has_bits_[0] |= 0x00002000u;
  if (receive_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization>(GetArenaForAllocation());
    receive_initialization_ = p;
  }
  return receive_initialization_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* SharingLog::mutable_receive_initialization() {
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* _msg = _internal_mutable_receive_initialization();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.receive_initialization)
  return _msg;
}
inline void SharingLog::set_allocated_receive_initialization(::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization* receive_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receive_initialization_;
  }
  if (receive_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ReceiveFastInitialization>::GetOwningArena(receive_initialization);
    if (message_arena != submessage_arena) {
      receive_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_initialization, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  receive_initialization_ = receive_initialization;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_initialization)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DiscoverShareTarget discover_share_target = 13;
inline bool SharingLog::_internal_has_discover_share_target() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || discover_share_target_ != nullptr);
  return value;
}
inline bool SharingLog::has_discover_share_target() const {
  return _internal_has_discover_share_target();
}
inline void SharingLog::clear_discover_share_target() {
  if (discover_share_target_ != nullptr) discover_share_target_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget& SharingLog::_internal_discover_share_target() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* p = discover_share_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DiscoverShareTarget_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget& SharingLog::discover_share_target() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.discover_share_target)
  return _internal_discover_share_target();
}
inline void SharingLog::unsafe_arena_set_allocated_discover_share_target(
    ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* discover_share_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discover_share_target_);
  }
  discover_share_target_ = discover_share_target;
  if (discover_share_target) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.discover_share_target)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* SharingLog::release_discover_share_target() {
  _has_bits_[0] &= ~0x00004000u;
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* temp = discover_share_target_;
  discover_share_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* SharingLog::unsafe_arena_release_discover_share_target() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.discover_share_target)
  _has_bits_[0] &= ~0x00004000u;
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* temp = discover_share_target_;
  discover_share_target_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* SharingLog::_internal_mutable_discover_share_target() {
  _has_bits_[0] |= 0x00004000u;
  if (discover_share_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget>(GetArenaForAllocation());
    discover_share_target_ = p;
  }
  return discover_share_target_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* SharingLog::mutable_discover_share_target() {
  ::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* _msg = _internal_mutable_discover_share_target();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.discover_share_target)
  return _msg;
}
inline void SharingLog::set_allocated_discover_share_target(::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget* discover_share_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete discover_share_target_;
  }
  if (discover_share_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DiscoverShareTarget>::GetOwningArena(discover_share_target);
    if (message_arena != submessage_arena) {
      discover_share_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discover_share_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  discover_share_target_ = discover_share_target;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.discover_share_target)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendIntroduction send_introduction = 14;
inline bool SharingLog::_internal_has_send_introduction() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || send_introduction_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_introduction() const {
  return _internal_has_send_introduction();
}
inline void SharingLog::clear_send_introduction() {
  if (send_introduction_ != nullptr) send_introduction_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction& SharingLog::_internal_send_introduction() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* p = send_introduction_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendIntroduction_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction& SharingLog::send_introduction() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_introduction)
  return _internal_send_introduction();
}
inline void SharingLog::unsafe_arena_set_allocated_send_introduction(
    ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* send_introduction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_introduction_);
  }
  send_introduction_ = send_introduction;
  if (send_introduction) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_introduction)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* SharingLog::release_send_introduction() {
  _has_bits_[0] &= ~0x00008000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* temp = send_introduction_;
  send_introduction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* SharingLog::unsafe_arena_release_send_introduction() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_introduction)
  _has_bits_[0] &= ~0x00008000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* temp = send_introduction_;
  send_introduction_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* SharingLog::_internal_mutable_send_introduction() {
  _has_bits_[0] |= 0x00008000u;
  if (send_introduction_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendIntroduction>(GetArenaForAllocation());
    send_introduction_ = p;
  }
  return send_introduction_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* SharingLog::mutable_send_introduction() {
  ::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* _msg = _internal_mutable_send_introduction();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_introduction)
  return _msg;
}
inline void SharingLog::set_allocated_send_introduction(::nearby::sharing::analytics::proto::SharingLog_SendIntroduction* send_introduction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_introduction_;
  }
  if (send_introduction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendIntroduction>::GetOwningArena(send_introduction);
    if (message_arena != submessage_arena) {
      send_introduction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_introduction, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  send_introduction_ = send_introduction;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_introduction)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ReceiveIntroduction receive_introduction = 15;
inline bool SharingLog::_internal_has_receive_introduction() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || receive_introduction_ != nullptr);
  return value;
}
inline bool SharingLog::has_receive_introduction() const {
  return _internal_has_receive_introduction();
}
inline void SharingLog::clear_receive_introduction() {
  if (receive_introduction_ != nullptr) receive_introduction_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction& SharingLog::_internal_receive_introduction() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* p = receive_introduction_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ReceiveIntroduction_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction& SharingLog::receive_introduction() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.receive_introduction)
  return _internal_receive_introduction();
}
inline void SharingLog::unsafe_arena_set_allocated_receive_introduction(
    ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* receive_introduction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_introduction_);
  }
  receive_introduction_ = receive_introduction;
  if (receive_introduction) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_introduction)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* SharingLog::release_receive_introduction() {
  _has_bits_[0] &= ~0x00010000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* temp = receive_introduction_;
  receive_introduction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* SharingLog::unsafe_arena_release_receive_introduction() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.receive_introduction)
  _has_bits_[0] &= ~0x00010000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* temp = receive_introduction_;
  receive_introduction_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* SharingLog::_internal_mutable_receive_introduction() {
  _has_bits_[0] |= 0x00010000u;
  if (receive_introduction_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction>(GetArenaForAllocation());
    receive_introduction_ = p;
  }
  return receive_introduction_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* SharingLog::mutable_receive_introduction() {
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* _msg = _internal_mutable_receive_introduction();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.receive_introduction)
  return _msg;
}
inline void SharingLog::set_allocated_receive_introduction(::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction* receive_introduction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receive_introduction_;
  }
  if (receive_introduction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ReceiveIntroduction>::GetOwningArena(receive_introduction);
    if (message_arena != submessage_arena) {
      receive_introduction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_introduction, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  receive_introduction_ = receive_introduction;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_introduction)
}

// optional .nearby.sharing.analytics.proto.SharingLog.RespondToIntroduction respond_introduction = 16;
inline bool SharingLog::_internal_has_respond_introduction() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || respond_introduction_ != nullptr);
  return value;
}
inline bool SharingLog::has_respond_introduction() const {
  return _internal_has_respond_introduction();
}
inline void SharingLog::clear_respond_introduction() {
  if (respond_introduction_ != nullptr) respond_introduction_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction& SharingLog::_internal_respond_introduction() const {
  const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* p = respond_introduction_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction&>(
      ::nearby::sharing::analytics::proto::_SharingLog_RespondToIntroduction_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction& SharingLog::respond_introduction() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.respond_introduction)
  return _internal_respond_introduction();
}
inline void SharingLog::unsafe_arena_set_allocated_respond_introduction(
    ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* respond_introduction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respond_introduction_);
  }
  respond_introduction_ = respond_introduction;
  if (respond_introduction) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.respond_introduction)
}
inline ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* SharingLog::release_respond_introduction() {
  _has_bits_[0] &= ~0x00020000u;
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* temp = respond_introduction_;
  respond_introduction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* SharingLog::unsafe_arena_release_respond_introduction() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.respond_introduction)
  _has_bits_[0] &= ~0x00020000u;
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* temp = respond_introduction_;
  respond_introduction_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* SharingLog::_internal_mutable_respond_introduction() {
  _has_bits_[0] |= 0x00020000u;
  if (respond_introduction_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction>(GetArenaForAllocation());
    respond_introduction_ = p;
  }
  return respond_introduction_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* SharingLog::mutable_respond_introduction() {
  ::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* _msg = _internal_mutable_respond_introduction();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.respond_introduction)
  return _msg;
}
inline void SharingLog::set_allocated_respond_introduction(::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction* respond_introduction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete respond_introduction_;
  }
  if (respond_introduction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_RespondToIntroduction>::GetOwningArena(respond_introduction);
    if (message_arena != submessage_arena) {
      respond_introduction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respond_introduction, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  respond_introduction_ = respond_introduction;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.respond_introduction)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsStart send_attachments_start = 17;
inline bool SharingLog::_internal_has_send_attachments_start() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || send_attachments_start_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_attachments_start() const {
  return _internal_has_send_attachments_start();
}
inline void SharingLog::clear_send_attachments_start() {
  if (send_attachments_start_ != nullptr) send_attachments_start_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart& SharingLog::_internal_send_attachments_start() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* p = send_attachments_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendAttachmentsStart_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart& SharingLog::send_attachments_start() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_attachments_start)
  return _internal_send_attachments_start();
}
inline void SharingLog::unsafe_arena_set_allocated_send_attachments_start(
    ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* send_attachments_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_attachments_start_);
  }
  send_attachments_start_ = send_attachments_start;
  if (send_attachments_start) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_attachments_start)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* SharingLog::release_send_attachments_start() {
  _has_bits_[0] &= ~0x00040000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* temp = send_attachments_start_;
  send_attachments_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* SharingLog::unsafe_arena_release_send_attachments_start() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_attachments_start)
  _has_bits_[0] &= ~0x00040000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* temp = send_attachments_start_;
  send_attachments_start_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* SharingLog::_internal_mutable_send_attachments_start() {
  _has_bits_[0] |= 0x00040000u;
  if (send_attachments_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart>(GetArenaForAllocation());
    send_attachments_start_ = p;
  }
  return send_attachments_start_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* SharingLog::mutable_send_attachments_start() {
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* _msg = _internal_mutable_send_attachments_start();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_attachments_start)
  return _msg;
}
inline void SharingLog::set_allocated_send_attachments_start(::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart* send_attachments_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_attachments_start_;
  }
  if (send_attachments_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsStart>::GetOwningArena(send_attachments_start);
    if (message_arena != submessage_arena) {
      send_attachments_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_attachments_start, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  send_attachments_start_ = send_attachments_start;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_attachments_start)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendAttachmentsEnd send_attachments_end = 18;
inline bool SharingLog::_internal_has_send_attachments_end() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || send_attachments_end_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_attachments_end() const {
  return _internal_has_send_attachments_end();
}
inline void SharingLog::clear_send_attachments_end() {
  if (send_attachments_end_ != nullptr) send_attachments_end_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd& SharingLog::_internal_send_attachments_end() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* p = send_attachments_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendAttachmentsEnd_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd& SharingLog::send_attachments_end() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_attachments_end)
  return _internal_send_attachments_end();
}
inline void SharingLog::unsafe_arena_set_allocated_send_attachments_end(
    ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* send_attachments_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_attachments_end_);
  }
  send_attachments_end_ = send_attachments_end;
  if (send_attachments_end) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_attachments_end)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* SharingLog::release_send_attachments_end() {
  _has_bits_[0] &= ~0x00080000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* temp = send_attachments_end_;
  send_attachments_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* SharingLog::unsafe_arena_release_send_attachments_end() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_attachments_end)
  _has_bits_[0] &= ~0x00080000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* temp = send_attachments_end_;
  send_attachments_end_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* SharingLog::_internal_mutable_send_attachments_end() {
  _has_bits_[0] |= 0x00080000u;
  if (send_attachments_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd>(GetArenaForAllocation());
    send_attachments_end_ = p;
  }
  return send_attachments_end_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* SharingLog::mutable_send_attachments_end() {
  ::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* _msg = _internal_mutable_send_attachments_end();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_attachments_end)
  return _msg;
}
inline void SharingLog::set_allocated_send_attachments_end(::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd* send_attachments_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_attachments_end_;
  }
  if (send_attachments_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendAttachmentsEnd>::GetOwningArena(send_attachments_end);
    if (message_arena != submessage_arena) {
      send_attachments_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_attachments_end, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  send_attachments_end_ = send_attachments_end;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_attachments_end)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsStart receive_attachments_start = 19;
inline bool SharingLog::_internal_has_receive_attachments_start() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || receive_attachments_start_ != nullptr);
  return value;
}
inline bool SharingLog::has_receive_attachments_start() const {
  return _internal_has_receive_attachments_start();
}
inline void SharingLog::clear_receive_attachments_start() {
  if (receive_attachments_start_ != nullptr) receive_attachments_start_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart& SharingLog::_internal_receive_attachments_start() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* p = receive_attachments_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ReceiveAttachmentsStart_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart& SharingLog::receive_attachments_start() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.receive_attachments_start)
  return _internal_receive_attachments_start();
}
inline void SharingLog::unsafe_arena_set_allocated_receive_attachments_start(
    ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* receive_attachments_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_attachments_start_);
  }
  receive_attachments_start_ = receive_attachments_start;
  if (receive_attachments_start) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_attachments_start)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* SharingLog::release_receive_attachments_start() {
  _has_bits_[0] &= ~0x00100000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* temp = receive_attachments_start_;
  receive_attachments_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* SharingLog::unsafe_arena_release_receive_attachments_start() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.receive_attachments_start)
  _has_bits_[0] &= ~0x00100000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* temp = receive_attachments_start_;
  receive_attachments_start_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* SharingLog::_internal_mutable_receive_attachments_start() {
  _has_bits_[0] |= 0x00100000u;
  if (receive_attachments_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart>(GetArenaForAllocation());
    receive_attachments_start_ = p;
  }
  return receive_attachments_start_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* SharingLog::mutable_receive_attachments_start() {
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* _msg = _internal_mutable_receive_attachments_start();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.receive_attachments_start)
  return _msg;
}
inline void SharingLog::set_allocated_receive_attachments_start(::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart* receive_attachments_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receive_attachments_start_;
  }
  if (receive_attachments_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsStart>::GetOwningArena(receive_attachments_start);
    if (message_arena != submessage_arena) {
      receive_attachments_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_attachments_start, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  receive_attachments_start_ = receive_attachments_start;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_attachments_start)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ReceiveAttachmentsEnd receive_attachments_end = 20;
inline bool SharingLog::_internal_has_receive_attachments_end() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || receive_attachments_end_ != nullptr);
  return value;
}
inline bool SharingLog::has_receive_attachments_end() const {
  return _internal_has_receive_attachments_end();
}
inline void SharingLog::clear_receive_attachments_end() {
  if (receive_attachments_end_ != nullptr) receive_attachments_end_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd& SharingLog::_internal_receive_attachments_end() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* p = receive_attachments_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ReceiveAttachmentsEnd_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd& SharingLog::receive_attachments_end() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.receive_attachments_end)
  return _internal_receive_attachments_end();
}
inline void SharingLog::unsafe_arena_set_allocated_receive_attachments_end(
    ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* receive_attachments_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_attachments_end_);
  }
  receive_attachments_end_ = receive_attachments_end;
  if (receive_attachments_end) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_attachments_end)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* SharingLog::release_receive_attachments_end() {
  _has_bits_[0] &= ~0x00200000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* temp = receive_attachments_end_;
  receive_attachments_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* SharingLog::unsafe_arena_release_receive_attachments_end() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.receive_attachments_end)
  _has_bits_[0] &= ~0x00200000u;
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* temp = receive_attachments_end_;
  receive_attachments_end_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* SharingLog::_internal_mutable_receive_attachments_end() {
  _has_bits_[0] |= 0x00200000u;
  if (receive_attachments_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd>(GetArenaForAllocation());
    receive_attachments_end_ = p;
  }
  return receive_attachments_end_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* SharingLog::mutable_receive_attachments_end() {
  ::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* _msg = _internal_mutable_receive_attachments_end();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.receive_attachments_end)
  return _msg;
}
inline void SharingLog::set_allocated_receive_attachments_end(::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd* receive_attachments_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receive_attachments_end_;
  }
  if (receive_attachments_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ReceiveAttachmentsEnd>::GetOwningArena(receive_attachments_end);
    if (message_arena != submessage_arena) {
      receive_attachments_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_attachments_end, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  receive_attachments_end_ = receive_attachments_end;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.receive_attachments_end)
}

// optional .nearby.sharing.analytics.proto.SharingLog.CancelSendingAttachments cancel_sending_attachments = 21;
inline bool SharingLog::_internal_has_cancel_sending_attachments() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || cancel_sending_attachments_ != nullptr);
  return value;
}
inline bool SharingLog::has_cancel_sending_attachments() const {
  return _internal_has_cancel_sending_attachments();
}
inline void SharingLog::clear_cancel_sending_attachments() {
  if (cancel_sending_attachments_ != nullptr) cancel_sending_attachments_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments& SharingLog::_internal_cancel_sending_attachments() const {
  const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* p = cancel_sending_attachments_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments&>(
      ::nearby::sharing::analytics::proto::_SharingLog_CancelSendingAttachments_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments& SharingLog::cancel_sending_attachments() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.cancel_sending_attachments)
  return _internal_cancel_sending_attachments();
}
inline void SharingLog::unsafe_arena_set_allocated_cancel_sending_attachments(
    ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* cancel_sending_attachments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_sending_attachments_);
  }
  cancel_sending_attachments_ = cancel_sending_attachments;
  if (cancel_sending_attachments) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_sending_attachments)
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* SharingLog::release_cancel_sending_attachments() {
  _has_bits_[0] &= ~0x00400000u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* temp = cancel_sending_attachments_;
  cancel_sending_attachments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* SharingLog::unsafe_arena_release_cancel_sending_attachments() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.cancel_sending_attachments)
  _has_bits_[0] &= ~0x00400000u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* temp = cancel_sending_attachments_;
  cancel_sending_attachments_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* SharingLog::_internal_mutable_cancel_sending_attachments() {
  _has_bits_[0] |= 0x00400000u;
  if (cancel_sending_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments>(GetArenaForAllocation());
    cancel_sending_attachments_ = p;
  }
  return cancel_sending_attachments_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* SharingLog::mutable_cancel_sending_attachments() {
  ::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* _msg = _internal_mutable_cancel_sending_attachments();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.cancel_sending_attachments)
  return _msg;
}
inline void SharingLog::set_allocated_cancel_sending_attachments(::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments* cancel_sending_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cancel_sending_attachments_;
  }
  if (cancel_sending_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_CancelSendingAttachments>::GetOwningArena(cancel_sending_attachments);
    if (message_arena != submessage_arena) {
      cancel_sending_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_sending_attachments, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  cancel_sending_attachments_ = cancel_sending_attachments;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_sending_attachments)
}

// optional .nearby.sharing.analytics.proto.SharingLog.CancelReceivingAttachments cancel_receiving_attachments = 22;
inline bool SharingLog::_internal_has_cancel_receiving_attachments() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || cancel_receiving_attachments_ != nullptr);
  return value;
}
inline bool SharingLog::has_cancel_receiving_attachments() const {
  return _internal_has_cancel_receiving_attachments();
}
inline void SharingLog::clear_cancel_receiving_attachments() {
  if (cancel_receiving_attachments_ != nullptr) cancel_receiving_attachments_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments& SharingLog::_internal_cancel_receiving_attachments() const {
  const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* p = cancel_receiving_attachments_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments&>(
      ::nearby::sharing::analytics::proto::_SharingLog_CancelReceivingAttachments_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments& SharingLog::cancel_receiving_attachments() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.cancel_receiving_attachments)
  return _internal_cancel_receiving_attachments();
}
inline void SharingLog::unsafe_arena_set_allocated_cancel_receiving_attachments(
    ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* cancel_receiving_attachments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_receiving_attachments_);
  }
  cancel_receiving_attachments_ = cancel_receiving_attachments;
  if (cancel_receiving_attachments) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_receiving_attachments)
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* SharingLog::release_cancel_receiving_attachments() {
  _has_bits_[0] &= ~0x00800000u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* temp = cancel_receiving_attachments_;
  cancel_receiving_attachments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* SharingLog::unsafe_arena_release_cancel_receiving_attachments() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.cancel_receiving_attachments)
  _has_bits_[0] &= ~0x00800000u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* temp = cancel_receiving_attachments_;
  cancel_receiving_attachments_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* SharingLog::_internal_mutable_cancel_receiving_attachments() {
  _has_bits_[0] |= 0x00800000u;
  if (cancel_receiving_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments>(GetArenaForAllocation());
    cancel_receiving_attachments_ = p;
  }
  return cancel_receiving_attachments_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* SharingLog::mutable_cancel_receiving_attachments() {
  ::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* _msg = _internal_mutable_cancel_receiving_attachments();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.cancel_receiving_attachments)
  return _msg;
}
inline void SharingLog::set_allocated_cancel_receiving_attachments(::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments* cancel_receiving_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cancel_receiving_attachments_;
  }
  if (cancel_receiving_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_CancelReceivingAttachments>::GetOwningArena(cancel_receiving_attachments);
    if (message_arena != submessage_arena) {
      cancel_receiving_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_receiving_attachments, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  cancel_receiving_attachments_ = cancel_receiving_attachments;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_receiving_attachments)
}

// optional .nearby.sharing.analytics.proto.SharingLog.OpenReceivedAttachments open_received_attachments = 23;
inline bool SharingLog::_internal_has_open_received_attachments() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || open_received_attachments_ != nullptr);
  return value;
}
inline bool SharingLog::has_open_received_attachments() const {
  return _internal_has_open_received_attachments();
}
inline void SharingLog::clear_open_received_attachments() {
  if (open_received_attachments_ != nullptr) open_received_attachments_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments& SharingLog::_internal_open_received_attachments() const {
  const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* p = open_received_attachments_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments&>(
      ::nearby::sharing::analytics::proto::_SharingLog_OpenReceivedAttachments_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments& SharingLog::open_received_attachments() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.open_received_attachments)
  return _internal_open_received_attachments();
}
inline void SharingLog::unsafe_arena_set_allocated_open_received_attachments(
    ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* open_received_attachments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_received_attachments_);
  }
  open_received_attachments_ = open_received_attachments;
  if (open_received_attachments) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.open_received_attachments)
}
inline ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* SharingLog::release_open_received_attachments() {
  _has_bits_[0] &= ~0x01000000u;
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* temp = open_received_attachments_;
  open_received_attachments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* SharingLog::unsafe_arena_release_open_received_attachments() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.open_received_attachments)
  _has_bits_[0] &= ~0x01000000u;
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* temp = open_received_attachments_;
  open_received_attachments_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* SharingLog::_internal_mutable_open_received_attachments() {
  _has_bits_[0] |= 0x01000000u;
  if (open_received_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments>(GetArenaForAllocation());
    open_received_attachments_ = p;
  }
  return open_received_attachments_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* SharingLog::mutable_open_received_attachments() {
  ::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* _msg = _internal_mutable_open_received_attachments();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.open_received_attachments)
  return _msg;
}
inline void SharingLog::set_allocated_open_received_attachments(::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments* open_received_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete open_received_attachments_;
  }
  if (open_received_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_OpenReceivedAttachments>::GetOwningArena(open_received_attachments);
    if (message_arena != submessage_arena) {
      open_received_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_received_attachments, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  open_received_attachments_ = open_received_attachments;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.open_received_attachments)
}

// optional .nearby.sharing.analytics.proto.SharingLog.LaunchActivity launch_activity = 24;
inline bool SharingLog::_internal_has_launch_activity() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || launch_activity_ != nullptr);
  return value;
}
inline bool SharingLog::has_launch_activity() const {
  return _internal_has_launch_activity();
}
inline void SharingLog::clear_launch_activity() {
  if (launch_activity_ != nullptr) launch_activity_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity& SharingLog::_internal_launch_activity() const {
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* p = launch_activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity&>(
      ::nearby::sharing::analytics::proto::_SharingLog_LaunchActivity_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity& SharingLog::launch_activity() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.launch_activity)
  return _internal_launch_activity();
}
inline void SharingLog::unsafe_arena_set_allocated_launch_activity(
    ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* launch_activity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(launch_activity_);
  }
  launch_activity_ = launch_activity;
  if (launch_activity) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_activity)
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* SharingLog::release_launch_activity() {
  _has_bits_[0] &= ~0x02000000u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* temp = launch_activity_;
  launch_activity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* SharingLog::unsafe_arena_release_launch_activity() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.launch_activity)
  _has_bits_[0] &= ~0x02000000u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* temp = launch_activity_;
  launch_activity_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* SharingLog::_internal_mutable_launch_activity() {
  _has_bits_[0] |= 0x02000000u;
  if (launch_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchActivity>(GetArenaForAllocation());
    launch_activity_ = p;
  }
  return launch_activity_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* SharingLog::mutable_launch_activity() {
  ::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* _msg = _internal_mutable_launch_activity();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.launch_activity)
  return _msg;
}
inline void SharingLog::set_allocated_launch_activity(::nearby::sharing::analytics::proto::SharingLog_LaunchActivity* launch_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete launch_activity_;
  }
  if (launch_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_LaunchActivity>::GetOwningArena(launch_activity);
    if (message_arena != submessage_arena) {
      launch_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launch_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  launch_activity_ = launch_activity;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_activity)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AddContact add_contact = 25;
inline bool SharingLog::_internal_has_add_contact() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || add_contact_ != nullptr);
  return value;
}
inline bool SharingLog::has_add_contact() const {
  return _internal_has_add_contact();
}
inline void SharingLog::clear_add_contact() {
  if (add_contact_ != nullptr) add_contact_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AddContact& SharingLog::_internal_add_contact() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AddContact* p = add_contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AddContact&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AddContact_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AddContact& SharingLog::add_contact() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.add_contact)
  return _internal_add_contact();
}
inline void SharingLog::unsafe_arena_set_allocated_add_contact(
    ::nearby::sharing::analytics::proto::SharingLog_AddContact* add_contact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_contact_);
  }
  add_contact_ = add_contact;
  if (add_contact) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.add_contact)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddContact* SharingLog::release_add_contact() {
  _has_bits_[0] &= ~0x04000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* temp = add_contact_;
  add_contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddContact* SharingLog::unsafe_arena_release_add_contact() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.add_contact)
  _has_bits_[0] &= ~0x04000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* temp = add_contact_;
  add_contact_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddContact* SharingLog::_internal_mutable_add_contact() {
  _has_bits_[0] |= 0x04000000u;
  if (add_contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AddContact>(GetArenaForAllocation());
    add_contact_ = p;
  }
  return add_contact_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddContact* SharingLog::mutable_add_contact() {
  ::nearby::sharing::analytics::proto::SharingLog_AddContact* _msg = _internal_mutable_add_contact();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.add_contact)
  return _msg;
}
inline void SharingLog::set_allocated_add_contact(::nearby::sharing::analytics::proto::SharingLog_AddContact* add_contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_contact_;
  }
  if (add_contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AddContact>::GetOwningArena(add_contact);
    if (message_arena != submessage_arena) {
      add_contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_contact, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  add_contact_ = add_contact;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.add_contact)
}

// optional .nearby.sharing.analytics.proto.SharingLog.RemoveContact remove_contact = 26;
inline bool SharingLog::_internal_has_remove_contact() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || remove_contact_ != nullptr);
  return value;
}
inline bool SharingLog::has_remove_contact() const {
  return _internal_has_remove_contact();
}
inline void SharingLog::clear_remove_contact() {
  if (remove_contact_ != nullptr) remove_contact_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact& SharingLog::_internal_remove_contact() const {
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* p = remove_contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact&>(
      ::nearby::sharing::analytics::proto::_SharingLog_RemoveContact_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RemoveContact& SharingLog::remove_contact() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.remove_contact)
  return _internal_remove_contact();
}
inline void SharingLog::unsafe_arena_set_allocated_remove_contact(
    ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* remove_contact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_contact_);
  }
  remove_contact_ = remove_contact;
  if (remove_contact) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.remove_contact)
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* SharingLog::release_remove_contact() {
  _has_bits_[0] &= ~0x08000000u;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* temp = remove_contact_;
  remove_contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* SharingLog::unsafe_arena_release_remove_contact() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.remove_contact)
  _has_bits_[0] &= ~0x08000000u;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* temp = remove_contact_;
  remove_contact_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* SharingLog::_internal_mutable_remove_contact() {
  _has_bits_[0] |= 0x08000000u;
  if (remove_contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RemoveContact>(GetArenaForAllocation());
    remove_contact_ = p;
  }
  return remove_contact_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* SharingLog::mutable_remove_contact() {
  ::nearby::sharing::analytics::proto::SharingLog_RemoveContact* _msg = _internal_mutable_remove_contact();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.remove_contact)
  return _msg;
}
inline void SharingLog::set_allocated_remove_contact(::nearby::sharing::analytics::proto::SharingLog_RemoveContact* remove_contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remove_contact_;
  }
  if (remove_contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_RemoveContact>::GetOwningArena(remove_contact);
    if (message_arena != submessage_arena) {
      remove_contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_contact, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  remove_contact_ = remove_contact;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.remove_contact)
}

// optional .location.nearby.proto.sharing.LogSource log_source = 27;
inline bool SharingLog::_internal_has_log_source() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool SharingLog::has_log_source() const {
  return _internal_has_log_source();
}
inline void SharingLog::clear_log_source() {
  log_source_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::location::nearby::proto::sharing::LogSource SharingLog::_internal_log_source() const {
  return static_cast< ::location::nearby::proto::sharing::LogSource >(log_source_);
}
inline ::location::nearby::proto::sharing::LogSource SharingLog::log_source() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.log_source)
  return _internal_log_source();
}
inline void SharingLog::_internal_set_log_source(::location::nearby::proto::sharing::LogSource value) {
  assert(::location::nearby::proto::sharing::LogSource_IsValid(value));
  _has_bits_[2] |= 0x00000100u;
  log_source_ = value;
}
inline void SharingLog::set_log_source(::location::nearby::proto::sharing::LogSource value) {
  _internal_set_log_source(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.log_source)
}

// optional .nearby.sharing.analytics.proto.SharingLog.FastShareServerResponse fast_share_server_response = 28;
inline bool SharingLog::_internal_has_fast_share_server_response() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || fast_share_server_response_ != nullptr);
  return value;
}
inline bool SharingLog::has_fast_share_server_response() const {
  return _internal_has_fast_share_server_response();
}
inline void SharingLog::clear_fast_share_server_response() {
  if (fast_share_server_response_ != nullptr) fast_share_server_response_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse& SharingLog::_internal_fast_share_server_response() const {
  const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* p = fast_share_server_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse&>(
      ::nearby::sharing::analytics::proto::_SharingLog_FastShareServerResponse_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse& SharingLog::fast_share_server_response() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.fast_share_server_response)
  return _internal_fast_share_server_response();
}
inline void SharingLog::unsafe_arena_set_allocated_fast_share_server_response(
    ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* fast_share_server_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_share_server_response_);
  }
  fast_share_server_response_ = fast_share_server_response;
  if (fast_share_server_response) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.fast_share_server_response)
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* SharingLog::release_fast_share_server_response() {
  _has_bits_[0] &= ~0x10000000u;
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* temp = fast_share_server_response_;
  fast_share_server_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* SharingLog::unsafe_arena_release_fast_share_server_response() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.fast_share_server_response)
  _has_bits_[0] &= ~0x10000000u;
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* temp = fast_share_server_response_;
  fast_share_server_response_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* SharingLog::_internal_mutable_fast_share_server_response() {
  _has_bits_[0] |= 0x10000000u;
  if (fast_share_server_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse>(GetArenaForAllocation());
    fast_share_server_response_ = p;
  }
  return fast_share_server_response_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* SharingLog::mutable_fast_share_server_response() {
  ::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* _msg = _internal_mutable_fast_share_server_response();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.fast_share_server_response)
  return _msg;
}
inline void SharingLog::set_allocated_fast_share_server_response(::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse* fast_share_server_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fast_share_server_response_;
  }
  if (fast_share_server_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_FastShareServerResponse>::GetOwningArena(fast_share_server_response);
    if (message_arena != submessage_arena) {
      fast_share_server_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_share_server_response, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  fast_share_server_response_ = fast_share_server_response;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.fast_share_server_response)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendStart send_start = 29;
inline bool SharingLog::_internal_has_send_start() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || send_start_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_start() const {
  return _internal_has_send_start();
}
inline void SharingLog::clear_send_start() {
  if (send_start_ != nullptr) send_start_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendStart& SharingLog::_internal_send_start() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendStart* p = send_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendStart&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendStart_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendStart& SharingLog::send_start() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_start)
  return _internal_send_start();
}
inline void SharingLog::unsafe_arena_set_allocated_send_start(
    ::nearby::sharing::analytics::proto::SharingLog_SendStart* send_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_start_);
  }
  send_start_ = send_start;
  if (send_start) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_start)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendStart* SharingLog::release_send_start() {
  _has_bits_[0] &= ~0x20000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* temp = send_start_;
  send_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendStart* SharingLog::unsafe_arena_release_send_start() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_start)
  _has_bits_[0] &= ~0x20000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* temp = send_start_;
  send_start_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendStart* SharingLog::_internal_mutable_send_start() {
  _has_bits_[0] |= 0x20000000u;
  if (send_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendStart>(GetArenaForAllocation());
    send_start_ = p;
  }
  return send_start_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendStart* SharingLog::mutable_send_start() {
  ::nearby::sharing::analytics::proto::SharingLog_SendStart* _msg = _internal_mutable_send_start();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_start)
  return _msg;
}
inline void SharingLog::set_allocated_send_start(::nearby::sharing::analytics::proto::SharingLog_SendStart* send_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_start_;
  }
  if (send_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendStart>::GetOwningArena(send_start);
    if (message_arena != submessage_arena) {
      send_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_start, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  send_start_ = send_start;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_start)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AcceptFastInitialization accept_fast_initialization = 30;
inline bool SharingLog::_internal_has_accept_fast_initialization() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || accept_fast_initialization_ != nullptr);
  return value;
}
inline bool SharingLog::has_accept_fast_initialization() const {
  return _internal_has_accept_fast_initialization();
}
inline void SharingLog::clear_accept_fast_initialization() {
  if (accept_fast_initialization_ != nullptr) accept_fast_initialization_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization& SharingLog::_internal_accept_fast_initialization() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* p = accept_fast_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AcceptFastInitialization_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization& SharingLog::accept_fast_initialization() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.accept_fast_initialization)
  return _internal_accept_fast_initialization();
}
inline void SharingLog::unsafe_arena_set_allocated_accept_fast_initialization(
    ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* accept_fast_initialization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accept_fast_initialization_);
  }
  accept_fast_initialization_ = accept_fast_initialization;
  if (accept_fast_initialization) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.accept_fast_initialization)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* SharingLog::release_accept_fast_initialization() {
  _has_bits_[0] &= ~0x40000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* temp = accept_fast_initialization_;
  accept_fast_initialization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* SharingLog::unsafe_arena_release_accept_fast_initialization() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.accept_fast_initialization)
  _has_bits_[0] &= ~0x40000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* temp = accept_fast_initialization_;
  accept_fast_initialization_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* SharingLog::_internal_mutable_accept_fast_initialization() {
  _has_bits_[0] |= 0x40000000u;
  if (accept_fast_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization>(GetArenaForAllocation());
    accept_fast_initialization_ = p;
  }
  return accept_fast_initialization_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* SharingLog::mutable_accept_fast_initialization() {
  ::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* _msg = _internal_mutable_accept_fast_initialization();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.accept_fast_initialization)
  return _msg;
}
inline void SharingLog::set_allocated_accept_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization* accept_fast_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accept_fast_initialization_;
  }
  if (accept_fast_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AcceptFastInitialization>::GetOwningArena(accept_fast_initialization);
    if (message_arena != submessage_arena) {
      accept_fast_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept_fast_initialization, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  accept_fast_initialization_ = accept_fast_initialization;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.accept_fast_initialization)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SetDataUsage set_data_usage = 31;
inline bool SharingLog::_internal_has_set_data_usage() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || set_data_usage_ != nullptr);
  return value;
}
inline bool SharingLog::has_set_data_usage() const {
  return _internal_has_set_data_usage();
}
inline void SharingLog::clear_set_data_usage() {
  if (set_data_usage_ != nullptr) set_data_usage_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage& SharingLog::_internal_set_data_usage() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* p = set_data_usage_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SetDataUsage_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage& SharingLog::set_data_usage() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.set_data_usage)
  return _internal_set_data_usage();
}
inline void SharingLog::unsafe_arena_set_allocated_set_data_usage(
    ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* set_data_usage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_data_usage_);
  }
  set_data_usage_ = set_data_usage;
  if (set_data_usage) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_data_usage)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* SharingLog::release_set_data_usage() {
  _has_bits_[0] &= ~0x80000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* temp = set_data_usage_;
  set_data_usage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* SharingLog::unsafe_arena_release_set_data_usage() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.set_data_usage)
  _has_bits_[0] &= ~0x80000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* temp = set_data_usage_;
  set_data_usage_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* SharingLog::_internal_mutable_set_data_usage() {
  _has_bits_[0] |= 0x80000000u;
  if (set_data_usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetDataUsage>(GetArenaForAllocation());
    set_data_usage_ = p;
  }
  return set_data_usage_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* SharingLog::mutable_set_data_usage() {
  ::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* _msg = _internal_mutable_set_data_usage();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.set_data_usage)
  return _msg;
}
inline void SharingLog::set_allocated_set_data_usage(::nearby::sharing::analytics::proto::SharingLog_SetDataUsage* set_data_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_data_usage_;
  }
  if (set_data_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SetDataUsage>::GetOwningArena(set_data_usage);
    if (message_arena != submessage_arena) {
      set_data_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_data_usage, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  set_data_usage_ = set_data_usage;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_data_usage)
}

// optional string version = 32;
inline bool SharingLog::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingLog::has_version() const {
  return _internal_has_version();
}
inline void SharingLog::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingLog::version() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.version)
}
inline std::string* SharingLog::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.version)
  return _s;
}
inline const std::string& SharingLog::_internal_version() const {
  return version_.Get();
}
inline void SharingLog::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog::release_version() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.version)
}

// optional .location.nearby.proto.sharing.EventCategory event_category = 33;
inline bool SharingLog::_internal_has_event_category() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool SharingLog::has_event_category() const {
  return _internal_has_event_category();
}
inline void SharingLog::clear_event_category() {
  event_category_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::location::nearby::proto::sharing::EventCategory SharingLog::_internal_event_category() const {
  return static_cast< ::location::nearby::proto::sharing::EventCategory >(event_category_);
}
inline ::location::nearby::proto::sharing::EventCategory SharingLog::event_category() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.event_category)
  return _internal_event_category();
}
inline void SharingLog::_internal_set_event_category(::location::nearby::proto::sharing::EventCategory value) {
  assert(::location::nearby::proto::sharing::EventCategory_IsValid(value));
  _has_bits_[2] |= 0x00000200u;
  event_category_ = value;
}
inline void SharingLog::set_event_category(::location::nearby::proto::sharing::EventCategory value) {
  _internal_set_event_category(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.event_category)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DismissFastInitialization dismiss_fast_initialization = 34;
inline bool SharingLog::_internal_has_dismiss_fast_initialization() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dismiss_fast_initialization_ != nullptr);
  return value;
}
inline bool SharingLog::has_dismiss_fast_initialization() const {
  return _internal_has_dismiss_fast_initialization();
}
inline void SharingLog::clear_dismiss_fast_initialization() {
  if (dismiss_fast_initialization_ != nullptr) dismiss_fast_initialization_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization& SharingLog::_internal_dismiss_fast_initialization() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* p = dismiss_fast_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DismissFastInitialization_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization& SharingLog::dismiss_fast_initialization() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.dismiss_fast_initialization)
  return _internal_dismiss_fast_initialization();
}
inline void SharingLog::unsafe_arena_set_allocated_dismiss_fast_initialization(
    ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* dismiss_fast_initialization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dismiss_fast_initialization_);
  }
  dismiss_fast_initialization_ = dismiss_fast_initialization;
  if (dismiss_fast_initialization) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.dismiss_fast_initialization)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* SharingLog::release_dismiss_fast_initialization() {
  _has_bits_[1] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* temp = dismiss_fast_initialization_;
  dismiss_fast_initialization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* SharingLog::unsafe_arena_release_dismiss_fast_initialization() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.dismiss_fast_initialization)
  _has_bits_[1] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* temp = dismiss_fast_initialization_;
  dismiss_fast_initialization_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* SharingLog::_internal_mutable_dismiss_fast_initialization() {
  _has_bits_[1] |= 0x00000001u;
  if (dismiss_fast_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization>(GetArenaForAllocation());
    dismiss_fast_initialization_ = p;
  }
  return dismiss_fast_initialization_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* SharingLog::mutable_dismiss_fast_initialization() {
  ::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* _msg = _internal_mutable_dismiss_fast_initialization();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.dismiss_fast_initialization)
  return _msg;
}
inline void SharingLog::set_allocated_dismiss_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization* dismiss_fast_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dismiss_fast_initialization_;
  }
  if (dismiss_fast_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DismissFastInitialization>::GetOwningArena(dismiss_fast_initialization);
    if (message_arena != submessage_arena) {
      dismiss_fast_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dismiss_fast_initialization, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  dismiss_fast_initialization_ = dismiss_fast_initialization;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.dismiss_fast_initialization)
}

// optional .nearby.sharing.analytics.proto.SharingLog.CancelConnection cancel_connection = 35;
inline bool SharingLog::_internal_has_cancel_connection() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cancel_connection_ != nullptr);
  return value;
}
inline bool SharingLog::has_cancel_connection() const {
  return _internal_has_cancel_connection();
}
inline void SharingLog::clear_cancel_connection() {
  if (cancel_connection_ != nullptr) cancel_connection_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection& SharingLog::_internal_cancel_connection() const {
  const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* p = cancel_connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection&>(
      ::nearby::sharing::analytics::proto::_SharingLog_CancelConnection_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_CancelConnection& SharingLog::cancel_connection() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.cancel_connection)
  return _internal_cancel_connection();
}
inline void SharingLog::unsafe_arena_set_allocated_cancel_connection(
    ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* cancel_connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_connection_);
  }
  cancel_connection_ = cancel_connection;
  if (cancel_connection) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_connection)
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* SharingLog::release_cancel_connection() {
  _has_bits_[1] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* temp = cancel_connection_;
  cancel_connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* SharingLog::unsafe_arena_release_cancel_connection() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.cancel_connection)
  _has_bits_[1] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* temp = cancel_connection_;
  cancel_connection_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* SharingLog::_internal_mutable_cancel_connection() {
  _has_bits_[1] |= 0x00000002u;
  if (cancel_connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_CancelConnection>(GetArenaForAllocation());
    cancel_connection_ = p;
  }
  return cancel_connection_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* SharingLog::mutable_cancel_connection() {
  ::nearby::sharing::analytics::proto::SharingLog_CancelConnection* _msg = _internal_mutable_cancel_connection();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.cancel_connection)
  return _msg;
}
inline void SharingLog::set_allocated_cancel_connection(::nearby::sharing::analytics::proto::SharingLog_CancelConnection* cancel_connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cancel_connection_;
  }
  if (cancel_connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_CancelConnection>::GetOwningArena(cancel_connection);
    if (message_arena != submessage_arena) {
      cancel_connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_connection, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  cancel_connection_ = cancel_connection;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.cancel_connection)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DismissPrivacyNotification dismiss_privacy_notification = 36;
inline bool SharingLog::_internal_has_dismiss_privacy_notification() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dismiss_privacy_notification_ != nullptr);
  return value;
}
inline bool SharingLog::has_dismiss_privacy_notification() const {
  return _internal_has_dismiss_privacy_notification();
}
inline void SharingLog::clear_dismiss_privacy_notification() {
  if (dismiss_privacy_notification_ != nullptr) dismiss_privacy_notification_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification& SharingLog::_internal_dismiss_privacy_notification() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* p = dismiss_privacy_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DismissPrivacyNotification_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification& SharingLog::dismiss_privacy_notification() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.dismiss_privacy_notification)
  return _internal_dismiss_privacy_notification();
}
inline void SharingLog::unsafe_arena_set_allocated_dismiss_privacy_notification(
    ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* dismiss_privacy_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dismiss_privacy_notification_);
  }
  dismiss_privacy_notification_ = dismiss_privacy_notification;
  if (dismiss_privacy_notification) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.dismiss_privacy_notification)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* SharingLog::release_dismiss_privacy_notification() {
  _has_bits_[1] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* temp = dismiss_privacy_notification_;
  dismiss_privacy_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* SharingLog::unsafe_arena_release_dismiss_privacy_notification() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.dismiss_privacy_notification)
  _has_bits_[1] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* temp = dismiss_privacy_notification_;
  dismiss_privacy_notification_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* SharingLog::_internal_mutable_dismiss_privacy_notification() {
  _has_bits_[1] |= 0x00000004u;
  if (dismiss_privacy_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification>(GetArenaForAllocation());
    dismiss_privacy_notification_ = p;
  }
  return dismiss_privacy_notification_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* SharingLog::mutable_dismiss_privacy_notification() {
  ::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* _msg = _internal_mutable_dismiss_privacy_notification();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.dismiss_privacy_notification)
  return _msg;
}
inline void SharingLog::set_allocated_dismiss_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification* dismiss_privacy_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dismiss_privacy_notification_;
  }
  if (dismiss_privacy_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DismissPrivacyNotification>::GetOwningArena(dismiss_privacy_notification);
    if (message_arena != submessage_arena) {
      dismiss_privacy_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dismiss_privacy_notification, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  dismiss_privacy_notification_ = dismiss_privacy_notification;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.dismiss_privacy_notification)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapPrivacyNotification tap_privacy_notification = 37;
inline bool SharingLog::_internal_has_tap_privacy_notification() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tap_privacy_notification_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_privacy_notification() const {
  return _internal_has_tap_privacy_notification();
}
inline void SharingLog::clear_tap_privacy_notification() {
  if (tap_privacy_notification_ != nullptr) tap_privacy_notification_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification& SharingLog::_internal_tap_privacy_notification() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* p = tap_privacy_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapPrivacyNotification_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification& SharingLog::tap_privacy_notification() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_privacy_notification)
  return _internal_tap_privacy_notification();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_privacy_notification(
    ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* tap_privacy_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_privacy_notification_);
  }
  tap_privacy_notification_ = tap_privacy_notification;
  if (tap_privacy_notification) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_privacy_notification)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* SharingLog::release_tap_privacy_notification() {
  _has_bits_[1] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* temp = tap_privacy_notification_;
  tap_privacy_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* SharingLog::unsafe_arena_release_tap_privacy_notification() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_privacy_notification)
  _has_bits_[1] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* temp = tap_privacy_notification_;
  tap_privacy_notification_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* SharingLog::_internal_mutable_tap_privacy_notification() {
  _has_bits_[1] |= 0x00000008u;
  if (tap_privacy_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification>(GetArenaForAllocation());
    tap_privacy_notification_ = p;
  }
  return tap_privacy_notification_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* SharingLog::mutable_tap_privacy_notification() {
  ::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* _msg = _internal_mutable_tap_privacy_notification();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_privacy_notification)
  return _msg;
}
inline void SharingLog::set_allocated_tap_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification* tap_privacy_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_privacy_notification_;
  }
  if (tap_privacy_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapPrivacyNotification>::GetOwningArena(tap_privacy_notification);
    if (message_arena != submessage_arena) {
      tap_privacy_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_privacy_notification, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  tap_privacy_notification_ = tap_privacy_notification;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_privacy_notification)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapHelp tap_help = 38;
inline bool SharingLog::_internal_has_tap_help() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tap_help_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_help() const {
  return _internal_has_tap_help();
}
inline void SharingLog::clear_tap_help() {
  if (tap_help_ != nullptr) tap_help_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapHelp& SharingLog::_internal_tap_help() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapHelp* p = tap_help_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapHelp&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapHelp_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapHelp& SharingLog::tap_help() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_help)
  return _internal_tap_help();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_help(
    ::nearby::sharing::analytics::proto::SharingLog_TapHelp* tap_help) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_help_);
  }
  tap_help_ = tap_help;
  if (tap_help) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_help)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapHelp* SharingLog::release_tap_help() {
  _has_bits_[1] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* temp = tap_help_;
  tap_help_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapHelp* SharingLog::unsafe_arena_release_tap_help() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_help)
  _has_bits_[1] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* temp = tap_help_;
  tap_help_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapHelp* SharingLog::_internal_mutable_tap_help() {
  _has_bits_[1] |= 0x00000010u;
  if (tap_help_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapHelp>(GetArenaForAllocation());
    tap_help_ = p;
  }
  return tap_help_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapHelp* SharingLog::mutable_tap_help() {
  ::nearby::sharing::analytics::proto::SharingLog_TapHelp* _msg = _internal_mutable_tap_help();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_help)
  return _msg;
}
inline void SharingLog::set_allocated_tap_help(::nearby::sharing::analytics::proto::SharingLog_TapHelp* tap_help) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_help_;
  }
  if (tap_help) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapHelp>::GetOwningArena(tap_help);
    if (message_arena != submessage_arena) {
      tap_help = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_help, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  tap_help_ = tap_help;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_help)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapFeedback tap_feedback = 39;
inline bool SharingLog::_internal_has_tap_feedback() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tap_feedback_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_feedback() const {
  return _internal_has_tap_feedback();
}
inline void SharingLog::clear_tap_feedback() {
  if (tap_feedback_ != nullptr) tap_feedback_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback& SharingLog::_internal_tap_feedback() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* p = tap_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapFeedback_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapFeedback& SharingLog::tap_feedback() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_feedback)
  return _internal_tap_feedback();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_feedback(
    ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* tap_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_feedback_);
  }
  tap_feedback_ = tap_feedback;
  if (tap_feedback) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_feedback)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* SharingLog::release_tap_feedback() {
  _has_bits_[1] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* temp = tap_feedback_;
  tap_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* SharingLog::unsafe_arena_release_tap_feedback() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_feedback)
  _has_bits_[1] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* temp = tap_feedback_;
  tap_feedback_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* SharingLog::_internal_mutable_tap_feedback() {
  _has_bits_[1] |= 0x00000020u;
  if (tap_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapFeedback>(GetArenaForAllocation());
    tap_feedback_ = p;
  }
  return tap_feedback_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* SharingLog::mutable_tap_feedback() {
  ::nearby::sharing::analytics::proto::SharingLog_TapFeedback* _msg = _internal_mutable_tap_feedback();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_feedback)
  return _msg;
}
inline void SharingLog::set_allocated_tap_feedback(::nearby::sharing::analytics::proto::SharingLog_TapFeedback* tap_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_feedback_;
  }
  if (tap_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapFeedback>::GetOwningArena(tap_feedback);
    if (message_arena != submessage_arena) {
      tap_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_feedback, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  tap_feedback_ = tap_feedback;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_feedback)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AddQuickSettingsTile add_quick_settings_tile = 40;
inline bool SharingLog::_internal_has_add_quick_settings_tile() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || add_quick_settings_tile_ != nullptr);
  return value;
}
inline bool SharingLog::has_add_quick_settings_tile() const {
  return _internal_has_add_quick_settings_tile();
}
inline void SharingLog::clear_add_quick_settings_tile() {
  if (add_quick_settings_tile_ != nullptr) add_quick_settings_tile_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile& SharingLog::_internal_add_quick_settings_tile() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* p = add_quick_settings_tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AddQuickSettingsTile_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile& SharingLog::add_quick_settings_tile() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.add_quick_settings_tile)
  return _internal_add_quick_settings_tile();
}
inline void SharingLog::unsafe_arena_set_allocated_add_quick_settings_tile(
    ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* add_quick_settings_tile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_quick_settings_tile_);
  }
  add_quick_settings_tile_ = add_quick_settings_tile;
  if (add_quick_settings_tile) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.add_quick_settings_tile)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* SharingLog::release_add_quick_settings_tile() {
  _has_bits_[1] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* temp = add_quick_settings_tile_;
  add_quick_settings_tile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* SharingLog::unsafe_arena_release_add_quick_settings_tile() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.add_quick_settings_tile)
  _has_bits_[1] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* temp = add_quick_settings_tile_;
  add_quick_settings_tile_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* SharingLog::_internal_mutable_add_quick_settings_tile() {
  _has_bits_[1] |= 0x00000040u;
  if (add_quick_settings_tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile>(GetArenaForAllocation());
    add_quick_settings_tile_ = p;
  }
  return add_quick_settings_tile_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* SharingLog::mutable_add_quick_settings_tile() {
  ::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* _msg = _internal_mutable_add_quick_settings_tile();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.add_quick_settings_tile)
  return _msg;
}
inline void SharingLog::set_allocated_add_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile* add_quick_settings_tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_quick_settings_tile_;
  }
  if (add_quick_settings_tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AddQuickSettingsTile>::GetOwningArena(add_quick_settings_tile);
    if (message_arena != submessage_arena) {
      add_quick_settings_tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_quick_settings_tile, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  add_quick_settings_tile_ = add_quick_settings_tile;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.add_quick_settings_tile)
}

// optional .nearby.sharing.analytics.proto.SharingLog.RemoveQuickSettingsTile remove_quick_settings_tile = 41;
inline bool SharingLog::_internal_has_remove_quick_settings_tile() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || remove_quick_settings_tile_ != nullptr);
  return value;
}
inline bool SharingLog::has_remove_quick_settings_tile() const {
  return _internal_has_remove_quick_settings_tile();
}
inline void SharingLog::clear_remove_quick_settings_tile() {
  if (remove_quick_settings_tile_ != nullptr) remove_quick_settings_tile_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile& SharingLog::_internal_remove_quick_settings_tile() const {
  const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* p = remove_quick_settings_tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile&>(
      ::nearby::sharing::analytics::proto::_SharingLog_RemoveQuickSettingsTile_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile& SharingLog::remove_quick_settings_tile() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.remove_quick_settings_tile)
  return _internal_remove_quick_settings_tile();
}
inline void SharingLog::unsafe_arena_set_allocated_remove_quick_settings_tile(
    ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* remove_quick_settings_tile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_quick_settings_tile_);
  }
  remove_quick_settings_tile_ = remove_quick_settings_tile;
  if (remove_quick_settings_tile) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.remove_quick_settings_tile)
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* SharingLog::release_remove_quick_settings_tile() {
  _has_bits_[1] &= ~0x00000080u;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* temp = remove_quick_settings_tile_;
  remove_quick_settings_tile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* SharingLog::unsafe_arena_release_remove_quick_settings_tile() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.remove_quick_settings_tile)
  _has_bits_[1] &= ~0x00000080u;
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* temp = remove_quick_settings_tile_;
  remove_quick_settings_tile_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* SharingLog::_internal_mutable_remove_quick_settings_tile() {
  _has_bits_[1] |= 0x00000080u;
  if (remove_quick_settings_tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile>(GetArenaForAllocation());
    remove_quick_settings_tile_ = p;
  }
  return remove_quick_settings_tile_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* SharingLog::mutable_remove_quick_settings_tile() {
  ::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* _msg = _internal_mutable_remove_quick_settings_tile();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.remove_quick_settings_tile)
  return _msg;
}
inline void SharingLog::set_allocated_remove_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile* remove_quick_settings_tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remove_quick_settings_tile_;
  }
  if (remove_quick_settings_tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_RemoveQuickSettingsTile>::GetOwningArena(remove_quick_settings_tile);
    if (message_arena != submessage_arena) {
      remove_quick_settings_tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_quick_settings_tile, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  remove_quick_settings_tile_ = remove_quick_settings_tile;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.remove_quick_settings_tile)
}

// optional .nearby.sharing.analytics.proto.SharingLog.LaunchPhoneConsent launch_phone_consent = 42;
inline bool SharingLog::_internal_has_launch_phone_consent() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || launch_phone_consent_ != nullptr);
  return value;
}
inline bool SharingLog::has_launch_phone_consent() const {
  return _internal_has_launch_phone_consent();
}
inline void SharingLog::clear_launch_phone_consent() {
  if (launch_phone_consent_ != nullptr) launch_phone_consent_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent& SharingLog::_internal_launch_phone_consent() const {
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* p = launch_phone_consent_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent&>(
      ::nearby::sharing::analytics::proto::_SharingLog_LaunchPhoneConsent_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent& SharingLog::launch_phone_consent() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.launch_phone_consent)
  return _internal_launch_phone_consent();
}
inline void SharingLog::unsafe_arena_set_allocated_launch_phone_consent(
    ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* launch_phone_consent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(launch_phone_consent_);
  }
  launch_phone_consent_ = launch_phone_consent;
  if (launch_phone_consent) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_phone_consent)
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* SharingLog::release_launch_phone_consent() {
  _has_bits_[1] &= ~0x00000100u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* temp = launch_phone_consent_;
  launch_phone_consent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* SharingLog::unsafe_arena_release_launch_phone_consent() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.launch_phone_consent)
  _has_bits_[1] &= ~0x00000100u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* temp = launch_phone_consent_;
  launch_phone_consent_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* SharingLog::_internal_mutable_launch_phone_consent() {
  _has_bits_[1] |= 0x00000100u;
  if (launch_phone_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent>(GetArenaForAllocation());
    launch_phone_consent_ = p;
  }
  return launch_phone_consent_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* SharingLog::mutable_launch_phone_consent() {
  ::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* _msg = _internal_mutable_launch_phone_consent();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.launch_phone_consent)
  return _msg;
}
inline void SharingLog::set_allocated_launch_phone_consent(::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent* launch_phone_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete launch_phone_consent_;
  }
  if (launch_phone_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_LaunchPhoneConsent>::GetOwningArena(launch_phone_consent);
    if (message_arena != submessage_arena) {
      launch_phone_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launch_phone_consent, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  launch_phone_consent_ = launch_phone_consent;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_phone_consent)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsTile tap_quick_settings_tile = 43;
inline bool SharingLog::_internal_has_tap_quick_settings_tile() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tap_quick_settings_tile_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_quick_settings_tile() const {
  return _internal_has_tap_quick_settings_tile();
}
inline void SharingLog::clear_tap_quick_settings_tile() {
  if (tap_quick_settings_tile_ != nullptr) tap_quick_settings_tile_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile& SharingLog::_internal_tap_quick_settings_tile() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* p = tap_quick_settings_tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapQuickSettingsTile_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile& SharingLog::tap_quick_settings_tile() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_tile)
  return _internal_tap_quick_settings_tile();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_quick_settings_tile(
    ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* tap_quick_settings_tile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_quick_settings_tile_);
  }
  tap_quick_settings_tile_ = tap_quick_settings_tile;
  if (tap_quick_settings_tile) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_tile)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* SharingLog::release_tap_quick_settings_tile() {
  _has_bits_[1] &= ~0x00000200u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* temp = tap_quick_settings_tile_;
  tap_quick_settings_tile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* SharingLog::unsafe_arena_release_tap_quick_settings_tile() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_tile)
  _has_bits_[1] &= ~0x00000200u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* temp = tap_quick_settings_tile_;
  tap_quick_settings_tile_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* SharingLog::_internal_mutable_tap_quick_settings_tile() {
  _has_bits_[1] |= 0x00000200u;
  if (tap_quick_settings_tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile>(GetArenaForAllocation());
    tap_quick_settings_tile_ = p;
  }
  return tap_quick_settings_tile_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* SharingLog::mutable_tap_quick_settings_tile() {
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* _msg = _internal_mutable_tap_quick_settings_tile();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_tile)
  return _msg;
}
inline void SharingLog::set_allocated_tap_quick_settings_tile(::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile* tap_quick_settings_tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_quick_settings_tile_;
  }
  if (tap_quick_settings_tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsTile>::GetOwningArena(tap_quick_settings_tile);
    if (message_arena != submessage_arena) {
      tap_quick_settings_tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_quick_settings_tile, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  tap_quick_settings_tile_ = tap_quick_settings_tile;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_tile)
}

// optional .nearby.sharing.analytics.proto.SharingLog.InstallAPKStatus install_apk_status = 44;
inline bool SharingLog::_internal_has_install_apk_status() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || install_apk_status_ != nullptr);
  return value;
}
inline bool SharingLog::has_install_apk_status() const {
  return _internal_has_install_apk_status();
}
inline void SharingLog::clear_install_apk_status() {
  if (install_apk_status_ != nullptr) install_apk_status_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus& SharingLog::_internal_install_apk_status() const {
  const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* p = install_apk_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus&>(
      ::nearby::sharing::analytics::proto::_SharingLog_InstallAPKStatus_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus& SharingLog::install_apk_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.install_apk_status)
  return _internal_install_apk_status();
}
inline void SharingLog::unsafe_arena_set_allocated_install_apk_status(
    ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* install_apk_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_apk_status_);
  }
  install_apk_status_ = install_apk_status;
  if (install_apk_status) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.install_apk_status)
}
inline ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* SharingLog::release_install_apk_status() {
  _has_bits_[1] &= ~0x00000400u;
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* temp = install_apk_status_;
  install_apk_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* SharingLog::unsafe_arena_release_install_apk_status() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.install_apk_status)
  _has_bits_[1] &= ~0x00000400u;
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* temp = install_apk_status_;
  install_apk_status_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* SharingLog::_internal_mutable_install_apk_status() {
  _has_bits_[1] |= 0x00000400u;
  if (install_apk_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus>(GetArenaForAllocation());
    install_apk_status_ = p;
  }
  return install_apk_status_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* SharingLog::mutable_install_apk_status() {
  ::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* _msg = _internal_mutable_install_apk_status();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.install_apk_status)
  return _msg;
}
inline void SharingLog::set_allocated_install_apk_status(::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus* install_apk_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete install_apk_status_;
  }
  if (install_apk_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_InstallAPKStatus>::GetOwningArena(install_apk_status);
    if (message_arena != submessage_arena) {
      install_apk_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_apk_status, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  install_apk_status_ = install_apk_status;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.install_apk_status)
}

// optional .nearby.sharing.analytics.proto.SharingLog.VerifyAPKStatus verify_apk_status = 45;
inline bool SharingLog::_internal_has_verify_apk_status() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || verify_apk_status_ != nullptr);
  return value;
}
inline bool SharingLog::has_verify_apk_status() const {
  return _internal_has_verify_apk_status();
}
inline void SharingLog::clear_verify_apk_status() {
  if (verify_apk_status_ != nullptr) verify_apk_status_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus& SharingLog::_internal_verify_apk_status() const {
  const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* p = verify_apk_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus&>(
      ::nearby::sharing::analytics::proto::_SharingLog_VerifyAPKStatus_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus& SharingLog::verify_apk_status() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.verify_apk_status)
  return _internal_verify_apk_status();
}
inline void SharingLog::unsafe_arena_set_allocated_verify_apk_status(
    ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* verify_apk_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verify_apk_status_);
  }
  verify_apk_status_ = verify_apk_status;
  if (verify_apk_status) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.verify_apk_status)
}
inline ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* SharingLog::release_verify_apk_status() {
  _has_bits_[1] &= ~0x00000800u;
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* temp = verify_apk_status_;
  verify_apk_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* SharingLog::unsafe_arena_release_verify_apk_status() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.verify_apk_status)
  _has_bits_[1] &= ~0x00000800u;
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* temp = verify_apk_status_;
  verify_apk_status_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* SharingLog::_internal_mutable_verify_apk_status() {
  _has_bits_[1] |= 0x00000800u;
  if (verify_apk_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus>(GetArenaForAllocation());
    verify_apk_status_ = p;
  }
  return verify_apk_status_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* SharingLog::mutable_verify_apk_status() {
  ::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* _msg = _internal_mutable_verify_apk_status();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.verify_apk_status)
  return _msg;
}
inline void SharingLog::set_allocated_verify_apk_status(::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus* verify_apk_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verify_apk_status_;
  }
  if (verify_apk_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_VerifyAPKStatus>::GetOwningArena(verify_apk_status);
    if (message_arena != submessage_arena) {
      verify_apk_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify_apk_status, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  verify_apk_status_ = verify_apk_status;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.verify_apk_status)
}

// optional .nearby.sharing.analytics.proto.SharingLog.LaunchConsent launch_consent = 46;
inline bool SharingLog::_internal_has_launch_consent() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || launch_consent_ != nullptr);
  return value;
}
inline bool SharingLog::has_launch_consent() const {
  return _internal_has_launch_consent();
}
inline void SharingLog::clear_launch_consent() {
  if (launch_consent_ != nullptr) launch_consent_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent& SharingLog::_internal_launch_consent() const {
  const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* p = launch_consent_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent&>(
      ::nearby::sharing::analytics::proto::_SharingLog_LaunchConsent_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent& SharingLog::launch_consent() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.launch_consent)
  return _internal_launch_consent();
}
inline void SharingLog::unsafe_arena_set_allocated_launch_consent(
    ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* launch_consent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(launch_consent_);
  }
  launch_consent_ = launch_consent;
  if (launch_consent) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_consent)
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* SharingLog::release_launch_consent() {
  _has_bits_[1] &= ~0x00001000u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* temp = launch_consent_;
  launch_consent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* SharingLog::unsafe_arena_release_launch_consent() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.launch_consent)
  _has_bits_[1] &= ~0x00001000u;
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* temp = launch_consent_;
  launch_consent_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* SharingLog::_internal_mutable_launch_consent() {
  _has_bits_[1] |= 0x00001000u;
  if (launch_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_LaunchConsent>(GetArenaForAllocation());
    launch_consent_ = p;
  }
  return launch_consent_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* SharingLog::mutable_launch_consent() {
  ::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* _msg = _internal_mutable_launch_consent();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.launch_consent)
  return _msg;
}
inline void SharingLog::set_allocated_launch_consent(::nearby::sharing::analytics::proto::SharingLog_LaunchConsent* launch_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete launch_consent_;
  }
  if (launch_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_LaunchConsent>::GetOwningArena(launch_consent);
    if (message_arena != submessage_arena) {
      launch_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launch_consent, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  launch_consent_ = launch_consent;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.launch_consent)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ProcessReceivedAttachmentsEnd process_received_attachments_end = 47;
inline bool SharingLog::_internal_has_process_received_attachments_end() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || process_received_attachments_end_ != nullptr);
  return value;
}
inline bool SharingLog::has_process_received_attachments_end() const {
  return _internal_has_process_received_attachments_end();
}
inline void SharingLog::clear_process_received_attachments_end() {
  if (process_received_attachments_end_ != nullptr) process_received_attachments_end_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd& SharingLog::_internal_process_received_attachments_end() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* p = process_received_attachments_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ProcessReceivedAttachmentsEnd_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd& SharingLog::process_received_attachments_end() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.process_received_attachments_end)
  return _internal_process_received_attachments_end();
}
inline void SharingLog::unsafe_arena_set_allocated_process_received_attachments_end(
    ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* process_received_attachments_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_received_attachments_end_);
  }
  process_received_attachments_end_ = process_received_attachments_end;
  if (process_received_attachments_end) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.process_received_attachments_end)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* SharingLog::release_process_received_attachments_end() {
  _has_bits_[1] &= ~0x00002000u;
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* temp = process_received_attachments_end_;
  process_received_attachments_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* SharingLog::unsafe_arena_release_process_received_attachments_end() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.process_received_attachments_end)
  _has_bits_[1] &= ~0x00002000u;
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* temp = process_received_attachments_end_;
  process_received_attachments_end_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* SharingLog::_internal_mutable_process_received_attachments_end() {
  _has_bits_[1] |= 0x00002000u;
  if (process_received_attachments_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd>(GetArenaForAllocation());
    process_received_attachments_end_ = p;
  }
  return process_received_attachments_end_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* SharingLog::mutable_process_received_attachments_end() {
  ::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* _msg = _internal_mutable_process_received_attachments_end();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.process_received_attachments_end)
  return _msg;
}
inline void SharingLog::set_allocated_process_received_attachments_end(::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd* process_received_attachments_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete process_received_attachments_end_;
  }
  if (process_received_attachments_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ProcessReceivedAttachmentsEnd>::GetOwningArena(process_received_attachments_end);
    if (message_arena != submessage_arena) {
      process_received_attachments_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_received_attachments_end, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  process_received_attachments_end_ = process_received_attachments_end;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.process_received_attachments_end)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ToggleShowNotification toggle_show_notification = 48;
inline bool SharingLog::_internal_has_toggle_show_notification() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || toggle_show_notification_ != nullptr);
  return value;
}
inline bool SharingLog::has_toggle_show_notification() const {
  return _internal_has_toggle_show_notification();
}
inline void SharingLog::clear_toggle_show_notification() {
  if (toggle_show_notification_ != nullptr) toggle_show_notification_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification& SharingLog::_internal_toggle_show_notification() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* p = toggle_show_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ToggleShowNotification_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification& SharingLog::toggle_show_notification() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.toggle_show_notification)
  return _internal_toggle_show_notification();
}
inline void SharingLog::unsafe_arena_set_allocated_toggle_show_notification(
    ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* toggle_show_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toggle_show_notification_);
  }
  toggle_show_notification_ = toggle_show_notification;
  if (toggle_show_notification) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.toggle_show_notification)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* SharingLog::release_toggle_show_notification() {
  _has_bits_[1] &= ~0x00004000u;
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* temp = toggle_show_notification_;
  toggle_show_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* SharingLog::unsafe_arena_release_toggle_show_notification() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.toggle_show_notification)
  _has_bits_[1] &= ~0x00004000u;
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* temp = toggle_show_notification_;
  toggle_show_notification_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* SharingLog::_internal_mutable_toggle_show_notification() {
  _has_bits_[1] |= 0x00004000u;
  if (toggle_show_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification>(GetArenaForAllocation());
    toggle_show_notification_ = p;
  }
  return toggle_show_notification_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* SharingLog::mutable_toggle_show_notification() {
  ::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* _msg = _internal_mutable_toggle_show_notification();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.toggle_show_notification)
  return _msg;
}
inline void SharingLog::set_allocated_toggle_show_notification(::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification* toggle_show_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete toggle_show_notification_;
  }
  if (toggle_show_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ToggleShowNotification>::GetOwningArena(toggle_show_notification);
    if (message_arena != submessage_arena) {
      toggle_show_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggle_show_notification, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  toggle_show_notification_ = toggle_show_notification;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.toggle_show_notification)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SetDeviceName set_device_name = 49;
inline bool SharingLog::_internal_has_set_device_name() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || set_device_name_ != nullptr);
  return value;
}
inline bool SharingLog::has_set_device_name() const {
  return _internal_has_set_device_name();
}
inline void SharingLog::clear_set_device_name() {
  if (set_device_name_ != nullptr) set_device_name_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName& SharingLog::_internal_set_device_name() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* p = set_device_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SetDeviceName_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName& SharingLog::set_device_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.set_device_name)
  return _internal_set_device_name();
}
inline void SharingLog::unsafe_arena_set_allocated_set_device_name(
    ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* set_device_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_device_name_);
  }
  set_device_name_ = set_device_name;
  if (set_device_name) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_device_name)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* SharingLog::release_set_device_name() {
  _has_bits_[1] &= ~0x00008000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* temp = set_device_name_;
  set_device_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* SharingLog::unsafe_arena_release_set_device_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.set_device_name)
  _has_bits_[1] &= ~0x00008000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* temp = set_device_name_;
  set_device_name_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* SharingLog::_internal_mutable_set_device_name() {
  _has_bits_[1] |= 0x00008000u;
  if (set_device_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetDeviceName>(GetArenaForAllocation());
    set_device_name_ = p;
  }
  return set_device_name_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* SharingLog::mutable_set_device_name() {
  ::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* _msg = _internal_mutable_set_device_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.set_device_name)
  return _msg;
}
inline void SharingLog::set_allocated_set_device_name(::nearby::sharing::analytics::proto::SharingLog_SetDeviceName* set_device_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_device_name_;
  }
  if (set_device_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SetDeviceName>::GetOwningArena(set_device_name);
    if (message_arena != submessage_arena) {
      set_device_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_device_name, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  set_device_name_ = set_device_name;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_device_name)
}

// optional string files_migration_phase = 50;
inline bool SharingLog::_internal_has_files_migration_phase() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingLog::has_files_migration_phase() const {
  return _internal_has_files_migration_phase();
}
inline void SharingLog::clear_files_migration_phase() {
  files_migration_phase_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingLog::files_migration_phase() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.files_migration_phase)
  return _internal_files_migration_phase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog::set_files_migration_phase(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 files_migration_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.files_migration_phase)
}
inline std::string* SharingLog::mutable_files_migration_phase() {
  std::string* _s = _internal_mutable_files_migration_phase();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.files_migration_phase)
  return _s;
}
inline const std::string& SharingLog::_internal_files_migration_phase() const {
  return files_migration_phase_.Get();
}
inline void SharingLog::_internal_set_files_migration_phase(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  files_migration_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog::_internal_mutable_files_migration_phase() {
  _has_bits_[0] |= 0x00000002u;
  return files_migration_phase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog::release_files_migration_phase() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.files_migration_phase)
  if (!_internal_has_files_migration_phase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = files_migration_phase_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (files_migration_phase_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    files_migration_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog::set_allocated_files_migration_phase(std::string* files_migration_phase) {
  if (files_migration_phase != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  files_migration_phase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), files_migration_phase,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (files_migration_phase_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    files_migration_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.files_migration_phase)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DeclineAgreements decline_agreements = 51;
inline bool SharingLog::_internal_has_decline_agreements() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || decline_agreements_ != nullptr);
  return value;
}
inline bool SharingLog::has_decline_agreements() const {
  return _internal_has_decline_agreements();
}
inline void SharingLog::clear_decline_agreements() {
  if (decline_agreements_ != nullptr) decline_agreements_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements& SharingLog::_internal_decline_agreements() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* p = decline_agreements_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DeclineAgreements_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements& SharingLog::decline_agreements() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.decline_agreements)
  return _internal_decline_agreements();
}
inline void SharingLog::unsafe_arena_set_allocated_decline_agreements(
    ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* decline_agreements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decline_agreements_);
  }
  decline_agreements_ = decline_agreements;
  if (decline_agreements) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.decline_agreements)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* SharingLog::release_decline_agreements() {
  _has_bits_[1] &= ~0x00010000u;
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* temp = decline_agreements_;
  decline_agreements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* SharingLog::unsafe_arena_release_decline_agreements() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.decline_agreements)
  _has_bits_[1] &= ~0x00010000u;
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* temp = decline_agreements_;
  decline_agreements_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* SharingLog::_internal_mutable_decline_agreements() {
  _has_bits_[1] |= 0x00010000u;
  if (decline_agreements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements>(GetArenaForAllocation());
    decline_agreements_ = p;
  }
  return decline_agreements_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* SharingLog::mutable_decline_agreements() {
  ::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* _msg = _internal_mutable_decline_agreements();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.decline_agreements)
  return _msg;
}
inline void SharingLog::set_allocated_decline_agreements(::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements* decline_agreements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete decline_agreements_;
  }
  if (decline_agreements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DeclineAgreements>::GetOwningArena(decline_agreements);
    if (message_arena != submessage_arena) {
      decline_agreements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decline_agreements, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  decline_agreements_ = decline_agreements;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.decline_agreements)
}

// optional .nearby.sharing.analytics.proto.SharingLog.RequestSettingPermissions request_setting_permissions = 52;
inline bool SharingLog::_internal_has_request_setting_permissions() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || request_setting_permissions_ != nullptr);
  return value;
}
inline bool SharingLog::has_request_setting_permissions() const {
  return _internal_has_request_setting_permissions();
}
inline void SharingLog::clear_request_setting_permissions() {
  if (request_setting_permissions_ != nullptr) request_setting_permissions_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions& SharingLog::_internal_request_setting_permissions() const {
  const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* p = request_setting_permissions_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions&>(
      ::nearby::sharing::analytics::proto::_SharingLog_RequestSettingPermissions_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions& SharingLog::request_setting_permissions() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.request_setting_permissions)
  return _internal_request_setting_permissions();
}
inline void SharingLog::unsafe_arena_set_allocated_request_setting_permissions(
    ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* request_setting_permissions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_setting_permissions_);
  }
  request_setting_permissions_ = request_setting_permissions;
  if (request_setting_permissions) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.request_setting_permissions)
}
inline ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* SharingLog::release_request_setting_permissions() {
  _has_bits_[1] &= ~0x00020000u;
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* temp = request_setting_permissions_;
  request_setting_permissions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* SharingLog::unsafe_arena_release_request_setting_permissions() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.request_setting_permissions)
  _has_bits_[1] &= ~0x00020000u;
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* temp = request_setting_permissions_;
  request_setting_permissions_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* SharingLog::_internal_mutable_request_setting_permissions() {
  _has_bits_[1] |= 0x00020000u;
  if (request_setting_permissions_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions>(GetArenaForAllocation());
    request_setting_permissions_ = p;
  }
  return request_setting_permissions_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* SharingLog::mutable_request_setting_permissions() {
  ::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* _msg = _internal_mutable_request_setting_permissions();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.request_setting_permissions)
  return _msg;
}
inline void SharingLog::set_allocated_request_setting_permissions(::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions* request_setting_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_setting_permissions_;
  }
  if (request_setting_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_RequestSettingPermissions>::GetOwningArena(request_setting_permissions);
    if (message_arena != submessage_arena) {
      request_setting_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_setting_permissions, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  request_setting_permissions_ = request_setting_permissions;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.request_setting_permissions)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DeviceSettings device_settings = 53;
inline bool SharingLog::_internal_has_device_settings() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || device_settings_ != nullptr);
  return value;
}
inline bool SharingLog::has_device_settings() const {
  return _internal_has_device_settings();
}
inline void SharingLog::clear_device_settings() {
  if (device_settings_ != nullptr) device_settings_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings& SharingLog::_internal_device_settings() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* p = device_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DeviceSettings_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings& SharingLog::device_settings() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.device_settings)
  return _internal_device_settings();
}
inline void SharingLog::unsafe_arena_set_allocated_device_settings(
    ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* device_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_settings_);
  }
  device_settings_ = device_settings;
  if (device_settings) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.device_settings)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* SharingLog::release_device_settings() {
  _has_bits_[1] &= ~0x00040000u;
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* temp = device_settings_;
  device_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* SharingLog::unsafe_arena_release_device_settings() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.device_settings)
  _has_bits_[1] &= ~0x00040000u;
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* temp = device_settings_;
  device_settings_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* SharingLog::_internal_mutable_device_settings() {
  _has_bits_[1] |= 0x00040000u;
  if (device_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DeviceSettings>(GetArenaForAllocation());
    device_settings_ = p;
  }
  return device_settings_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* SharingLog::mutable_device_settings() {
  ::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* _msg = _internal_mutable_device_settings();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.device_settings)
  return _msg;
}
inline void SharingLog::set_allocated_device_settings(::nearby::sharing::analytics::proto::SharingLog_DeviceSettings* device_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_settings_;
  }
  if (device_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DeviceSettings>::GetOwningArena(device_settings);
    if (message_arena != submessage_arena) {
      device_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_settings, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  device_settings_ = device_settings;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.device_settings)
}

// optional .nearby.sharing.analytics.proto.SharingLog.EstablishConnection establish_connection = 54;
inline bool SharingLog::_internal_has_establish_connection() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || establish_connection_ != nullptr);
  return value;
}
inline bool SharingLog::has_establish_connection() const {
  return _internal_has_establish_connection();
}
inline void SharingLog::clear_establish_connection() {
  if (establish_connection_ != nullptr) establish_connection_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection& SharingLog::_internal_establish_connection() const {
  const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* p = establish_connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection&>(
      ::nearby::sharing::analytics::proto::_SharingLog_EstablishConnection_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection& SharingLog::establish_connection() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.establish_connection)
  return _internal_establish_connection();
}
inline void SharingLog::unsafe_arena_set_allocated_establish_connection(
    ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* establish_connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(establish_connection_);
  }
  establish_connection_ = establish_connection;
  if (establish_connection) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.establish_connection)
}
inline ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* SharingLog::release_establish_connection() {
  _has_bits_[1] &= ~0x00080000u;
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* temp = establish_connection_;
  establish_connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* SharingLog::unsafe_arena_release_establish_connection() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.establish_connection)
  _has_bits_[1] &= ~0x00080000u;
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* temp = establish_connection_;
  establish_connection_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* SharingLog::_internal_mutable_establish_connection() {
  _has_bits_[1] |= 0x00080000u;
  if (establish_connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EstablishConnection>(GetArenaForAllocation());
    establish_connection_ = p;
  }
  return establish_connection_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* SharingLog::mutable_establish_connection() {
  ::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* _msg = _internal_mutable_establish_connection();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.establish_connection)
  return _msg;
}
inline void SharingLog::set_allocated_establish_connection(::nearby::sharing::analytics::proto::SharingLog_EstablishConnection* establish_connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete establish_connection_;
  }
  if (establish_connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_EstablishConnection>::GetOwningArena(establish_connection);
    if (message_arena != submessage_arena) {
      establish_connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, establish_connection, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  establish_connection_ = establish_connection;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.establish_connection)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AutoDismissFastInitialization auto_dismiss_fast_initialization = 55;
inline bool SharingLog::_internal_has_auto_dismiss_fast_initialization() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || auto_dismiss_fast_initialization_ != nullptr);
  return value;
}
inline bool SharingLog::has_auto_dismiss_fast_initialization() const {
  return _internal_has_auto_dismiss_fast_initialization();
}
inline void SharingLog::clear_auto_dismiss_fast_initialization() {
  if (auto_dismiss_fast_initialization_ != nullptr) auto_dismiss_fast_initialization_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization& SharingLog::_internal_auto_dismiss_fast_initialization() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* p = auto_dismiss_fast_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AutoDismissFastInitialization_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization& SharingLog::auto_dismiss_fast_initialization() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.auto_dismiss_fast_initialization)
  return _internal_auto_dismiss_fast_initialization();
}
inline void SharingLog::unsafe_arena_set_allocated_auto_dismiss_fast_initialization(
    ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* auto_dismiss_fast_initialization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_dismiss_fast_initialization_);
  }
  auto_dismiss_fast_initialization_ = auto_dismiss_fast_initialization;
  if (auto_dismiss_fast_initialization) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.auto_dismiss_fast_initialization)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* SharingLog::release_auto_dismiss_fast_initialization() {
  _has_bits_[1] &= ~0x00100000u;
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* temp = auto_dismiss_fast_initialization_;
  auto_dismiss_fast_initialization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* SharingLog::unsafe_arena_release_auto_dismiss_fast_initialization() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.auto_dismiss_fast_initialization)
  _has_bits_[1] &= ~0x00100000u;
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* temp = auto_dismiss_fast_initialization_;
  auto_dismiss_fast_initialization_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* SharingLog::_internal_mutable_auto_dismiss_fast_initialization() {
  _has_bits_[1] |= 0x00100000u;
  if (auto_dismiss_fast_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization>(GetArenaForAllocation());
    auto_dismiss_fast_initialization_ = p;
  }
  return auto_dismiss_fast_initialization_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* SharingLog::mutable_auto_dismiss_fast_initialization() {
  ::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* _msg = _internal_mutable_auto_dismiss_fast_initialization();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.auto_dismiss_fast_initialization)
  return _msg;
}
inline void SharingLog::set_allocated_auto_dismiss_fast_initialization(::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization* auto_dismiss_fast_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete auto_dismiss_fast_initialization_;
  }
  if (auto_dismiss_fast_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AutoDismissFastInitialization>::GetOwningArena(auto_dismiss_fast_initialization);
    if (message_arena != submessage_arena) {
      auto_dismiss_fast_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_dismiss_fast_initialization, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  auto_dismiss_fast_initialization_ = auto_dismiss_fast_initialization;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.auto_dismiss_fast_initialization)
}

// optional .nearby.sharing.analytics.proto.SharingLog.EventMetadata event_metadata = 56;
inline bool SharingLog::_internal_has_event_metadata() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || event_metadata_ != nullptr);
  return value;
}
inline bool SharingLog::has_event_metadata() const {
  return _internal_has_event_metadata();
}
inline void SharingLog::clear_event_metadata() {
  if (event_metadata_ != nullptr) event_metadata_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata& SharingLog::_internal_event_metadata() const {
  const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* p = event_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata&>(
      ::nearby::sharing::analytics::proto::_SharingLog_EventMetadata_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_EventMetadata& SharingLog::event_metadata() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.event_metadata)
  return _internal_event_metadata();
}
inline void SharingLog::unsafe_arena_set_allocated_event_metadata(
    ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* event_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_metadata_);
  }
  event_metadata_ = event_metadata;
  if (event_metadata) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.event_metadata)
}
inline ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* SharingLog::release_event_metadata() {
  _has_bits_[1] &= ~0x00200000u;
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* temp = event_metadata_;
  event_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* SharingLog::unsafe_arena_release_event_metadata() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.event_metadata)
  _has_bits_[1] &= ~0x00200000u;
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* temp = event_metadata_;
  event_metadata_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* SharingLog::_internal_mutable_event_metadata() {
  _has_bits_[1] |= 0x00200000u;
  if (event_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_EventMetadata>(GetArenaForAllocation());
    event_metadata_ = p;
  }
  return event_metadata_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* SharingLog::mutable_event_metadata() {
  ::nearby::sharing::analytics::proto::SharingLog_EventMetadata* _msg = _internal_mutable_event_metadata();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.event_metadata)
  return _msg;
}
inline void SharingLog::set_allocated_event_metadata(::nearby::sharing::analytics::proto::SharingLog_EventMetadata* event_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_metadata_;
  }
  if (event_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_EventMetadata>::GetOwningArena(event_metadata);
    if (message_arena != submessage_arena) {
      event_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_metadata, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  event_metadata_ = event_metadata;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.event_metadata)
}

// optional string app_version = 57 [deprecated = true];
inline bool SharingLog::_internal_has_app_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingLog::has_app_version() const {
  return _internal_has_app_version();
}
inline void SharingLog::clear_app_version() {
  app_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SharingLog::app_version() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.app_version)
  return _internal_app_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingLog::set_app_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.analytics.proto.SharingLog.app_version)
}
inline std::string* SharingLog::mutable_app_version() {
  std::string* _s = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.app_version)
  return _s;
}
inline const std::string& SharingLog::_internal_app_version() const {
  return app_version_.Get();
}
inline void SharingLog::_internal_set_app_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharingLog::_internal_mutable_app_version() {
  _has_bits_[0] |= 0x00000004u;
  return app_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharingLog::release_app_version() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.app_version)
  if (!_internal_has_app_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = app_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingLog::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.app_version)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AppCrash app_crash = 58;
inline bool SharingLog::_internal_has_app_crash() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || app_crash_ != nullptr);
  return value;
}
inline bool SharingLog::has_app_crash() const {
  return _internal_has_app_crash();
}
inline void SharingLog::clear_app_crash() {
  if (app_crash_ != nullptr) app_crash_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppCrash& SharingLog::_internal_app_crash() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AppCrash* p = app_crash_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AppCrash&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AppCrash_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppCrash& SharingLog::app_crash() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.app_crash)
  return _internal_app_crash();
}
inline void SharingLog::unsafe_arena_set_allocated_app_crash(
    ::nearby::sharing::analytics::proto::SharingLog_AppCrash* app_crash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_crash_);
  }
  app_crash_ = app_crash;
  if (app_crash) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.app_crash)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppCrash* SharingLog::release_app_crash() {
  _has_bits_[1] &= ~0x00400000u;
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* temp = app_crash_;
  app_crash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppCrash* SharingLog::unsafe_arena_release_app_crash() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.app_crash)
  _has_bits_[1] &= ~0x00400000u;
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* temp = app_crash_;
  app_crash_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppCrash* SharingLog::_internal_mutable_app_crash() {
  _has_bits_[1] |= 0x00400000u;
  if (app_crash_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AppCrash>(GetArenaForAllocation());
    app_crash_ = p;
  }
  return app_crash_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppCrash* SharingLog::mutable_app_crash() {
  ::nearby::sharing::analytics::proto::SharingLog_AppCrash* _msg = _internal_mutable_app_crash();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.app_crash)
  return _msg;
}
inline void SharingLog::set_allocated_app_crash(::nearby::sharing::analytics::proto::SharingLog_AppCrash* app_crash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_crash_;
  }
  if (app_crash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AppCrash>::GetOwningArena(app_crash);
    if (message_arena != submessage_arena) {
      app_crash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_crash, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  app_crash_ = app_crash;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.app_crash)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapQuickSettingsFileShare tap_quick_settings_file_share = 59;
inline bool SharingLog::_internal_has_tap_quick_settings_file_share() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tap_quick_settings_file_share_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_quick_settings_file_share() const {
  return _internal_has_tap_quick_settings_file_share();
}
inline void SharingLog::clear_tap_quick_settings_file_share() {
  if (tap_quick_settings_file_share_ != nullptr) tap_quick_settings_file_share_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare& SharingLog::_internal_tap_quick_settings_file_share() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* p = tap_quick_settings_file_share_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapQuickSettingsFileShare_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare& SharingLog::tap_quick_settings_file_share() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_file_share)
  return _internal_tap_quick_settings_file_share();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_quick_settings_file_share(
    ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* tap_quick_settings_file_share) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_quick_settings_file_share_);
  }
  tap_quick_settings_file_share_ = tap_quick_settings_file_share;
  if (tap_quick_settings_file_share) {
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_file_share)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* SharingLog::release_tap_quick_settings_file_share() {
  _has_bits_[1] &= ~0x00800000u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* temp = tap_quick_settings_file_share_;
  tap_quick_settings_file_share_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* SharingLog::unsafe_arena_release_tap_quick_settings_file_share() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_file_share)
  _has_bits_[1] &= ~0x00800000u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* temp = tap_quick_settings_file_share_;
  tap_quick_settings_file_share_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* SharingLog::_internal_mutable_tap_quick_settings_file_share() {
  _has_bits_[1] |= 0x00800000u;
  if (tap_quick_settings_file_share_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare>(GetArenaForAllocation());
    tap_quick_settings_file_share_ = p;
  }
  return tap_quick_settings_file_share_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* SharingLog::mutable_tap_quick_settings_file_share() {
  ::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* _msg = _internal_mutable_tap_quick_settings_file_share();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_file_share)
  return _msg;
}
inline void SharingLog::set_allocated_tap_quick_settings_file_share(::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare* tap_quick_settings_file_share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_quick_settings_file_share_;
  }
  if (tap_quick_settings_file_share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapQuickSettingsFileShare>::GetOwningArena(tap_quick_settings_file_share);
    if (message_arena != submessage_arena) {
      tap_quick_settings_file_share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_quick_settings_file_share, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  tap_quick_settings_file_share_ = tap_quick_settings_file_share;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_quick_settings_file_share)
}

// optional .nearby.sharing.analytics.proto.SharingLog.AppInfo app_info = 60;
inline bool SharingLog::_internal_has_app_info() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || app_info_ != nullptr);
  return value;
}
inline bool SharingLog::has_app_info() const {
  return _internal_has_app_info();
}
inline void SharingLog::clear_app_info() {
  if (app_info_ != nullptr) app_info_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppInfo& SharingLog::_internal_app_info() const {
  const ::nearby::sharing::analytics::proto::SharingLog_AppInfo* p = app_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_AppInfo&>(
      ::nearby::sharing::analytics::proto::_SharingLog_AppInfo_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_AppInfo& SharingLog::app_info() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.app_info)
  return _internal_app_info();
}
inline void SharingLog::unsafe_arena_set_allocated_app_info(
    ::nearby::sharing::analytics::proto::SharingLog_AppInfo* app_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_info_);
  }
  app_info_ = app_info;
  if (app_info) {
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.app_info)
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppInfo* SharingLog::release_app_info() {
  _has_bits_[1] &= ~0x01000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* temp = app_info_;
  app_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppInfo* SharingLog::unsafe_arena_release_app_info() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.app_info)
  _has_bits_[1] &= ~0x01000000u;
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* temp = app_info_;
  app_info_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppInfo* SharingLog::_internal_mutable_app_info() {
  _has_bits_[1] |= 0x01000000u;
  if (app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_AppInfo>(GetArenaForAllocation());
    app_info_ = p;
  }
  return app_info_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_AppInfo* SharingLog::mutable_app_info() {
  ::nearby::sharing::analytics::proto::SharingLog_AppInfo* _msg = _internal_mutable_app_info();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.app_info)
  return _msg;
}
inline void SharingLog::set_allocated_app_info(::nearby::sharing::analytics::proto::SharingLog_AppInfo* app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_info_;
  }
  if (app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_AppInfo>::GetOwningArena(app_info);
    if (message_arena != submessage_arena) {
      app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_info, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  app_info_ = app_info;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.app_info)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DisplayPrivacyNotification display_privacy_notification = 61;
inline bool SharingLog::_internal_has_display_privacy_notification() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || display_privacy_notification_ != nullptr);
  return value;
}
inline bool SharingLog::has_display_privacy_notification() const {
  return _internal_has_display_privacy_notification();
}
inline void SharingLog::clear_display_privacy_notification() {
  if (display_privacy_notification_ != nullptr) display_privacy_notification_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification& SharingLog::_internal_display_privacy_notification() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* p = display_privacy_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DisplayPrivacyNotification_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification& SharingLog::display_privacy_notification() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.display_privacy_notification)
  return _internal_display_privacy_notification();
}
inline void SharingLog::unsafe_arena_set_allocated_display_privacy_notification(
    ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* display_privacy_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_privacy_notification_);
  }
  display_privacy_notification_ = display_privacy_notification;
  if (display_privacy_notification) {
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.display_privacy_notification)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* SharingLog::release_display_privacy_notification() {
  _has_bits_[1] &= ~0x02000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* temp = display_privacy_notification_;
  display_privacy_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* SharingLog::unsafe_arena_release_display_privacy_notification() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.display_privacy_notification)
  _has_bits_[1] &= ~0x02000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* temp = display_privacy_notification_;
  display_privacy_notification_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* SharingLog::_internal_mutable_display_privacy_notification() {
  _has_bits_[1] |= 0x02000000u;
  if (display_privacy_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification>(GetArenaForAllocation());
    display_privacy_notification_ = p;
  }
  return display_privacy_notification_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* SharingLog::mutable_display_privacy_notification() {
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* _msg = _internal_mutable_display_privacy_notification();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.display_privacy_notification)
  return _msg;
}
inline void SharingLog::set_allocated_display_privacy_notification(::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification* display_privacy_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete display_privacy_notification_;
  }
  if (display_privacy_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DisplayPrivacyNotification>::GetOwningArena(display_privacy_notification);
    if (message_arena != submessage_arena) {
      display_privacy_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_privacy_notification, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  display_privacy_notification_ = display_privacy_notification;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.display_privacy_notification)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DisplayPhoneConsent display_phone_consent = 62;
inline bool SharingLog::_internal_has_display_phone_consent() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || display_phone_consent_ != nullptr);
  return value;
}
inline bool SharingLog::has_display_phone_consent() const {
  return _internal_has_display_phone_consent();
}
inline void SharingLog::clear_display_phone_consent() {
  if (display_phone_consent_ != nullptr) display_phone_consent_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent& SharingLog::_internal_display_phone_consent() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* p = display_phone_consent_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DisplayPhoneConsent_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent& SharingLog::display_phone_consent() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.display_phone_consent)
  return _internal_display_phone_consent();
}
inline void SharingLog::unsafe_arena_set_allocated_display_phone_consent(
    ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* display_phone_consent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_phone_consent_);
  }
  display_phone_consent_ = display_phone_consent;
  if (display_phone_consent) {
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.display_phone_consent)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* SharingLog::release_display_phone_consent() {
  _has_bits_[1] &= ~0x04000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* temp = display_phone_consent_;
  display_phone_consent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* SharingLog::unsafe_arena_release_display_phone_consent() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.display_phone_consent)
  _has_bits_[1] &= ~0x04000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* temp = display_phone_consent_;
  display_phone_consent_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* SharingLog::_internal_mutable_display_phone_consent() {
  _has_bits_[1] |= 0x04000000u;
  if (display_phone_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent>(GetArenaForAllocation());
    display_phone_consent_ = p;
  }
  return display_phone_consent_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* SharingLog::mutable_display_phone_consent() {
  ::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* _msg = _internal_mutable_display_phone_consent();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.display_phone_consent)
  return _msg;
}
inline void SharingLog::set_allocated_display_phone_consent(::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent* display_phone_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete display_phone_consent_;
  }
  if (display_phone_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DisplayPhoneConsent>::GetOwningArena(display_phone_consent);
    if (message_arena != submessage_arena) {
      display_phone_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_phone_consent, submessage_arena);
    }
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  display_phone_consent_ = display_phone_consent;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.display_phone_consent)
}

// optional .nearby.sharing.analytics.proto.SharingLog.PreferencesUsage preferences_usage = 63;
inline bool SharingLog::_internal_has_preferences_usage() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || preferences_usage_ != nullptr);
  return value;
}
inline bool SharingLog::has_preferences_usage() const {
  return _internal_has_preferences_usage();
}
inline void SharingLog::clear_preferences_usage() {
  if (preferences_usage_ != nullptr) preferences_usage_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage& SharingLog::_internal_preferences_usage() const {
  const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* p = preferences_usage_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage&>(
      ::nearby::sharing::analytics::proto::_SharingLog_PreferencesUsage_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage& SharingLog::preferences_usage() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.preferences_usage)
  return _internal_preferences_usage();
}
inline void SharingLog::unsafe_arena_set_allocated_preferences_usage(
    ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* preferences_usage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_usage_);
  }
  preferences_usage_ = preferences_usage;
  if (preferences_usage) {
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.preferences_usage)
}
inline ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* SharingLog::release_preferences_usage() {
  _has_bits_[1] &= ~0x08000000u;
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* temp = preferences_usage_;
  preferences_usage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* SharingLog::unsafe_arena_release_preferences_usage() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.preferences_usage)
  _has_bits_[1] &= ~0x08000000u;
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* temp = preferences_usage_;
  preferences_usage_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* SharingLog::_internal_mutable_preferences_usage() {
  _has_bits_[1] |= 0x08000000u;
  if (preferences_usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage>(GetArenaForAllocation());
    preferences_usage_ = p;
  }
  return preferences_usage_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* SharingLog::mutable_preferences_usage() {
  ::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* _msg = _internal_mutable_preferences_usage();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.preferences_usage)
  return _msg;
}
inline void SharingLog::set_allocated_preferences_usage(::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage* preferences_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_usage_;
  }
  if (preferences_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_PreferencesUsage>::GetOwningArena(preferences_usage);
    if (message_arena != submessage_arena) {
      preferences_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences_usage, submessage_arena);
    }
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  preferences_usage_ = preferences_usage;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.preferences_usage)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DefaultOptIn default_opt_in = 64;
inline bool SharingLog::_internal_has_default_opt_in() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || default_opt_in_ != nullptr);
  return value;
}
inline bool SharingLog::has_default_opt_in() const {
  return _internal_has_default_opt_in();
}
inline void SharingLog::clear_default_opt_in() {
  if (default_opt_in_ != nullptr) default_opt_in_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn& SharingLog::_internal_default_opt_in() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* p = default_opt_in_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DefaultOptIn_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn& SharingLog::default_opt_in() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.default_opt_in)
  return _internal_default_opt_in();
}
inline void SharingLog::unsafe_arena_set_allocated_default_opt_in(
    ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* default_opt_in) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_opt_in_);
  }
  default_opt_in_ = default_opt_in;
  if (default_opt_in) {
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.default_opt_in)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* SharingLog::release_default_opt_in() {
  _has_bits_[1] &= ~0x10000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* temp = default_opt_in_;
  default_opt_in_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* SharingLog::unsafe_arena_release_default_opt_in() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.default_opt_in)
  _has_bits_[1] &= ~0x10000000u;
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* temp = default_opt_in_;
  default_opt_in_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* SharingLog::_internal_mutable_default_opt_in() {
  _has_bits_[1] |= 0x10000000u;
  if (default_opt_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn>(GetArenaForAllocation());
    default_opt_in_ = p;
  }
  return default_opt_in_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* SharingLog::mutable_default_opt_in() {
  ::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* _msg = _internal_mutable_default_opt_in();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.default_opt_in)
  return _msg;
}
inline void SharingLog::set_allocated_default_opt_in(::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn* default_opt_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete default_opt_in_;
  }
  if (default_opt_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DefaultOptIn>::GetOwningArena(default_opt_in);
    if (message_arena != submessage_arena) {
      default_opt_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_opt_in, submessage_arena);
    }
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  default_opt_in_ = default_opt_in;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.default_opt_in)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SetupWizard setup_wizard = 65;
inline bool SharingLog::_internal_has_setup_wizard() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || setup_wizard_ != nullptr);
  return value;
}
inline bool SharingLog::has_setup_wizard() const {
  return _internal_has_setup_wizard();
}
inline void SharingLog::clear_setup_wizard() {
  if (setup_wizard_ != nullptr) setup_wizard_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard& SharingLog::_internal_setup_wizard() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* p = setup_wizard_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SetupWizard_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetupWizard& SharingLog::setup_wizard() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.setup_wizard)
  return _internal_setup_wizard();
}
inline void SharingLog::unsafe_arena_set_allocated_setup_wizard(
    ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* setup_wizard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setup_wizard_);
  }
  setup_wizard_ = setup_wizard;
  if (setup_wizard) {
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.setup_wizard)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* SharingLog::release_setup_wizard() {
  _has_bits_[1] &= ~0x20000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* temp = setup_wizard_;
  setup_wizard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* SharingLog::unsafe_arena_release_setup_wizard() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.setup_wizard)
  _has_bits_[1] &= ~0x20000000u;
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* temp = setup_wizard_;
  setup_wizard_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* SharingLog::_internal_mutable_setup_wizard() {
  _has_bits_[1] |= 0x20000000u;
  if (setup_wizard_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetupWizard>(GetArenaForAllocation());
    setup_wizard_ = p;
  }
  return setup_wizard_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* SharingLog::mutable_setup_wizard() {
  ::nearby::sharing::analytics::proto::SharingLog_SetupWizard* _msg = _internal_mutable_setup_wizard();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.setup_wizard)
  return _msg;
}
inline void SharingLog::set_allocated_setup_wizard(::nearby::sharing::analytics::proto::SharingLog_SetupWizard* setup_wizard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete setup_wizard_;
  }
  if (setup_wizard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SetupWizard>::GetOwningArena(setup_wizard);
    if (message_arena != submessage_arena) {
      setup_wizard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup_wizard, submessage_arena);
    }
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  setup_wizard_ = setup_wizard;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.setup_wizard)
}

// optional .nearby.sharing.analytics.proto.SharingLog.TapQrCode tap_qr_code = 66;
inline bool SharingLog::_internal_has_tap_qr_code() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || tap_qr_code_ != nullptr);
  return value;
}
inline bool SharingLog::has_tap_qr_code() const {
  return _internal_has_tap_qr_code();
}
inline void SharingLog::clear_tap_qr_code() {
  if (tap_qr_code_ != nullptr) tap_qr_code_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode& SharingLog::_internal_tap_qr_code() const {
  const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* p = tap_qr_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode&>(
      ::nearby::sharing::analytics::proto::_SharingLog_TapQrCode_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_TapQrCode& SharingLog::tap_qr_code() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.tap_qr_code)
  return _internal_tap_qr_code();
}
inline void SharingLog::unsafe_arena_set_allocated_tap_qr_code(
    ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* tap_qr_code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_qr_code_);
  }
  tap_qr_code_ = tap_qr_code;
  if (tap_qr_code) {
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_qr_code)
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* SharingLog::release_tap_qr_code() {
  _has_bits_[1] &= ~0x40000000u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* temp = tap_qr_code_;
  tap_qr_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* SharingLog::unsafe_arena_release_tap_qr_code() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.tap_qr_code)
  _has_bits_[1] &= ~0x40000000u;
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* temp = tap_qr_code_;
  tap_qr_code_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* SharingLog::_internal_mutable_tap_qr_code() {
  _has_bits_[1] |= 0x40000000u;
  if (tap_qr_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_TapQrCode>(GetArenaForAllocation());
    tap_qr_code_ = p;
  }
  return tap_qr_code_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* SharingLog::mutable_tap_qr_code() {
  ::nearby::sharing::analytics::proto::SharingLog_TapQrCode* _msg = _internal_mutable_tap_qr_code();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.tap_qr_code)
  return _msg;
}
inline void SharingLog::set_allocated_tap_qr_code(::nearby::sharing::analytics::proto::SharingLog_TapQrCode* tap_qr_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tap_qr_code_;
  }
  if (tap_qr_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_TapQrCode>::GetOwningArena(tap_qr_code);
    if (message_arena != submessage_arena) {
      tap_qr_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_qr_code, submessage_arena);
    }
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  tap_qr_code_ = tap_qr_code;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.tap_qr_code)
}

// optional .nearby.sharing.analytics.proto.SharingLog.QrCodeLinkShown qr_code_link_shown = 67;
inline bool SharingLog::_internal_has_qr_code_link_shown() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || qr_code_link_shown_ != nullptr);
  return value;
}
inline bool SharingLog::has_qr_code_link_shown() const {
  return _internal_has_qr_code_link_shown();
}
inline void SharingLog::clear_qr_code_link_shown() {
  if (qr_code_link_shown_ != nullptr) qr_code_link_shown_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown& SharingLog::_internal_qr_code_link_shown() const {
  const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* p = qr_code_link_shown_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown&>(
      ::nearby::sharing::analytics::proto::_SharingLog_QrCodeLinkShown_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown& SharingLog::qr_code_link_shown() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.qr_code_link_shown)
  return _internal_qr_code_link_shown();
}
inline void SharingLog::unsafe_arena_set_allocated_qr_code_link_shown(
    ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* qr_code_link_shown) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qr_code_link_shown_);
  }
  qr_code_link_shown_ = qr_code_link_shown;
  if (qr_code_link_shown) {
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.qr_code_link_shown)
}
inline ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* SharingLog::release_qr_code_link_shown() {
  _has_bits_[1] &= ~0x80000000u;
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* temp = qr_code_link_shown_;
  qr_code_link_shown_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* SharingLog::unsafe_arena_release_qr_code_link_shown() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.qr_code_link_shown)
  _has_bits_[1] &= ~0x80000000u;
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* temp = qr_code_link_shown_;
  qr_code_link_shown_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* SharingLog::_internal_mutable_qr_code_link_shown() {
  _has_bits_[1] |= 0x80000000u;
  if (qr_code_link_shown_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown>(GetArenaForAllocation());
    qr_code_link_shown_ = p;
  }
  return qr_code_link_shown_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* SharingLog::mutable_qr_code_link_shown() {
  ::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* _msg = _internal_mutable_qr_code_link_shown();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.qr_code_link_shown)
  return _msg;
}
inline void SharingLog::set_allocated_qr_code_link_shown(::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown* qr_code_link_shown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete qr_code_link_shown_;
  }
  if (qr_code_link_shown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_QrCodeLinkShown>::GetOwningArena(qr_code_link_shown);
    if (message_arena != submessage_arena) {
      qr_code_link_shown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qr_code_link_shown, submessage_arena);
    }
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  qr_code_link_shown_ = qr_code_link_shown;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.qr_code_link_shown)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ParsingFailedEndpointId parsing_failed_endpoint_id = 68;
inline bool SharingLog::_internal_has_parsing_failed_endpoint_id() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parsing_failed_endpoint_id_ != nullptr);
  return value;
}
inline bool SharingLog::has_parsing_failed_endpoint_id() const {
  return _internal_has_parsing_failed_endpoint_id();
}
inline void SharingLog::clear_parsing_failed_endpoint_id() {
  if (parsing_failed_endpoint_id_ != nullptr) parsing_failed_endpoint_id_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId& SharingLog::_internal_parsing_failed_endpoint_id() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* p = parsing_failed_endpoint_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ParsingFailedEndpointId_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId& SharingLog::parsing_failed_endpoint_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.parsing_failed_endpoint_id)
  return _internal_parsing_failed_endpoint_id();
}
inline void SharingLog::unsafe_arena_set_allocated_parsing_failed_endpoint_id(
    ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* parsing_failed_endpoint_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parsing_failed_endpoint_id_);
  }
  parsing_failed_endpoint_id_ = parsing_failed_endpoint_id;
  if (parsing_failed_endpoint_id) {
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.parsing_failed_endpoint_id)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* SharingLog::release_parsing_failed_endpoint_id() {
  _has_bits_[2] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* temp = parsing_failed_endpoint_id_;
  parsing_failed_endpoint_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* SharingLog::unsafe_arena_release_parsing_failed_endpoint_id() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.parsing_failed_endpoint_id)
  _has_bits_[2] &= ~0x00000001u;
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* temp = parsing_failed_endpoint_id_;
  parsing_failed_endpoint_id_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* SharingLog::_internal_mutable_parsing_failed_endpoint_id() {
  _has_bits_[2] |= 0x00000001u;
  if (parsing_failed_endpoint_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId>(GetArenaForAllocation());
    parsing_failed_endpoint_id_ = p;
  }
  return parsing_failed_endpoint_id_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* SharingLog::mutable_parsing_failed_endpoint_id() {
  ::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* _msg = _internal_mutable_parsing_failed_endpoint_id();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.parsing_failed_endpoint_id)
  return _msg;
}
inline void SharingLog::set_allocated_parsing_failed_endpoint_id(::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId* parsing_failed_endpoint_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parsing_failed_endpoint_id_;
  }
  if (parsing_failed_endpoint_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ParsingFailedEndpointId>::GetOwningArena(parsing_failed_endpoint_id);
    if (message_arena != submessage_arena) {
      parsing_failed_endpoint_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parsing_failed_endpoint_id, submessage_arena);
    }
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  parsing_failed_endpoint_id_ = parsing_failed_endpoint_id;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.parsing_failed_endpoint_id)
}

// optional .nearby.sharing.analytics.proto.SharingLog.FastInitDiscoverDevice fast_init_discover_device = 69;
inline bool SharingLog::_internal_has_fast_init_discover_device() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fast_init_discover_device_ != nullptr);
  return value;
}
inline bool SharingLog::has_fast_init_discover_device() const {
  return _internal_has_fast_init_discover_device();
}
inline void SharingLog::clear_fast_init_discover_device() {
  if (fast_init_discover_device_ != nullptr) fast_init_discover_device_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice& SharingLog::_internal_fast_init_discover_device() const {
  const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* p = fast_init_discover_device_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice&>(
      ::nearby::sharing::analytics::proto::_SharingLog_FastInitDiscoverDevice_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice& SharingLog::fast_init_discover_device() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.fast_init_discover_device)
  return _internal_fast_init_discover_device();
}
inline void SharingLog::unsafe_arena_set_allocated_fast_init_discover_device(
    ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* fast_init_discover_device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_init_discover_device_);
  }
  fast_init_discover_device_ = fast_init_discover_device;
  if (fast_init_discover_device) {
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.fast_init_discover_device)
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* SharingLog::release_fast_init_discover_device() {
  _has_bits_[2] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* temp = fast_init_discover_device_;
  fast_init_discover_device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* SharingLog::unsafe_arena_release_fast_init_discover_device() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.fast_init_discover_device)
  _has_bits_[2] &= ~0x00000002u;
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* temp = fast_init_discover_device_;
  fast_init_discover_device_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* SharingLog::_internal_mutable_fast_init_discover_device() {
  _has_bits_[2] |= 0x00000002u;
  if (fast_init_discover_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice>(GetArenaForAllocation());
    fast_init_discover_device_ = p;
  }
  return fast_init_discover_device_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* SharingLog::mutable_fast_init_discover_device() {
  ::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* _msg = _internal_mutable_fast_init_discover_device();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.fast_init_discover_device)
  return _msg;
}
inline void SharingLog::set_allocated_fast_init_discover_device(::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice* fast_init_discover_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fast_init_discover_device_;
  }
  if (fast_init_discover_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_FastInitDiscoverDevice>::GetOwningArena(fast_init_discover_device);
    if (message_arena != submessage_arena) {
      fast_init_discover_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_init_discover_device, submessage_arena);
    }
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  fast_init_discover_device_ = fast_init_discover_device;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.fast_init_discover_device)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopNotification send_desktop_notification = 70;
inline bool SharingLog::_internal_has_send_desktop_notification() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || send_desktop_notification_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_desktop_notification() const {
  return _internal_has_send_desktop_notification();
}
inline void SharingLog::clear_send_desktop_notification() {
  if (send_desktop_notification_ != nullptr) send_desktop_notification_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification& SharingLog::_internal_send_desktop_notification() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* p = send_desktop_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendDesktopNotification_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification& SharingLog::send_desktop_notification() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_desktop_notification)
  return _internal_send_desktop_notification();
}
inline void SharingLog::unsafe_arena_set_allocated_send_desktop_notification(
    ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* send_desktop_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_desktop_notification_);
  }
  send_desktop_notification_ = send_desktop_notification;
  if (send_desktop_notification) {
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_desktop_notification)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* SharingLog::release_send_desktop_notification() {
  _has_bits_[2] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* temp = send_desktop_notification_;
  send_desktop_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* SharingLog::unsafe_arena_release_send_desktop_notification() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_desktop_notification)
  _has_bits_[2] &= ~0x00000004u;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* temp = send_desktop_notification_;
  send_desktop_notification_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* SharingLog::_internal_mutable_send_desktop_notification() {
  _has_bits_[2] |= 0x00000004u;
  if (send_desktop_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification>(GetArenaForAllocation());
    send_desktop_notification_ = p;
  }
  return send_desktop_notification_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* SharingLog::mutable_send_desktop_notification() {
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* _msg = _internal_mutable_send_desktop_notification();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_desktop_notification)
  return _msg;
}
inline void SharingLog::set_allocated_send_desktop_notification(::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification* send_desktop_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_desktop_notification_;
  }
  if (send_desktop_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendDesktopNotification>::GetOwningArena(send_desktop_notification);
    if (message_arena != submessage_arena) {
      send_desktop_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_desktop_notification, submessage_arena);
    }
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  send_desktop_notification_ = send_desktop_notification;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_desktop_notification)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SendDesktopTransferEvent send_desktop_transfer_event = 72;
inline bool SharingLog::_internal_has_send_desktop_transfer_event() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || send_desktop_transfer_event_ != nullptr);
  return value;
}
inline bool SharingLog::has_send_desktop_transfer_event() const {
  return _internal_has_send_desktop_transfer_event();
}
inline void SharingLog::clear_send_desktop_transfer_event() {
  if (send_desktop_transfer_event_ != nullptr) send_desktop_transfer_event_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent& SharingLog::_internal_send_desktop_transfer_event() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* p = send_desktop_transfer_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SendDesktopTransferEvent_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent& SharingLog::send_desktop_transfer_event() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.send_desktop_transfer_event)
  return _internal_send_desktop_transfer_event();
}
inline void SharingLog::unsafe_arena_set_allocated_send_desktop_transfer_event(
    ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* send_desktop_transfer_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_desktop_transfer_event_);
  }
  send_desktop_transfer_event_ = send_desktop_transfer_event;
  if (send_desktop_transfer_event) {
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_desktop_transfer_event)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* SharingLog::release_send_desktop_transfer_event() {
  _has_bits_[2] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* temp = send_desktop_transfer_event_;
  send_desktop_transfer_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* SharingLog::unsafe_arena_release_send_desktop_transfer_event() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.send_desktop_transfer_event)
  _has_bits_[2] &= ~0x00000008u;
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* temp = send_desktop_transfer_event_;
  send_desktop_transfer_event_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* SharingLog::_internal_mutable_send_desktop_transfer_event() {
  _has_bits_[2] |= 0x00000008u;
  if (send_desktop_transfer_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent>(GetArenaForAllocation());
    send_desktop_transfer_event_ = p;
  }
  return send_desktop_transfer_event_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* SharingLog::mutable_send_desktop_transfer_event() {
  ::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* _msg = _internal_mutable_send_desktop_transfer_event();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.send_desktop_transfer_event)
  return _msg;
}
inline void SharingLog::set_allocated_send_desktop_transfer_event(::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent* send_desktop_transfer_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete send_desktop_transfer_event_;
  }
  if (send_desktop_transfer_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SendDesktopTransferEvent>::GetOwningArena(send_desktop_transfer_event);
    if (message_arena != submessage_arena) {
      send_desktop_transfer_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_desktop_transfer_event, submessage_arena);
    }
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  send_desktop_transfer_event_ = send_desktop_transfer_event;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.send_desktop_transfer_event)
}

// optional .nearby.sharing.analytics.proto.SharingLog.SetAccount set_account = 73;
inline bool SharingLog::_internal_has_set_account() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || set_account_ != nullptr);
  return value;
}
inline bool SharingLog::has_set_account() const {
  return _internal_has_set_account();
}
inline void SharingLog::clear_set_account() {
  if (set_account_ != nullptr) set_account_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetAccount& SharingLog::_internal_set_account() const {
  const ::nearby::sharing::analytics::proto::SharingLog_SetAccount* p = set_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_SetAccount&>(
      ::nearby::sharing::analytics::proto::_SharingLog_SetAccount_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_SetAccount& SharingLog::set_account() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.set_account)
  return _internal_set_account();
}
inline void SharingLog::unsafe_arena_set_allocated_set_account(
    ::nearby::sharing::analytics::proto::SharingLog_SetAccount* set_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_account_);
  }
  set_account_ = set_account;
  if (set_account) {
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_account)
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetAccount* SharingLog::release_set_account() {
  _has_bits_[2] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* temp = set_account_;
  set_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetAccount* SharingLog::unsafe_arena_release_set_account() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.set_account)
  _has_bits_[2] &= ~0x00000010u;
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* temp = set_account_;
  set_account_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetAccount* SharingLog::_internal_mutable_set_account() {
  _has_bits_[2] |= 0x00000010u;
  if (set_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_SetAccount>(GetArenaForAllocation());
    set_account_ = p;
  }
  return set_account_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_SetAccount* SharingLog::mutable_set_account() {
  ::nearby::sharing::analytics::proto::SharingLog_SetAccount* _msg = _internal_mutable_set_account();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.set_account)
  return _msg;
}
inline void SharingLog::set_allocated_set_account(::nearby::sharing::analytics::proto::SharingLog_SetAccount* set_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_account_;
  }
  if (set_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_SetAccount>::GetOwningArena(set_account);
    if (message_arena != submessage_arena) {
      set_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_account, submessage_arena);
    }
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  set_account_ = set_account;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.set_account)
}

// optional .nearby.sharing.analytics.proto.SharingLog.DecryptCertificateFailure decrypt_certificate_failure = 74;
inline bool SharingLog::_internal_has_decrypt_certificate_failure() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || decrypt_certificate_failure_ != nullptr);
  return value;
}
inline bool SharingLog::has_decrypt_certificate_failure() const {
  return _internal_has_decrypt_certificate_failure();
}
inline void SharingLog::clear_decrypt_certificate_failure() {
  if (decrypt_certificate_failure_ != nullptr) decrypt_certificate_failure_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure& SharingLog::_internal_decrypt_certificate_failure() const {
  const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* p = decrypt_certificate_failure_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure&>(
      ::nearby::sharing::analytics::proto::_SharingLog_DecryptCertificateFailure_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure& SharingLog::decrypt_certificate_failure() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.decrypt_certificate_failure)
  return _internal_decrypt_certificate_failure();
}
inline void SharingLog::unsafe_arena_set_allocated_decrypt_certificate_failure(
    ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* decrypt_certificate_failure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decrypt_certificate_failure_);
  }
  decrypt_certificate_failure_ = decrypt_certificate_failure;
  if (decrypt_certificate_failure) {
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.decrypt_certificate_failure)
}
inline ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* SharingLog::release_decrypt_certificate_failure() {
  _has_bits_[2] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* temp = decrypt_certificate_failure_;
  decrypt_certificate_failure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* SharingLog::unsafe_arena_release_decrypt_certificate_failure() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.decrypt_certificate_failure)
  _has_bits_[2] &= ~0x00000020u;
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* temp = decrypt_certificate_failure_;
  decrypt_certificate_failure_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* SharingLog::_internal_mutable_decrypt_certificate_failure() {
  _has_bits_[2] |= 0x00000020u;
  if (decrypt_certificate_failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure>(GetArenaForAllocation());
    decrypt_certificate_failure_ = p;
  }
  return decrypt_certificate_failure_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* SharingLog::mutable_decrypt_certificate_failure() {
  ::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* _msg = _internal_mutable_decrypt_certificate_failure();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.decrypt_certificate_failure)
  return _msg;
}
inline void SharingLog::set_allocated_decrypt_certificate_failure(::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure* decrypt_certificate_failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete decrypt_certificate_failure_;
  }
  if (decrypt_certificate_failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_DecryptCertificateFailure>::GetOwningArena(decrypt_certificate_failure);
    if (message_arena != submessage_arena) {
      decrypt_certificate_failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decrypt_certificate_failure, submessage_arena);
    }
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  decrypt_certificate_failure_ = decrypt_certificate_failure;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.decrypt_certificate_failure)
}

// optional .nearby.sharing.analytics.proto.SharingLog.ShowAllowPermissionAutoAccess show_allow_permission_auto_access = 75;
inline bool SharingLog::_internal_has_show_allow_permission_auto_access() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || show_allow_permission_auto_access_ != nullptr);
  return value;
}
inline bool SharingLog::has_show_allow_permission_auto_access() const {
  return _internal_has_show_allow_permission_auto_access();
}
inline void SharingLog::clear_show_allow_permission_auto_access() {
  if (show_allow_permission_auto_access_ != nullptr) show_allow_permission_auto_access_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess& SharingLog::_internal_show_allow_permission_auto_access() const {
  const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* p = show_allow_permission_auto_access_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess&>(
      ::nearby::sharing::analytics::proto::_SharingLog_ShowAllowPermissionAutoAccess_default_instance_);
}
inline const ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess& SharingLog::show_allow_permission_auto_access() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.analytics.proto.SharingLog.show_allow_permission_auto_access)
  return _internal_show_allow_permission_auto_access();
}
inline void SharingLog::unsafe_arena_set_allocated_show_allow_permission_auto_access(
    ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* show_allow_permission_auto_access) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_allow_permission_auto_access_);
  }
  show_allow_permission_auto_access_ = show_allow_permission_auto_access;
  if (show_allow_permission_auto_access) {
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.analytics.proto.SharingLog.show_allow_permission_auto_access)
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* SharingLog::release_show_allow_permission_auto_access() {
  _has_bits_[2] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* temp = show_allow_permission_auto_access_;
  show_allow_permission_auto_access_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* SharingLog::unsafe_arena_release_show_allow_permission_auto_access() {
  // @@protoc_insertion_point(field_release:nearby.sharing.analytics.proto.SharingLog.show_allow_permission_auto_access)
  _has_bits_[2] &= ~0x00000040u;
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* temp = show_allow_permission_auto_access_;
  show_allow_permission_auto_access_ = nullptr;
  return temp;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* SharingLog::_internal_mutable_show_allow_permission_auto_access() {
  _has_bits_[2] |= 0x00000040u;
  if (show_allow_permission_auto_access_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess>(GetArenaForAllocation());
    show_allow_permission_auto_access_ = p;
  }
  return show_allow_permission_auto_access_;
}
inline ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* SharingLog::mutable_show_allow_permission_auto_access() {
  ::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* _msg = _internal_mutable_show_allow_permission_auto_access();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.analytics.proto.SharingLog.show_allow_permission_auto_access)
  return _msg;
}
inline void SharingLog::set_allocated_show_allow_permission_auto_access(::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess* show_allow_permission_auto_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete show_allow_permission_auto_access_;
  }
  if (show_allow_permission_auto_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::nearby::sharing::analytics::proto::SharingLog_ShowAllowPermissionAutoAccess>::GetOwningArena(show_allow_permission_auto_access);
    if (message_arena != submessage_arena) {
      show_allow_permission_auto_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_allow_permission_auto_access, submessage_arena);
    }
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  show_allow_permission_auto_access_ = show_allow_permission_auto_access;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.analytics.proto.SharingLog.show_allow_permission_auto_access)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace analytics
}  // namespace sharing
}  // namespace nearby

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nearby::sharing::analytics::proto::SharingLog_TextAttachment_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::nearby::sharing::analytics::proto::SharingLog_FileAttachment_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fanalytics_2fnearby_5fsharing_5flog_2eproto
