// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/credential.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_internal_2fproto_2fcredential_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2fproto_2fcredential_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace internal {
class SharedCredential;
struct SharedCredentialDefaultTypeInternal;
extern SharedCredentialDefaultTypeInternal _SharedCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nearby {
namespace internal {
enum IdentityType : int {
  IDENTITY_TYPE_UNSPECIFIED = 0,
  IDENTITY_TYPE_PRIVATE = 1,
  IDENTITY_TYPE_TRUSTED = 2,
  IDENTITY_TYPE_PUBLIC = 3,
  IDENTITY_TYPE_PROVISIONED = 4,
  IdentityType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IdentityType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IdentityType_IsValid(int value);
extern const uint32_t IdentityType_internal_data_[];
constexpr IdentityType IdentityType_MIN = static_cast<IdentityType>(0);
constexpr IdentityType IdentityType_MAX = static_cast<IdentityType>(4);
constexpr int IdentityType_ARRAYSIZE = 4 + 1;
const std::string& IdentityType_Name(IdentityType value);
template <typename T>
const std::string& IdentityType_Name(T value) {
  static_assert(std::is_same<T, IdentityType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IdentityType_Name().");
  return IdentityType_Name(static_cast<IdentityType>(value));
}
const std::string& IdentityType_Name(IdentityType value);
bool IdentityType_Parse(absl::string_view name, IdentityType* value);
enum CredentialType : int {
  CREDENTIAL_TYPE_UNKNOWN = 0,
  CREDENTIAL_TYPE_DEVICE = 1,
  CREDENTIAL_TYPE_GAIA = 2,
  CredentialType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CredentialType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CredentialType_IsValid(int value);
extern const uint32_t CredentialType_internal_data_[];
constexpr CredentialType CredentialType_MIN = static_cast<CredentialType>(0);
constexpr CredentialType CredentialType_MAX = static_cast<CredentialType>(2);
constexpr int CredentialType_ARRAYSIZE = 2 + 1;
const std::string& CredentialType_Name(CredentialType value);
template <typename T>
const std::string& CredentialType_Name(T value) {
  static_assert(std::is_same<T, CredentialType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CredentialType_Name().");
  return CredentialType_Name(static_cast<CredentialType>(value));
}
const std::string& CredentialType_Name(CredentialType value);
bool CredentialType_Parse(absl::string_view name, CredentialType* value);

// ===================================================================


// -------------------------------------------------------------------

class SharedCredential final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:nearby.internal.SharedCredential) */ {
 public:
  inline SharedCredential() : SharedCredential(nullptr) {}
  ~SharedCredential() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SharedCredential(::google::protobuf::internal::ConstantInitialized);

  inline SharedCredential(const SharedCredential& from)
      : SharedCredential(nullptr, from) {}
  SharedCredential(SharedCredential&& from) noexcept
    : SharedCredential() {
    *this = ::std::move(from);
  }

  inline SharedCredential& operator=(const SharedCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedCredential& operator=(SharedCredential&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharedCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedCredential* internal_default_instance() {
    return reinterpret_cast<const SharedCredential*>(
               &_SharedCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharedCredential& a, SharedCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedCredential* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedCredential* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharedCredential* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharedCredential>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const SharedCredential& from);
  void MergeFrom(const SharedCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SharedCredential* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.internal.SharedCredential";
  }
  protected:
  explicit SharedCredential(::google::protobuf::Arena* arena);
  SharedCredential(::google::protobuf::Arena* arena, const SharedCredential& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretIdFieldNumber = 1,
    kKeySeedFieldNumber = 2,
    kEncryptedMetadataBytesV0FieldNumber = 5,
    kMetadataEncryptionKeyTagV0FieldNumber = 6,
    kConnectionSignatureVerificationKeyFieldNumber = 7,
    kAdvertisementSignatureVerificationKeyFieldNumber = 8,
    kVersionFieldNumber = 10,
    kEncryptedMetadataBytesV1FieldNumber = 12,
    kMetadataEncryptionKeyUnsignedAdvTagV1FieldNumber = 13,
    kDusiFieldNumber = 15,
    kSignatureVersionFieldNumber = 16,
    kStartTimeMillisFieldNumber = 3,
    kEndTimeMillisFieldNumber = 4,
    kIdentityTypeFieldNumber = 9,
    kCredentialTypeFieldNumber = 11,
    kIdFieldNumber = 14,
  };
  // bytes secret_id = 1 [deprecated = true];
  [[deprecated]]  void clear_secret_id() ;
  [[deprecated]] const std::string& secret_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_secret_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_secret_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_secret_id();
  [[deprecated]] void set_allocated_secret_id(std::string* value);

  private:
  const std::string& _internal_secret_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_id(
      const std::string& value);
  std::string* _internal_mutable_secret_id();

  public:
  // bytes key_seed = 2;
  void clear_key_seed() ;
  const std::string& key_seed() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_seed(Arg_&& arg, Args_... args);
  std::string* mutable_key_seed();
  PROTOBUF_NODISCARD std::string* release_key_seed();
  void set_allocated_key_seed(std::string* value);

  private:
  const std::string& _internal_key_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_seed(
      const std::string& value);
  std::string* _internal_mutable_key_seed();

  public:
  // bytes encrypted_metadata_bytes_v0 = 5;
  void clear_encrypted_metadata_bytes_v0() ;
  const std::string& encrypted_metadata_bytes_v0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_metadata_bytes_v0(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_metadata_bytes_v0();
  PROTOBUF_NODISCARD std::string* release_encrypted_metadata_bytes_v0();
  void set_allocated_encrypted_metadata_bytes_v0(std::string* value);

  private:
  const std::string& _internal_encrypted_metadata_bytes_v0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_metadata_bytes_v0(
      const std::string& value);
  std::string* _internal_mutable_encrypted_metadata_bytes_v0();

  public:
  // bytes metadata_encryption_key_tag_v0 = 6;
  void clear_metadata_encryption_key_tag_v0() ;
  const std::string& metadata_encryption_key_tag_v0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_encryption_key_tag_v0(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_encryption_key_tag_v0();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key_tag_v0();
  void set_allocated_metadata_encryption_key_tag_v0(std::string* value);

  private:
  const std::string& _internal_metadata_encryption_key_tag_v0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key_tag_v0(
      const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key_tag_v0();

  public:
  // bytes connection_signature_verification_key = 7;
  void clear_connection_signature_verification_key() ;
  const std::string& connection_signature_verification_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_signature_verification_key(Arg_&& arg, Args_... args);
  std::string* mutable_connection_signature_verification_key();
  PROTOBUF_NODISCARD std::string* release_connection_signature_verification_key();
  void set_allocated_connection_signature_verification_key(std::string* value);

  private:
  const std::string& _internal_connection_signature_verification_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_signature_verification_key(
      const std::string& value);
  std::string* _internal_mutable_connection_signature_verification_key();

  public:
  // bytes advertisement_signature_verification_key = 8;
  void clear_advertisement_signature_verification_key() ;
  const std::string& advertisement_signature_verification_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_advertisement_signature_verification_key(Arg_&& arg, Args_... args);
  std::string* mutable_advertisement_signature_verification_key();
  PROTOBUF_NODISCARD std::string* release_advertisement_signature_verification_key();
  void set_allocated_advertisement_signature_verification_key(std::string* value);

  private:
  const std::string& _internal_advertisement_signature_verification_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_advertisement_signature_verification_key(
      const std::string& value);
  std::string* _internal_mutable_advertisement_signature_verification_key();

  public:
  // bytes version = 10;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes encrypted_metadata_bytes_v1 = 12;
  void clear_encrypted_metadata_bytes_v1() ;
  const std::string& encrypted_metadata_bytes_v1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_metadata_bytes_v1(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_metadata_bytes_v1();
  PROTOBUF_NODISCARD std::string* release_encrypted_metadata_bytes_v1();
  void set_allocated_encrypted_metadata_bytes_v1(std::string* value);

  private:
  const std::string& _internal_encrypted_metadata_bytes_v1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_metadata_bytes_v1(
      const std::string& value);
  std::string* _internal_mutable_encrypted_metadata_bytes_v1();

  public:
  // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
  void clear_metadata_encryption_key_unsigned_adv_tag_v1() ;
  const std::string& metadata_encryption_key_unsigned_adv_tag_v1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_encryption_key_unsigned_adv_tag_v1(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_encryption_key_unsigned_adv_tag_v1();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key_unsigned_adv_tag_v1();
  void set_allocated_metadata_encryption_key_unsigned_adv_tag_v1(std::string* value);

  private:
  const std::string& _internal_metadata_encryption_key_unsigned_adv_tag_v1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key_unsigned_adv_tag_v1(
      const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key_unsigned_adv_tag_v1();

  public:
  // string dusi = 15;
  void clear_dusi() ;
  const std::string& dusi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dusi(Arg_&& arg, Args_... args);
  std::string* mutable_dusi();
  PROTOBUF_NODISCARD std::string* release_dusi();
  void set_allocated_dusi(std::string* value);

  private:
  const std::string& _internal_dusi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dusi(
      const std::string& value);
  std::string* _internal_mutable_dusi();

  public:
  // string signature_version = 16;
  void clear_signature_version() ;
  const std::string& signature_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_version(Arg_&& arg, Args_... args);
  std::string* mutable_signature_version();
  PROTOBUF_NODISCARD std::string* release_signature_version();
  void set_allocated_signature_version(std::string* value);

  private:
  const std::string& _internal_signature_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_version(
      const std::string& value);
  std::string* _internal_mutable_signature_version();

  public:
  // int64 start_time_millis = 3;
  void clear_start_time_millis() ;
  ::int64_t start_time_millis() const;
  void set_start_time_millis(::int64_t value);

  private:
  ::int64_t _internal_start_time_millis() const;
  void _internal_set_start_time_millis(::int64_t value);

  public:
  // int64 end_time_millis = 4;
  void clear_end_time_millis() ;
  ::int64_t end_time_millis() const;
  void set_end_time_millis(::int64_t value);

  private:
  ::int64_t _internal_end_time_millis() const;
  void _internal_set_end_time_millis(::int64_t value);

  public:
  // .nearby.internal.IdentityType identity_type = 9;
  void clear_identity_type() ;
  ::nearby::internal::IdentityType identity_type() const;
  void set_identity_type(::nearby::internal::IdentityType value);

  private:
  ::nearby::internal::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::nearby::internal::IdentityType value);

  public:
  // .nearby.internal.CredentialType credential_type = 11;
  void clear_credential_type() ;
  ::nearby::internal::CredentialType credential_type() const;
  void set_credential_type(::nearby::internal::CredentialType value);

  private:
  ::nearby::internal::CredentialType _internal_credential_type() const;
  void _internal_set_credential_type(::nearby::internal::CredentialType value);

  public:
  // int64 id = 14;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.internal.SharedCredential)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr secret_id_;
    ::google::protobuf::internal::ArenaStringPtr key_seed_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_metadata_bytes_v0_;
    ::google::protobuf::internal::ArenaStringPtr metadata_encryption_key_tag_v0_;
    ::google::protobuf::internal::ArenaStringPtr connection_signature_verification_key_;
    ::google::protobuf::internal::ArenaStringPtr advertisement_signature_verification_key_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_metadata_bytes_v1_;
    ::google::protobuf::internal::ArenaStringPtr metadata_encryption_key_unsigned_adv_tag_v1_;
    ::google::protobuf::internal::ArenaStringPtr dusi_;
    ::google::protobuf::internal::ArenaStringPtr signature_version_;
    ::int64_t start_time_millis_;
    ::int64_t end_time_millis_;
    int identity_type_;
    int credential_type_;
    ::int64_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2fproto_2fcredential_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SharedCredential

// bytes secret_id = 1 [deprecated = true];
inline void SharedCredential::clear_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_id_.ClearToEmpty();
}
inline const std::string& SharedCredential::secret_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.secret_id)
  return _internal_secret_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_secret_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.secret_id)
}
inline std::string* SharedCredential::mutable_secret_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret_id();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.secret_id)
  return _s;
}
inline const std::string& SharedCredential::_internal_secret_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_id_.Get();
}
inline void SharedCredential::_internal_set_secret_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_id_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.secret_id_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.secret_id)
  return _impl_.secret_id_.Release();
}
inline void SharedCredential::set_allocated_secret_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_id_.IsDefault()) {
          _impl_.secret_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.secret_id)
}

// bytes key_seed = 2;
inline void SharedCredential::clear_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_seed_.ClearToEmpty();
}
inline const std::string& SharedCredential::key_seed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.key_seed)
  return _internal_key_seed();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_key_seed(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_seed_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.key_seed)
}
inline std::string* SharedCredential::mutable_key_seed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_seed();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.key_seed)
  return _s;
}
inline const std::string& SharedCredential::_internal_key_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_seed_.Get();
}
inline void SharedCredential::_internal_set_key_seed(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_seed_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_seed_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.key_seed)
  return _impl_.key_seed_.Release();
}
inline void SharedCredential::set_allocated_key_seed(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_seed_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_seed_.IsDefault()) {
          _impl_.key_seed_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.key_seed)
}

// int64 start_time_millis = 3;
inline void SharedCredential::clear_start_time_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_millis_ = ::int64_t{0};
}
inline ::int64_t SharedCredential::start_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.start_time_millis)
  return _internal_start_time_millis();
}
inline void SharedCredential::set_start_time_millis(::int64_t value) {
  _internal_set_start_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.start_time_millis)
}
inline ::int64_t SharedCredential::_internal_start_time_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_millis_;
}
inline void SharedCredential::_internal_set_start_time_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_millis_ = value;
}

// int64 end_time_millis = 4;
inline void SharedCredential::clear_end_time_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_millis_ = ::int64_t{0};
}
inline ::int64_t SharedCredential::end_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.end_time_millis)
  return _internal_end_time_millis();
}
inline void SharedCredential::set_end_time_millis(::int64_t value) {
  _internal_set_end_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.end_time_millis)
}
inline ::int64_t SharedCredential::_internal_end_time_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_millis_;
}
inline void SharedCredential::_internal_set_end_time_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_millis_ = value;
}

// bytes encrypted_metadata_bytes_v0 = 5;
inline void SharedCredential::clear_encrypted_metadata_bytes_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_metadata_bytes_v0_.ClearToEmpty();
}
inline const std::string& SharedCredential::encrypted_metadata_bytes_v0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.encrypted_metadata_bytes_v0)
  return _internal_encrypted_metadata_bytes_v0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_encrypted_metadata_bytes_v0(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_metadata_bytes_v0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.encrypted_metadata_bytes_v0)
}
inline std::string* SharedCredential::mutable_encrypted_metadata_bytes_v0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_metadata_bytes_v0();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.encrypted_metadata_bytes_v0)
  return _s;
}
inline const std::string& SharedCredential::_internal_encrypted_metadata_bytes_v0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.encrypted_metadata_bytes_v0_.Get();
}
inline void SharedCredential::_internal_set_encrypted_metadata_bytes_v0(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_metadata_bytes_v0_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_encrypted_metadata_bytes_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.encrypted_metadata_bytes_v0_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_encrypted_metadata_bytes_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.encrypted_metadata_bytes_v0)
  return _impl_.encrypted_metadata_bytes_v0_.Release();
}
inline void SharedCredential::set_allocated_encrypted_metadata_bytes_v0(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_metadata_bytes_v0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encrypted_metadata_bytes_v0_.IsDefault()) {
          _impl_.encrypted_metadata_bytes_v0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.encrypted_metadata_bytes_v0)
}

// bytes metadata_encryption_key_tag_v0 = 6;
inline void SharedCredential::clear_metadata_encryption_key_tag_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_tag_v0_.ClearToEmpty();
}
inline const std::string& SharedCredential::metadata_encryption_key_tag_v0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.metadata_encryption_key_tag_v0)
  return _internal_metadata_encryption_key_tag_v0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_metadata_encryption_key_tag_v0(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_tag_v0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.metadata_encryption_key_tag_v0)
}
inline std::string* SharedCredential::mutable_metadata_encryption_key_tag_v0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_encryption_key_tag_v0();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.metadata_encryption_key_tag_v0)
  return _s;
}
inline const std::string& SharedCredential::_internal_metadata_encryption_key_tag_v0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_encryption_key_tag_v0_.Get();
}
inline void SharedCredential::_internal_set_metadata_encryption_key_tag_v0(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_tag_v0_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_metadata_encryption_key_tag_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_encryption_key_tag_v0_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_metadata_encryption_key_tag_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.metadata_encryption_key_tag_v0)
  return _impl_.metadata_encryption_key_tag_v0_.Release();
}
inline void SharedCredential::set_allocated_metadata_encryption_key_tag_v0(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_tag_v0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_encryption_key_tag_v0_.IsDefault()) {
          _impl_.metadata_encryption_key_tag_v0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.metadata_encryption_key_tag_v0)
}

// bytes connection_signature_verification_key = 7;
inline void SharedCredential::clear_connection_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connection_signature_verification_key_.ClearToEmpty();
}
inline const std::string& SharedCredential::connection_signature_verification_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.connection_signature_verification_key)
  return _internal_connection_signature_verification_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_connection_signature_verification_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.connection_signature_verification_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.connection_signature_verification_key)
}
inline std::string* SharedCredential::mutable_connection_signature_verification_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_connection_signature_verification_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.connection_signature_verification_key)
  return _s;
}
inline const std::string& SharedCredential::_internal_connection_signature_verification_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connection_signature_verification_key_.Get();
}
inline void SharedCredential::_internal_set_connection_signature_verification_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.connection_signature_verification_key_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_connection_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.connection_signature_verification_key_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_connection_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.connection_signature_verification_key)
  return _impl_.connection_signature_verification_key_.Release();
}
inline void SharedCredential::set_allocated_connection_signature_verification_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connection_signature_verification_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_signature_verification_key_.IsDefault()) {
          _impl_.connection_signature_verification_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.connection_signature_verification_key)
}

// bytes advertisement_signature_verification_key = 8;
inline void SharedCredential::clear_advertisement_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.advertisement_signature_verification_key_.ClearToEmpty();
}
inline const std::string& SharedCredential::advertisement_signature_verification_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.advertisement_signature_verification_key)
  return _internal_advertisement_signature_verification_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_advertisement_signature_verification_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.advertisement_signature_verification_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.advertisement_signature_verification_key)
}
inline std::string* SharedCredential::mutable_advertisement_signature_verification_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_advertisement_signature_verification_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.advertisement_signature_verification_key)
  return _s;
}
inline const std::string& SharedCredential::_internal_advertisement_signature_verification_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.advertisement_signature_verification_key_.Get();
}
inline void SharedCredential::_internal_set_advertisement_signature_verification_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.advertisement_signature_verification_key_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_advertisement_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.advertisement_signature_verification_key_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_advertisement_signature_verification_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.advertisement_signature_verification_key)
  return _impl_.advertisement_signature_verification_key_.Release();
}
inline void SharedCredential::set_allocated_advertisement_signature_verification_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.advertisement_signature_verification_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.advertisement_signature_verification_key_.IsDefault()) {
          _impl_.advertisement_signature_verification_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.advertisement_signature_verification_key)
}

// .nearby.internal.IdentityType identity_type = 9;
inline void SharedCredential::clear_identity_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.identity_type_ = 0;
}
inline ::nearby::internal::IdentityType SharedCredential::identity_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.identity_type)
  return _internal_identity_type();
}
inline void SharedCredential::set_identity_type(::nearby::internal::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.identity_type)
}
inline ::nearby::internal::IdentityType SharedCredential::_internal_identity_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::nearby::internal::IdentityType>(_impl_.identity_type_);
}
inline void SharedCredential::_internal_set_identity_type(::nearby::internal::IdentityType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.identity_type_ = value;
}

// bytes version = 10;
inline void SharedCredential::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SharedCredential::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.version)
}
inline std::string* SharedCredential::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.version)
  return _s;
}
inline const std::string& SharedCredential::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void SharedCredential::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.version)
  return _impl_.version_.Release();
}
inline void SharedCredential::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.version)
}

// .nearby.internal.CredentialType credential_type = 11;
inline void SharedCredential::clear_credential_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.credential_type_ = 0;
}
inline ::nearby::internal::CredentialType SharedCredential::credential_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.credential_type)
  return _internal_credential_type();
}
inline void SharedCredential::set_credential_type(::nearby::internal::CredentialType value) {
  _internal_set_credential_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.credential_type)
}
inline ::nearby::internal::CredentialType SharedCredential::_internal_credential_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::nearby::internal::CredentialType>(_impl_.credential_type_);
}
inline void SharedCredential::_internal_set_credential_type(::nearby::internal::CredentialType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.credential_type_ = value;
}

// bytes encrypted_metadata_bytes_v1 = 12;
inline void SharedCredential::clear_encrypted_metadata_bytes_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_metadata_bytes_v1_.ClearToEmpty();
}
inline const std::string& SharedCredential::encrypted_metadata_bytes_v1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.encrypted_metadata_bytes_v1)
  return _internal_encrypted_metadata_bytes_v1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_encrypted_metadata_bytes_v1(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_metadata_bytes_v1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.encrypted_metadata_bytes_v1)
}
inline std::string* SharedCredential::mutable_encrypted_metadata_bytes_v1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_metadata_bytes_v1();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.encrypted_metadata_bytes_v1)
  return _s;
}
inline const std::string& SharedCredential::_internal_encrypted_metadata_bytes_v1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.encrypted_metadata_bytes_v1_.Get();
}
inline void SharedCredential::_internal_set_encrypted_metadata_bytes_v1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_metadata_bytes_v1_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_encrypted_metadata_bytes_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.encrypted_metadata_bytes_v1_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_encrypted_metadata_bytes_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.encrypted_metadata_bytes_v1)
  return _impl_.encrypted_metadata_bytes_v1_.Release();
}
inline void SharedCredential::set_allocated_encrypted_metadata_bytes_v1(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_metadata_bytes_v1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encrypted_metadata_bytes_v1_.IsDefault()) {
          _impl_.encrypted_metadata_bytes_v1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.encrypted_metadata_bytes_v1)
}

// bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
inline void SharedCredential::clear_metadata_encryption_key_unsigned_adv_tag_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.ClearToEmpty();
}
inline const std::string& SharedCredential::metadata_encryption_key_unsigned_adv_tag_v1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.metadata_encryption_key_unsigned_adv_tag_v1)
  return _internal_metadata_encryption_key_unsigned_adv_tag_v1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_metadata_encryption_key_unsigned_adv_tag_v1(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.metadata_encryption_key_unsigned_adv_tag_v1)
}
inline std::string* SharedCredential::mutable_metadata_encryption_key_unsigned_adv_tag_v1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_encryption_key_unsigned_adv_tag_v1();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.metadata_encryption_key_unsigned_adv_tag_v1)
  return _s;
}
inline const std::string& SharedCredential::_internal_metadata_encryption_key_unsigned_adv_tag_v1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Get();
}
inline void SharedCredential::_internal_set_metadata_encryption_key_unsigned_adv_tag_v1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_metadata_encryption_key_unsigned_adv_tag_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_metadata_encryption_key_unsigned_adv_tag_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.metadata_encryption_key_unsigned_adv_tag_v1)
  return _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Release();
}
inline void SharedCredential::set_allocated_metadata_encryption_key_unsigned_adv_tag_v1(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_encryption_key_unsigned_adv_tag_v1_.IsDefault()) {
          _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.metadata_encryption_key_unsigned_adv_tag_v1)
}

// int64 id = 14;
inline void SharedCredential::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SharedCredential::id() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.id)
  return _internal_id();
}
inline void SharedCredential::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.id)
}
inline ::int64_t SharedCredential::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SharedCredential::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string dusi = 15;
inline void SharedCredential::clear_dusi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dusi_.ClearToEmpty();
}
inline const std::string& SharedCredential::dusi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.dusi)
  return _internal_dusi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_dusi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dusi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.dusi)
}
inline std::string* SharedCredential::mutable_dusi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dusi();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.dusi)
  return _s;
}
inline const std::string& SharedCredential::_internal_dusi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dusi_.Get();
}
inline void SharedCredential::_internal_set_dusi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dusi_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_dusi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dusi_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_dusi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.dusi)
  return _impl_.dusi_.Release();
}
inline void SharedCredential::set_allocated_dusi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dusi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dusi_.IsDefault()) {
          _impl_.dusi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.dusi)
}

// string signature_version = 16;
inline void SharedCredential::clear_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_version_.ClearToEmpty();
}
inline const std::string& SharedCredential::signature_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.signature_version)
  return _internal_signature_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SharedCredential::set_signature_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.signature_version)
}
inline std::string* SharedCredential::mutable_signature_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature_version();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.signature_version)
  return _s;
}
inline const std::string& SharedCredential::_internal_signature_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_version_.Get();
}
inline void SharedCredential::_internal_set_signature_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_version_.Set(value, GetArena());
}
inline std::string* SharedCredential::_internal_mutable_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.signature_version_.Mutable( GetArena());
}
inline std::string* SharedCredential::release_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.signature_version)
  return _impl_.signature_version_.Release();
}
inline void SharedCredential::set_allocated_signature_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_version_.IsDefault()) {
          _impl_.signature_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.signature_version)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nearby::internal::IdentityType> : std::true_type {};
template <>
struct is_proto_enum<::nearby::internal::CredentialType> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto_2epb_2eh
