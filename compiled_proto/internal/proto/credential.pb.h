// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/credential.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "internal/proto/device_metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internal_2fproto_2fcredential_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2fproto_2fcredential_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_2fproto_2fcredential_2eproto;
namespace nearby {
namespace internal {
class LocalCredential;
struct LocalCredentialDefaultTypeInternal;
extern LocalCredentialDefaultTypeInternal _LocalCredential_default_instance_;
class LocalCredential_ConsumedSaltsEntry_DoNotUse;
struct LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal;
extern LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal _LocalCredential_ConsumedSaltsEntry_DoNotUse_default_instance_;
class SharedCredential;
struct SharedCredentialDefaultTypeInternal;
extern SharedCredentialDefaultTypeInternal _SharedCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> ::nearby::internal::LocalCredential* Arena::CreateMaybeMessage<::nearby::internal::LocalCredential>(Arena*);
template<> ::nearby::internal::LocalCredential_ConsumedSaltsEntry_DoNotUse* Arena::CreateMaybeMessage<::nearby::internal::LocalCredential_ConsumedSaltsEntry_DoNotUse>(Arena*);
template<> ::nearby::internal::SharedCredential* Arena::CreateMaybeMessage<::nearby::internal::SharedCredential>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nearby {
namespace internal {

enum IdentityType : int {
  IDENTITY_TYPE_UNSPECIFIED = 0,
  IDENTITY_TYPE_PRIVATE = 1,
  IDENTITY_TYPE_TRUSTED = 2,
  IDENTITY_TYPE_PUBLIC = 3,
  IDENTITY_TYPE_PROVISIONED = 4,
  IdentityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IdentityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IdentityType_IsValid(int value);
constexpr IdentityType IdentityType_MIN = IDENTITY_TYPE_UNSPECIFIED;
constexpr IdentityType IdentityType_MAX = IDENTITY_TYPE_PROVISIONED;
constexpr int IdentityType_ARRAYSIZE = IdentityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentityType_descriptor();
template<typename T>
inline const std::string& IdentityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IdentityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IdentityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IdentityType_descriptor(), enum_t_value);
}
inline bool IdentityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IdentityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IdentityType>(
    IdentityType_descriptor(), name, value);
}
// ===================================================================

class LocalCredential_ConsumedSaltsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LocalCredential_ConsumedSaltsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LocalCredential_ConsumedSaltsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  LocalCredential_ConsumedSaltsEntry_DoNotUse();
  explicit constexpr LocalCredential_ConsumedSaltsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LocalCredential_ConsumedSaltsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LocalCredential_ConsumedSaltsEntry_DoNotUse& other);
  static const LocalCredential_ConsumedSaltsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LocalCredential_ConsumedSaltsEntry_DoNotUse*>(&_LocalCredential_ConsumedSaltsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class LocalCredential final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nearby.internal.LocalCredential) */ {
 public:
  inline LocalCredential() : LocalCredential(nullptr) {}
  ~LocalCredential() override;
  explicit constexpr LocalCredential(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCredential(const LocalCredential& from);
  LocalCredential(LocalCredential&& from) noexcept
    : LocalCredential() {
    *this = ::std::move(from);
  }

  inline LocalCredential& operator=(const LocalCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCredential& operator=(LocalCredential&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCredential* internal_default_instance() {
    return reinterpret_cast<const LocalCredential*>(
               &_LocalCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalCredential& a, LocalCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCredential* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCredential* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCredential>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalCredential& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalCredential& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalCredential* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.internal.LocalCredential";
  }
  protected:
  explicit LocalCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConsumedSaltsFieldNumber = 7,
    kSecretIdFieldNumber = 2,
    kAuthenticityKeyFieldNumber = 3,
    kVerificationKeyFieldNumber = 4,
    kMetadataEncryptionKeyFieldNumber = 8,
    kDeviceMetadataFieldNumber = 9,
    kStartTimeMillisFieldNumber = 5,
    kEndTimeMillisFieldNumber = 6,
    kIdentityTypeFieldNumber = 1,
  };
  // map<uint32, bool> consumed_salts = 7;
  int consumed_salts_size() const;
  private:
  int _internal_consumed_salts_size() const;
  public:
  void clear_consumed_salts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      _internal_consumed_salts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      _internal_mutable_consumed_salts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      consumed_salts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      mutable_consumed_salts();

  // optional bytes secret_id = 2;
  bool has_secret_id() const;
  private:
  bool _internal_has_secret_id() const;
  public:
  void clear_secret_id();
  const std::string& secret_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_id();
  PROTOBUF_NODISCARD std::string* release_secret_id();
  void set_allocated_secret_id(std::string* secret_id);
  private:
  const std::string& _internal_secret_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_id(const std::string& value);
  std::string* _internal_mutable_secret_id();
  public:

  // optional bytes authenticity_key = 3;
  bool has_authenticity_key() const;
  private:
  bool _internal_has_authenticity_key() const;
  public:
  void clear_authenticity_key();
  const std::string& authenticity_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authenticity_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authenticity_key();
  PROTOBUF_NODISCARD std::string* release_authenticity_key();
  void set_allocated_authenticity_key(std::string* authenticity_key);
  private:
  const std::string& _internal_authenticity_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authenticity_key(const std::string& value);
  std::string* _internal_mutable_authenticity_key();
  public:

  // optional bytes verification_key = 4;
  bool has_verification_key() const;
  private:
  bool _internal_has_verification_key() const;
  public:
  void clear_verification_key();
  const std::string& verification_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verification_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verification_key();
  PROTOBUF_NODISCARD std::string* release_verification_key();
  void set_allocated_verification_key(std::string* verification_key);
  private:
  const std::string& _internal_verification_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_key(const std::string& value);
  std::string* _internal_mutable_verification_key();
  public:

  // optional bytes metadata_encryption_key = 8;
  bool has_metadata_encryption_key() const;
  private:
  bool _internal_has_metadata_encryption_key() const;
  public:
  void clear_metadata_encryption_key();
  const std::string& metadata_encryption_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata_encryption_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata_encryption_key();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key();
  void set_allocated_metadata_encryption_key(std::string* metadata_encryption_key);
  private:
  const std::string& _internal_metadata_encryption_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key(const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key();
  public:

  // optional .nearby.internal.DeviceMetadata device_metadata = 9;
  bool has_device_metadata() const;
  private:
  bool _internal_has_device_metadata() const;
  public:
  void clear_device_metadata();
  const ::nearby::internal::DeviceMetadata& device_metadata() const;
  PROTOBUF_NODISCARD ::nearby::internal::DeviceMetadata* release_device_metadata();
  ::nearby::internal::DeviceMetadata* mutable_device_metadata();
  void set_allocated_device_metadata(::nearby::internal::DeviceMetadata* device_metadata);
  private:
  const ::nearby::internal::DeviceMetadata& _internal_device_metadata() const;
  ::nearby::internal::DeviceMetadata* _internal_mutable_device_metadata();
  public:
  void unsafe_arena_set_allocated_device_metadata(
      ::nearby::internal::DeviceMetadata* device_metadata);
  ::nearby::internal::DeviceMetadata* unsafe_arena_release_device_metadata();

  // optional uint64 start_time_millis = 5;
  bool has_start_time_millis() const;
  private:
  bool _internal_has_start_time_millis() const;
  public:
  void clear_start_time_millis();
  uint64_t start_time_millis() const;
  void set_start_time_millis(uint64_t value);
  private:
  uint64_t _internal_start_time_millis() const;
  void _internal_set_start_time_millis(uint64_t value);
  public:

  // optional uint64 end_time_millis = 6;
  bool has_end_time_millis() const;
  private:
  bool _internal_has_end_time_millis() const;
  public:
  void clear_end_time_millis();
  uint64_t end_time_millis() const;
  void set_end_time_millis(uint64_t value);
  private:
  uint64_t _internal_end_time_millis() const;
  void _internal_set_end_time_millis(uint64_t value);
  public:

  // optional .nearby.internal.IdentityType identity_type = 1;
  bool has_identity_type() const;
  private:
  bool _internal_has_identity_type() const;
  public:
  void clear_identity_type();
  ::nearby::internal::IdentityType identity_type() const;
  void set_identity_type(::nearby::internal::IdentityType value);
  private:
  ::nearby::internal::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::nearby::internal::IdentityType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.internal.LocalCredential)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LocalCredential_ConsumedSaltsEntry_DoNotUse,
      uint32_t, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> consumed_salts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authenticity_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_encryption_key_;
  ::nearby::internal::DeviceMetadata* device_metadata_;
  uint64_t start_time_millis_;
  uint64_t end_time_millis_;
  int identity_type_;
  friend struct ::TableStruct_internal_2fproto_2fcredential_2eproto;
};
// -------------------------------------------------------------------

class SharedCredential final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nearby.internal.SharedCredential) */ {
 public:
  inline SharedCredential() : SharedCredential(nullptr) {}
  ~SharedCredential() override;
  explicit constexpr SharedCredential(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharedCredential(const SharedCredential& from);
  SharedCredential(SharedCredential&& from) noexcept
    : SharedCredential() {
    *this = ::std::move(from);
  }

  inline SharedCredential& operator=(const SharedCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedCredential& operator=(SharedCredential&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SharedCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedCredential* internal_default_instance() {
    return reinterpret_cast<const SharedCredential*>(
               &_SharedCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SharedCredential& a, SharedCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedCredential* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedCredential* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharedCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharedCredential>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SharedCredential& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SharedCredential& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedCredential* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nearby.internal.SharedCredential";
  }
  protected:
  explicit SharedCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretIdFieldNumber = 2,
    kAuthenticityKeyFieldNumber = 3,
    kVerificationKeyFieldNumber = 4,
    kEncryptedMetadataBytesFieldNumber = 7,
    kMetadataEncryptionKeyTagFieldNumber = 8,
    kStartTimeMillisFieldNumber = 5,
    kEndTimeMillisFieldNumber = 6,
    kIdentityTypeFieldNumber = 1,
  };
  // optional bytes secret_id = 2;
  bool has_secret_id() const;
  private:
  bool _internal_has_secret_id() const;
  public:
  void clear_secret_id();
  const std::string& secret_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_id();
  PROTOBUF_NODISCARD std::string* release_secret_id();
  void set_allocated_secret_id(std::string* secret_id);
  private:
  const std::string& _internal_secret_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_id(const std::string& value);
  std::string* _internal_mutable_secret_id();
  public:

  // optional bytes authenticity_key = 3;
  bool has_authenticity_key() const;
  private:
  bool _internal_has_authenticity_key() const;
  public:
  void clear_authenticity_key();
  const std::string& authenticity_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authenticity_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authenticity_key();
  PROTOBUF_NODISCARD std::string* release_authenticity_key();
  void set_allocated_authenticity_key(std::string* authenticity_key);
  private:
  const std::string& _internal_authenticity_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authenticity_key(const std::string& value);
  std::string* _internal_mutable_authenticity_key();
  public:

  // optional bytes verification_key = 4;
  bool has_verification_key() const;
  private:
  bool _internal_has_verification_key() const;
  public:
  void clear_verification_key();
  const std::string& verification_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verification_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verification_key();
  PROTOBUF_NODISCARD std::string* release_verification_key();
  void set_allocated_verification_key(std::string* verification_key);
  private:
  const std::string& _internal_verification_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_key(const std::string& value);
  std::string* _internal_mutable_verification_key();
  public:

  // optional bytes encrypted_metadata_bytes = 7;
  bool has_encrypted_metadata_bytes() const;
  private:
  bool _internal_has_encrypted_metadata_bytes() const;
  public:
  void clear_encrypted_metadata_bytes();
  const std::string& encrypted_metadata_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_metadata_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_metadata_bytes();
  PROTOBUF_NODISCARD std::string* release_encrypted_metadata_bytes();
  void set_allocated_encrypted_metadata_bytes(std::string* encrypted_metadata_bytes);
  private:
  const std::string& _internal_encrypted_metadata_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_metadata_bytes(const std::string& value);
  std::string* _internal_mutable_encrypted_metadata_bytes();
  public:

  // optional bytes metadata_encryption_key_tag = 8;
  bool has_metadata_encryption_key_tag() const;
  private:
  bool _internal_has_metadata_encryption_key_tag() const;
  public:
  void clear_metadata_encryption_key_tag();
  const std::string& metadata_encryption_key_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata_encryption_key_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata_encryption_key_tag();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key_tag();
  void set_allocated_metadata_encryption_key_tag(std::string* metadata_encryption_key_tag);
  private:
  const std::string& _internal_metadata_encryption_key_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key_tag(const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key_tag();
  public:

  // optional uint64 start_time_millis = 5;
  bool has_start_time_millis() const;
  private:
  bool _internal_has_start_time_millis() const;
  public:
  void clear_start_time_millis();
  uint64_t start_time_millis() const;
  void set_start_time_millis(uint64_t value);
  private:
  uint64_t _internal_start_time_millis() const;
  void _internal_set_start_time_millis(uint64_t value);
  public:

  // optional uint64 end_time_millis = 6;
  bool has_end_time_millis() const;
  private:
  bool _internal_has_end_time_millis() const;
  public:
  void clear_end_time_millis();
  uint64_t end_time_millis() const;
  void set_end_time_millis(uint64_t value);
  private:
  uint64_t _internal_end_time_millis() const;
  void _internal_set_end_time_millis(uint64_t value);
  public:

  // optional .nearby.internal.IdentityType identity_type = 1;
  bool has_identity_type() const;
  private:
  bool _internal_has_identity_type() const;
  public:
  void clear_identity_type();
  ::nearby::internal::IdentityType identity_type() const;
  void set_identity_type(::nearby::internal::IdentityType value);
  private:
  ::nearby::internal::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::nearby::internal::IdentityType value);
  public:

  // @@protoc_insertion_point(class_scope:nearby.internal.SharedCredential)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authenticity_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_metadata_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_encryption_key_tag_;
  uint64_t start_time_millis_;
  uint64_t end_time_millis_;
  int identity_type_;
  friend struct ::TableStruct_internal_2fproto_2fcredential_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LocalCredential

// optional .nearby.internal.IdentityType identity_type = 1;
inline bool LocalCredential::_internal_has_identity_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LocalCredential::has_identity_type() const {
  return _internal_has_identity_type();
}
inline void LocalCredential::clear_identity_type() {
  identity_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::nearby::internal::IdentityType LocalCredential::_internal_identity_type() const {
  return static_cast< ::nearby::internal::IdentityType >(identity_type_);
}
inline ::nearby::internal::IdentityType LocalCredential::identity_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.identity_type)
  return _internal_identity_type();
}
inline void LocalCredential::_internal_set_identity_type(::nearby::internal::IdentityType value) {
  _has_bits_[0] |= 0x00000080u;
  identity_type_ = value;
}
inline void LocalCredential::set_identity_type(::nearby::internal::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.identity_type)
}

// optional bytes secret_id = 2;
inline bool LocalCredential::_internal_has_secret_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalCredential::has_secret_id() const {
  return _internal_has_secret_id();
}
inline void LocalCredential::clear_secret_id() {
  secret_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalCredential::secret_id() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.secret_id)
  return _internal_secret_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalCredential::set_secret_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 secret_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.secret_id)
}
inline std::string* LocalCredential::mutable_secret_id() {
  std::string* _s = _internal_mutable_secret_id();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.secret_id)
  return _s;
}
inline const std::string& LocalCredential::_internal_secret_id() const {
  return secret_id_.Get();
}
inline void LocalCredential::_internal_set_secret_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  secret_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalCredential::_internal_mutable_secret_id() {
  _has_bits_[0] |= 0x00000001u;
  return secret_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalCredential::release_secret_id() {
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.secret_id)
  if (!_internal_has_secret_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = secret_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalCredential::set_allocated_secret_id(std::string* secret_id) {
  if (secret_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secret_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.secret_id)
}

// optional bytes authenticity_key = 3;
inline bool LocalCredential::_internal_has_authenticity_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalCredential::has_authenticity_key() const {
  return _internal_has_authenticity_key();
}
inline void LocalCredential::clear_authenticity_key() {
  authenticity_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LocalCredential::authenticity_key() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.authenticity_key)
  return _internal_authenticity_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalCredential::set_authenticity_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 authenticity_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.authenticity_key)
}
inline std::string* LocalCredential::mutable_authenticity_key() {
  std::string* _s = _internal_mutable_authenticity_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.authenticity_key)
  return _s;
}
inline const std::string& LocalCredential::_internal_authenticity_key() const {
  return authenticity_key_.Get();
}
inline void LocalCredential::_internal_set_authenticity_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  authenticity_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalCredential::_internal_mutable_authenticity_key() {
  _has_bits_[0] |= 0x00000002u;
  return authenticity_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalCredential::release_authenticity_key() {
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.authenticity_key)
  if (!_internal_has_authenticity_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = authenticity_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticity_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalCredential::set_allocated_authenticity_key(std::string* authenticity_key) {
  if (authenticity_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  authenticity_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authenticity_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticity_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.authenticity_key)
}

// optional bytes verification_key = 4;
inline bool LocalCredential::_internal_has_verification_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalCredential::has_verification_key() const {
  return _internal_has_verification_key();
}
inline void LocalCredential::clear_verification_key() {
  verification_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LocalCredential::verification_key() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.verification_key)
  return _internal_verification_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalCredential::set_verification_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 verification_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.verification_key)
}
inline std::string* LocalCredential::mutable_verification_key() {
  std::string* _s = _internal_mutable_verification_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.verification_key)
  return _s;
}
inline const std::string& LocalCredential::_internal_verification_key() const {
  return verification_key_.Get();
}
inline void LocalCredential::_internal_set_verification_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  verification_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalCredential::_internal_mutable_verification_key() {
  _has_bits_[0] |= 0x00000004u;
  return verification_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalCredential::release_verification_key() {
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.verification_key)
  if (!_internal_has_verification_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = verification_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalCredential::set_allocated_verification_key(std::string* verification_key) {
  if (verification_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  verification_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.verification_key)
}

// optional uint64 start_time_millis = 5;
inline bool LocalCredential::_internal_has_start_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalCredential::has_start_time_millis() const {
  return _internal_has_start_time_millis();
}
inline void LocalCredential::clear_start_time_millis() {
  start_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t LocalCredential::_internal_start_time_millis() const {
  return start_time_millis_;
}
inline uint64_t LocalCredential::start_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.start_time_millis)
  return _internal_start_time_millis();
}
inline void LocalCredential::_internal_set_start_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  start_time_millis_ = value;
}
inline void LocalCredential::set_start_time_millis(uint64_t value) {
  _internal_set_start_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.start_time_millis)
}

// optional uint64 end_time_millis = 6;
inline bool LocalCredential::_internal_has_end_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LocalCredential::has_end_time_millis() const {
  return _internal_has_end_time_millis();
}
inline void LocalCredential::clear_end_time_millis() {
  end_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t LocalCredential::_internal_end_time_millis() const {
  return end_time_millis_;
}
inline uint64_t LocalCredential::end_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.end_time_millis)
  return _internal_end_time_millis();
}
inline void LocalCredential::_internal_set_end_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  end_time_millis_ = value;
}
inline void LocalCredential::set_end_time_millis(uint64_t value) {
  _internal_set_end_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.end_time_millis)
}

// map<uint32, bool> consumed_salts = 7;
inline int LocalCredential::_internal_consumed_salts_size() const {
  return consumed_salts_.size();
}
inline int LocalCredential::consumed_salts_size() const {
  return _internal_consumed_salts_size();
}
inline void LocalCredential::clear_consumed_salts() {
  consumed_salts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
LocalCredential::_internal_consumed_salts() const {
  return consumed_salts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
LocalCredential::consumed_salts() const {
  // @@protoc_insertion_point(field_map:nearby.internal.LocalCredential.consumed_salts)
  return _internal_consumed_salts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
LocalCredential::_internal_mutable_consumed_salts() {
  return consumed_salts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
LocalCredential::mutable_consumed_salts() {
  // @@protoc_insertion_point(field_mutable_map:nearby.internal.LocalCredential.consumed_salts)
  return _internal_mutable_consumed_salts();
}

// optional bytes metadata_encryption_key = 8;
inline bool LocalCredential::_internal_has_metadata_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocalCredential::has_metadata_encryption_key() const {
  return _internal_has_metadata_encryption_key();
}
inline void LocalCredential::clear_metadata_encryption_key() {
  metadata_encryption_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LocalCredential::metadata_encryption_key() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.metadata_encryption_key)
  return _internal_metadata_encryption_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalCredential::set_metadata_encryption_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 metadata_encryption_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.metadata_encryption_key)
}
inline std::string* LocalCredential::mutable_metadata_encryption_key() {
  std::string* _s = _internal_mutable_metadata_encryption_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.metadata_encryption_key)
  return _s;
}
inline const std::string& LocalCredential::_internal_metadata_encryption_key() const {
  return metadata_encryption_key_.Get();
}
inline void LocalCredential::_internal_set_metadata_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  metadata_encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalCredential::_internal_mutable_metadata_encryption_key() {
  _has_bits_[0] |= 0x00000008u;
  return metadata_encryption_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalCredential::release_metadata_encryption_key() {
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.metadata_encryption_key)
  if (!_internal_has_metadata_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = metadata_encryption_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalCredential::set_allocated_metadata_encryption_key(std::string* metadata_encryption_key) {
  if (metadata_encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metadata_encryption_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_encryption_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.metadata_encryption_key)
}

// optional .nearby.internal.DeviceMetadata device_metadata = 9;
inline bool LocalCredential::_internal_has_device_metadata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || device_metadata_ != nullptr);
  return value;
}
inline bool LocalCredential::has_device_metadata() const {
  return _internal_has_device_metadata();
}
inline const ::nearby::internal::DeviceMetadata& LocalCredential::_internal_device_metadata() const {
  const ::nearby::internal::DeviceMetadata* p = device_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::internal::DeviceMetadata&>(
      ::nearby::internal::_DeviceMetadata_default_instance_);
}
inline const ::nearby::internal::DeviceMetadata& LocalCredential::device_metadata() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.device_metadata)
  return _internal_device_metadata();
}
inline void LocalCredential::unsafe_arena_set_allocated_device_metadata(
    ::nearby::internal::DeviceMetadata* device_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_metadata_);
  }
  device_metadata_ = device_metadata;
  if (device_metadata) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.internal.LocalCredential.device_metadata)
}
inline ::nearby::internal::DeviceMetadata* LocalCredential::release_device_metadata() {
  _has_bits_[0] &= ~0x00000010u;
  ::nearby::internal::DeviceMetadata* temp = device_metadata_;
  device_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::internal::DeviceMetadata* LocalCredential::unsafe_arena_release_device_metadata() {
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.device_metadata)
  _has_bits_[0] &= ~0x00000010u;
  ::nearby::internal::DeviceMetadata* temp = device_metadata_;
  device_metadata_ = nullptr;
  return temp;
}
inline ::nearby::internal::DeviceMetadata* LocalCredential::_internal_mutable_device_metadata() {
  _has_bits_[0] |= 0x00000010u;
  if (device_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::internal::DeviceMetadata>(GetArenaForAllocation());
    device_metadata_ = p;
  }
  return device_metadata_;
}
inline ::nearby::internal::DeviceMetadata* LocalCredential::mutable_device_metadata() {
  ::nearby::internal::DeviceMetadata* _msg = _internal_mutable_device_metadata();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.device_metadata)
  return _msg;
}
inline void LocalCredential::set_allocated_device_metadata(::nearby::internal::DeviceMetadata* device_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_metadata_);
  }
  if (device_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_metadata));
    if (message_arena != submessage_arena) {
      device_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_metadata_ = device_metadata;
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.device_metadata)
}

// -------------------------------------------------------------------

// SharedCredential

// optional .nearby.internal.IdentityType identity_type = 1;
inline bool SharedCredential::_internal_has_identity_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharedCredential::has_identity_type() const {
  return _internal_has_identity_type();
}
inline void SharedCredential::clear_identity_type() {
  identity_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::nearby::internal::IdentityType SharedCredential::_internal_identity_type() const {
  return static_cast< ::nearby::internal::IdentityType >(identity_type_);
}
inline ::nearby::internal::IdentityType SharedCredential::identity_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.identity_type)
  return _internal_identity_type();
}
inline void SharedCredential::_internal_set_identity_type(::nearby::internal::IdentityType value) {
  _has_bits_[0] |= 0x00000080u;
  identity_type_ = value;
}
inline void SharedCredential::set_identity_type(::nearby::internal::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.identity_type)
}

// optional bytes secret_id = 2;
inline bool SharedCredential::_internal_has_secret_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharedCredential::has_secret_id() const {
  return _internal_has_secret_id();
}
inline void SharedCredential::clear_secret_id() {
  secret_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharedCredential::secret_id() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.secret_id)
  return _internal_secret_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedCredential::set_secret_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 secret_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.secret_id)
}
inline std::string* SharedCredential::mutable_secret_id() {
  std::string* _s = _internal_mutable_secret_id();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.secret_id)
  return _s;
}
inline const std::string& SharedCredential::_internal_secret_id() const {
  return secret_id_.Get();
}
inline void SharedCredential::_internal_set_secret_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  secret_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharedCredential::_internal_mutable_secret_id() {
  _has_bits_[0] |= 0x00000001u;
  return secret_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharedCredential::release_secret_id() {
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.secret_id)
  if (!_internal_has_secret_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = secret_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharedCredential::set_allocated_secret_id(std::string* secret_id) {
  if (secret_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secret_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.secret_id)
}

// optional bytes authenticity_key = 3;
inline bool SharedCredential::_internal_has_authenticity_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharedCredential::has_authenticity_key() const {
  return _internal_has_authenticity_key();
}
inline void SharedCredential::clear_authenticity_key() {
  authenticity_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharedCredential::authenticity_key() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.authenticity_key)
  return _internal_authenticity_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedCredential::set_authenticity_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 authenticity_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.authenticity_key)
}
inline std::string* SharedCredential::mutable_authenticity_key() {
  std::string* _s = _internal_mutable_authenticity_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.authenticity_key)
  return _s;
}
inline const std::string& SharedCredential::_internal_authenticity_key() const {
  return authenticity_key_.Get();
}
inline void SharedCredential::_internal_set_authenticity_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  authenticity_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharedCredential::_internal_mutable_authenticity_key() {
  _has_bits_[0] |= 0x00000002u;
  return authenticity_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharedCredential::release_authenticity_key() {
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.authenticity_key)
  if (!_internal_has_authenticity_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = authenticity_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticity_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharedCredential::set_allocated_authenticity_key(std::string* authenticity_key) {
  if (authenticity_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  authenticity_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authenticity_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticity_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.authenticity_key)
}

// optional bytes verification_key = 4;
inline bool SharedCredential::_internal_has_verification_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharedCredential::has_verification_key() const {
  return _internal_has_verification_key();
}
inline void SharedCredential::clear_verification_key() {
  verification_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SharedCredential::verification_key() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.verification_key)
  return _internal_verification_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedCredential::set_verification_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 verification_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.verification_key)
}
inline std::string* SharedCredential::mutable_verification_key() {
  std::string* _s = _internal_mutable_verification_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.verification_key)
  return _s;
}
inline const std::string& SharedCredential::_internal_verification_key() const {
  return verification_key_.Get();
}
inline void SharedCredential::_internal_set_verification_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  verification_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharedCredential::_internal_mutable_verification_key() {
  _has_bits_[0] |= 0x00000004u;
  return verification_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharedCredential::release_verification_key() {
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.verification_key)
  if (!_internal_has_verification_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = verification_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharedCredential::set_allocated_verification_key(std::string* verification_key) {
  if (verification_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  verification_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.verification_key)
}

// optional uint64 start_time_millis = 5;
inline bool SharedCredential::_internal_has_start_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharedCredential::has_start_time_millis() const {
  return _internal_has_start_time_millis();
}
inline void SharedCredential::clear_start_time_millis() {
  start_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t SharedCredential::_internal_start_time_millis() const {
  return start_time_millis_;
}
inline uint64_t SharedCredential::start_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.start_time_millis)
  return _internal_start_time_millis();
}
inline void SharedCredential::_internal_set_start_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  start_time_millis_ = value;
}
inline void SharedCredential::set_start_time_millis(uint64_t value) {
  _internal_set_start_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.start_time_millis)
}

// optional uint64 end_time_millis = 6;
inline bool SharedCredential::_internal_has_end_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharedCredential::has_end_time_millis() const {
  return _internal_has_end_time_millis();
}
inline void SharedCredential::clear_end_time_millis() {
  end_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t SharedCredential::_internal_end_time_millis() const {
  return end_time_millis_;
}
inline uint64_t SharedCredential::end_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.end_time_millis)
  return _internal_end_time_millis();
}
inline void SharedCredential::_internal_set_end_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  end_time_millis_ = value;
}
inline void SharedCredential::set_end_time_millis(uint64_t value) {
  _internal_set_end_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.end_time_millis)
}

// optional bytes encrypted_metadata_bytes = 7;
inline bool SharedCredential::_internal_has_encrypted_metadata_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharedCredential::has_encrypted_metadata_bytes() const {
  return _internal_has_encrypted_metadata_bytes();
}
inline void SharedCredential::clear_encrypted_metadata_bytes() {
  encrypted_metadata_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SharedCredential::encrypted_metadata_bytes() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.encrypted_metadata_bytes)
  return _internal_encrypted_metadata_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedCredential::set_encrypted_metadata_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 encrypted_metadata_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.encrypted_metadata_bytes)
}
inline std::string* SharedCredential::mutable_encrypted_metadata_bytes() {
  std::string* _s = _internal_mutable_encrypted_metadata_bytes();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.encrypted_metadata_bytes)
  return _s;
}
inline const std::string& SharedCredential::_internal_encrypted_metadata_bytes() const {
  return encrypted_metadata_bytes_.Get();
}
inline void SharedCredential::_internal_set_encrypted_metadata_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  encrypted_metadata_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharedCredential::_internal_mutable_encrypted_metadata_bytes() {
  _has_bits_[0] |= 0x00000008u;
  return encrypted_metadata_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharedCredential::release_encrypted_metadata_bytes() {
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.encrypted_metadata_bytes)
  if (!_internal_has_encrypted_metadata_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = encrypted_metadata_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_metadata_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_metadata_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharedCredential::set_allocated_encrypted_metadata_bytes(std::string* encrypted_metadata_bytes) {
  if (encrypted_metadata_bytes != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  encrypted_metadata_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_metadata_bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_metadata_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_metadata_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.encrypted_metadata_bytes)
}

// optional bytes metadata_encryption_key_tag = 8;
inline bool SharedCredential::_internal_has_metadata_encryption_key_tag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharedCredential::has_metadata_encryption_key_tag() const {
  return _internal_has_metadata_encryption_key_tag();
}
inline void SharedCredential::clear_metadata_encryption_key_tag() {
  metadata_encryption_key_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SharedCredential::metadata_encryption_key_tag() const {
  // @@protoc_insertion_point(field_get:nearby.internal.SharedCredential.metadata_encryption_key_tag)
  return _internal_metadata_encryption_key_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedCredential::set_metadata_encryption_key_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 metadata_encryption_key_tag_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.SharedCredential.metadata_encryption_key_tag)
}
inline std::string* SharedCredential::mutable_metadata_encryption_key_tag() {
  std::string* _s = _internal_mutable_metadata_encryption_key_tag();
  // @@protoc_insertion_point(field_mutable:nearby.internal.SharedCredential.metadata_encryption_key_tag)
  return _s;
}
inline const std::string& SharedCredential::_internal_metadata_encryption_key_tag() const {
  return metadata_encryption_key_tag_.Get();
}
inline void SharedCredential::_internal_set_metadata_encryption_key_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  metadata_encryption_key_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SharedCredential::_internal_mutable_metadata_encryption_key_tag() {
  _has_bits_[0] |= 0x00000010u;
  return metadata_encryption_key_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SharedCredential::release_metadata_encryption_key_tag() {
  // @@protoc_insertion_point(field_release:nearby.internal.SharedCredential.metadata_encryption_key_tag)
  if (!_internal_has_metadata_encryption_key_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = metadata_encryption_key_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_encryption_key_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_encryption_key_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharedCredential::set_allocated_metadata_encryption_key_tag(std::string* metadata_encryption_key_tag) {
  if (metadata_encryption_key_tag != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  metadata_encryption_key_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_encryption_key_tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_encryption_key_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_encryption_key_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.SharedCredential.metadata_encryption_key_tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace nearby

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nearby::internal::IdentityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nearby::internal::IdentityType>() {
  return ::nearby::internal::IdentityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fcredential_2eproto
