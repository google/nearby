// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/local_credential.proto

#include "internal/proto/local_credential.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nearby {
namespace internal {

inline constexpr LocalCredential_PrivateKey::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : certificate_alias_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LocalCredential_PrivateKey::LocalCredential_PrivateKey(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LocalCredential_PrivateKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCredential_PrivateKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCredential_PrivateKeyDefaultTypeInternal() {}
  union {
    LocalCredential_PrivateKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCredential_PrivateKeyDefaultTypeInternal _LocalCredential_PrivateKey_default_instance_;

inline constexpr LocalCredential::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        consumed_salts_{},
        secret_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_seed_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_encryption_key_v0_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_encryption_key_v1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        advertisement_signing_key_{nullptr},
        connection_signing_key_{nullptr},
        start_time_millis_{::int64_t{0}},
        end_time_millis_{::int64_t{0}},
        id_{::int64_t{0}},
        identity_type_{static_cast< ::nearby::internal::IdentityType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LocalCredential::LocalCredential(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LocalCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCredentialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCredentialDefaultTypeInternal() {}
  union {
    LocalCredential _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCredentialDefaultTypeInternal _LocalCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace nearby {
namespace internal {
// ===================================================================

class LocalCredential_PrivateKey::_Internal {
 public:
};

LocalCredential_PrivateKey::LocalCredential_PrivateKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.LocalCredential.PrivateKey)
}
inline PROTOBUF_NDEBUG_INLINE LocalCredential_PrivateKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : certificate_alias_(arena, from.certificate_alias_),
        key_(arena, from.key_),
        encrypted_key_(arena, from.encrypted_key_),
        _cached_size_{0} {}

LocalCredential_PrivateKey::LocalCredential_PrivateKey(
    ::google::protobuf::Arena* arena,
    const LocalCredential_PrivateKey& from)
    : ::google::protobuf::MessageLite(arena) {
  LocalCredential_PrivateKey* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:nearby.internal.LocalCredential.PrivateKey)
}
inline PROTOBUF_NDEBUG_INLINE LocalCredential_PrivateKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : certificate_alias_(arena),
        key_(arena),
        encrypted_key_(arena),
        _cached_size_{0} {}

inline void LocalCredential_PrivateKey::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LocalCredential_PrivateKey::~LocalCredential_PrivateKey() {
  // @@protoc_insertion_point(destructor:nearby.internal.LocalCredential.PrivateKey)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void LocalCredential_PrivateKey::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.certificate_alias_.Destroy();
  _impl_.key_.Destroy();
  _impl_.encrypted_key_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LocalCredential_PrivateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.LocalCredential.PrivateKey)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.certificate_alias_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.encrypted_key_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCredential_PrivateKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 68, 2> LocalCredential_PrivateKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LocalCredential_PrivateKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string certificate_alias = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.certificate_alias_)}},
    // bytes key = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.key_)}},
    // bytes encrypted_key = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.encrypted_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string certificate_alias = 1;
    {PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.certificate_alias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes key = 2;
    {PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes encrypted_key = 3;
    {PROTOBUF_FIELD_OFFSET(LocalCredential_PrivateKey, _impl_.encrypted_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\21\0\0\0\0\0\0"
    "nearby.internal.LocalCredential.PrivateKey"
    "certificate_alias"
  }},
};

::uint8_t* LocalCredential_PrivateKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.LocalCredential.PrivateKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string certificate_alias = 1;
  if (!this->_internal_certificate_alias().empty()) {
    const std::string& _s = this->_internal_certificate_alias();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nearby.internal.LocalCredential.PrivateKey.certificate_alias");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes encrypted_key = 3;
  if (!this->_internal_encrypted_key().empty()) {
    const std::string& _s = this->_internal_encrypted_key();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.LocalCredential.PrivateKey)
  return target;
}

::size_t LocalCredential_PrivateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.LocalCredential.PrivateKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certificate_alias = 1;
  if (!this->_internal_certificate_alias().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_certificate_alias());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes encrypted_key = 3;
  if (!this->_internal_encrypted_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void LocalCredential_PrivateKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCredential_PrivateKey*>(
      &from));
}

void LocalCredential_PrivateKey::MergeFrom(const LocalCredential_PrivateKey& from) {
  LocalCredential_PrivateKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.LocalCredential.PrivateKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_certificate_alias().empty()) {
    _this->_internal_set_certificate_alias(from._internal_certificate_alias());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_encrypted_key().empty()) {
    _this->_internal_set_encrypted_key(from._internal_encrypted_key());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCredential_PrivateKey::CopyFrom(const LocalCredential_PrivateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.LocalCredential.PrivateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LocalCredential_PrivateKey::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LocalCredential_PrivateKey::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LocalCredential_PrivateKey::InternalSwap(LocalCredential_PrivateKey* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.certificate_alias_, &other->_impl_.certificate_alias_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_key_, &other->_impl_.encrypted_key_, arena);
}

std::string LocalCredential_PrivateKey::GetTypeName() const {
  return "nearby.internal.LocalCredential.PrivateKey";
}

// ===================================================================

// ===================================================================

class LocalCredential::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCredential>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_._has_bits_);
  static const ::nearby::internal::LocalCredential_PrivateKey& advertisement_signing_key(const LocalCredential* msg);
  static void set_has_advertisement_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::internal::LocalCredential_PrivateKey& connection_signing_key(const LocalCredential* msg);
  static void set_has_connection_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::_Internal::advertisement_signing_key(const LocalCredential* msg) {
  return *msg->_impl_.advertisement_signing_key_;
}
const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::_Internal::connection_signing_key(const LocalCredential* msg) {
  return *msg->_impl_.connection_signing_key_;
}
LocalCredential::LocalCredential(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.LocalCredential)
}
inline PROTOBUF_NDEBUG_INLINE LocalCredential::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        consumed_salts_{visibility, arena, from.consumed_salts_},
        secret_id_(arena, from.secret_id_),
        key_seed_(arena, from.key_seed_),
        metadata_encryption_key_v0_(arena, from.metadata_encryption_key_v0_),
        metadata_encryption_key_v1_(arena, from.metadata_encryption_key_v1_),
        signature_version_(arena, from.signature_version_) {}

LocalCredential::LocalCredential(
    ::google::protobuf::Arena* arena,
    const LocalCredential& from)
    : ::google::protobuf::MessageLite(arena) {
  LocalCredential* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.advertisement_signing_key_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::nearby::internal::LocalCredential_PrivateKey>(arena, *from._impl_.advertisement_signing_key_)
                : nullptr;
  _impl_.connection_signing_key_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::nearby::internal::LocalCredential_PrivateKey>(arena, *from._impl_.connection_signing_key_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_millis_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_millis_),
           offsetof(Impl_, identity_type_) -
               offsetof(Impl_, start_time_millis_) +
               sizeof(Impl_::identity_type_));

  // @@protoc_insertion_point(copy_constructor:nearby.internal.LocalCredential)
}
inline PROTOBUF_NDEBUG_INLINE LocalCredential::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        consumed_salts_{visibility, arena},
        secret_id_(arena),
        key_seed_(arena),
        metadata_encryption_key_v0_(arena),
        metadata_encryption_key_v1_(arena),
        signature_version_(arena) {}

inline void LocalCredential::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, advertisement_signing_key_),
           0,
           offsetof(Impl_, identity_type_) -
               offsetof(Impl_, advertisement_signing_key_) +
               sizeof(Impl_::identity_type_));
}
LocalCredential::~LocalCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.LocalCredential)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void LocalCredential::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.secret_id_.Destroy();
  _impl_.key_seed_.Destroy();
  _impl_.metadata_encryption_key_v0_.Destroy();
  _impl_.metadata_encryption_key_v1_.Destroy();
  _impl_.signature_version_.Destroy();
  delete _impl_.advertisement_signing_key_;
  delete _impl_.connection_signing_key_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LocalCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.LocalCredential)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumed_salts_.Clear();
  _impl_.secret_id_.ClearToEmpty();
  _impl_.key_seed_.ClearToEmpty();
  _impl_.metadata_encryption_key_v0_.ClearToEmpty();
  _impl_.metadata_encryption_key_v1_.ClearToEmpty();
  _impl_.signature_version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.advertisement_signing_key_ != nullptr);
      _impl_.advertisement_signing_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.connection_signing_key_ != nullptr);
      _impl_.connection_signing_key_->Clear();
    }
  }
  ::memset(&_impl_.start_time_millis_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.identity_type_) -
      reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCredential::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 65, 2> LocalCredential::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LocalCredential_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes secret_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.secret_id_)}},
    // bytes key_seed = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.key_seed_)}},
    // int64 start_time_millis = 3;
    {::_pbi::TcParser::FastV64S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.start_time_millis_)}},
    // int64 end_time_millis = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.end_time_millis_)}},
    // bytes metadata_encryption_key_v0 = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.metadata_encryption_key_v0_)}},
    // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.advertisement_signing_key_)}},
    // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.connection_signing_key_)}},
    // .nearby.internal.IdentityType identity_type = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.identity_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes metadata_encryption_key_v1 = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.metadata_encryption_key_v1_)}},
    // int64 id = 11;
    {::_pbi::TcParser::FastV64S1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.id_)}},
    // string signature_version = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.signature_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes secret_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.secret_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes key_seed = 2;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.key_seed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 start_time_millis = 3;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.start_time_millis_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 end_time_millis = 4;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.end_time_millis_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes metadata_encryption_key_v0 = 5;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.metadata_encryption_key_v0_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.advertisement_signing_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.connection_signing_key_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nearby.internal.IdentityType identity_type = 8;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.identity_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<uint32, bool> consumed_salts = 9;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.consumed_salts_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bytes metadata_encryption_key_v1 = 10;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.metadata_encryption_key_v1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 id = 11;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string signature_version = 12;
    {PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.signature_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nearby::internal::LocalCredential_PrivateKey>()},
    {::_pbi::TcParser::GetTable<::nearby::internal::LocalCredential_PrivateKey>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(LocalCredential()._impl_.consumed_salts_)>(
        1, 0, 0, 13,
        8)},
  }}, {{
    "\37\0\0\0\0\0\0\0\0\0\0\0\21\0\0\0"
    "nearby.internal.LocalCredential"
    "signature_version"
  }},
};

::uint8_t* LocalCredential::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.LocalCredential)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes secret_id = 1 [deprecated = true];
  if (!this->_internal_secret_id().empty()) {
    const std::string& _s = this->_internal_secret_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    const std::string& _s = this->_internal_key_seed();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_start_time_millis(), target);
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_end_time_millis(), target);
  }

  // bytes metadata_encryption_key_v0 = 5;
  if (!this->_internal_metadata_encryption_key_v0().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_v0();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::advertisement_signing_key(this),
        _Internal::advertisement_signing_key(this).GetCachedSize(), target, stream);
  }

  // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::connection_signing_key(this),
        _Internal::connection_signing_key(this).GetCachedSize(), target, stream);
  }

  // .nearby.internal.IdentityType identity_type = 8;
  if (this->_internal_identity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_identity_type(), target);
  }

  // map<uint32, bool> consumed_salts = 9;
  if (!_internal_consumed_salts().empty()) {
    using MapType = ::google::protobuf::Map<::uint32_t, bool>;
    using WireHelper = _pbi::MapEntryFuncs<::uint32_t, bool,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_BOOL>;
    const auto& field = _internal_consumed_salts();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            9, entry.first, entry.second, target, stream);
      }
    }
  }

  // bytes metadata_encryption_key_v1 = 10;
  if (!this->_internal_metadata_encryption_key_v1().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_v1();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // int64 id = 11;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<11>(
            stream, this->_internal_id(), target);
  }

  // string signature_version = 12;
  if (!this->_internal_signature_version().empty()) {
    const std::string& _s = this->_internal_signature_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nearby.internal.LocalCredential.signature_version");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.LocalCredential)
  return target;
}

::size_t LocalCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.LocalCredential)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> consumed_salts = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_consumed_salts_size());
  for (const auto& entry : _internal_consumed_salts()) {
    total_size += _pbi::MapEntryFuncs<::uint32_t, bool,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_BOOL>::ByteSizeLong(entry.first, entry.second);
  }
  // bytes secret_id = 1 [deprecated = true];
  if (!this->_internal_secret_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_id());
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_key_seed());
  }

  // bytes metadata_encryption_key_v0 = 5;
  if (!this->_internal_metadata_encryption_key_v0().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_v0());
  }

  // bytes metadata_encryption_key_v1 = 10;
  if (!this->_internal_metadata_encryption_key_v1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_v1());
  }

  // string signature_version = 12;
  if (!this->_internal_signature_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_signature_version());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.advertisement_signing_key_);
    }

    // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.connection_signing_key_);
    }

  }
  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time_millis());
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time_millis());
  }

  // int64 id = 11;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // .nearby.internal.IdentityType identity_type = 8;
  if (this->_internal_identity_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void LocalCredential::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCredential*>(
      &from));
}

void LocalCredential::MergeFrom(const LocalCredential& from) {
  LocalCredential* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.LocalCredential)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumed_salts_.MergeFrom(from._impl_.consumed_salts_);
  if (!from._internal_secret_id().empty()) {
    _this->_internal_set_secret_id(from._internal_secret_id());
  }
  if (!from._internal_key_seed().empty()) {
    _this->_internal_set_key_seed(from._internal_key_seed());
  }
  if (!from._internal_metadata_encryption_key_v0().empty()) {
    _this->_internal_set_metadata_encryption_key_v0(from._internal_metadata_encryption_key_v0());
  }
  if (!from._internal_metadata_encryption_key_v1().empty()) {
    _this->_internal_set_metadata_encryption_key_v1(from._internal_metadata_encryption_key_v1());
  }
  if (!from._internal_signature_version().empty()) {
    _this->_internal_set_signature_version(from._internal_signature_version());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_advertisement_signing_key()->::nearby::internal::LocalCredential_PrivateKey::MergeFrom(
          from._internal_advertisement_signing_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_connection_signing_key()->::nearby::internal::LocalCredential_PrivateKey::MergeFrom(
          from._internal_connection_signing_key());
    }
  }
  if (from._internal_start_time_millis() != 0) {
    _this->_internal_set_start_time_millis(from._internal_start_time_millis());
  }
  if (from._internal_end_time_millis() != 0) {
    _this->_internal_set_end_time_millis(from._internal_end_time_millis());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_identity_type() != 0) {
    _this->_internal_set_identity_type(from._internal_identity_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCredential::CopyFrom(const LocalCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.LocalCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LocalCredential::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LocalCredential::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LocalCredential::InternalSwap(LocalCredential* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.consumed_salts_.InternalSwap(&other->_impl_.consumed_salts_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_id_, &other->_impl_.secret_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_seed_, &other->_impl_.key_seed_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_v0_, &other->_impl_.metadata_encryption_key_v0_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_v1_, &other->_impl_.metadata_encryption_key_v1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_version_, &other->_impl_.signature_version_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.identity_type_)
      + sizeof(LocalCredential::_impl_.identity_type_)
      - PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.advertisement_signing_key_)>(
          reinterpret_cast<char*>(&_impl_.advertisement_signing_key_),
          reinterpret_cast<char*>(&other->_impl_.advertisement_signing_key_));
}

std::string LocalCredential::GetTypeName() const {
  return "nearby.internal.LocalCredential";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
