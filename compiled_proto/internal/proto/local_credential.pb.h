// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/local_credential.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2flocal_5fcredential_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2flocal_5fcredential_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_field_lite.h"
#include "internal/proto/credential.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_internal_2fproto_2flocal_5fcredential_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2fproto_2flocal_5fcredential_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace internal {
class LocalCredential;
struct LocalCredentialDefaultTypeInternal;
extern LocalCredentialDefaultTypeInternal _LocalCredential_default_instance_;
class LocalCredential_PrivateKey;
struct LocalCredential_PrivateKeyDefaultTypeInternal;
extern LocalCredential_PrivateKeyDefaultTypeInternal _LocalCredential_PrivateKey_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nearby {
namespace internal {

// ===================================================================


// -------------------------------------------------------------------

class LocalCredential_PrivateKey final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:nearby.internal.LocalCredential.PrivateKey) */ {
 public:
  inline LocalCredential_PrivateKey() : LocalCredential_PrivateKey(nullptr) {}
  ~LocalCredential_PrivateKey() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocalCredential_PrivateKey(::google::protobuf::internal::ConstantInitialized);

  inline LocalCredential_PrivateKey(const LocalCredential_PrivateKey& from)
      : LocalCredential_PrivateKey(nullptr, from) {}
  LocalCredential_PrivateKey(LocalCredential_PrivateKey&& from) noexcept
    : LocalCredential_PrivateKey() {
    *this = ::std::move(from);
  }

  inline LocalCredential_PrivateKey& operator=(const LocalCredential_PrivateKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCredential_PrivateKey& operator=(LocalCredential_PrivateKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCredential_PrivateKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCredential_PrivateKey* internal_default_instance() {
    return reinterpret_cast<const LocalCredential_PrivateKey*>(
               &_LocalCredential_PrivateKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalCredential_PrivateKey& a, LocalCredential_PrivateKey& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCredential_PrivateKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCredential_PrivateKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCredential_PrivateKey* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCredential_PrivateKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const LocalCredential_PrivateKey& from);
  void MergeFrom(const LocalCredential_PrivateKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LocalCredential_PrivateKey* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.internal.LocalCredential.PrivateKey";
  }
  protected:
  explicit LocalCredential_PrivateKey(::google::protobuf::Arena* arena);
  LocalCredential_PrivateKey(::google::protobuf::Arena* arena, const LocalCredential_PrivateKey& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificateAliasFieldNumber = 1,
    kKeyFieldNumber = 2,
    kEncryptedKeyFieldNumber = 3,
  };
  // string certificate_alias = 1;
  void clear_certificate_alias() ;
  const std::string& certificate_alias() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_certificate_alias(Arg_&& arg, Args_... args);
  std::string* mutable_certificate_alias();
  PROTOBUF_NODISCARD std::string* release_certificate_alias();
  void set_allocated_certificate_alias(std::string* value);

  private:
  const std::string& _internal_certificate_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_certificate_alias(
      const std::string& value);
  std::string* _internal_mutable_certificate_alias();

  public:
  // bytes key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes encrypted_key = 3;
  void clear_encrypted_key() ;
  const std::string& encrypted_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_key(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_key();
  PROTOBUF_NODISCARD std::string* release_encrypted_key();
  void set_allocated_encrypted_key(std::string* value);

  private:
  const std::string& _internal_encrypted_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_key(
      const std::string& value);
  std::string* _internal_mutable_encrypted_key();

  public:
  // @@protoc_insertion_point(class_scope:nearby.internal.LocalCredential.PrivateKey)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr certificate_alias_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2fproto_2flocal_5fcredential_2eproto;
};// -------------------------------------------------------------------

// -------------------------------------------------------------------

class LocalCredential final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:nearby.internal.LocalCredential) */ {
 public:
  inline LocalCredential() : LocalCredential(nullptr) {}
  ~LocalCredential() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocalCredential(::google::protobuf::internal::ConstantInitialized);

  inline LocalCredential(const LocalCredential& from)
      : LocalCredential(nullptr, from) {}
  LocalCredential(LocalCredential&& from) noexcept
    : LocalCredential() {
    *this = ::std::move(from);
  }

  inline LocalCredential& operator=(const LocalCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCredential& operator=(LocalCredential&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCredential* internal_default_instance() {
    return reinterpret_cast<const LocalCredential*>(
               &_LocalCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalCredential& a, LocalCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCredential* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCredential* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCredential* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCredential>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const LocalCredential& from);
  void MergeFrom(const LocalCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LocalCredential* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.internal.LocalCredential";
  }
  protected:
  explicit LocalCredential(::google::protobuf::Arena* arena);
  LocalCredential(::google::protobuf::Arena* arena, const LocalCredential& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using PrivateKey = LocalCredential_PrivateKey;

  // accessors -------------------------------------------------------

  enum : int {
    kConsumedSaltsFieldNumber = 9,
    kSecretIdFieldNumber = 1,
    kKeySeedFieldNumber = 2,
    kMetadataEncryptionKeyV0FieldNumber = 5,
    kMetadataEncryptionKeyV1FieldNumber = 10,
    kSignatureVersionFieldNumber = 12,
    kAdvertisementSigningKeyFieldNumber = 6,
    kConnectionSigningKeyFieldNumber = 7,
    kStartTimeMillisFieldNumber = 3,
    kEndTimeMillisFieldNumber = 4,
    kIdFieldNumber = 11,
    kIdentityTypeFieldNumber = 8,
  };
  // map<uint32, bool> consumed_salts = 9;
  int consumed_salts_size() const;
  private:
  int _internal_consumed_salts_size() const;

  public:
  void clear_consumed_salts() ;
  const ::google::protobuf::Map<::uint32_t, bool>& consumed_salts() const;
  ::google::protobuf::Map<::uint32_t, bool>* mutable_consumed_salts();

  private:
  const ::google::protobuf::Map<::uint32_t, bool>& _internal_consumed_salts() const;
  ::google::protobuf::Map<::uint32_t, bool>* _internal_mutable_consumed_salts();

  public:
  // bytes secret_id = 1 [deprecated = true];
  [[deprecated]]  void clear_secret_id() ;
  [[deprecated]] const std::string& secret_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_secret_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_secret_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_secret_id();
  [[deprecated]] void set_allocated_secret_id(std::string* value);

  private:
  const std::string& _internal_secret_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_id(
      const std::string& value);
  std::string* _internal_mutable_secret_id();

  public:
  // bytes key_seed = 2;
  void clear_key_seed() ;
  const std::string& key_seed() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_seed(Arg_&& arg, Args_... args);
  std::string* mutable_key_seed();
  PROTOBUF_NODISCARD std::string* release_key_seed();
  void set_allocated_key_seed(std::string* value);

  private:
  const std::string& _internal_key_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_seed(
      const std::string& value);
  std::string* _internal_mutable_key_seed();

  public:
  // bytes metadata_encryption_key_v0 = 5;
  void clear_metadata_encryption_key_v0() ;
  const std::string& metadata_encryption_key_v0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_encryption_key_v0(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_encryption_key_v0();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key_v0();
  void set_allocated_metadata_encryption_key_v0(std::string* value);

  private:
  const std::string& _internal_metadata_encryption_key_v0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key_v0(
      const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key_v0();

  public:
  // bytes metadata_encryption_key_v1 = 10;
  void clear_metadata_encryption_key_v1() ;
  const std::string& metadata_encryption_key_v1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_encryption_key_v1(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_encryption_key_v1();
  PROTOBUF_NODISCARD std::string* release_metadata_encryption_key_v1();
  void set_allocated_metadata_encryption_key_v1(std::string* value);

  private:
  const std::string& _internal_metadata_encryption_key_v1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_encryption_key_v1(
      const std::string& value);
  std::string* _internal_mutable_metadata_encryption_key_v1();

  public:
  // string signature_version = 12;
  void clear_signature_version() ;
  const std::string& signature_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_version(Arg_&& arg, Args_... args);
  std::string* mutable_signature_version();
  PROTOBUF_NODISCARD std::string* release_signature_version();
  void set_allocated_signature_version(std::string* value);

  private:
  const std::string& _internal_signature_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_version(
      const std::string& value);
  std::string* _internal_mutable_signature_version();

  public:
  // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
  bool has_advertisement_signing_key() const;
  void clear_advertisement_signing_key() ;
  const ::nearby::internal::LocalCredential_PrivateKey& advertisement_signing_key() const;
  PROTOBUF_NODISCARD ::nearby::internal::LocalCredential_PrivateKey* release_advertisement_signing_key();
  ::nearby::internal::LocalCredential_PrivateKey* mutable_advertisement_signing_key();
  void set_allocated_advertisement_signing_key(::nearby::internal::LocalCredential_PrivateKey* value);
  void unsafe_arena_set_allocated_advertisement_signing_key(::nearby::internal::LocalCredential_PrivateKey* value);
  ::nearby::internal::LocalCredential_PrivateKey* unsafe_arena_release_advertisement_signing_key();

  private:
  const ::nearby::internal::LocalCredential_PrivateKey& _internal_advertisement_signing_key() const;
  ::nearby::internal::LocalCredential_PrivateKey* _internal_mutable_advertisement_signing_key();

  public:
  // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
  bool has_connection_signing_key() const;
  void clear_connection_signing_key() ;
  const ::nearby::internal::LocalCredential_PrivateKey& connection_signing_key() const;
  PROTOBUF_NODISCARD ::nearby::internal::LocalCredential_PrivateKey* release_connection_signing_key();
  ::nearby::internal::LocalCredential_PrivateKey* mutable_connection_signing_key();
  void set_allocated_connection_signing_key(::nearby::internal::LocalCredential_PrivateKey* value);
  void unsafe_arena_set_allocated_connection_signing_key(::nearby::internal::LocalCredential_PrivateKey* value);
  ::nearby::internal::LocalCredential_PrivateKey* unsafe_arena_release_connection_signing_key();

  private:
  const ::nearby::internal::LocalCredential_PrivateKey& _internal_connection_signing_key() const;
  ::nearby::internal::LocalCredential_PrivateKey* _internal_mutable_connection_signing_key();

  public:
  // int64 start_time_millis = 3;
  void clear_start_time_millis() ;
  ::int64_t start_time_millis() const;
  void set_start_time_millis(::int64_t value);

  private:
  ::int64_t _internal_start_time_millis() const;
  void _internal_set_start_time_millis(::int64_t value);

  public:
  // int64 end_time_millis = 4;
  void clear_end_time_millis() ;
  ::int64_t end_time_millis() const;
  void set_end_time_millis(::int64_t value);

  private:
  ::int64_t _internal_end_time_millis() const;
  void _internal_set_end_time_millis(::int64_t value);

  public:
  // int64 id = 11;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // .nearby.internal.IdentityType identity_type = 8;
  void clear_identity_type() ;
  ::nearby::internal::IdentityType identity_type() const;
  void set_identity_type(::nearby::internal::IdentityType value);

  private:
  ::nearby::internal::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::nearby::internal::IdentityType value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.internal.LocalCredential)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapFieldLite<::uint32_t, bool> consumed_salts_;
    ::google::protobuf::internal::ArenaStringPtr secret_id_;
    ::google::protobuf::internal::ArenaStringPtr key_seed_;
    ::google::protobuf::internal::ArenaStringPtr metadata_encryption_key_v0_;
    ::google::protobuf::internal::ArenaStringPtr metadata_encryption_key_v1_;
    ::google::protobuf::internal::ArenaStringPtr signature_version_;
    ::nearby::internal::LocalCredential_PrivateKey* advertisement_signing_key_;
    ::nearby::internal::LocalCredential_PrivateKey* connection_signing_key_;
    ::int64_t start_time_millis_;
    ::int64_t end_time_millis_;
    ::int64_t id_;
    int identity_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2fproto_2flocal_5fcredential_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LocalCredential_PrivateKey

// string certificate_alias = 1;
inline void LocalCredential_PrivateKey::clear_certificate_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.certificate_alias_.ClearToEmpty();
}
inline const std::string& LocalCredential_PrivateKey::certificate_alias() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.PrivateKey.certificate_alias)
  return _internal_certificate_alias();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential_PrivateKey::set_certificate_alias(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.certificate_alias_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.PrivateKey.certificate_alias)
}
inline std::string* LocalCredential_PrivateKey::mutable_certificate_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_certificate_alias();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.PrivateKey.certificate_alias)
  return _s;
}
inline const std::string& LocalCredential_PrivateKey::_internal_certificate_alias() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.certificate_alias_.Get();
}
inline void LocalCredential_PrivateKey::_internal_set_certificate_alias(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.certificate_alias_.Set(value, GetArena());
}
inline std::string* LocalCredential_PrivateKey::_internal_mutable_certificate_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.certificate_alias_.Mutable( GetArena());
}
inline std::string* LocalCredential_PrivateKey::release_certificate_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.PrivateKey.certificate_alias)
  return _impl_.certificate_alias_.Release();
}
inline void LocalCredential_PrivateKey::set_allocated_certificate_alias(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.certificate_alias_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.certificate_alias_.IsDefault()) {
          _impl_.certificate_alias_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.PrivateKey.certificate_alias)
}

// bytes key = 2;
inline void LocalCredential_PrivateKey::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LocalCredential_PrivateKey::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.PrivateKey.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential_PrivateKey::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.PrivateKey.key)
}
inline std::string* LocalCredential_PrivateKey::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.PrivateKey.key)
  return _s;
}
inline const std::string& LocalCredential_PrivateKey::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void LocalCredential_PrivateKey::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* LocalCredential_PrivateKey::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* LocalCredential_PrivateKey::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.PrivateKey.key)
  return _impl_.key_.Release();
}
inline void LocalCredential_PrivateKey::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.PrivateKey.key)
}

// bytes encrypted_key = 3;
inline void LocalCredential_PrivateKey::clear_encrypted_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_key_.ClearToEmpty();
}
inline const std::string& LocalCredential_PrivateKey::encrypted_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.PrivateKey.encrypted_key)
  return _internal_encrypted_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential_PrivateKey::set_encrypted_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.PrivateKey.encrypted_key)
}
inline std::string* LocalCredential_PrivateKey::mutable_encrypted_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.PrivateKey.encrypted_key)
  return _s;
}
inline const std::string& LocalCredential_PrivateKey::_internal_encrypted_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.encrypted_key_.Get();
}
inline void LocalCredential_PrivateKey::_internal_set_encrypted_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encrypted_key_.Set(value, GetArena());
}
inline std::string* LocalCredential_PrivateKey::_internal_mutable_encrypted_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.encrypted_key_.Mutable( GetArena());
}
inline std::string* LocalCredential_PrivateKey::release_encrypted_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.PrivateKey.encrypted_key)
  return _impl_.encrypted_key_.Release();
}
inline void LocalCredential_PrivateKey::set_allocated_encrypted_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encrypted_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encrypted_key_.IsDefault()) {
          _impl_.encrypted_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.PrivateKey.encrypted_key)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LocalCredential

// bytes secret_id = 1 [deprecated = true];
inline void LocalCredential::clear_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_id_.ClearToEmpty();
}
inline const std::string& LocalCredential::secret_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.secret_id)
  return _internal_secret_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential::set_secret_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.secret_id)
}
inline std::string* LocalCredential::mutable_secret_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret_id();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.secret_id)
  return _s;
}
inline const std::string& LocalCredential::_internal_secret_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_id_.Get();
}
inline void LocalCredential::_internal_set_secret_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_id_.Set(value, GetArena());
}
inline std::string* LocalCredential::_internal_mutable_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.secret_id_.Mutable( GetArena());
}
inline std::string* LocalCredential::release_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.secret_id)
  return _impl_.secret_id_.Release();
}
inline void LocalCredential::set_allocated_secret_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_id_.IsDefault()) {
          _impl_.secret_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.secret_id)
}

// bytes key_seed = 2;
inline void LocalCredential::clear_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_seed_.ClearToEmpty();
}
inline const std::string& LocalCredential::key_seed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.key_seed)
  return _internal_key_seed();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential::set_key_seed(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_seed_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.key_seed)
}
inline std::string* LocalCredential::mutable_key_seed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_seed();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.key_seed)
  return _s;
}
inline const std::string& LocalCredential::_internal_key_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_seed_.Get();
}
inline void LocalCredential::_internal_set_key_seed(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_seed_.Set(value, GetArena());
}
inline std::string* LocalCredential::_internal_mutable_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_seed_.Mutable( GetArena());
}
inline std::string* LocalCredential::release_key_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.key_seed)
  return _impl_.key_seed_.Release();
}
inline void LocalCredential::set_allocated_key_seed(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_seed_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_seed_.IsDefault()) {
          _impl_.key_seed_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.key_seed)
}

// int64 start_time_millis = 3;
inline void LocalCredential::clear_start_time_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_millis_ = ::int64_t{0};
}
inline ::int64_t LocalCredential::start_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.start_time_millis)
  return _internal_start_time_millis();
}
inline void LocalCredential::set_start_time_millis(::int64_t value) {
  _internal_set_start_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.start_time_millis)
}
inline ::int64_t LocalCredential::_internal_start_time_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_millis_;
}
inline void LocalCredential::_internal_set_start_time_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_millis_ = value;
}

// int64 end_time_millis = 4;
inline void LocalCredential::clear_end_time_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_millis_ = ::int64_t{0};
}
inline ::int64_t LocalCredential::end_time_millis() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.end_time_millis)
  return _internal_end_time_millis();
}
inline void LocalCredential::set_end_time_millis(::int64_t value) {
  _internal_set_end_time_millis(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.end_time_millis)
}
inline ::int64_t LocalCredential::_internal_end_time_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_millis_;
}
inline void LocalCredential::_internal_set_end_time_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_millis_ = value;
}

// bytes metadata_encryption_key_v0 = 5;
inline void LocalCredential::clear_metadata_encryption_key_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_v0_.ClearToEmpty();
}
inline const std::string& LocalCredential::metadata_encryption_key_v0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.metadata_encryption_key_v0)
  return _internal_metadata_encryption_key_v0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential::set_metadata_encryption_key_v0(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_v0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.metadata_encryption_key_v0)
}
inline std::string* LocalCredential::mutable_metadata_encryption_key_v0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_encryption_key_v0();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.metadata_encryption_key_v0)
  return _s;
}
inline const std::string& LocalCredential::_internal_metadata_encryption_key_v0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_encryption_key_v0_.Get();
}
inline void LocalCredential::_internal_set_metadata_encryption_key_v0(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_v0_.Set(value, GetArena());
}
inline std::string* LocalCredential::_internal_mutable_metadata_encryption_key_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_encryption_key_v0_.Mutable( GetArena());
}
inline std::string* LocalCredential::release_metadata_encryption_key_v0() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.metadata_encryption_key_v0)
  return _impl_.metadata_encryption_key_v0_.Release();
}
inline void LocalCredential::set_allocated_metadata_encryption_key_v0(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_v0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_encryption_key_v0_.IsDefault()) {
          _impl_.metadata_encryption_key_v0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.metadata_encryption_key_v0)
}

// .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
inline bool LocalCredential::has_advertisement_signing_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advertisement_signing_key_ != nullptr);
  return value;
}
inline void LocalCredential::clear_advertisement_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.advertisement_signing_key_ != nullptr) _impl_.advertisement_signing_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::_internal_advertisement_signing_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nearby::internal::LocalCredential_PrivateKey* p = _impl_.advertisement_signing_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::internal::LocalCredential_PrivateKey&>(::nearby::internal::_LocalCredential_PrivateKey_default_instance_);
}
inline const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::advertisement_signing_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.advertisement_signing_key)
  return _internal_advertisement_signing_key();
}
inline void LocalCredential::unsafe_arena_set_allocated_advertisement_signing_key(::nearby::internal::LocalCredential_PrivateKey* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.advertisement_signing_key_);
  }
  _impl_.advertisement_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.internal.LocalCredential.advertisement_signing_key)
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::release_advertisement_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::internal::LocalCredential_PrivateKey* released = _impl_.advertisement_signing_key_;
  _impl_.advertisement_signing_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::unsafe_arena_release_advertisement_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.advertisement_signing_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::internal::LocalCredential_PrivateKey* temp = _impl_.advertisement_signing_key_;
  _impl_.advertisement_signing_key_ = nullptr;
  return temp;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::_internal_mutable_advertisement_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advertisement_signing_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::internal::LocalCredential_PrivateKey>(GetArena());
    _impl_.advertisement_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(p);
  }
  return _impl_.advertisement_signing_key_;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::mutable_advertisement_signing_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nearby::internal::LocalCredential_PrivateKey* _msg = _internal_mutable_advertisement_signing_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.advertisement_signing_key)
  return _msg;
}
inline void LocalCredential::set_allocated_advertisement_signing_key(::nearby::internal::LocalCredential_PrivateKey* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(_impl_.advertisement_signing_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.advertisement_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value);
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.advertisement_signing_key)
}

// .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
inline bool LocalCredential::has_connection_signing_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_signing_key_ != nullptr);
  return value;
}
inline void LocalCredential::clear_connection_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.connection_signing_key_ != nullptr) _impl_.connection_signing_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::_internal_connection_signing_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nearby::internal::LocalCredential_PrivateKey* p = _impl_.connection_signing_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::internal::LocalCredential_PrivateKey&>(::nearby::internal::_LocalCredential_PrivateKey_default_instance_);
}
inline const ::nearby::internal::LocalCredential_PrivateKey& LocalCredential::connection_signing_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.connection_signing_key)
  return _internal_connection_signing_key();
}
inline void LocalCredential::unsafe_arena_set_allocated_connection_signing_key(::nearby::internal::LocalCredential_PrivateKey* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_signing_key_);
  }
  _impl_.connection_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.internal.LocalCredential.connection_signing_key)
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::release_connection_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nearby::internal::LocalCredential_PrivateKey* released = _impl_.connection_signing_key_;
  _impl_.connection_signing_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::unsafe_arena_release_connection_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.connection_signing_key)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nearby::internal::LocalCredential_PrivateKey* temp = _impl_.connection_signing_key_;
  _impl_.connection_signing_key_ = nullptr;
  return temp;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::_internal_mutable_connection_signing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connection_signing_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::internal::LocalCredential_PrivateKey>(GetArena());
    _impl_.connection_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(p);
  }
  return _impl_.connection_signing_key_;
}
inline ::nearby::internal::LocalCredential_PrivateKey* LocalCredential::mutable_connection_signing_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nearby::internal::LocalCredential_PrivateKey* _msg = _internal_mutable_connection_signing_key();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.connection_signing_key)
  return _msg;
}
inline void LocalCredential::set_allocated_connection_signing_key(::nearby::internal::LocalCredential_PrivateKey* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(_impl_.connection_signing_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.connection_signing_key_ = reinterpret_cast<::nearby::internal::LocalCredential_PrivateKey*>(value);
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.connection_signing_key)
}

// .nearby.internal.IdentityType identity_type = 8;
inline void LocalCredential::clear_identity_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.identity_type_ = 0;
}
inline ::nearby::internal::IdentityType LocalCredential::identity_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.identity_type)
  return _internal_identity_type();
}
inline void LocalCredential::set_identity_type(::nearby::internal::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.identity_type)
}
inline ::nearby::internal::IdentityType LocalCredential::_internal_identity_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::nearby::internal::IdentityType>(_impl_.identity_type_);
}
inline void LocalCredential::_internal_set_identity_type(::nearby::internal::IdentityType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.identity_type_ = value;
}

// map<uint32, bool> consumed_salts = 9;
inline int LocalCredential::_internal_consumed_salts_size() const {
  return _internal_consumed_salts().size();
}
inline int LocalCredential::consumed_salts_size() const {
  return _internal_consumed_salts_size();
}
inline void LocalCredential::clear_consumed_salts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consumed_salts_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, bool>& LocalCredential::_internal_consumed_salts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.consumed_salts_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, bool>& LocalCredential::consumed_salts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nearby.internal.LocalCredential.consumed_salts)
  return _internal_consumed_salts();
}
inline ::google::protobuf::Map<::uint32_t, bool>* LocalCredential::_internal_mutable_consumed_salts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.consumed_salts_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, bool>* LocalCredential::mutable_consumed_salts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nearby.internal.LocalCredential.consumed_salts)
  return _internal_mutable_consumed_salts();
}

// bytes metadata_encryption_key_v1 = 10;
inline void LocalCredential::clear_metadata_encryption_key_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_v1_.ClearToEmpty();
}
inline const std::string& LocalCredential::metadata_encryption_key_v1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.metadata_encryption_key_v1)
  return _internal_metadata_encryption_key_v1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential::set_metadata_encryption_key_v1(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_v1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.metadata_encryption_key_v1)
}
inline std::string* LocalCredential::mutable_metadata_encryption_key_v1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_encryption_key_v1();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.metadata_encryption_key_v1)
  return _s;
}
inline const std::string& LocalCredential::_internal_metadata_encryption_key_v1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_encryption_key_v1_.Get();
}
inline void LocalCredential::_internal_set_metadata_encryption_key_v1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_encryption_key_v1_.Set(value, GetArena());
}
inline std::string* LocalCredential::_internal_mutable_metadata_encryption_key_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_encryption_key_v1_.Mutable( GetArena());
}
inline std::string* LocalCredential::release_metadata_encryption_key_v1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.metadata_encryption_key_v1)
  return _impl_.metadata_encryption_key_v1_.Release();
}
inline void LocalCredential::set_allocated_metadata_encryption_key_v1(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_encryption_key_v1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_encryption_key_v1_.IsDefault()) {
          _impl_.metadata_encryption_key_v1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.metadata_encryption_key_v1)
}

// int64 id = 11;
inline void LocalCredential::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t LocalCredential::id() const {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.id)
  return _internal_id();
}
inline void LocalCredential::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.id)
}
inline ::int64_t LocalCredential::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void LocalCredential::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string signature_version = 12;
inline void LocalCredential::clear_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_version_.ClearToEmpty();
}
inline const std::string& LocalCredential::signature_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nearby.internal.LocalCredential.signature_version)
  return _internal_signature_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalCredential::set_signature_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nearby.internal.LocalCredential.signature_version)
}
inline std::string* LocalCredential::mutable_signature_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature_version();
  // @@protoc_insertion_point(field_mutable:nearby.internal.LocalCredential.signature_version)
  return _s;
}
inline const std::string& LocalCredential::_internal_signature_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_version_.Get();
}
inline void LocalCredential::_internal_set_signature_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_version_.Set(value, GetArena());
}
inline std::string* LocalCredential::_internal_mutable_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.signature_version_.Mutable( GetArena());
}
inline std::string* LocalCredential::release_signature_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nearby.internal.LocalCredential.signature_version)
  return _impl_.signature_version_.Release();
}
inline void LocalCredential::set_allocated_signature_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_version_.IsDefault()) {
          _impl_.signature_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.LocalCredential.signature_version)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2flocal_5fcredential_2eproto_2epb_2eh
