// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/credential.proto

#include "internal/proto/credential.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nearby {
namespace internal {

inline constexpr SharedCredential::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : secret_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_seed_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_metadata_bytes_v0_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_encryption_key_tag_v0_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_signature_verification_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        advertisement_signature_verification_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_metadata_bytes_v1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_encryption_key_unsigned_adv_tag_v1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dusi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_millis_{::int64_t{0}},
        end_time_millis_{::int64_t{0}},
        identity_type_{static_cast< ::nearby::internal::IdentityType >(0)},
        credential_type_{static_cast< ::nearby::internal::CredentialType >(0)},
        id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SharedCredential::SharedCredential(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SharedCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharedCredentialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharedCredentialDefaultTypeInternal() {}
  union {
    SharedCredential _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharedCredentialDefaultTypeInternal _SharedCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace nearby {
namespace internal {
PROTOBUF_CONSTINIT const uint32_t IdentityType_internal_data_[] = {
    327680u, 0u, };
bool IdentityType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IdentityType_strings[5] = {};

static const char IdentityType_names[] = {
    "IDENTITY_TYPE_PRIVATE"
    "IDENTITY_TYPE_PROVISIONED"
    "IDENTITY_TYPE_PUBLIC"
    "IDENTITY_TYPE_TRUSTED"
    "IDENTITY_TYPE_UNSPECIFIED"
};

static const ::google::protobuf::internal::EnumEntry IdentityType_entries[] =
    {
        {{&IdentityType_names[0], 21}, 1},
        {{&IdentityType_names[21], 25}, 4},
        {{&IdentityType_names[46], 20}, 3},
        {{&IdentityType_names[66], 21}, 2},
        {{&IdentityType_names[87], 25}, 0},
};

static const int IdentityType_entries_by_number[] = {
    4,  // 0 -> IDENTITY_TYPE_UNSPECIFIED
    0,  // 1 -> IDENTITY_TYPE_PRIVATE
    3,  // 2 -> IDENTITY_TYPE_TRUSTED
    2,  // 3 -> IDENTITY_TYPE_PUBLIC
    1,  // 4 -> IDENTITY_TYPE_PROVISIONED
};

const std::string& IdentityType_Name(IdentityType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IdentityType_entries, IdentityType_entries_by_number,
          5, IdentityType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IdentityType_entries, IdentityType_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IdentityType_strings[idx].get();
}

bool IdentityType_Parse(absl::string_view name, IdentityType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IdentityType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IdentityType>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t CredentialType_internal_data_[] = {
    196608u, 0u, };
bool CredentialType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    CredentialType_strings[3] = {};

static const char CredentialType_names[] = {
    "CREDENTIAL_TYPE_DEVICE"
    "CREDENTIAL_TYPE_GAIA"
    "CREDENTIAL_TYPE_UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry CredentialType_entries[] =
    {
        {{&CredentialType_names[0], 22}, 1},
        {{&CredentialType_names[22], 20}, 2},
        {{&CredentialType_names[42], 23}, 0},
};

static const int CredentialType_entries_by_number[] = {
    2,  // 0 -> CREDENTIAL_TYPE_UNKNOWN
    0,  // 1 -> CREDENTIAL_TYPE_DEVICE
    1,  // 2 -> CREDENTIAL_TYPE_GAIA
};

const std::string& CredentialType_Name(CredentialType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          CredentialType_entries, CredentialType_entries_by_number,
          3, CredentialType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      CredentialType_entries, CredentialType_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : CredentialType_strings[idx].get();
}

bool CredentialType_Parse(absl::string_view name, CredentialType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      CredentialType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CredentialType>(int_value);
  }
  return success;
}
// ===================================================================

class SharedCredential::_Internal {
 public:
};

SharedCredential::SharedCredential(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.SharedCredential)
}
inline PROTOBUF_NDEBUG_INLINE SharedCredential::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : secret_id_(arena, from.secret_id_),
        key_seed_(arena, from.key_seed_),
        encrypted_metadata_bytes_v0_(arena, from.encrypted_metadata_bytes_v0_),
        metadata_encryption_key_tag_v0_(arena, from.metadata_encryption_key_tag_v0_),
        connection_signature_verification_key_(arena, from.connection_signature_verification_key_),
        advertisement_signature_verification_key_(arena, from.advertisement_signature_verification_key_),
        version_(arena, from.version_),
        encrypted_metadata_bytes_v1_(arena, from.encrypted_metadata_bytes_v1_),
        metadata_encryption_key_unsigned_adv_tag_v1_(arena, from.metadata_encryption_key_unsigned_adv_tag_v1_),
        dusi_(arena, from.dusi_),
        signature_version_(arena, from.signature_version_),
        _cached_size_{0} {}

SharedCredential::SharedCredential(
    ::google::protobuf::Arena* arena,
    const SharedCredential& from)
    : ::google::protobuf::MessageLite(arena) {
  SharedCredential* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_millis_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_millis_),
           offsetof(Impl_, id_) -
               offsetof(Impl_, start_time_millis_) +
               sizeof(Impl_::id_));

  // @@protoc_insertion_point(copy_constructor:nearby.internal.SharedCredential)
}
inline PROTOBUF_NDEBUG_INLINE SharedCredential::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : secret_id_(arena),
        key_seed_(arena),
        encrypted_metadata_bytes_v0_(arena),
        metadata_encryption_key_tag_v0_(arena),
        connection_signature_verification_key_(arena),
        advertisement_signature_verification_key_(arena),
        version_(arena),
        encrypted_metadata_bytes_v1_(arena),
        metadata_encryption_key_unsigned_adv_tag_v1_(arena),
        dusi_(arena),
        signature_version_(arena),
        _cached_size_{0} {}

inline void SharedCredential::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_millis_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, start_time_millis_) +
               sizeof(Impl_::id_));
}
SharedCredential::~SharedCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.SharedCredential)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void SharedCredential::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.secret_id_.Destroy();
  _impl_.key_seed_.Destroy();
  _impl_.encrypted_metadata_bytes_v0_.Destroy();
  _impl_.metadata_encryption_key_tag_v0_.Destroy();
  _impl_.connection_signature_verification_key_.Destroy();
  _impl_.advertisement_signature_verification_key_.Destroy();
  _impl_.version_.Destroy();
  _impl_.encrypted_metadata_bytes_v1_.Destroy();
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Destroy();
  _impl_.dusi_.Destroy();
  _impl_.signature_version_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SharedCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.SharedCredential)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secret_id_.ClearToEmpty();
  _impl_.key_seed_.ClearToEmpty();
  _impl_.encrypted_metadata_bytes_v0_.ClearToEmpty();
  _impl_.metadata_encryption_key_tag_v0_.ClearToEmpty();
  _impl_.connection_signature_verification_key_.ClearToEmpty();
  _impl_.advertisement_signature_verification_key_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.encrypted_metadata_bytes_v1_.ClearToEmpty();
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.ClearToEmpty();
  _impl_.dusi_.ClearToEmpty();
  _impl_.signature_version_.ClearToEmpty();
  ::memset(&_impl_.start_time_millis_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<std::string>();
}

const char* SharedCredential::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 78, 2> SharedCredential::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SharedCredential_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // string signature_version = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.signature_version_)}},
    // bytes secret_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.secret_id_)}},
    // bytes key_seed = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.key_seed_)}},
    // int64 start_time_millis = 3;
    {::_pbi::TcParser::FastV64S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.start_time_millis_)}},
    // int64 end_time_millis = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.end_time_millis_)}},
    // bytes encrypted_metadata_bytes_v0 = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.encrypted_metadata_bytes_v0_)}},
    // bytes metadata_encryption_key_tag_v0 = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.metadata_encryption_key_tag_v0_)}},
    // bytes connection_signature_verification_key = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.connection_signature_verification_key_)}},
    // bytes advertisement_signature_verification_key = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.advertisement_signature_verification_key_)}},
    // .nearby.internal.IdentityType identity_type = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.identity_type_)}},
    // bytes version = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.version_)}},
    // .nearby.internal.CredentialType credential_type = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.credential_type_)}},
    // bytes encrypted_metadata_bytes_v1 = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.encrypted_metadata_bytes_v1_)}},
    // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
    {::_pbi::TcParser::FastBS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.metadata_encryption_key_unsigned_adv_tag_v1_)}},
    // int64 id = 14;
    {::_pbi::TcParser::FastV64S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.id_)}},
    // string dusi = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.dusi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes secret_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.secret_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes key_seed = 2;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.key_seed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 start_time_millis = 3;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.start_time_millis_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 end_time_millis = 4;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.end_time_millis_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes encrypted_metadata_bytes_v0 = 5;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.encrypted_metadata_bytes_v0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes metadata_encryption_key_tag_v0 = 6;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.metadata_encryption_key_tag_v0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes connection_signature_verification_key = 7;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.connection_signature_verification_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes advertisement_signature_verification_key = 8;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.advertisement_signature_verification_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .nearby.internal.IdentityType identity_type = 9;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.identity_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes version = 10;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .nearby.internal.CredentialType credential_type = 11;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.credential_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes encrypted_metadata_bytes_v1 = 12;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.encrypted_metadata_bytes_v1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.metadata_encryption_key_unsigned_adv_tag_v1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 id = 14;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string dusi = 15;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.dusi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string signature_version = 16;
    {PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.signature_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\21\0\0\0\0\0\0\0"
    "nearby.internal.SharedCredential"
    "dusi"
    "signature_version"
  }},
};

::uint8_t* SharedCredential::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.SharedCredential)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes secret_id = 1 [deprecated = true];
  if (!this->_internal_secret_id().empty()) {
    const std::string& _s = this->_internal_secret_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    const std::string& _s = this->_internal_key_seed();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_start_time_millis(), target);
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_end_time_millis(), target);
  }

  // bytes encrypted_metadata_bytes_v0 = 5;
  if (!this->_internal_encrypted_metadata_bytes_v0().empty()) {
    const std::string& _s = this->_internal_encrypted_metadata_bytes_v0();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes metadata_encryption_key_tag_v0 = 6;
  if (!this->_internal_metadata_encryption_key_tag_v0().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_tag_v0();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes connection_signature_verification_key = 7;
  if (!this->_internal_connection_signature_verification_key().empty()) {
    const std::string& _s = this->_internal_connection_signature_verification_key();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes advertisement_signature_verification_key = 8;
  if (!this->_internal_advertisement_signature_verification_key().empty()) {
    const std::string& _s = this->_internal_advertisement_signature_verification_key();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // .nearby.internal.IdentityType identity_type = 9;
  if (this->_internal_identity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_identity_type(), target);
  }

  // bytes version = 10;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // .nearby.internal.CredentialType credential_type = 11;
  if (this->_internal_credential_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_credential_type(), target);
  }

  // bytes encrypted_metadata_bytes_v1 = 12;
  if (!this->_internal_encrypted_metadata_bytes_v1().empty()) {
    const std::string& _s = this->_internal_encrypted_metadata_bytes_v1();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
  if (!this->_internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_unsigned_adv_tag_v1();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // int64 id = 14;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<14>(
            stream, this->_internal_id(), target);
  }

  // string dusi = 15;
  if (!this->_internal_dusi().empty()) {
    const std::string& _s = this->_internal_dusi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nearby.internal.SharedCredential.dusi");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string signature_version = 16;
  if (!this->_internal_signature_version().empty()) {
    const std::string& _s = this->_internal_signature_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nearby.internal.SharedCredential.signature_version");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.SharedCredential)
  return target;
}

::size_t SharedCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.SharedCredential)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes secret_id = 1 [deprecated = true];
  if (!this->_internal_secret_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_id());
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_key_seed());
  }

  // bytes encrypted_metadata_bytes_v0 = 5;
  if (!this->_internal_encrypted_metadata_bytes_v0().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_metadata_bytes_v0());
  }

  // bytes metadata_encryption_key_tag_v0 = 6;
  if (!this->_internal_metadata_encryption_key_tag_v0().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_tag_v0());
  }

  // bytes connection_signature_verification_key = 7;
  if (!this->_internal_connection_signature_verification_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_connection_signature_verification_key());
  }

  // bytes advertisement_signature_verification_key = 8;
  if (!this->_internal_advertisement_signature_verification_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_advertisement_signature_verification_key());
  }

  // bytes version = 10;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_version());
  }

  // bytes encrypted_metadata_bytes_v1 = 12;
  if (!this->_internal_encrypted_metadata_bytes_v1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_metadata_bytes_v1());
  }

  // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
  if (!this->_internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_unsigned_adv_tag_v1());
  }

  // string dusi = 15;
  if (!this->_internal_dusi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_dusi());
  }

  // string signature_version = 16;
  if (!this->_internal_signature_version().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_signature_version());
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time_millis());
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time_millis());
  }

  // .nearby.internal.IdentityType identity_type = 9;
  if (this->_internal_identity_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
  }

  // .nearby.internal.CredentialType credential_type = 11;
  if (this->_internal_credential_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_credential_type());
  }

  // int64 id = 14;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void SharedCredential::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharedCredential*>(
      &from));
}

void SharedCredential::MergeFrom(const SharedCredential& from) {
  SharedCredential* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.SharedCredential)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret_id().empty()) {
    _this->_internal_set_secret_id(from._internal_secret_id());
  }
  if (!from._internal_key_seed().empty()) {
    _this->_internal_set_key_seed(from._internal_key_seed());
  }
  if (!from._internal_encrypted_metadata_bytes_v0().empty()) {
    _this->_internal_set_encrypted_metadata_bytes_v0(from._internal_encrypted_metadata_bytes_v0());
  }
  if (!from._internal_metadata_encryption_key_tag_v0().empty()) {
    _this->_internal_set_metadata_encryption_key_tag_v0(from._internal_metadata_encryption_key_tag_v0());
  }
  if (!from._internal_connection_signature_verification_key().empty()) {
    _this->_internal_set_connection_signature_verification_key(from._internal_connection_signature_verification_key());
  }
  if (!from._internal_advertisement_signature_verification_key().empty()) {
    _this->_internal_set_advertisement_signature_verification_key(from._internal_advertisement_signature_verification_key());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_encrypted_metadata_bytes_v1().empty()) {
    _this->_internal_set_encrypted_metadata_bytes_v1(from._internal_encrypted_metadata_bytes_v1());
  }
  if (!from._internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    _this->_internal_set_metadata_encryption_key_unsigned_adv_tag_v1(from._internal_metadata_encryption_key_unsigned_adv_tag_v1());
  }
  if (!from._internal_dusi().empty()) {
    _this->_internal_set_dusi(from._internal_dusi());
  }
  if (!from._internal_signature_version().empty()) {
    _this->_internal_set_signature_version(from._internal_signature_version());
  }
  if (from._internal_start_time_millis() != 0) {
    _this->_internal_set_start_time_millis(from._internal_start_time_millis());
  }
  if (from._internal_end_time_millis() != 0) {
    _this->_internal_set_end_time_millis(from._internal_end_time_millis());
  }
  if (from._internal_identity_type() != 0) {
    _this->_internal_set_identity_type(from._internal_identity_type());
  }
  if (from._internal_credential_type() != 0) {
    _this->_internal_set_credential_type(from._internal_credential_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharedCredential::CopyFrom(const SharedCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.SharedCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SharedCredential::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SharedCredential::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SharedCredential::InternalSwap(SharedCredential* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_id_, &other->_impl_.secret_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_seed_, &other->_impl_.key_seed_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_bytes_v0_, &other->_impl_.encrypted_metadata_bytes_v0_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_tag_v0_, &other->_impl_.metadata_encryption_key_tag_v0_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_signature_verification_key_, &other->_impl_.connection_signature_verification_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.advertisement_signature_verification_key_, &other->_impl_.advertisement_signature_verification_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_bytes_v1_, &other->_impl_.encrypted_metadata_bytes_v1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_unsigned_adv_tag_v1_, &other->_impl_.metadata_encryption_key_unsigned_adv_tag_v1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dusi_, &other->_impl_.dusi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_version_, &other->_impl_.signature_version_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.id_)
      + sizeof(SharedCredential::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.start_time_millis_)>(
          reinterpret_cast<char*>(&_impl_.start_time_millis_),
          reinterpret_cast<char*>(&other->_impl_.start_time_millis_));
}

std::string SharedCredential::GetTypeName() const {
  return "nearby.internal.SharedCredential";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
