// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef presence_bindings_h
#define presence_bindings_h

/**
 * Warning, this file is autogenerated by cbindgen. Don't modify this manually.
 */

#include "presence_data.h"


enum class PresenceIdentityType {
  Private = 0,
  Trusted,
  Public,
};

enum class PresenceMeasurementAccuracy {
  Unknown = 0,
  CoarseAccuracy,
  BestAvailable,
};

enum class PresenceMedium {
  Unknown = 0,
  BLE,
  WiFiRTT,
  UWB,
  MDNS,
};

struct PresenceBleScanResultBuilder;

/// Struct to send a discovery request to the Engine.
struct PresenceDiscoveryRequest;

struct PresenceDiscoveryRequestBuilder;

struct PresenceEngine;

struct PresenceScanResult;

using PresenceDiscoveryCallback = void(*)(PresenceDiscoveryResult*);

using PresenceStartBleScan = void(*)(PresenceBleScanRequest*);


extern "C" {

PresenceEngine *presence_engine_new(PresenceDiscoveryCallback presence_discovery_callback,
                                    PresenceStartBleScan presence_start_ble_scan);

void presence_engine_run(PresenceEngine *presence_engine);

void presence_engine_stop(PresenceEngine *presence_engine);

void presence_engine_set_discovery_request(PresenceEngine *presence_engine,
                                           PresenceDiscoveryRequest *request);

void presence_on_scan_result(PresenceEngine *presence_engine, PresenceScanResult *scan_result);

PresenceDiscoveryRequestBuilder *presence_request_builder_new(int32_t priority);

void presence_request_builder_add_condition(PresenceDiscoveryRequestBuilder *builder,
                                            int32_t action,
                                            PresenceIdentityType identity_type,
                                            PresenceMeasurementAccuracy measurement_accuracy);

PresenceDiscoveryRequest *presence_request_builder_build(PresenceDiscoveryRequestBuilder *builder);

PresenceBleScanResultBuilder *presence_ble_scan_result_builder_new(PresenceMedium medium);

void presence_ble_scan_result_builder_add_action(PresenceBleScanResultBuilder *builder,
                                                 int32_t action);

PresenceScanResult *presence_ble_scan_result_builder_build(PresenceBleScanResultBuilder *builder);

void presence_request_debug_print(const PresenceDiscoveryRequest *request);

void presence_enum_medium_debug_print(PresenceMedium presence_medium);

} // extern "C"

#endif // presence_bindings_h
